// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneMap.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Cmd {

  /// <summary>Holder for reflection information generated from SceneMap.proto</summary>
  public static partial class SceneMapReflection {

    #region Descriptor
    /// <summary>File descriptor for SceneMap.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SceneMapReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5TY2VuZU1hcC5wcm90bxIDQ21kGhFQcm90b0NvbW1vbi5wcm90bxoPU2Nl",
            "bmVVc2VyLnByb3RvGhBVRW51bVRhYmxlLnByb3RvIqkCCghOaW5lRGF0YRIN",
            "CgVsZXZlbBgBIAEoDRIgCgJwZBgCIAEoCzIULkNtZC5QZXJzb25hbGl0eURh",
            "dGESEwoLbm9ybWFsc2tpbGwYAyABKA0SDQoFc3RhdGUYBCABKA0SEwoLZXF1",
            "aXB3ZWFwb24YBiABKA0SEgoKZmlnaHRzdGF0ZRgHIAEoDRISCgpraWxsZXJu",
            "YW1lGAggASgJEhAKCGVxdWlwaWRzGAkgAygNEg4KBmNhbXBpZBgKIAEoBBIW",
            "Cg5pc2NyZWF0ZWRzdG92ZRgMIAEoDRIZChFyZWNvbmNpbGVhY3Rpb25pZBgN",
            "IAEoDRITCgtmZWF0dXJlZmxhZxgOIAEoBBIhCgllbnRyeWRhdGEYDyADKAsy",
            "Di5DbWQuRW50cnlEYXRhIr8FCgdNYXBJdGVtEgwKBGd1aWQYASABKAQSCgoC",
            "aWQYAiABKA0SIwoEdHlwZRgDIAEoDjIVLkNtZC5FU3RhZ2VPYmplY3RUeXBl",
            "EhAKCHNvdXJjZWlkGAQgASgEEhoKA3BvcxgFIAEoCzINLkNtZC5TY2VuZVBv",
            "cxIOCgZvd25lcnMYBiADKAQSEQoJZGlzYXBwZWFyGAcgASgEEgsKA2RpchgI",
            "IAEoAhIPCgdzdWJndWlkGAkgAygEEhIKCnBhcmVudGd1aWQYCyABKAQSEQoJ",
            "aXNwcml2YXRlGA0gASgIEg4KBmZyb21pZBgOIAEoBBIPCgdyb29taWRzGA8g",
            "AygNEg0KBXN0YXRlGBAgASgJEhoKEmludGVyYWN0aXZlZmVhdHVyZRgRIAMo",
            "DRIpCg1pdGVtZW50cnlkYXRhGBIgAygLMhIuQ21kLkl0ZW1FbnRyeURhdGES",
            "IAoHYm94ZGF0YRgTIAEoCzIPLkNtZC5NYXBCb3hEYXRhEhMKC2lzY29sbGVj",
            "dGVkGBQgASgIEg4KBmVuZXJneRgVIAEoDRINCgVhbGlhcxgWIAEoCRIUCgxx",
            "dWVzdE93bmVySUQYFyABKAQSEwoLaXNtYXBzdGF0aWMYGCABKAgSFAoMcGlj",
            "a2dyb3VwaWRzGBkgAygEEhMKC2lzcmVpbmZvcmNlGBogASgIEg8KB2lzYmly",
            "dGgYGyABKAgSFQoNYm9ybmRlbGF5dGltZRgcIAEoBBIVCg1vdmVybGFwcmFk",
            "aXVzGB0gASgNEhEKCXNwYXduZXJpZBgeIAEoCRIPCgdxdWVzdGlkGB8gASgN",
            "EjkKD2ludGVyYWN0aXZlbW9kZRggIAEoDjIgLkNtZC5FU2NlbmVPYmplY3RJ",
            "bnRlcmFjdGlvbk1vZGUSHgoFc2NhbGUYIiABKAsyDy5DbWQuU2NlbmVTY2Fs",
            "ZSIpCgpBZGRNYXBJdGVtEhsKBWl0ZW1zGAMgAygLMgwuQ21kLk1hcEl0ZW0i",
            "QwoKUGlja3VwSXRlbRISCgpwbGF5ZXJndWlkGAMgASgEEhAKCGl0ZW1ndWlk",
            "GAQgASgEEg8KB3N1Y2Nlc3MYBSABKAgi8wIKCk1hcE5wY0RhdGESDgoGY2hh",
            "cmlkGAEgASgEEg0KBWFsaWFzGAMgASgJEhsKBGRhdGEYBCABKAsyDS5DbWQu",
            "TmluZURhdGESHAoFYXR0cnMYBSADKAsyDS5DbWQuVXNlckF0dHISHgoFYnVm",
            "ZnMYBiADKAsyDy5DbWQuQnVmZmVyRGF0YRIPCgdpc2JpcnRoGAcgASgIEiQK",
            "CG1vdmVkYXRhGAggASgLMhIuQ21kLk1vdmVTdGF0ZURhdGESEwoLZmVhdHVy",
            "ZWZsYWcYCSABKAQSDwoHZmVhdHVyZRgKIAMoDRIVCg1ib3JuZGVsYXl0aW1l",
            "GAsgASgEEhkKEWludGVyYWN0aXZlcmFkaXVzGAwgASgNEhgKEHBlcmNlcHRp",
            "b25yYWRpdXMYDSABKA0SEQoJc3Bhd25lcmlkGA4gASgJEg8KB3F1ZXN0aWQY",
            "DyABKA0SHgoWYnViYmxlcGVyY2VwdGlvbnJhZGl1cxgQIAEoDSJ4CgpNYXBC",
            "b3hEYXRhEg4KBnVubG9jaxgBIAEoCBIzCg91bmxvY2tuZWVkaXRlbXMYAiAD",
            "KAsyGi5DbWQuTWFwQm94RGF0YS5VbmxvY2tJdGVtGiUKClVubG9ja0l0ZW0S",
            "CgoCaWQYASABKA0SCwoDbnVtGAIgASgNIsUCCghNYXBFbnRyeRIMCgRndWlk",
            "GAEgASgEEgwKBG5hbWUYAiABKAkSDQoFY2ZnaWQYAyABKA0SIwoEdHlwZRgE",
            "IAEoDjIVLkNtZC5FU3RhZ2VPYmplY3RUeXBlEhoKA3BvcxgFIAEoCzINLkNt",
            "ZC5TY2VuZVBvcxILCgNkaXIYBiABKAUSIAoHbnBjZGF0YRgHIAEoCzIPLkNt",
            "ZC5NYXBOcGNEYXRhEiAKB2JveGRhdGEYCCABKAsyDy5DbWQuTWFwQm94RGF0",
            "YRIUCgxxdWVzdE93bmVySUQYCSABKAQSEQoJaXNwcml2YXRlGAogASgIEg4K",
            "BmZyb21pZBgLIAEoBBISCgpjdXJmaWdodGVyGAwgASgIEhgKEGludGVyYWN0",
            "aXZlc3RhdGUYDSABKAkSFQoNZGVmYXVsdGFjdGlvbhgOIAEoCSIrCgtBZGRN",
            "YXBFbnRyeRIcCgVlbnRyeRgDIAMoCzINLkNtZC5NYXBFbnRyeSKYAQoKTWFw",
            "TWlzc2lsZRIKCgJpZBgBIAEoBBIPCgdza2lsbElEGAIgASgNEhoKA3BvcxgD",
            "IAEoCzINLkNtZC5TY2VuZVBvcxIfCgh2ZWxzcGVlZBgEIAEoCzINLkNtZC5T",
            "Y2VuZVBvcxIeCgdncmF2aXR5GAUgASgLMg0uQ21kLlNjZW5lUG9zEhAKCG1h",
            "c3RlcmlkGAYgASgEIjIKDUFkZE1hcE1pc3NpbGUSIQoIbWlzc2lsZXMYAyAD",
            "KAsyDy5DbWQuTWFwTWlzc2lsZSIhCglNYXBDbWRFbmQSFAoMcGxheWVyX2Nv",
            "dW50GAEgASgNIkQKEkRlbGV0ZUVudHJ5VXNlckNtZBIMCgRsaXN0GAMgAygE",
            "Eg8KB2ZhZGVvdXQYBCABKA0SDwoHZGVsdHlwZRgFIAEoCSIwChJUZXN0UGFy",
            "YWJvbGFQb3NDbWQSGgoDcG9zGAMgASgLMg0uQ21kLlNjZW5lUG9zIkYKDUxv",
            "Y2tUYXJnZXRDbWQSDwoHZW50cnlpZBgEIAEoBBIQCgh0YXJnZXRpZBgFIAEo",
            "BBISCgphdXRvX2ZpZ2h0GAYgASgIIiIKD1VubG9ja1RhcmdldENtZBIPCgdl",
            "bnRyeWlkGAMgASgEImgKEFN5bmNEaXJlY3Rpb25DbWQSDAoEZ3VpZBgDIAEo",
            "BBILCgNkaXIYBCABKAUSFQoNaW5zdGFudHJvdGF0ZRgFIAEoCBISCgpwbGF5",
            "YWN0aW9uGAYgASgIEg4KBmN1cmRpchgHIAEoBSIuCg9TeW5jTnBjV2F0Y2hD",
            "bWQSDQoFbnBjaWQYAyABKAQSDAoEZ3VpZBgEIAEoBCJpChdTeW5jTnBjVmlz",
            "aWJsZVN0YXR1c0NtZBIqCgRucGNzGAMgAygLMhwuQ21kLk1hcE5wY1Zpc2li",
            "bGVTdGF0dXNEYXRhEiIKBHR5cGUYBCABKA4yFC5DbWQuU3luY05wY0RhdGFU",
            "eXBlImEKD01hcE9iamVjdFN0YXR1cxINCgVjZmdpZBgBIAEoDRIOCgZzdGF0",
            "dXMYAiABKAkSDQoFYWxpYXMYAyABKAkSDQoFZ3VpZHMYBCADKAQSEQoJc3Bh",
            "d25lcmlkGAUgASgJImEKFVN5bmNOcGNQcml2YXRlRGF0YUNtZBIkCgRucGNz",
            "GAEgAygLMhYuQ21kLk1hcE5wY1ByaXZhdGVEYXRhEiIKBHR5cGUYAiABKA4y",
            "FC5DbWQuU3luY05wY0RhdGFUeXBlIkQKEEJsb2NrU2NlbmVNYXBDbWQSHwoE",
            "dHlwZRgBIAEoDjIRLkNtZC5NYXBCbG9ja1R5cGUSDwoHYmxvY2tpZBgCIAEo",
            "DSJKChROcGNGZWF0dXJlc1VwZGF0ZUNtZBIMCgRndWlkGAEgASgEEhMKC2Zl",
            "YXR1cmVmbGFnGAIgASgEEg8KB2ZlYXR1cmUYAyADKA0iWQoOTnBjTmluZVN5",
            "bmNDbWQSDAoEZ3VpZBgDIAEoBBIcCgVhdHRycxgEIAMoCzINLkNtZC5Vc2Vy",
            "QXR0chIbCgRkYXRhGAUgASgLMg0uQ21kLk5pbmVEYXRhIpoBCg9JdGVtTmlu",
            "ZVN5bmNDbWQSDAoEZ3VpZBgBIAEoBBIaCgNwb3MYAiABKAsyDS5DbWQuU2Nl",
            "bmVQb3MSKQoNaXRlbWVudHJ5ZGF0YRgDIAMoCzISLkNtZC5JdGVtRW50cnlE",
            "YXRhEg0KBXN0YXRlGAQgASgJEhMKC2lzY29sbGVjdGVkGAUgASgIEg4KBmVu",
            "ZXJneRgGIAEoDSIOCgxMZWF2ZUNvcHlDbWQivAIKDE1vdmVTdGF0ZUNtZBIM",
            "CgRndWlkGAEgASgEEiIKBXN0YXRlGAIgASgOMhMuQ21kLkVNb3ZlU3RhdGVU",
            "eXBlEigKCHN1YnN0YXRlGAMgASgOMhYuQ21kLkVNb3ZlU3ViU3RhdGVUeXBl",
            "Eh0KBmN1cnBvcxgEIAEoCzINLkNtZC5TY2VuZVBvcxIgCgl0YXJnZXRwb3MY",
            "BSABKAsyDS5DbWQuU2NlbmVQb3MSDgoGcm90YXRlGAYgASgFEhEKCW1vdmVz",
            "cGVlZBgHIAEoAhIQCghjbGllbnREdBgIIAEoDRIfCghqdW1wZGF0YRgJIAEo",
            "CzINLkNtZC5KdW1wRGF0YRIlCgt2ZWhpY2xlZGF0YRgKIAEoCzIQLkNtZC5W",
            "ZWhpY2xlRGF0YRISCgpzdG9wYWN0aW9uGAsgASgIIlYKE1NpbmdsZVJlcGFp",
            "ck9iakRhdGESEQoJc3Bhd25lcmlkGAEgASgJEhUKDWJvZWxpdGVyZXBhaXIY",
            "AiABKAgSFQoNc2hvd2VsaXRlaXRlbRgDIAEoCCJsChRVcGRhdGVSZXBhaXJP",
            "YmpTdGF0ZRINCgVtYXBpZBgBIAEoDRItCgtyZXBhaXJkYXRhcxgCIAMoCzIY",
            "LkNtZC5TaW5nbGVSZXBhaXJPYmpEYXRhEhYKDnJldGVsaXRlcmVwYWlyGAMg",
            "ASgNIhYKFFNlbmRFZmZlY3RDbG9zZWRUeXBlIlAKEUJveENob2ljZUZ1bmN0",
            "aW9uEgwKBGd1aWQYASABKA0SEAoIY2hvaWNlaWQYAiABKA0SGwoEdHlwZRgD",
            "IAEoDjINLkNtZC5FQm94VHlwZSI8ChBTZXJ2ZXJQb3NUZXN0Q21kEgwKBGd1",
            "aWQYASABKAQSGgoDcG9zGAIgASgLMg0uQ21kLlNjZW5lUG9zIokBChZTZXJ2",
            "ZXJTZWN0b3JQb3NUZXN0Q21kEhoKA3BvcxgBIAEoCzINLkNtZC5TY2VuZVBv",
            "cxIOCgZyb3RhdGUYAiABKA0SDQoFYW5nbGUYAyABKA0SDgoGcmFkaXVzGAQg",
            "ASgNEhAKCGRyYXd0aW1lGAUgASgNEhIKCmNvbG9yYWxwaGEYBiADKAIinAEK",
            "ElNlcnZlclN3ZWVwVGVzdENtZBIMCgRndWlkGAEgASgEEhsKBGZyb20YAiAB",
            "KAsyDS5DbWQuU2NlbmVQb3MSGQoCdG8YAyABKAsyDS5DbWQuU2NlbmVQb3MS",
            "GgoDaGl0GAQgASgLMg0uQ21kLlNjZW5lUG9zEhAKCGRyYXd0aW1lGAUgASgN",
            "EhIKCmNvbG9yYWxwaGEYBiADKAIilgEKE1NlcnZlckJveFBvc1Rlc3RDbWQS",
            "GgoDcG9zGAEgASgLMg0uQ21kLlNjZW5lUG9zEh4KB3JvdGF0b3IYAiABKAsy",
            "DS5DbWQuU2NlbmVQb3MSHQoGZXh0ZW50GAMgASgLMg0uQ21kLlNjZW5lUG9z",
            "EhAKCGRyYXd0aW1lGAQgASgNEhIKCmNvbG9yYWxwaGEYBSADKAIinwEKF1Nl",
            "cnZlckNhcHN1bGVQb3NUZXN0Q21kEhoKA3BvcxgBIAEoCzINLkNtZC5TY2Vu",
            "ZVBvcxIeCgdyb3RhdG9yGAIgASgLMg0uQ21kLlNjZW5lUG9zEhIKCmhhbGZo",
            "ZWlnaHQYAyABKA0SDgoGcmFkaXVzGAQgASgNEhAKCGRyYXd0aW1lGAUgASgN",
            "EhIKCmNvbG9yYWxwaGEYBiADKAIigwEKFVNlcnZlckFycm93UG9zVGVzdENt",
            "ZBIbCgRmcm9tGAEgASgLMg0uQ21kLlNjZW5lUG9zEhkKAnRvGAIgASgLMg0u",
            "Q21kLlNjZW5lUG9zEgwKBHNpemUYAyABKA0SEAoIZHJhd3RpbWUYBCABKA0S",
            "EgoKY29sb3JhbHBoYRgFIAMoAiJqChZTZXJ2ZXJTcGhlcmVQb3NUZXN0Q21k",
            "EhoKA3BvcxgBIAEoCzINLkNtZC5TY2VuZVBvcxIOCgZyYWRpdXMYAiABKA0S",
            "EAoIZHJhd3RpbWUYAyABKA0SEgoKY29sb3JhbHBoYRgEIAMoAiJJChVFbnRl",
            "clJhaWRTY2VuZUJ5U3RhZ2USEQoJY2hhcmFjdGVyGAEgASgNEg0KBXN0YWdl",
            "GAIgASgNEg4KBmNvcHlpZBgDIAEoDSJICg9TZW5kQm94SW5mb0xpc3QSDAoE",
            "Z3VpZBgBIAEoDRIbCgR0eXBlGAIgASgOMg0uQ21kLkVCb3hUeXBlEgoKAmlk",
            "GAMgAygNIiAKEFNlbmRCb3NzRW50ZXJNYXASDAoEZ3VpZBgBIAEoDSIRCg9X",
            "WEtKTGVhdmVNYXBDbWQiRQoJTWFwT2JqZWN0EhwKBWVudHJ5GAEgASgLMg0u",
            "Q21kLk1hcEVudHJ5EhoKBGl0ZW0YAiABKAsyDC5DbWQuTWFwSXRlbSI2CgxB",
            "ZGRNYXBPYmplY3QSJgoObWFwb2JqZWN0YXJyYXkYASADKAsyDi5DbWQuTWFw",
            "T2JqZWN0InIKD0ludGVyYWN0aW9uTW9kZRINCgVjZmdpZBgBIAEoDRIRCglz",
            "cGF3bmVyaWQYAiABKAkSLgoEbW9kZRgDIAEoDjIgLkNtZC5FU2NlbmVPYmpl",
            "Y3RJbnRlcmFjdGlvbk1vZGUSDQoFZ3VpZHMYBCADKAQiYwoZU3luY05wY0lu",
            "dGVyYWN0aW9uTW9kZUNtZBIiCgRkYXRhGAEgAygLMhQuQ21kLkludGVyYWN0",
            "aW9uTW9kZRIiCgR0eXBlGAIgASgOMhQuQ21kLlN5bmNOcGNEYXRhVHlwZSKQ",
            "AQoaU3luY1N0YWdlT2JqZWN0QmVoYXZpb3JDbWQSEwoLc3RhZ2VPYmplY3QY",
            "ASABKAQSEAoIb3BlcmF0b3IYAiABKAQSFgoOY29udHJvbGxlck5hbWUYAyAB",
            "KAkSGQoRY29udHJvbGxlclZlcnNpb24YBCABKA0SGAoQY29udHJvbGxlck5v",
            "ZGVJRBgFIAEoDSI6CgdWYXJMaXN0EgwKBG5hbWUYASABKAkSIQoFdmFsdWUY",
            "AiABKAsyEi5DbWQuVGVtcGxhdGVWYWx1ZSJxChtTeW5jQmx1ZXByaW50UGVy",
            "Zm9ybWFuY2VDbWQSDgoGdGFyZ2V0GAEgASgEEiYKBHR5cGUYAiABKA4yGC5D",
            "bWQuRU5ldFBlcmZvcm1hbmNlVHlwZRIaCgRsaXN0GAMgAygLMgwuQ21kLlZh",
            "ckxpc3QiNAoIU3luY1RpbWUSEwoLY2xpZW50X3RpbWUYASABKAQSEwoLc2Vy",
            "dmVyX3RpbWUYAiABKAQiPQoPU2V0Q29sbGlzaW9uQ21kEgwKBGd1aWQYASAB",
            "KAQSDAoEb3BlbhgCIAEoCBIOCgZwcmVzZXQYAyABKAkikwEKFFRyaWdnZXJQ",
            "ZXJjZXB0aW9uQ21kEi4KDnBlcmNlcHRpb25UeXBlGAEgASgOMhYuQ21kLk5w",
            "Y1BlcmNlcHRpb25UeXBlEi4KB3RyaWdnZXIYAiABKA4yHS5DbWQuTnBjUGVy",
            "Y2VwdGlvblRyaWdnZXJUeXBlEg0KBW5wY2lkGAMgASgEEgwKBGd1aWQYBCAB",
            "KAQioAEKF1NraWxsQWN0b3JFZmZlY3RVc2VyQ21kEg4KBmNoYXJpZBgBIAEo",
            "BBIPCgdza2lsbGlkGAIgASgNEhAKCGVmZmVjdGlkGAMgASgNEhEKCXRpbWVf",
            "YXhpcxgEIAEoDRIaCgNwb3MYBSABKAsyDS5DbWQuU2NlbmVQb3MSIwoKYWRk",
            "bWFwaXRlbRgGIAEoCzIPLkNtZC5BZGRNYXBJdGVtIkAKD1N5bmNVc2VyRGVh",
            "ZENtZBIMCgRndWlkGAEgASgEEh8KBHR5cGUYAiABKA4yES5DbWQuVXNlckRl",
            "YWRUeXBlKiAKCUVHaXZlVHlwZRITCg9FR2l2ZVR5cGVfRklSU1QQACpoCg9T",
            "eW5jTnBjRGF0YVR5cGUSGgoWU1lOQ19OUENfREFUQV9UWVBFX01BUBAAEhoK",
            "FlNZTkNfTlBDX0RBVEFfVFlQRV9BREQQARIdChlTWU5DX05QQ19EQVRBX1RZ",
            "UEVfUkVNT1ZFEAIqgAUKE0dsb2JhbEV2ZW50QmluZFR5cGUSGwoXR19FVkVO",
            "VF9CSU5EX1RZUEVfQkVHSU4QABIhCh1HX0VWRU5UX0JJTkRfVFlQRV9DUkVB",
            "VEVTQ0VORRABEiEKHUdfRVZFTlRfQklORF9UWVBFX0RFTEVURVNDRU5FEAIS",
            "GwoXR19FVkVOVF9CSU5EX1RZUEVfTE9HSU4QAxIeChpHX0VWRU5UX0JJTkRf",
            "VFlQRV9MT0dJTk9VVBAEEiEKHUdfRVZFTlRfQklORF9UWVBFX0tJTExNT05T",
            "VEVSEAUSIAocR19FVkVOVF9CSU5EX1RZUEVfRU5URVJTQ0VORRAGEiAKHEdf",
            "RVZFTlRfQklORF9UWVBFX0xFQVZFU0NFTkUQBxIgChxHX0VWRU5UX0JJTkRf",
            "VFlQRV9BRERGSUdIVEVSEAgSIQodR19FVkVOVF9CSU5EX1RZUEVfRklOSVNI",
            "UVVFU1QQCRIiCh5HX0VWRU5UX0JJTkRfVFlQRV9GSU5JU0hSRVBBSVIQChIe",
            "ChpHX0VWRU5UX0JJTkRfVFlQRV9VTkxPQ0tFRBALEhwKGEdfRVZFTlRfQklO",
            "RF9UWVBFX1JFRERPVBAMEisKJ0dfRVZFTlRfQklORF9UWVBFX0RBSUxZQUNU",
            "SVZJVFlfUkVGUkVTSBANEicKI0dfRVZFTlRfQklORF9UWVBFX1FVRVNUX1NU",
            "T1JZX1ZBTFVFEA4SJgoiR19FVkVOVF9CSU5EX1RZUEVfQ09QWVNDRU5FX0ZJ",
            "TklTSBAPEiIKHkdfRVZFTlRfQklORF9UWVBFX1NUQUdFX0ZJTklTSBAQEhkK",
            "FUdfRVZFTlRfQklORF9UWVBFX0VORBARKr8FChJTY2VuZUV2ZW50QmluZFR5",
            "cGUSHwobU0NFTkVfRVZFTlRfQklORF9UWVBFX0JFR0lOEAASJQohU0NFTkVf",
            "RVZFTlRfQklORF9UWVBFX01PTlNURVJERUFEEAESMQotU0NFTkVfRVZFTlRf",
            "QklORF9UWVBFX1FVRVNUTU9OU1RFUl9MRUFWRVNDRU5FEAISIwofU0NFTkVf",
            "RVZFTlRfQklORF9UWVBFX1FVRVNUS0lMTBADEisKJ1NDRU5FX0VOVFJZX0JJ",
            "TkRfVFlQRV9QSFlTSUNfTU9WRV9UT1VDSBAEEisKJ1NDRU5FX0VOVFJZX0JJ",
            "TkRfVFlQRV9QSFlTSUNfTU9WRV9CTE9DaxAFEikKJVNDRU5FX0VOVFJZX0JJ",
            "TkRfVFlQRV9QSFlTSUNfTU9WRV9DQ1QQBhIlCiFTQ0VORV9FTlRSWV9CSU5E",
            "X1RZUEVfQlJFQUtfU0tJTEwQBxIkCiBTQ0VORV9FTlRSWV9CSU5EX1RZUEVf",
            "SlVNUF9TVEFSVBAIEiQKIFNDRU5FX0VOVFJZX0JJTkRfVFlQRV9KVU1QX0ZM",
            "T09SEAkSMQotU0NFTkVfRU5UUllfQklORF9UWVBFX0JVQkJMRV9QRVJDRVBU",
            "SU9OX0VOVEVSEAoSMQotU0NFTkVfRU5UUllfQklORF9UWVBFX0JVQkJMRV9Q",
            "RVJDRVBUSU9OX0xFQVZFEAsSNwozU0NFTkVfRU5UUllfQklORF9UWVBFX0JV",
            "QkJMRV9QRVJDRVBUSU9OX05FWFRfQUNUSU9OEAwSKAokU0NFTkVfRU5UUllf",
            "QklORF9UWVBFX1dBTEtQT1NFX1JFU0VUEA0SKQolU0NFTkVfRU5UUllfQklO",
            "RF9UWVBFX1dBTEtQT1NFX0NIQU5HRRAOEh0KGVNDRU5FX0VWRU5UX0JJTkRf",
            "VFlQRV9FTkQQEyqoAQoPU3RhZ2VTb3VyY2VUeXBlEhUKEVNUQUdFX1NPVVJD",
            "RV9OVUxMEAASFgoSU1RBR0VfU09VUkNFX1FVRVNUEAESFQoRU1RBR0VfU09V",
            "UkNFX0NPUFkQAhIfChtTVEFHRV9TT1VSQ0VfUE9MTFVUSU9OX0FSRUEQAxIV",
            "ChFTVEFHRV9TT1VSQ0VfV1hLShAEEhcKE1NUQUdFX1NPVVJDRV9EU0NFTkUQ",
            "BSp4ChFOcGNQZXJjZXB0aW9uVHlwZRIYChROUENfUEVSQ0VQVElPTl9CRUdJ",
            "ThAAEhgKFE5QQ19QRVJDRVBUSU9OX1ZJU0lUEAESFwoTTlBDX1BFUkNFUFRJ",
            "T05fSEVBUhACEhYKEk5QQ19QRVJDRVBUSU9OX0VORBAKKqABChhOcGNQZXJj",
            "ZXB0aW9uVHJpZ2dlclR5cGUSIAocTlBDX1BFUkNFUFRJT05fVFJJR0dSVF9C",
            "RUdJThAAEiAKHE5QQ19QRVJDRVBUSU9OX1RSSUdHUlRfRU5URVIQARIgChxO",
            "UENfUEVSQ0VQVElPTl9UUklHR1JUX0xFQVZFEAISHgoaTlBDX1BFUkNFUFRJ",
            "T05fVFJJR0dSVF9FTkQQCip8CgxVc2VyRGVhZFR5cGUSFgoSVVNFUl9ERUFE",
            "X1RZUEVfTUlOEAASHgoaVVNFUl9ERUFEX1RZUEVfTk9STUFMX1RFQU0QARIc",
            "ChhVU0VSX0RFQURfVFlQRV9MREJFX1RFQU0QAhIWChJVU0VSX0RFQURfVFlQ",
            "RV9NQVgQA0IHWgUuO0NtZGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Cmd.ProtoCommonReflection.Descriptor, global::Cmd.SceneUserReflection.Descriptor, global::Cmd.UEnumTableReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Cmd.EGiveType), typeof(global::Cmd.SyncNpcDataType), typeof(global::Cmd.GlobalEventBindType), typeof(global::Cmd.SceneEventBindType), typeof(global::Cmd.StageSourceType), typeof(global::Cmd.NpcPerceptionType), typeof(global::Cmd.NpcPerceptionTriggerType), typeof(global::Cmd.UserDeadType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.NineData), global::Cmd.NineData.Parser, new[]{ "Level", "Pd", "Normalskill", "State", "Equipweapon", "Fightstate", "Killername", "Equipids", "Campid", "Iscreatedstove", "Reconcileactionid", "Featureflag", "Entrydata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MapItem), global::Cmd.MapItem.Parser, new[]{ "Guid", "Id", "Type", "Sourceid", "Pos", "Owners", "Disappear", "Dir", "Subguid", "Parentguid", "Isprivate", "Fromid", "Roomids", "State", "Interactivefeature", "Itementrydata", "Boxdata", "Iscollected", "Energy", "Alias", "QuestOwnerID", "Ismapstatic", "Pickgroupids", "Isreinforce", "Isbirth", "Borndelaytime", "Overlapradius", "Spawnerid", "Questid", "Interactivemode", "Scale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.AddMapItem), global::Cmd.AddMapItem.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.PickupItem), global::Cmd.PickupItem.Parser, new[]{ "Playerguid", "Itemguid", "Success" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MapNpcData), global::Cmd.MapNpcData.Parser, new[]{ "Charid", "Alias", "Data", "Attrs", "Buffs", "Isbirth", "Movedata", "Featureflag", "Feature", "Borndelaytime", "Interactiveradius", "Perceptionradius", "Spawnerid", "Questid", "Bubbleperceptionradius" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MapBoxData), global::Cmd.MapBoxData.Parser, new[]{ "Unlock", "Unlockneeditems" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MapBoxData.Types.UnlockItem), global::Cmd.MapBoxData.Types.UnlockItem.Parser, new[]{ "Id", "Num" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MapEntry), global::Cmd.MapEntry.Parser, new[]{ "Guid", "Name", "Cfgid", "Type", "Pos", "Dir", "Npcdata", "Boxdata", "QuestOwnerID", "Isprivate", "Fromid", "Curfighter", "Interactivestate", "Defaultaction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.AddMapEntry), global::Cmd.AddMapEntry.Parser, new[]{ "Entry" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MapMissile), global::Cmd.MapMissile.Parser, new[]{ "Id", "SkillID", "Pos", "Velspeed", "Gravity", "Masterid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.AddMapMissile), global::Cmd.AddMapMissile.Parser, new[]{ "Missiles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MapCmdEnd), global::Cmd.MapCmdEnd.Parser, new[]{ "PlayerCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.DeleteEntryUserCmd), global::Cmd.DeleteEntryUserCmd.Parser, new[]{ "List", "Fadeout", "Deltype" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.TestParabolaPosCmd), global::Cmd.TestParabolaPosCmd.Parser, new[]{ "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.LockTargetCmd), global::Cmd.LockTargetCmd.Parser, new[]{ "Entryid", "Targetid", "AutoFight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UnlockTargetCmd), global::Cmd.UnlockTargetCmd.Parser, new[]{ "Entryid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SyncDirectionCmd), global::Cmd.SyncDirectionCmd.Parser, new[]{ "Guid", "Dir", "Instantrotate", "Playaction", "Curdir" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SyncNpcWatchCmd), global::Cmd.SyncNpcWatchCmd.Parser, new[]{ "Npcid", "Guid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SyncNpcVisibleStatusCmd), global::Cmd.SyncNpcVisibleStatusCmd.Parser, new[]{ "Npcs", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MapObjectStatus), global::Cmd.MapObjectStatus.Parser, new[]{ "Cfgid", "Status", "Alias", "Guids", "Spawnerid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SyncNpcPrivateDataCmd), global::Cmd.SyncNpcPrivateDataCmd.Parser, new[]{ "Npcs", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.BlockSceneMapCmd), global::Cmd.BlockSceneMapCmd.Parser, new[]{ "Type", "Blockid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.NpcFeaturesUpdateCmd), global::Cmd.NpcFeaturesUpdateCmd.Parser, new[]{ "Guid", "Featureflag", "Feature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.NpcNineSyncCmd), global::Cmd.NpcNineSyncCmd.Parser, new[]{ "Guid", "Attrs", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ItemNineSyncCmd), global::Cmd.ItemNineSyncCmd.Parser, new[]{ "Guid", "Pos", "Itementrydata", "State", "Iscollected", "Energy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.LeaveCopyCmd), global::Cmd.LeaveCopyCmd.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MoveStateCmd), global::Cmd.MoveStateCmd.Parser, new[]{ "Guid", "State", "Substate", "Curpos", "Targetpos", "Rotate", "Movespeed", "ClientDt", "Jumpdata", "Vehicledata", "Stopaction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SingleRepairObjData), global::Cmd.SingleRepairObjData.Parser, new[]{ "Spawnerid", "Boeliterepair", "Showeliteitem" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UpdateRepairObjState), global::Cmd.UpdateRepairObjState.Parser, new[]{ "Mapid", "Repairdatas", "Reteliterepair" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SendEffectClosedType), global::Cmd.SendEffectClosedType.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.BoxChoiceFunction), global::Cmd.BoxChoiceFunction.Parser, new[]{ "Guid", "Choiceid", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ServerPosTestCmd), global::Cmd.ServerPosTestCmd.Parser, new[]{ "Guid", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ServerSectorPosTestCmd), global::Cmd.ServerSectorPosTestCmd.Parser, new[]{ "Pos", "Rotate", "Angle", "Radius", "Drawtime", "Coloralpha" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ServerSweepTestCmd), global::Cmd.ServerSweepTestCmd.Parser, new[]{ "Guid", "From", "To", "Hit", "Drawtime", "Coloralpha" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ServerBoxPosTestCmd), global::Cmd.ServerBoxPosTestCmd.Parser, new[]{ "Pos", "Rotator", "Extent", "Drawtime", "Coloralpha" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ServerCapsulePosTestCmd), global::Cmd.ServerCapsulePosTestCmd.Parser, new[]{ "Pos", "Rotator", "Halfheight", "Radius", "Drawtime", "Coloralpha" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ServerArrowPosTestCmd), global::Cmd.ServerArrowPosTestCmd.Parser, new[]{ "From", "To", "Size", "Drawtime", "Coloralpha" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ServerSpherePosTestCmd), global::Cmd.ServerSpherePosTestCmd.Parser, new[]{ "Pos", "Radius", "Drawtime", "Coloralpha" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.EnterRaidSceneByStage), global::Cmd.EnterRaidSceneByStage.Parser, new[]{ "Character", "Stage", "Copyid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SendBoxInfoList), global::Cmd.SendBoxInfoList.Parser, new[]{ "Guid", "Type", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SendBossEnterMap), global::Cmd.SendBossEnterMap.Parser, new[]{ "Guid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.WXKJLeaveMapCmd), global::Cmd.WXKJLeaveMapCmd.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MapObject), global::Cmd.MapObject.Parser, new[]{ "Entry", "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.AddMapObject), global::Cmd.AddMapObject.Parser, new[]{ "Mapobjectarray" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.InteractionMode), global::Cmd.InteractionMode.Parser, new[]{ "Cfgid", "Spawnerid", "Mode", "Guids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SyncNpcInteractionModeCmd), global::Cmd.SyncNpcInteractionModeCmd.Parser, new[]{ "Data", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SyncStageObjectBehaviorCmd), global::Cmd.SyncStageObjectBehaviorCmd.Parser, new[]{ "StageObject", "Operator", "ControllerName", "ControllerVersion", "ControllerNodeID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.VarList), global::Cmd.VarList.Parser, new[]{ "Name", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SyncBlueprintPerformanceCmd), global::Cmd.SyncBlueprintPerformanceCmd.Parser, new[]{ "Target", "Type", "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SyncTime), global::Cmd.SyncTime.Parser, new[]{ "ClientTime", "ServerTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SetCollisionCmd), global::Cmd.SetCollisionCmd.Parser, new[]{ "Guid", "Open", "Preset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.TriggerPerceptionCmd), global::Cmd.TriggerPerceptionCmd.Parser, new[]{ "PerceptionType", "Trigger", "Npcid", "Guid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SkillActorEffectUserCmd), global::Cmd.SkillActorEffectUserCmd.Parser, new[]{ "Charid", "Skillid", "Effectid", "TimeAxis", "Pos", "Addmapitem" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SyncUserDeadCmd), global::Cmd.SyncUserDeadCmd.Parser, new[]{ "Guid", "Type" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  unused
  /// </summary>
  public enum EGiveType {
    [pbr::OriginalName("EGiveType_FIRST")] First = 0,
  }

  /// <summary>
  ///  npc个人数据同步方式
  /// </summary>
  public enum SyncNpcDataType {
    /// <summary>
    ///  进入地图
    /// </summary>
    [pbr::OriginalName("SYNC_NPC_DATA_TYPE_MAP")] Map = 0,
    /// <summary>
    ///  当前新增
    /// </summary>
    [pbr::OriginalName("SYNC_NPC_DATA_TYPE_ADD")] Add = 1,
    /// <summary>
    ///  移除
    /// </summary>
    [pbr::OriginalName("SYNC_NPC_DATA_TYPE_REMOVE")] Remove = 2,
  }

  /// <summary>
  ///  全局事件消息
  /// </summary>
  public enum GlobalEventBindType {
    /// <summary>
    ///  用于全局事件
    /// </summary>
    [pbr::OriginalName("G_EVENT_BIND_TYPE_BEGIN")] GEventBindTypeBegin = 0,
    /// <summary>
    ///  场景创建
    /// </summary>
    [pbr::OriginalName("G_EVENT_BIND_TYPE_CREATESCENE")] GEventBindTypeCreatescene = 1,
    /// <summary>
    ///  场景销毁
    /// </summary>
    [pbr::OriginalName("G_EVENT_BIND_TYPE_DELETESCENE")] GEventBindTypeDeletescene = 2,
    /// <summary>
    ///  登录
    /// </summary>
    [pbr::OriginalName("G_EVENT_BIND_TYPE_LOGIN")] GEventBindTypeLogin = 3,
    /// <summary>
    ///  登出
    /// </summary>
    [pbr::OriginalName("G_EVENT_BIND_TYPE_LOGINOUT")] GEventBindTypeLoginout = 4,
    /// <summary>
    ///  玩家击杀npc
    /// </summary>
    [pbr::OriginalName("G_EVENT_BIND_TYPE_KILLMONSTER")] GEventBindTypeKillmonster = 5,
    /// <summary>
    ///  进入场景
    /// </summary>
    [pbr::OriginalName("G_EVENT_BIND_TYPE_ENTERSCENE")] GEventBindTypeEnterscene = 6,
    /// <summary>
    ///  离开场景
    /// </summary>
    [pbr::OriginalName("G_EVENT_BIND_TYPE_LEAVESCENE")] GEventBindTypeLeavescene = 7,
    /// <summary>
    ///  获取同伴
    /// </summary>
    [pbr::OriginalName("G_EVENT_BIND_TYPE_ADDFIGHTER")] GEventBindTypeAddfighter = 8,
    /// <summary>
    ///  完成任务
    /// </summary>
    [pbr::OriginalName("G_EVENT_BIND_TYPE_FINISHQUEST")] GEventBindTypeFinishquest = 9,
    /// <summary>
    ///  完成修复物
    /// </summary>
    [pbr::OriginalName("G_EVENT_BIND_TYPE_FINISHREPAIR")] GEventBindTypeFinishrepair = 10,
    /// <summary>
    ///  解锁
    /// </summary>
    [pbr::OriginalName("G_EVENT_BIND_TYPE_UNLOCKED")] GEventBindTypeUnlocked = 11,
    /// <summary>
    ///  红点推送
    /// </summary>
    [pbr::OriginalName("G_EVENT_BIND_TYPE_REDDOT")] GEventBindTypeReddot = 12,
    /// <summary>
    ///  日常刷新
    /// </summary>
    [pbr::OriginalName("G_EVENT_BIND_TYPE_DAILYACTIVITY_REFRESH")] GEventBindTypeDailyactivityRefresh = 13,
    /// <summary>
    ///  剧情VALUE
    /// </summary>
    [pbr::OriginalName("G_EVENT_BIND_TYPE_QUEST_STORY_VALUE")] GEventBindTypeQuestStoryValue = 14,
    /// <summary>
    ///  原地副本结束
    /// </summary>
    [pbr::OriginalName("G_EVENT_BIND_TYPE_COPYSCENE_FINISH")] GEventBindTypeCopysceneFinish = 15,
    /// <summary>
    ///  场景关卡结束
    /// </summary>
    [pbr::OriginalName("G_EVENT_BIND_TYPE_STAGE_FINISH")] GEventBindTypeStageFinish = 16,
    /// <summary>
    ///  End
    /// </summary>
    [pbr::OriginalName("G_EVENT_BIND_TYPE_END")] GEventBindTypeEnd = 17,
  }

  /// <summary>
  ///  场景范围事件消息
  /// </summary>
  public enum SceneEventBindType {
    /// <summary>
    ///  用于场景对象事件(回调限制本场景内)
    /// </summary>
    [pbr::OriginalName("SCENE_EVENT_BIND_TYPE_BEGIN")] Begin = 0,
    /// <summary>
    ///  monster死亡
    /// </summary>
    [pbr::OriginalName("SCENE_EVENT_BIND_TYPE_MONSTERDEAD")] Monsterdead = 1,
    /// <summary>
    ///  任务魔物离开场景
    /// </summary>
    [pbr::OriginalName("SCENE_EVENT_BIND_TYPE_QUESTMONSTER_LEAVESCENE")] QuestmonsterLeavescene = 2,
    /// <summary>
    ///  任务击杀节点完成
    /// </summary>
    [pbr::OriginalName("SCENE_EVENT_BIND_TYPE_QUESTKILL")] Questkill = 3,
    /// <summary>
    ///  移动时被触碰(产生触碰的Entry)
    /// </summary>
    [pbr::OriginalName("SCENE_ENTRY_BIND_TYPE_PHYSIC_MOVE_TOUCH")] SceneEntryBindTypePhysicMoveTouch = 4,
    /// <summary>
    ///  移动时发生阻挡(产生阻挡的Entry)
    /// </summary>
    [pbr::OriginalName("SCENE_ENTRY_BIND_TYPE_PHYSIC_MOVE_BLOCk")] SceneEntryBindTypePhysicMoveBlock = 5,
    /// <summary>
    ///  移动时两个CCT的交互事件(只会存在于两个Dynamic对象交互时产生,暂时不考虑阻挡和触碰分类)
    /// </summary>
    [pbr::OriginalName("SCENE_ENTRY_BIND_TYPE_PHYSIC_MOVE_CCT")] SceneEntryBindTypePhysicMoveCct = 6,
    /// <summary>
    ///  打断技能
    /// </summary>
    [pbr::OriginalName("SCENE_ENTRY_BIND_TYPE_BREAK_SKILL")] SceneEntryBindTypeBreakSkill = 7,
    /// <summary>
    ///  起跳
    /// </summary>
    [pbr::OriginalName("SCENE_ENTRY_BIND_TYPE_JUMP_START")] SceneEntryBindTypeJumpStart = 8,
    /// <summary>
    ///  跳跃落地
    /// </summary>
    [pbr::OriginalName("SCENE_ENTRY_BIND_TYPE_JUMP_FLOOR")] SceneEntryBindTypeJumpFloor = 9,
    /// <summary>
    ///  气泡感知区域有Entry进入
    /// </summary>
    [pbr::OriginalName("SCENE_ENTRY_BIND_TYPE_BUBBLE_PERCEPTION_ENTER")] SceneEntryBindTypeBubblePerceptionEnter = 10,
    /// <summary>
    ///  气泡感知区域有Entry离开
    /// </summary>
    [pbr::OriginalName("SCENE_ENTRY_BIND_TYPE_BUBBLE_PERCEPTION_LEAVE")] SceneEntryBindTypeBubblePerceptionLeave = 11,
    /// <summary>
    ///  休闲气泡AI切换下一个动作
    /// </summary>
    [pbr::OriginalName("SCENE_ENTRY_BIND_TYPE_BUBBLE_PERCEPTION_NEXT_ACTION")] SceneEntryBindTypeBubblePerceptionNextAction = 12,
    /// <summary>
    ///  移动姿态计时重置
    /// </summary>
    [pbr::OriginalName("SCENE_ENTRY_BIND_TYPE_WALKPOSE_RESET")] SceneEntryBindTypeWalkposeReset = 13,
    /// <summary>
    ///  移动姿态改变
    /// </summary>
    [pbr::OriginalName("SCENE_ENTRY_BIND_TYPE_WALKPOSE_CHANGE")] SceneEntryBindTypeWalkposeChange = 14,
    /// <summary>
    ///  End
    /// </summary>
    [pbr::OriginalName("SCENE_EVENT_BIND_TYPE_END")] End = 19,
  }

  /// <summary>
  ///  关卡来源类型
  ///  1.任务，2.原地副本，3.污染区域 4.妄想空间 5.副本
  /// </summary>
  public enum StageSourceType {
    /// <summary>
    ///  未知
    /// </summary>
    [pbr::OriginalName("STAGE_SOURCE_NULL")] StageSourceNull = 0,
    /// <summary>
    ///  任务
    /// </summary>
    [pbr::OriginalName("STAGE_SOURCE_QUEST")] StageSourceQuest = 1,
    /// <summary>
    ///  原地副本
    /// </summary>
    [pbr::OriginalName("STAGE_SOURCE_COPY")] StageSourceCopy = 2,
    /// <summary>
    ///  污染区域
    /// </summary>
    [pbr::OriginalName("STAGE_SOURCE_POLLUTION_AREA")] StageSourcePollutionArea = 3,
    /// <summary>
    ///  妄想空间
    /// </summary>
    [pbr::OriginalName("STAGE_SOURCE_WXKJ")] StageSourceWxkj = 4,
    /// <summary>
    ///  副本
    /// </summary>
    [pbr::OriginalName("STAGE_SOURCE_DSCENE")] StageSourceDscene = 5,
  }

  /// <summary>
  ///  NPC感知方式
  /// </summary>
  public enum NpcPerceptionType {
    [pbr::OriginalName("NPC_PERCEPTION_BEGIN")] NpcPerceptionBegin = 0,
    /// <summary>
    ///  视觉
    /// </summary>
    [pbr::OriginalName("NPC_PERCEPTION_VISIT")] NpcPerceptionVisit = 1,
    /// <summary>
    ///  听觉
    /// </summary>
    [pbr::OriginalName("NPC_PERCEPTION_HEAR")] NpcPerceptionHear = 2,
    [pbr::OriginalName("NPC_PERCEPTION_END")] NpcPerceptionEnd = 10,
  }

  /// <summary>
  ///  感知触发方式
  /// </summary>
  public enum NpcPerceptionTriggerType {
    [pbr::OriginalName("NPC_PERCEPTION_TRIGGRT_BEGIN")] NpcPerceptionTriggrtBegin = 0,
    /// <summary>
    ///  进入感知区域
    /// </summary>
    [pbr::OriginalName("NPC_PERCEPTION_TRIGGRT_ENTER")] NpcPerceptionTriggrtEnter = 1,
    /// <summary>
    ///  离开感知区域
    /// </summary>
    [pbr::OriginalName("NPC_PERCEPTION_TRIGGRT_LEAVE")] NpcPerceptionTriggrtLeave = 2,
    [pbr::OriginalName("NPC_PERCEPTION_TRIGGRT_END")] NpcPerceptionTriggrtEnd = 10,
  }

  public enum UserDeadType {
    [pbr::OriginalName("USER_DEAD_TYPE_MIN")] Min = 0,
    /// <summary>
    ///  全队死亡
    /// </summary>
    [pbr::OriginalName("USER_DEAD_TYPE_NORMAL_TEAM")] NormalTeam = 1,
    /// <summary>
    ///  新手引导的全队死亡
    /// </summary>
    [pbr::OriginalName("USER_DEAD_TYPE_LDBE_TEAM")] LdbeTeam = 2,
    [pbr::OriginalName("USER_DEAD_TYPE_MAX")] Max = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 九屏同步数据，包含除了战斗属性以外的部分
  /// </summary>
  public sealed partial class NineData : pb::IMessage<NineData> {
    private static readonly pb::MessageParser<NineData> _parser = new pb::MessageParser<NineData>(() => new NineData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NineData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NineData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NineData(NineData other) : this() {
      level_ = other.level_;
      Pd = other.pd_ != null ? other.Pd.Clone() : null;
      normalskill_ = other.normalskill_;
      state_ = other.state_;
      equipweapon_ = other.equipweapon_;
      fightstate_ = other.fightstate_;
      killername_ = other.killername_;
      equipids_ = other.equipids_.Clone();
      campid_ = other.campid_;
      iscreatedstove_ = other.iscreatedstove_;
      reconcileactionid_ = other.reconcileactionid_;
      featureflag_ = other.featureflag_;
      entrydata_ = other.entrydata_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NineData Clone() {
      return new NineData(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    /// <summary>
    ///  等级,表UserLevel.xlsx列Level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "pd" field.</summary>
    public const int PdFieldNumber = 2;
    private global::Cmd.PersonalityData pd_;
    /// <summary>
    ///  捏人数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.PersonalityData Pd {
      get { return pd_; }
      set {
        pd_ = value;
      }
    }

    /// <summary>Field number for the "normalskill" field.</summary>
    public const int NormalskillFieldNumber = 3;
    private uint normalskill_;
    /// <summary>
    ///  普攻技能id,表Skill.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Normalskill {
      get { return normalskill_; }
      set {
        normalskill_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 4;
    private uint state_;
    /// <summary>
    ///  当前状态,枚举ECreatureStatus
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "equipweapon" field.</summary>
    public const int EquipweaponFieldNumber = 6;
    private uint equipweapon_;
    /// <summary>
    /// uint32 dir = 5;                           // 当前朝向,unused,使用单独的方向协议同步
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Equipweapon {
      get { return equipweapon_; }
      set {
        equipweapon_ = value;
      }
    }

    /// <summary>Field number for the "fightstate" field.</summary>
    public const int FightstateFieldNumber = 7;
    private uint fightstate_;
    /// <summary>
    ///  战斗状态,枚举EFightStatusType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fightstate {
      get { return fightstate_; }
      set {
        fightstate_ = value;
      }
    }

    /// <summary>Field number for the "killername" field.</summary>
    public const int KillernameFieldNumber = 8;
    private string killername_ = "";
    /// <summary>
    ///  击杀者名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Killername {
      get { return killername_; }
      set {
        killername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "equipids" field.</summary>
    public const int EquipidsFieldNumber = 9;
    private static readonly pb::FieldCodec<uint> _repeated_equipids_codec
        = pb::FieldCodec.ForUInt32(74);
    private readonly pbc::RepeatedField<uint> equipids_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  unused,表Item_Equip.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Equipids {
      get { return equipids_; }
    }

    /// <summary>Field number for the "campid" field.</summary>
    public const int CampidFieldNumber = 10;
    private ulong campid_;
    /// <summary>
    ///  阵营id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Campid {
      get { return campid_; }
      set {
        campid_ = value;
      }
    }

    /// <summary>Field number for the "iscreatedstove" field.</summary>
    public const int IscreatedstoveFieldNumber = 12;
    private uint iscreatedstove_;
    /// <summary>
    ///  是否召唤出工房炉子 1:没有 2：有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Iscreatedstove {
      get { return iscreatedstove_; }
      set {
        iscreatedstove_ = value;
      }
    }

    /// <summary>Field number for the "reconcileactionid" field.</summary>
    public const int ReconcileactionidFieldNumber = 13;
    private uint reconcileactionid_;
    /// <summary>
    ///  工房调和正在进行的动作 unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Reconcileactionid {
      get { return reconcileactionid_; }
      set {
        reconcileactionid_ = value;
      }
    }

    /// <summary>Field number for the "featureflag" field.</summary>
    public const int FeatureflagFieldNumber = 14;
    private ulong featureflag_;
    /// <summary>
    ///  npc特性状态标志
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Featureflag {
      get { return featureflag_; }
      set {
        featureflag_ = value;
      }
    }

    /// <summary>Field number for the "entrydata" field.</summary>
    public const int EntrydataFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Cmd.EntryData> _repeated_entrydata_codec
        = pb::FieldCodec.ForMessage(122, global::Cmd.EntryData.Parser);
    private readonly pbc::RepeatedField<global::Cmd.EntryData> entrydata_ = new pbc::RepeatedField<global::Cmd.EntryData>();
    /// <summary>
    ///  单位的九屏枚举数据,支持增量更新
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.EntryData> Entrydata {
      get { return entrydata_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NineData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NineData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (!object.Equals(Pd, other.Pd)) return false;
      if (Normalskill != other.Normalskill) return false;
      if (State != other.State) return false;
      if (Equipweapon != other.Equipweapon) return false;
      if (Fightstate != other.Fightstate) return false;
      if (Killername != other.Killername) return false;
      if(!equipids_.Equals(other.equipids_)) return false;
      if (Campid != other.Campid) return false;
      if (Iscreatedstove != other.Iscreatedstove) return false;
      if (Reconcileactionid != other.Reconcileactionid) return false;
      if (Featureflag != other.Featureflag) return false;
      if(!entrydata_.Equals(other.entrydata_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (pd_ != null) hash ^= Pd.GetHashCode();
      if (Normalskill != 0) hash ^= Normalskill.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (Equipweapon != 0) hash ^= Equipweapon.GetHashCode();
      if (Fightstate != 0) hash ^= Fightstate.GetHashCode();
      if (Killername.Length != 0) hash ^= Killername.GetHashCode();
      hash ^= equipids_.GetHashCode();
      if (Campid != 0UL) hash ^= Campid.GetHashCode();
      if (Iscreatedstove != 0) hash ^= Iscreatedstove.GetHashCode();
      if (Reconcileactionid != 0) hash ^= Reconcileactionid.GetHashCode();
      if (Featureflag != 0UL) hash ^= Featureflag.GetHashCode();
      hash ^= entrydata_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (pd_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pd);
      }
      if (Normalskill != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Normalskill);
      }
      if (State != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(State);
      }
      if (Equipweapon != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Equipweapon);
      }
      if (Fightstate != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Fightstate);
      }
      if (Killername.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Killername);
      }
      equipids_.WriteTo(output, _repeated_equipids_codec);
      if (Campid != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(Campid);
      }
      if (Iscreatedstove != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Iscreatedstove);
      }
      if (Reconcileactionid != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Reconcileactionid);
      }
      if (Featureflag != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(Featureflag);
      }
      entrydata_.WriteTo(output, _repeated_entrydata_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (pd_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pd);
      }
      if (Normalskill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Normalskill);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      if (Equipweapon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Equipweapon);
      }
      if (Fightstate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fightstate);
      }
      if (Killername.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Killername);
      }
      size += equipids_.CalculateSize(_repeated_equipids_codec);
      if (Campid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Campid);
      }
      if (Iscreatedstove != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Iscreatedstove);
      }
      if (Reconcileactionid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Reconcileactionid);
      }
      if (Featureflag != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Featureflag);
      }
      size += entrydata_.CalculateSize(_repeated_entrydata_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NineData other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.pd_ != null) {
        if (pd_ == null) {
          pd_ = new global::Cmd.PersonalityData();
        }
        Pd.MergeFrom(other.Pd);
      }
      if (other.Normalskill != 0) {
        Normalskill = other.Normalskill;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Equipweapon != 0) {
        Equipweapon = other.Equipweapon;
      }
      if (other.Fightstate != 0) {
        Fightstate = other.Fightstate;
      }
      if (other.Killername.Length != 0) {
        Killername = other.Killername;
      }
      equipids_.Add(other.equipids_);
      if (other.Campid != 0UL) {
        Campid = other.Campid;
      }
      if (other.Iscreatedstove != 0) {
        Iscreatedstove = other.Iscreatedstove;
      }
      if (other.Reconcileactionid != 0) {
        Reconcileactionid = other.Reconcileactionid;
      }
      if (other.Featureflag != 0UL) {
        Featureflag = other.Featureflag;
      }
      entrydata_.Add(other.entrydata_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 18: {
            if (pd_ == null) {
              pd_ = new global::Cmd.PersonalityData();
            }
            input.ReadMessage(pd_);
            break;
          }
          case 24: {
            Normalskill = input.ReadUInt32();
            break;
          }
          case 32: {
            State = input.ReadUInt32();
            break;
          }
          case 48: {
            Equipweapon = input.ReadUInt32();
            break;
          }
          case 56: {
            Fightstate = input.ReadUInt32();
            break;
          }
          case 66: {
            Killername = input.ReadString();
            break;
          }
          case 74:
          case 72: {
            equipids_.AddEntriesFrom(input, _repeated_equipids_codec);
            break;
          }
          case 80: {
            Campid = input.ReadUInt64();
            break;
          }
          case 96: {
            Iscreatedstove = input.ReadUInt32();
            break;
          }
          case 104: {
            Reconcileactionid = input.ReadUInt32();
            break;
          }
          case 112: {
            Featureflag = input.ReadUInt64();
            break;
          }
          case 122: {
            entrydata_.AddEntriesFrom(input, _repeated_entrydata_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  场景添加物品
  /// </summary>
  public sealed partial class MapItem : pb::IMessage<MapItem> {
    private static readonly pb::MessageParser<MapItem> _parser = new pb::MessageParser<MapItem>(() => new MapItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapItem(MapItem other) : this() {
      guid_ = other.guid_;
      id_ = other.id_;
      type_ = other.type_;
      sourceid_ = other.sourceid_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      owners_ = other.owners_.Clone();
      disappear_ = other.disappear_;
      dir_ = other.dir_;
      subguid_ = other.subguid_.Clone();
      parentguid_ = other.parentguid_;
      isprivate_ = other.isprivate_;
      fromid_ = other.fromid_;
      roomids_ = other.roomids_.Clone();
      state_ = other.state_;
      interactivefeature_ = other.interactivefeature_.Clone();
      itementrydata_ = other.itementrydata_.Clone();
      Boxdata = other.boxdata_ != null ? other.Boxdata.Clone() : null;
      iscollected_ = other.iscollected_;
      energy_ = other.energy_;
      alias_ = other.alias_;
      questOwnerID_ = other.questOwnerID_;
      ismapstatic_ = other.ismapstatic_;
      pickgroupids_ = other.pickgroupids_.Clone();
      isreinforce_ = other.isreinforce_;
      isbirth_ = other.isbirth_;
      borndelaytime_ = other.borndelaytime_;
      overlapradius_ = other.overlapradius_;
      spawnerid_ = other.spawnerid_;
      questid_ = other.questid_;
      interactivemode_ = other.interactivemode_;
      Scale = other.scale_ != null ? other.Scale.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapItem Clone() {
      return new MapItem(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    /// <summary>
    ///  道具guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    /// <summary>
    ///  道具id,表Item.xlsx列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Cmd.EStageObjectType type_ = 0;
    /// <summary>
    ///  类型,表NpcType.xlsx列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EStageObjectType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "sourceid" field.</summary>
    public const int SourceidFieldNumber = 4;
    private ulong sourceid_;
    /// <summary>
    ///  来源npc的guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Sourceid {
      get { return sourceid_; }
      set {
        sourceid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 5;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "owners" field.</summary>
    public const int OwnersFieldNumber = 6;
    private static readonly pb::FieldCodec<ulong> _repeated_owners_codec
        = pb::FieldCodec.ForUInt64(50);
    private readonly pbc::RepeatedField<ulong> owners_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///  属于者charid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Owners {
      get { return owners_; }
    }

    /// <summary>Field number for the "disappear" field.</summary>
    public const int DisappearFieldNumber = 7;
    private ulong disappear_;
    /// <summary>
    ///  消失时间,为0表示不定时消失
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Disappear {
      get { return disappear_; }
      set {
        disappear_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 8;
    private float dir_;
    /// <summary>
    ///  朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "subguid" field.</summary>
    public const int SubguidFieldNumber = 9;
    private static readonly pb::FieldCodec<ulong> _repeated_subguid_codec
        = pb::FieldCodec.ForUInt64(74);
    private readonly pbc::RepeatedField<ulong> subguid_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///  道具上挂载的其它道具列表 用于家具上的摆放物业务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Subguid {
      get { return subguid_; }
    }

    /// <summary>Field number for the "parentguid" field.</summary>
    public const int ParentguidFieldNumber = 11;
    private ulong parentguid_;
    /// <summary>
    ///  父家具guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Parentguid {
      get { return parentguid_; }
      set {
        parentguid_ = value;
      }
    }

    /// <summary>Field number for the "isprivate" field.</summary>
    public const int IsprivateFieldNumber = 13;
    private bool isprivate_;
    /// <summary>
    ///  是否私人对象
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isprivate {
      get { return isprivate_; }
      set {
        isprivate_ = value;
      }
    }

    /// <summary>Field number for the "fromid" field.</summary>
    public const int FromidFieldNumber = 14;
    private ulong fromid_;
    /// <summary>
    ///  任务,创建源NPC的guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Fromid {
      get { return fromid_; }
      set {
        fromid_ = value;
      }
    }

    /// <summary>Field number for the "roomids" field.</summary>
    public const int RoomidsFieldNumber = 15;
    private static readonly pb::FieldCodec<uint> _repeated_roomids_codec
        = pb::FieldCodec.ForUInt32(122);
    private readonly pbc::RepeatedField<uint> roomids_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  家具所跨越的房间列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Roomids {
      get { return roomids_; }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 16;
    private string state_ = "";
    /// <summary>
    ///  状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string State {
      get { return state_; }
      set {
        state_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "interactivefeature" field.</summary>
    public const int InteractivefeatureFieldNumber = 17;
    private static readonly pb::FieldCodec<uint> _repeated_interactivefeature_codec
        = pb::FieldCodec.ForUInt32(138);
    private readonly pbc::RepeatedField<uint> interactivefeature_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  交互特性id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Interactivefeature {
      get { return interactivefeature_; }
    }

    /// <summary>Field number for the "itementrydata" field.</summary>
    public const int ItementrydataFieldNumber = 18;
    private static readonly pb::FieldCodec<global::Cmd.ItemEntryData> _repeated_itementrydata_codec
        = pb::FieldCodec.ForMessage(146, global::Cmd.ItemEntryData.Parser);
    private readonly pbc::RepeatedField<global::Cmd.ItemEntryData> itementrydata_ = new pbc::RepeatedField<global::Cmd.ItemEntryData>();
    /// <summary>
    ///  枚举数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.ItemEntryData> Itementrydata {
      get { return itementrydata_; }
    }

    /// <summary>Field number for the "boxdata" field.</summary>
    public const int BoxdataFieldNumber = 19;
    private global::Cmd.MapBoxData boxdata_;
    /// <summary>
    ///  宝箱数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.MapBoxData Boxdata {
      get { return boxdata_; }
      set {
        boxdata_ = value;
      }
    }

    /// <summary>Field number for the "iscollected" field.</summary>
    public const int IscollectedFieldNumber = 20;
    private bool iscollected_;
    /// <summary>
    ///  是否被采集
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Iscollected {
      get { return iscollected_; }
      set {
        iscollected_ = value;
      }
    }

    /// <summary>Field number for the "energy" field.</summary>
    public const int EnergyFieldNumber = 21;
    private uint energy_;
    /// <summary>
    ///  能量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Energy {
      get { return energy_; }
      set {
        energy_ = value;
      }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 22;
    private string alias_ = "";
    /// <summary>
    ///  alias 标识npc(别名)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "questOwnerID" field.</summary>
    public const int QuestOwnerIDFieldNumber = 23;
    private ulong questOwnerID_;
    /// <summary>
    ///  可见性归属者id,归属者是玩家charid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QuestOwnerID {
      get { return questOwnerID_; }
      set {
        questOwnerID_ = value;
      }
    }

    /// <summary>Field number for the "ismapstatic" field.</summary>
    public const int IsmapstaticFieldNumber = 24;
    private bool ismapstatic_;
    /// <summary>
    ///  是否地图静态对象(生命周期跟随场景)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ismapstatic {
      get { return ismapstatic_; }
      set {
        ismapstatic_ = value;
      }
    }

    /// <summary>Field number for the "pickgroupids" field.</summary>
    public const int PickgroupidsFieldNumber = 25;
    private static readonly pb::FieldCodec<ulong> _repeated_pickgroupids_codec
        = pb::FieldCodec.ForUInt64(202);
    private readonly pbc::RepeatedField<ulong> pickgroupids_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///  拾取组IDs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Pickgroupids {
      get { return pickgroupids_; }
    }

    /// <summary>Field number for the "isreinforce" field.</summary>
    public const int IsreinforceFieldNumber = 26;
    private bool isreinforce_;
    /// <summary>
    ///  是否强化后的道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isreinforce {
      get { return isreinforce_; }
      set {
        isreinforce_ = value;
      }
    }

    /// <summary>Field number for the "isbirth" field.</summary>
    public const int IsbirthFieldNumber = 27;
    private bool isbirth_;
    /// <summary>
    ///  是否播放出生动画
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isbirth {
      get { return isbirth_; }
      set {
        isbirth_ = value;
      }
    }

    /// <summary>Field number for the "borndelaytime" field.</summary>
    public const int BorndelaytimeFieldNumber = 28;
    private ulong borndelaytime_;
    /// <summary>
    ///  出生创建后延迟一段时间再播出生动画
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Borndelaytime {
      get { return borndelaytime_; }
      set {
        borndelaytime_ = value;
      }
    }

    /// <summary>Field number for the "overlapradius" field.</summary>
    public const int OverlapradiusFieldNumber = 29;
    private uint overlapradius_;
    /// <summary>
    ///  碰撞半径(前端用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Overlapradius {
      get { return overlapradius_; }
      set {
        overlapradius_ = value;
      }
    }

    /// <summary>Field number for the "spawnerid" field.</summary>
    public const int SpawneridFieldNumber = 30;
    private string spawnerid_ = "";
    /// <summary>
    ///  Spawner唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Spawnerid {
      get { return spawnerid_; }
      set {
        spawnerid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "questid" field.</summary>
    public const int QuestidFieldNumber = 31;
    private uint questid_;
    /// <summary>
    ///  所属任务ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Questid {
      get { return questid_; }
      set {
        questid_ = value;
      }
    }

    /// <summary>Field number for the "interactivemode" field.</summary>
    public const int InteractivemodeFieldNumber = 32;
    private global::Cmd.ESceneObjectInteractionMode interactivemode_ = 0;
    /// <summary>
    ///  交互模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ESceneObjectInteractionMode Interactivemode {
      get { return interactivemode_; }
      set {
        interactivemode_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 34;
    private global::Cmd.SceneScale scale_;
    /// <summary>
    ///  缩放比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.SceneScale Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (Sourceid != other.Sourceid) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if(!owners_.Equals(other.owners_)) return false;
      if (Disappear != other.Disappear) return false;
      if (Dir != other.Dir) return false;
      if(!subguid_.Equals(other.subguid_)) return false;
      if (Parentguid != other.Parentguid) return false;
      if (Isprivate != other.Isprivate) return false;
      if (Fromid != other.Fromid) return false;
      if(!roomids_.Equals(other.roomids_)) return false;
      if (State != other.State) return false;
      if(!interactivefeature_.Equals(other.interactivefeature_)) return false;
      if(!itementrydata_.Equals(other.itementrydata_)) return false;
      if (!object.Equals(Boxdata, other.Boxdata)) return false;
      if (Iscollected != other.Iscollected) return false;
      if (Energy != other.Energy) return false;
      if (Alias != other.Alias) return false;
      if (QuestOwnerID != other.QuestOwnerID) return false;
      if (Ismapstatic != other.Ismapstatic) return false;
      if(!pickgroupids_.Equals(other.pickgroupids_)) return false;
      if (Isreinforce != other.Isreinforce) return false;
      if (Isbirth != other.Isbirth) return false;
      if (Borndelaytime != other.Borndelaytime) return false;
      if (Overlapradius != other.Overlapradius) return false;
      if (Spawnerid != other.Spawnerid) return false;
      if (Questid != other.Questid) return false;
      if (Interactivemode != other.Interactivemode) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Sourceid != 0UL) hash ^= Sourceid.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      hash ^= owners_.GetHashCode();
      if (Disappear != 0UL) hash ^= Disappear.GetHashCode();
      if (Dir != 0F) hash ^= Dir.GetHashCode();
      hash ^= subguid_.GetHashCode();
      if (Parentguid != 0UL) hash ^= Parentguid.GetHashCode();
      if (Isprivate != false) hash ^= Isprivate.GetHashCode();
      if (Fromid != 0UL) hash ^= Fromid.GetHashCode();
      hash ^= roomids_.GetHashCode();
      if (State.Length != 0) hash ^= State.GetHashCode();
      hash ^= interactivefeature_.GetHashCode();
      hash ^= itementrydata_.GetHashCode();
      if (boxdata_ != null) hash ^= Boxdata.GetHashCode();
      if (Iscollected != false) hash ^= Iscollected.GetHashCode();
      if (Energy != 0) hash ^= Energy.GetHashCode();
      if (Alias.Length != 0) hash ^= Alias.GetHashCode();
      if (QuestOwnerID != 0UL) hash ^= QuestOwnerID.GetHashCode();
      if (Ismapstatic != false) hash ^= Ismapstatic.GetHashCode();
      hash ^= pickgroupids_.GetHashCode();
      if (Isreinforce != false) hash ^= Isreinforce.GetHashCode();
      if (Isbirth != false) hash ^= Isbirth.GetHashCode();
      if (Borndelaytime != 0UL) hash ^= Borndelaytime.GetHashCode();
      if (Overlapradius != 0) hash ^= Overlapradius.GetHashCode();
      if (Spawnerid.Length != 0) hash ^= Spawnerid.GetHashCode();
      if (Questid != 0) hash ^= Questid.GetHashCode();
      if (Interactivemode != 0) hash ^= Interactivemode.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (Sourceid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Sourceid);
      }
      if (pos_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Pos);
      }
      owners_.WriteTo(output, _repeated_owners_codec);
      if (Disappear != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Disappear);
      }
      if (Dir != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Dir);
      }
      subguid_.WriteTo(output, _repeated_subguid_codec);
      if (Parentguid != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(Parentguid);
      }
      if (Isprivate != false) {
        output.WriteRawTag(104);
        output.WriteBool(Isprivate);
      }
      if (Fromid != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(Fromid);
      }
      roomids_.WriteTo(output, _repeated_roomids_codec);
      if (State.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(State);
      }
      interactivefeature_.WriteTo(output, _repeated_interactivefeature_codec);
      itementrydata_.WriteTo(output, _repeated_itementrydata_codec);
      if (boxdata_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Boxdata);
      }
      if (Iscollected != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(Iscollected);
      }
      if (Energy != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(Energy);
      }
      if (Alias.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Alias);
      }
      if (QuestOwnerID != 0UL) {
        output.WriteRawTag(184, 1);
        output.WriteUInt64(QuestOwnerID);
      }
      if (Ismapstatic != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(Ismapstatic);
      }
      pickgroupids_.WriteTo(output, _repeated_pickgroupids_codec);
      if (Isreinforce != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(Isreinforce);
      }
      if (Isbirth != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(Isbirth);
      }
      if (Borndelaytime != 0UL) {
        output.WriteRawTag(224, 1);
        output.WriteUInt64(Borndelaytime);
      }
      if (Overlapradius != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(Overlapradius);
      }
      if (Spawnerid.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(Spawnerid);
      }
      if (Questid != 0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(Questid);
      }
      if (Interactivemode != 0) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) Interactivemode);
      }
      if (scale_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(Scale);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Sourceid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Sourceid);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      size += owners_.CalculateSize(_repeated_owners_codec);
      if (Disappear != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Disappear);
      }
      if (Dir != 0F) {
        size += 1 + 4;
      }
      size += subguid_.CalculateSize(_repeated_subguid_codec);
      if (Parentguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Parentguid);
      }
      if (Isprivate != false) {
        size += 1 + 1;
      }
      if (Fromid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Fromid);
      }
      size += roomids_.CalculateSize(_repeated_roomids_codec);
      if (State.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(State);
      }
      size += interactivefeature_.CalculateSize(_repeated_interactivefeature_codec);
      size += itementrydata_.CalculateSize(_repeated_itementrydata_codec);
      if (boxdata_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Boxdata);
      }
      if (Iscollected != false) {
        size += 2 + 1;
      }
      if (Energy != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Energy);
      }
      if (Alias.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      if (QuestOwnerID != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(QuestOwnerID);
      }
      if (Ismapstatic != false) {
        size += 2 + 1;
      }
      size += pickgroupids_.CalculateSize(_repeated_pickgroupids_codec);
      if (Isreinforce != false) {
        size += 2 + 1;
      }
      if (Isbirth != false) {
        size += 2 + 1;
      }
      if (Borndelaytime != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Borndelaytime);
      }
      if (Overlapradius != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Overlapradius);
      }
      if (Spawnerid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Spawnerid);
      }
      if (Questid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Questid);
      }
      if (Interactivemode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Interactivemode);
      }
      if (scale_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapItem other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Sourceid != 0UL) {
        Sourceid = other.Sourceid;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      owners_.Add(other.owners_);
      if (other.Disappear != 0UL) {
        Disappear = other.Disappear;
      }
      if (other.Dir != 0F) {
        Dir = other.Dir;
      }
      subguid_.Add(other.subguid_);
      if (other.Parentguid != 0UL) {
        Parentguid = other.Parentguid;
      }
      if (other.Isprivate != false) {
        Isprivate = other.Isprivate;
      }
      if (other.Fromid != 0UL) {
        Fromid = other.Fromid;
      }
      roomids_.Add(other.roomids_);
      if (other.State.Length != 0) {
        State = other.State;
      }
      interactivefeature_.Add(other.interactivefeature_);
      itementrydata_.Add(other.itementrydata_);
      if (other.boxdata_ != null) {
        if (boxdata_ == null) {
          boxdata_ = new global::Cmd.MapBoxData();
        }
        Boxdata.MergeFrom(other.Boxdata);
      }
      if (other.Iscollected != false) {
        Iscollected = other.Iscollected;
      }
      if (other.Energy != 0) {
        Energy = other.Energy;
      }
      if (other.Alias.Length != 0) {
        Alias = other.Alias;
      }
      if (other.QuestOwnerID != 0UL) {
        QuestOwnerID = other.QuestOwnerID;
      }
      if (other.Ismapstatic != false) {
        Ismapstatic = other.Ismapstatic;
      }
      pickgroupids_.Add(other.pickgroupids_);
      if (other.Isreinforce != false) {
        Isreinforce = other.Isreinforce;
      }
      if (other.Isbirth != false) {
        Isbirth = other.Isbirth;
      }
      if (other.Borndelaytime != 0UL) {
        Borndelaytime = other.Borndelaytime;
      }
      if (other.Overlapradius != 0) {
        Overlapradius = other.Overlapradius;
      }
      if (other.Spawnerid.Length != 0) {
        Spawnerid = other.Spawnerid;
      }
      if (other.Questid != 0) {
        Questid = other.Questid;
      }
      if (other.Interactivemode != 0) {
        Interactivemode = other.Interactivemode;
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          scale_ = new global::Cmd.SceneScale();
        }
        Scale.MergeFrom(other.Scale);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            type_ = (global::Cmd.EStageObjectType) input.ReadEnum();
            break;
          }
          case 32: {
            Sourceid = input.ReadUInt64();
            break;
          }
          case 42: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 50:
          case 48: {
            owners_.AddEntriesFrom(input, _repeated_owners_codec);
            break;
          }
          case 56: {
            Disappear = input.ReadUInt64();
            break;
          }
          case 69: {
            Dir = input.ReadFloat();
            break;
          }
          case 74:
          case 72: {
            subguid_.AddEntriesFrom(input, _repeated_subguid_codec);
            break;
          }
          case 88: {
            Parentguid = input.ReadUInt64();
            break;
          }
          case 104: {
            Isprivate = input.ReadBool();
            break;
          }
          case 112: {
            Fromid = input.ReadUInt64();
            break;
          }
          case 122:
          case 120: {
            roomids_.AddEntriesFrom(input, _repeated_roomids_codec);
            break;
          }
          case 130: {
            State = input.ReadString();
            break;
          }
          case 138:
          case 136: {
            interactivefeature_.AddEntriesFrom(input, _repeated_interactivefeature_codec);
            break;
          }
          case 146: {
            itementrydata_.AddEntriesFrom(input, _repeated_itementrydata_codec);
            break;
          }
          case 154: {
            if (boxdata_ == null) {
              boxdata_ = new global::Cmd.MapBoxData();
            }
            input.ReadMessage(boxdata_);
            break;
          }
          case 160: {
            Iscollected = input.ReadBool();
            break;
          }
          case 168: {
            Energy = input.ReadUInt32();
            break;
          }
          case 178: {
            Alias = input.ReadString();
            break;
          }
          case 184: {
            QuestOwnerID = input.ReadUInt64();
            break;
          }
          case 192: {
            Ismapstatic = input.ReadBool();
            break;
          }
          case 202:
          case 200: {
            pickgroupids_.AddEntriesFrom(input, _repeated_pickgroupids_codec);
            break;
          }
          case 208: {
            Isreinforce = input.ReadBool();
            break;
          }
          case 216: {
            Isbirth = input.ReadBool();
            break;
          }
          case 224: {
            Borndelaytime = input.ReadUInt64();
            break;
          }
          case 232: {
            Overlapradius = input.ReadUInt32();
            break;
          }
          case 242: {
            Spawnerid = input.ReadString();
            break;
          }
          case 248: {
            Questid = input.ReadUInt32();
            break;
          }
          case 256: {
            interactivemode_ = (global::Cmd.ESceneObjectInteractionMode) input.ReadEnum();
            break;
          }
          case 274: {
            if (scale_ == null) {
              scale_ = new global::Cmd.SceneScale();
            }
            input.ReadMessage(scale_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  场景添加物品,S->C
  /// </summary>
  public sealed partial class AddMapItem : pb::IMessage<AddMapItem> {
    private static readonly pb::MessageParser<AddMapItem> _parser = new pb::MessageParser<AddMapItem>(() => new AddMapItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddMapItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddMapItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddMapItem(AddMapItem other) : this() {
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddMapItem Clone() {
      return new AddMapItem(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.MapItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.MapItem.Parser);
    private readonly pbc::RepeatedField<global::Cmd.MapItem> items_ = new pbc::RepeatedField<global::Cmd.MapItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.MapItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddMapItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddMapItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddMapItem other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  拾取物品,S&lt;->C
  /// </summary>
  public sealed partial class PickupItem : pb::IMessage<PickupItem> {
    private static readonly pb::MessageParser<PickupItem> _parser = new pb::MessageParser<PickupItem>(() => new PickupItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PickupItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickupItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickupItem(PickupItem other) : this() {
      playerguid_ = other.playerguid_;
      itemguid_ = other.itemguid_;
      success_ = other.success_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickupItem Clone() {
      return new PickupItem(this);
    }

    /// <summary>Field number for the "playerguid" field.</summary>
    public const int PlayerguidFieldNumber = 3;
    private ulong playerguid_;
    /// <summary>
    ///  角色guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Playerguid {
      get { return playerguid_; }
      set {
        playerguid_ = value;
      }
    }

    /// <summary>Field number for the "itemguid" field.</summary>
    public const int ItemguidFieldNumber = 4;
    private ulong itemguid_;
    /// <summary>
    ///  物品guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Itemguid {
      get { return itemguid_; }
      set {
        itemguid_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 5;
    private bool success_;
    /// <summary>
    ///  是否成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PickupItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PickupItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Playerguid != other.Playerguid) return false;
      if (Itemguid != other.Itemguid) return false;
      if (Success != other.Success) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Playerguid != 0UL) hash ^= Playerguid.GetHashCode();
      if (Itemguid != 0UL) hash ^= Itemguid.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Playerguid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Playerguid);
      }
      if (Itemguid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Itemguid);
      }
      if (Success != false) {
        output.WriteRawTag(40);
        output.WriteBool(Success);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Playerguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Playerguid);
      }
      if (Itemguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Itemguid);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PickupItem other) {
      if (other == null) {
        return;
      }
      if (other.Playerguid != 0UL) {
        Playerguid = other.Playerguid;
      }
      if (other.Itemguid != 0UL) {
        Itemguid = other.Itemguid;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Playerguid = input.ReadUInt64();
            break;
          }
          case 32: {
            Itemguid = input.ReadUInt64();
            break;
          }
          case 40: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  npc数据,S->C
  /// </summary>
  public sealed partial class MapNpcData : pb::IMessage<MapNpcData> {
    private static readonly pb::MessageParser<MapNpcData> _parser = new pb::MessageParser<MapNpcData>(() => new MapNpcData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapNpcData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapNpcData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapNpcData(MapNpcData other) : this() {
      charid_ = other.charid_;
      alias_ = other.alias_;
      Data = other.data_ != null ? other.Data.Clone() : null;
      attrs_ = other.attrs_.Clone();
      buffs_ = other.buffs_.Clone();
      isbirth_ = other.isbirth_;
      Movedata = other.movedata_ != null ? other.Movedata.Clone() : null;
      featureflag_ = other.featureflag_;
      feature_ = other.feature_.Clone();
      borndelaytime_ = other.borndelaytime_;
      interactiveradius_ = other.interactiveradius_;
      perceptionradius_ = other.perceptionradius_;
      spawnerid_ = other.spawnerid_;
      questid_ = other.questid_;
      bubbleperceptionradius_ = other.bubbleperceptionradius_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapNpcData Clone() {
      return new MapNpcData(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 1;
    private ulong charid_;
    /// <summary>
    ///  归属者charid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 3;
    private string alias_ = "";
    /// <summary>
    /// uint64 controlcharid = 2;       // unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private global::Cmd.NineData data_;
    /// <summary>
    ///  九屏属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.NineData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Cmd.UserAttr> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(42, global::Cmd.UserAttr.Parser);
    private readonly pbc::RepeatedField<global::Cmd.UserAttr> attrs_ = new pbc::RepeatedField<global::Cmd.UserAttr>();
    /// <summary>
    ///  角色属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.UserAttr> Attrs {
      get { return attrs_; }
    }

    /// <summary>Field number for the "buffs" field.</summary>
    public const int BuffsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Cmd.BufferData> _repeated_buffs_codec
        = pb::FieldCodec.ForMessage(50, global::Cmd.BufferData.Parser);
    private readonly pbc::RepeatedField<global::Cmd.BufferData> buffs_ = new pbc::RepeatedField<global::Cmd.BufferData>();
    /// <summary>
    ///  buff数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.BufferData> Buffs {
      get { return buffs_; }
    }

    /// <summary>Field number for the "isbirth" field.</summary>
    public const int IsbirthFieldNumber = 7;
    private bool isbirth_;
    /// <summary>
    ///  出生时播放出生动画
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isbirth {
      get { return isbirth_; }
      set {
        isbirth_ = value;
      }
    }

    /// <summary>Field number for the "movedata" field.</summary>
    public const int MovedataFieldNumber = 8;
    private global::Cmd.MoveStateData movedata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.MoveStateData Movedata {
      get { return movedata_; }
      set {
        movedata_ = value;
      }
    }

    /// <summary>Field number for the "featureflag" field.</summary>
    public const int FeatureflagFieldNumber = 9;
    private ulong featureflag_;
    /// <summary>
    ///  npc特性状态标志
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Featureflag {
      get { return featureflag_; }
      set {
        featureflag_ = value;
      }
    }

    /// <summary>Field number for the "feature" field.</summary>
    public const int FeatureFieldNumber = 10;
    private static readonly pb::FieldCodec<uint> _repeated_feature_codec
        = pb::FieldCodec.ForUInt32(82);
    private readonly pbc::RepeatedField<uint> feature_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  特性id,表FeaturesType.xlsx中列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Feature {
      get { return feature_; }
    }

    /// <summary>Field number for the "borndelaytime" field.</summary>
    public const int BorndelaytimeFieldNumber = 11;
    private ulong borndelaytime_;
    /// <summary>
    ///  出生创建后延迟一段时间再播出生动画
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Borndelaytime {
      get { return borndelaytime_; }
      set {
        borndelaytime_ = value;
      }
    }

    /// <summary>Field number for the "interactiveradius" field.</summary>
    public const int InteractiveradiusFieldNumber = 12;
    private uint interactiveradius_;
    /// <summary>
    ///  npc交互半径(前端用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Interactiveradius {
      get { return interactiveradius_; }
      set {
        interactiveradius_ = value;
      }
    }

    /// <summary>Field number for the "perceptionradius" field.</summary>
    public const int PerceptionradiusFieldNumber = 13;
    private uint perceptionradius_;
    /// <summary>
    ///  npc感知半径(前端用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Perceptionradius {
      get { return perceptionradius_; }
      set {
        perceptionradius_ = value;
      }
    }

    /// <summary>Field number for the "spawnerid" field.</summary>
    public const int SpawneridFieldNumber = 14;
    private string spawnerid_ = "";
    /// <summary>
    ///  Unique Spawner ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Spawnerid {
      get { return spawnerid_; }
      set {
        spawnerid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "questid" field.</summary>
    public const int QuestidFieldNumber = 15;
    private uint questid_;
    /// <summary>
    ///  所属任务ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Questid {
      get { return questid_; }
      set {
        questid_ = value;
      }
    }

    /// <summary>Field number for the "bubbleperceptionradius" field.</summary>
    public const int BubbleperceptionradiusFieldNumber = 16;
    private uint bubbleperceptionradius_;
    /// <summary>
    ///  npc气泡感知半径(前端用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Bubbleperceptionradius {
      get { return bubbleperceptionradius_; }
      set {
        bubbleperceptionradius_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapNpcData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapNpcData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      if (Alias != other.Alias) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if(!attrs_.Equals(other.attrs_)) return false;
      if(!buffs_.Equals(other.buffs_)) return false;
      if (Isbirth != other.Isbirth) return false;
      if (!object.Equals(Movedata, other.Movedata)) return false;
      if (Featureflag != other.Featureflag) return false;
      if(!feature_.Equals(other.feature_)) return false;
      if (Borndelaytime != other.Borndelaytime) return false;
      if (Interactiveradius != other.Interactiveradius) return false;
      if (Perceptionradius != other.Perceptionradius) return false;
      if (Spawnerid != other.Spawnerid) return false;
      if (Questid != other.Questid) return false;
      if (Bubbleperceptionradius != other.Bubbleperceptionradius) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      if (Alias.Length != 0) hash ^= Alias.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      hash ^= attrs_.GetHashCode();
      hash ^= buffs_.GetHashCode();
      if (Isbirth != false) hash ^= Isbirth.GetHashCode();
      if (movedata_ != null) hash ^= Movedata.GetHashCode();
      if (Featureflag != 0UL) hash ^= Featureflag.GetHashCode();
      hash ^= feature_.GetHashCode();
      if (Borndelaytime != 0UL) hash ^= Borndelaytime.GetHashCode();
      if (Interactiveradius != 0) hash ^= Interactiveradius.GetHashCode();
      if (Perceptionradius != 0) hash ^= Perceptionradius.GetHashCode();
      if (Spawnerid.Length != 0) hash ^= Spawnerid.GetHashCode();
      if (Questid != 0) hash ^= Questid.GetHashCode();
      if (Bubbleperceptionradius != 0) hash ^= Bubbleperceptionradius.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Charid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Charid);
      }
      if (Alias.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Alias);
      }
      if (data_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Data);
      }
      attrs_.WriteTo(output, _repeated_attrs_codec);
      buffs_.WriteTo(output, _repeated_buffs_codec);
      if (Isbirth != false) {
        output.WriteRawTag(56);
        output.WriteBool(Isbirth);
      }
      if (movedata_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Movedata);
      }
      if (Featureflag != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(Featureflag);
      }
      feature_.WriteTo(output, _repeated_feature_codec);
      if (Borndelaytime != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(Borndelaytime);
      }
      if (Interactiveradius != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Interactiveradius);
      }
      if (Perceptionradius != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Perceptionradius);
      }
      if (Spawnerid.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Spawnerid);
      }
      if (Questid != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(Questid);
      }
      if (Bubbleperceptionradius != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(Bubbleperceptionradius);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      if (Alias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      size += buffs_.CalculateSize(_repeated_buffs_codec);
      if (Isbirth != false) {
        size += 1 + 1;
      }
      if (movedata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Movedata);
      }
      if (Featureflag != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Featureflag);
      }
      size += feature_.CalculateSize(_repeated_feature_codec);
      if (Borndelaytime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Borndelaytime);
      }
      if (Interactiveradius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Interactiveradius);
      }
      if (Perceptionradius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Perceptionradius);
      }
      if (Spawnerid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Spawnerid);
      }
      if (Questid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Questid);
      }
      if (Bubbleperceptionradius != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Bubbleperceptionradius);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapNpcData other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      if (other.Alias.Length != 0) {
        Alias = other.Alias;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::Cmd.NineData();
        }
        Data.MergeFrom(other.Data);
      }
      attrs_.Add(other.attrs_);
      buffs_.Add(other.buffs_);
      if (other.Isbirth != false) {
        Isbirth = other.Isbirth;
      }
      if (other.movedata_ != null) {
        if (movedata_ == null) {
          movedata_ = new global::Cmd.MoveStateData();
        }
        Movedata.MergeFrom(other.Movedata);
      }
      if (other.Featureflag != 0UL) {
        Featureflag = other.Featureflag;
      }
      feature_.Add(other.feature_);
      if (other.Borndelaytime != 0UL) {
        Borndelaytime = other.Borndelaytime;
      }
      if (other.Interactiveradius != 0) {
        Interactiveradius = other.Interactiveradius;
      }
      if (other.Perceptionradius != 0) {
        Perceptionradius = other.Perceptionradius;
      }
      if (other.Spawnerid.Length != 0) {
        Spawnerid = other.Spawnerid;
      }
      if (other.Questid != 0) {
        Questid = other.Questid;
      }
      if (other.Bubbleperceptionradius != 0) {
        Bubbleperceptionradius = other.Bubbleperceptionradius;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Charid = input.ReadUInt64();
            break;
          }
          case 26: {
            Alias = input.ReadString();
            break;
          }
          case 34: {
            if (data_ == null) {
              data_ = new global::Cmd.NineData();
            }
            input.ReadMessage(data_);
            break;
          }
          case 42: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
          case 50: {
            buffs_.AddEntriesFrom(input, _repeated_buffs_codec);
            break;
          }
          case 56: {
            Isbirth = input.ReadBool();
            break;
          }
          case 66: {
            if (movedata_ == null) {
              movedata_ = new global::Cmd.MoveStateData();
            }
            input.ReadMessage(movedata_);
            break;
          }
          case 72: {
            Featureflag = input.ReadUInt64();
            break;
          }
          case 82:
          case 80: {
            feature_.AddEntriesFrom(input, _repeated_feature_codec);
            break;
          }
          case 88: {
            Borndelaytime = input.ReadUInt64();
            break;
          }
          case 96: {
            Interactiveradius = input.ReadUInt32();
            break;
          }
          case 104: {
            Perceptionradius = input.ReadUInt32();
            break;
          }
          case 114: {
            Spawnerid = input.ReadString();
            break;
          }
          case 120: {
            Questid = input.ReadUInt32();
            break;
          }
          case 128: {
            Bubbleperceptionradius = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 宝箱数据
  /// </summary>
  public sealed partial class MapBoxData : pb::IMessage<MapBoxData> {
    private static readonly pb::MessageParser<MapBoxData> _parser = new pb::MessageParser<MapBoxData>(() => new MapBoxData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapBoxData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapBoxData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapBoxData(MapBoxData other) : this() {
      unlock_ = other.unlock_;
      unlockneeditems_ = other.unlockneeditems_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapBoxData Clone() {
      return new MapBoxData(this);
    }

    /// <summary>Field number for the "unlock" field.</summary>
    public const int UnlockFieldNumber = 1;
    private bool unlock_;
    /// <summary>
    ///  宝箱是否已解锁,true:已解锁,false:未解锁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Unlock {
      get { return unlock_; }
      set {
        unlock_ = value;
      }
    }

    /// <summary>Field number for the "unlockneeditems" field.</summary>
    public const int UnlockneeditemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cmd.MapBoxData.Types.UnlockItem> _repeated_unlockneeditems_codec
        = pb::FieldCodec.ForMessage(18, global::Cmd.MapBoxData.Types.UnlockItem.Parser);
    private readonly pbc::RepeatedField<global::Cmd.MapBoxData.Types.UnlockItem> unlockneeditems_ = new pbc::RepeatedField<global::Cmd.MapBoxData.Types.UnlockItem>();
    /// <summary>
    /// 解锁需要的道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.MapBoxData.Types.UnlockItem> Unlockneeditems {
      get { return unlockneeditems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapBoxData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapBoxData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Unlock != other.Unlock) return false;
      if(!unlockneeditems_.Equals(other.unlockneeditems_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Unlock != false) hash ^= Unlock.GetHashCode();
      hash ^= unlockneeditems_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Unlock != false) {
        output.WriteRawTag(8);
        output.WriteBool(Unlock);
      }
      unlockneeditems_.WriteTo(output, _repeated_unlockneeditems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Unlock != false) {
        size += 1 + 1;
      }
      size += unlockneeditems_.CalculateSize(_repeated_unlockneeditems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapBoxData other) {
      if (other == null) {
        return;
      }
      if (other.Unlock != false) {
        Unlock = other.Unlock;
      }
      unlockneeditems_.Add(other.unlockneeditems_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Unlock = input.ReadBool();
            break;
          }
          case 18: {
            unlockneeditems_.AddEntriesFrom(input, _repeated_unlockneeditems_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MapBoxData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class UnlockItem : pb::IMessage<UnlockItem> {
        private static readonly pb::MessageParser<UnlockItem> _parser = new pb::MessageParser<UnlockItem>(() => new UnlockItem());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UnlockItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Cmd.MapBoxData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UnlockItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UnlockItem(UnlockItem other) : this() {
          id_ = other.id_;
          num_ = other.num_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UnlockItem Clone() {
          return new UnlockItem(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "num" field.</summary>
        public const int NumFieldNumber = 2;
        private uint num_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Num {
          get { return num_; }
          set {
            num_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UnlockItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UnlockItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Num != other.Num) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (Num != 0) hash ^= Num.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (Num != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Num);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (Num != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Num);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UnlockItem other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.Num != 0) {
            Num = other.Num;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                Num = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///  npc地图数据,S->C
  /// </summary>
  public sealed partial class MapEntry : pb::IMessage<MapEntry> {
    private static readonly pb::MessageParser<MapEntry> _parser = new pb::MessageParser<MapEntry>(() => new MapEntry());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapEntry(MapEntry other) : this() {
      guid_ = other.guid_;
      name_ = other.name_;
      cfgid_ = other.cfgid_;
      type_ = other.type_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      dir_ = other.dir_;
      Npcdata = other.npcdata_ != null ? other.Npcdata.Clone() : null;
      Boxdata = other.boxdata_ != null ? other.Boxdata.Clone() : null;
      questOwnerID_ = other.questOwnerID_;
      isprivate_ = other.isprivate_;
      fromid_ = other.fromid_;
      curfighter_ = other.curfighter_;
      interactivestate_ = other.interactivestate_;
      defaultaction_ = other.defaultaction_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapEntry Clone() {
      return new MapEntry(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    /// <summary>
    ///  唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///  名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cfgid" field.</summary>
    public const int CfgidFieldNumber = 3;
    private uint cfgid_;
    /// <summary>
    ///  配置表id,表Npc.xlsx列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cfgid {
      get { return cfgid_; }
      set {
        cfgid_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Cmd.EStageObjectType type_ = 0;
    /// <summary>
    ///  类型,表NpcType.xlsx列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EStageObjectType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 5;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 6;
    private int dir_;
    /// <summary>
    ///  朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "npcdata" field.</summary>
    public const int NpcdataFieldNumber = 7;
    private global::Cmd.MapNpcData npcdata_;
    /// <summary>
    ///  npc数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.MapNpcData Npcdata {
      get { return npcdata_; }
      set {
        npcdata_ = value;
      }
    }

    /// <summary>Field number for the "boxdata" field.</summary>
    public const int BoxdataFieldNumber = 8;
    private global::Cmd.MapBoxData boxdata_;
    /// <summary>
    ///  宝箱数据 invalid by 石海江
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.MapBoxData Boxdata {
      get { return boxdata_; }
      set {
        boxdata_ = value;
      }
    }

    /// <summary>Field number for the "questOwnerID" field.</summary>
    public const int QuestOwnerIDFieldNumber = 9;
    private ulong questOwnerID_;
    /// <summary>
    ///  可见性归属者id,归属者是玩家charid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong QuestOwnerID {
      get { return questOwnerID_; }
      set {
        questOwnerID_ = value;
      }
    }

    /// <summary>Field number for the "isprivate" field.</summary>
    public const int IsprivateFieldNumber = 10;
    private bool isprivate_;
    /// <summary>
    ///  是否私人NPC
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isprivate {
      get { return isprivate_; }
      set {
        isprivate_ = value;
      }
    }

    /// <summary>Field number for the "fromid" field.</summary>
    public const int FromidFieldNumber = 11;
    private ulong fromid_;
    /// <summary>
    ///  任务,创建源NPC的guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Fromid {
      get { return fromid_; }
      set {
        fromid_ = value;
      }
    }

    /// <summary>Field number for the "curfighter" field.</summary>
    public const int CurfighterFieldNumber = 12;
    private bool curfighter_;
    /// <summary>
    ///  是否主控
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Curfighter {
      get { return curfighter_; }
      set {
        curfighter_ = value;
      }
    }

    /// <summary>Field number for the "interactivestate" field.</summary>
    public const int InteractivestateFieldNumber = 13;
    private string interactivestate_ = "";
    /// <summary>
    ///  交互状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Interactivestate {
      get { return interactivestate_; }
      set {
        interactivestate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "defaultaction" field.</summary>
    public const int DefaultactionFieldNumber = 14;
    private string defaultaction_ = "";
    /// <summary>
    ///  默认待机动作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Defaultaction {
      get { return defaultaction_; }
      set {
        defaultaction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Name != other.Name) return false;
      if (Cfgid != other.Cfgid) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Dir != other.Dir) return false;
      if (!object.Equals(Npcdata, other.Npcdata)) return false;
      if (!object.Equals(Boxdata, other.Boxdata)) return false;
      if (QuestOwnerID != other.QuestOwnerID) return false;
      if (Isprivate != other.Isprivate) return false;
      if (Fromid != other.Fromid) return false;
      if (Curfighter != other.Curfighter) return false;
      if (Interactivestate != other.Interactivestate) return false;
      if (Defaultaction != other.Defaultaction) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Cfgid != 0) hash ^= Cfgid.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Dir != 0) hash ^= Dir.GetHashCode();
      if (npcdata_ != null) hash ^= Npcdata.GetHashCode();
      if (boxdata_ != null) hash ^= Boxdata.GetHashCode();
      if (QuestOwnerID != 0UL) hash ^= QuestOwnerID.GetHashCode();
      if (Isprivate != false) hash ^= Isprivate.GetHashCode();
      if (Fromid != 0UL) hash ^= Fromid.GetHashCode();
      if (Curfighter != false) hash ^= Curfighter.GetHashCode();
      if (Interactivestate.Length != 0) hash ^= Interactivestate.GetHashCode();
      if (Defaultaction.Length != 0) hash ^= Defaultaction.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Cfgid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Cfgid);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (pos_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Pos);
      }
      if (Dir != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Dir);
      }
      if (npcdata_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Npcdata);
      }
      if (boxdata_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Boxdata);
      }
      if (QuestOwnerID != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(QuestOwnerID);
      }
      if (Isprivate != false) {
        output.WriteRawTag(80);
        output.WriteBool(Isprivate);
      }
      if (Fromid != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(Fromid);
      }
      if (Curfighter != false) {
        output.WriteRawTag(96);
        output.WriteBool(Curfighter);
      }
      if (Interactivestate.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Interactivestate);
      }
      if (Defaultaction.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Defaultaction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Cfgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cfgid);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Dir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dir);
      }
      if (npcdata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Npcdata);
      }
      if (boxdata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Boxdata);
      }
      if (QuestOwnerID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(QuestOwnerID);
      }
      if (Isprivate != false) {
        size += 1 + 1;
      }
      if (Fromid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Fromid);
      }
      if (Curfighter != false) {
        size += 1 + 1;
      }
      if (Interactivestate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Interactivestate);
      }
      if (Defaultaction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Defaultaction);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapEntry other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Cfgid != 0) {
        Cfgid = other.Cfgid;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Dir != 0) {
        Dir = other.Dir;
      }
      if (other.npcdata_ != null) {
        if (npcdata_ == null) {
          npcdata_ = new global::Cmd.MapNpcData();
        }
        Npcdata.MergeFrom(other.Npcdata);
      }
      if (other.boxdata_ != null) {
        if (boxdata_ == null) {
          boxdata_ = new global::Cmd.MapBoxData();
        }
        Boxdata.MergeFrom(other.Boxdata);
      }
      if (other.QuestOwnerID != 0UL) {
        QuestOwnerID = other.QuestOwnerID;
      }
      if (other.Isprivate != false) {
        Isprivate = other.Isprivate;
      }
      if (other.Fromid != 0UL) {
        Fromid = other.Fromid;
      }
      if (other.Curfighter != false) {
        Curfighter = other.Curfighter;
      }
      if (other.Interactivestate.Length != 0) {
        Interactivestate = other.Interactivestate;
      }
      if (other.Defaultaction.Length != 0) {
        Defaultaction = other.Defaultaction;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Cfgid = input.ReadUInt32();
            break;
          }
          case 32: {
            type_ = (global::Cmd.EStageObjectType) input.ReadEnum();
            break;
          }
          case 42: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 48: {
            Dir = input.ReadInt32();
            break;
          }
          case 58: {
            if (npcdata_ == null) {
              npcdata_ = new global::Cmd.MapNpcData();
            }
            input.ReadMessage(npcdata_);
            break;
          }
          case 66: {
            if (boxdata_ == null) {
              boxdata_ = new global::Cmd.MapBoxData();
            }
            input.ReadMessage(boxdata_);
            break;
          }
          case 72: {
            QuestOwnerID = input.ReadUInt64();
            break;
          }
          case 80: {
            Isprivate = input.ReadBool();
            break;
          }
          case 88: {
            Fromid = input.ReadUInt64();
            break;
          }
          case 96: {
            Curfighter = input.ReadBool();
            break;
          }
          case 106: {
            Interactivestate = input.ReadString();
            break;
          }
          case 114: {
            Defaultaction = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  地图数据,S->C
  /// </summary>
  public sealed partial class AddMapEntry : pb::IMessage<AddMapEntry> {
    private static readonly pb::MessageParser<AddMapEntry> _parser = new pb::MessageParser<AddMapEntry>(() => new AddMapEntry());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddMapEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddMapEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddMapEntry(AddMapEntry other) : this() {
      entry_ = other.entry_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddMapEntry Clone() {
      return new AddMapEntry(this);
    }

    /// <summary>Field number for the "entry" field.</summary>
    public const int EntryFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.MapEntry> _repeated_entry_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.MapEntry.Parser);
    private readonly pbc::RepeatedField<global::Cmd.MapEntry> entry_ = new pbc::RepeatedField<global::Cmd.MapEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.MapEntry> Entry {
      get { return entry_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddMapEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddMapEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entry_.Equals(other.entry_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entry_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entry_.WriteTo(output, _repeated_entry_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entry_.CalculateSize(_repeated_entry_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddMapEntry other) {
      if (other == null) {
        return;
      }
      entry_.Add(other.entry_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            entry_.AddEntriesFrom(input, _repeated_entry_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  弹道,S->C
  /// </summary>
  public sealed partial class MapMissile : pb::IMessage<MapMissile> {
    private static readonly pb::MessageParser<MapMissile> _parser = new pb::MessageParser<MapMissile>(() => new MapMissile());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapMissile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapMissile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapMissile(MapMissile other) : this() {
      id_ = other.id_;
      skillID_ = other.skillID_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      Velspeed = other.velspeed_ != null ? other.Velspeed.Clone() : null;
      Gravity = other.gravity_ != null ? other.Gravity.Clone() : null;
      masterid_ = other.masterid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapMissile Clone() {
      return new MapMissile(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    /// <summary>
    ///  唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "skillID" field.</summary>
    public const int SkillIDFieldNumber = 2;
    private uint skillID_;
    /// <summary>
    ///  技能id,表Skill.xlsx列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillID {
      get { return skillID_; }
      set {
        skillID_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "velspeed" field.</summary>
    public const int VelspeedFieldNumber = 4;
    private global::Cmd.ScenePos velspeed_;
    /// <summary>
    ///  初始速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Velspeed {
      get { return velspeed_; }
      set {
        velspeed_ = value;
      }
    }

    /// <summary>Field number for the "gravity" field.</summary>
    public const int GravityFieldNumber = 5;
    private global::Cmd.ScenePos gravity_;
    /// <summary>
    ///  重力加速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Gravity {
      get { return gravity_; }
      set {
        gravity_ = value;
      }
    }

    /// <summary>Field number for the "masterid" field.</summary>
    public const int MasteridFieldNumber = 6;
    private ulong masterid_;
    /// <summary>
    ///  施法者guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Masterid {
      get { return masterid_; }
      set {
        masterid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapMissile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapMissile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (SkillID != other.SkillID) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Velspeed, other.Velspeed)) return false;
      if (!object.Equals(Gravity, other.Gravity)) return false;
      if (Masterid != other.Masterid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (SkillID != 0) hash ^= SkillID.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (velspeed_ != null) hash ^= Velspeed.GetHashCode();
      if (gravity_ != null) hash ^= Gravity.GetHashCode();
      if (Masterid != 0UL) hash ^= Masterid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (SkillID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SkillID);
      }
      if (pos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pos);
      }
      if (velspeed_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Velspeed);
      }
      if (gravity_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Gravity);
      }
      if (Masterid != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Masterid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (SkillID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillID);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (velspeed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velspeed);
      }
      if (gravity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gravity);
      }
      if (Masterid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Masterid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapMissile other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.SkillID != 0) {
        SkillID = other.SkillID;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.velspeed_ != null) {
        if (velspeed_ == null) {
          velspeed_ = new global::Cmd.ScenePos();
        }
        Velspeed.MergeFrom(other.Velspeed);
      }
      if (other.gravity_ != null) {
        if (gravity_ == null) {
          gravity_ = new global::Cmd.ScenePos();
        }
        Gravity.MergeFrom(other.Gravity);
      }
      if (other.Masterid != 0UL) {
        Masterid = other.Masterid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            SkillID = input.ReadUInt32();
            break;
          }
          case 26: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 34: {
            if (velspeed_ == null) {
              velspeed_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(velspeed_);
            break;
          }
          case 42: {
            if (gravity_ == null) {
              gravity_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(gravity_);
            break;
          }
          case 48: {
            Masterid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  unused
  /// </summary>
  public sealed partial class AddMapMissile : pb::IMessage<AddMapMissile> {
    private static readonly pb::MessageParser<AddMapMissile> _parser = new pb::MessageParser<AddMapMissile>(() => new AddMapMissile());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddMapMissile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddMapMissile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddMapMissile(AddMapMissile other) : this() {
      missiles_ = other.missiles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddMapMissile Clone() {
      return new AddMapMissile(this);
    }

    /// <summary>Field number for the "missiles" field.</summary>
    public const int MissilesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.MapMissile> _repeated_missiles_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.MapMissile.Parser);
    private readonly pbc::RepeatedField<global::Cmd.MapMissile> missiles_ = new pbc::RepeatedField<global::Cmd.MapMissile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.MapMissile> Missiles {
      get { return missiles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddMapMissile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddMapMissile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!missiles_.Equals(other.missiles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= missiles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      missiles_.WriteTo(output, _repeated_missiles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += missiles_.CalculateSize(_repeated_missiles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddMapMissile other) {
      if (other == null) {
        return;
      }
      missiles_.Add(other.missiles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            missiles_.AddEntriesFrom(input, _repeated_missiles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapCmdEnd : pb::IMessage<MapCmdEnd> {
    private static readonly pb::MessageParser<MapCmdEnd> _parser = new pb::MessageParser<MapCmdEnd>(() => new MapCmdEnd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapCmdEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapCmdEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapCmdEnd(MapCmdEnd other) : this() {
      playerCount_ = other.playerCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapCmdEnd Clone() {
      return new MapCmdEnd(this);
    }

    /// <summary>Field number for the "player_count" field.</summary>
    public const int PlayerCountFieldNumber = 1;
    private uint playerCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerCount {
      get { return playerCount_; }
      set {
        playerCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapCmdEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapCmdEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerCount != other.PlayerCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerCount != 0) hash ^= PlayerCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayerCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapCmdEnd other) {
      if (other == null) {
        return;
      }
      if (other.PlayerCount != 0) {
        PlayerCount = other.PlayerCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  删除单位,S->C
  /// </summary>
  public sealed partial class DeleteEntryUserCmd : pb::IMessage<DeleteEntryUserCmd> {
    private static readonly pb::MessageParser<DeleteEntryUserCmd> _parser = new pb::MessageParser<DeleteEntryUserCmd>(() => new DeleteEntryUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteEntryUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteEntryUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteEntryUserCmd(DeleteEntryUserCmd other) : this() {
      list_ = other.list_.Clone();
      fadeout_ = other.fadeout_;
      deltype_ = other.deltype_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteEntryUserCmd Clone() {
      return new DeleteEntryUserCmd(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_list_codec
        = pb::FieldCodec.ForUInt64(26);
    private readonly pbc::RepeatedField<ulong> list_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///  唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> List {
      get { return list_; }
    }

    /// <summary>Field number for the "fadeout" field.</summary>
    public const int FadeoutFieldNumber = 4;
    private uint fadeout_;
    /// <summary>
    ///  非零开启 淡出 单位毫秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fadeout {
      get { return fadeout_; }
      set {
        fadeout_ = value;
      }
    }

    /// <summary>Field number for the "deltype" field.</summary>
    public const int DeltypeFieldNumber = 5;
    private string deltype_ = "";
    /// <summary>
    ///  删除类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Deltype {
      get { return deltype_; }
      set {
        deltype_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteEntryUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteEntryUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      if (Fadeout != other.Fadeout) return false;
      if (Deltype != other.Deltype) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (Fadeout != 0) hash ^= Fadeout.GetHashCode();
      if (Deltype.Length != 0) hash ^= Deltype.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (Fadeout != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Fadeout);
      }
      if (Deltype.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Deltype);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (Fadeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fadeout);
      }
      if (Deltype.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Deltype);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteEntryUserCmd other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      if (other.Fadeout != 0) {
        Fadeout = other.Fadeout;
      }
      if (other.Deltype.Length != 0) {
        Deltype = other.Deltype;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26:
          case 24: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
          case 32: {
            Fadeout = input.ReadUInt32();
            break;
          }
          case 42: {
            Deltype = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  抛物线位置,S->C
  /// </summary>
  public sealed partial class TestParabolaPosCmd : pb::IMessage<TestParabolaPosCmd> {
    private static readonly pb::MessageParser<TestParabolaPosCmd> _parser = new pb::MessageParser<TestParabolaPosCmd>(() => new TestParabolaPosCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestParabolaPosCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestParabolaPosCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestParabolaPosCmd(TestParabolaPosCmd other) : this() {
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestParabolaPosCmd Clone() {
      return new TestParabolaPosCmd(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private global::Cmd.ScenePos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestParabolaPosCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestParabolaPosCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestParabolaPosCmd other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  锁敌,S->C
  /// </summary>
  public sealed partial class LockTargetCmd : pb::IMessage<LockTargetCmd> {
    private static readonly pb::MessageParser<LockTargetCmd> _parser = new pb::MessageParser<LockTargetCmd>(() => new LockTargetCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LockTargetCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockTargetCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockTargetCmd(LockTargetCmd other) : this() {
      entryid_ = other.entryid_;
      targetid_ = other.targetid_;
      autoFight_ = other.autoFight_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockTargetCmd Clone() {
      return new LockTargetCmd(this);
    }

    /// <summary>Field number for the "entryid" field.</summary>
    public const int EntryidFieldNumber = 4;
    private ulong entryid_;
    /// <summary>
    ///  唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Entryid {
      get { return entryid_; }
      set {
        entryid_ = value;
      }
    }

    /// <summary>Field number for the "targetid" field.</summary>
    public const int TargetidFieldNumber = 5;
    private ulong targetid_;
    /// <summary>
    ///  目标唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Targetid {
      get { return targetid_; }
      set {
        targetid_ = value;
      }
    }

    /// <summary>Field number for the "auto_fight" field.</summary>
    public const int AutoFightFieldNumber = 6;
    private bool autoFight_;
    /// <summary>
    ///  锁定后自动进入战斗状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoFight {
      get { return autoFight_; }
      set {
        autoFight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LockTargetCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LockTargetCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entryid != other.Entryid) return false;
      if (Targetid != other.Targetid) return false;
      if (AutoFight != other.AutoFight) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Entryid != 0UL) hash ^= Entryid.GetHashCode();
      if (Targetid != 0UL) hash ^= Targetid.GetHashCode();
      if (AutoFight != false) hash ^= AutoFight.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Entryid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Entryid);
      }
      if (Targetid != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Targetid);
      }
      if (AutoFight != false) {
        output.WriteRawTag(48);
        output.WriteBool(AutoFight);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Entryid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Entryid);
      }
      if (Targetid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Targetid);
      }
      if (AutoFight != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LockTargetCmd other) {
      if (other == null) {
        return;
      }
      if (other.Entryid != 0UL) {
        Entryid = other.Entryid;
      }
      if (other.Targetid != 0UL) {
        Targetid = other.Targetid;
      }
      if (other.AutoFight != false) {
        AutoFight = other.AutoFight;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 32: {
            Entryid = input.ReadUInt64();
            break;
          }
          case 40: {
            Targetid = input.ReadUInt64();
            break;
          }
          case 48: {
            AutoFight = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  停止锁敌,S->C
  /// </summary>
  public sealed partial class UnlockTargetCmd : pb::IMessage<UnlockTargetCmd> {
    private static readonly pb::MessageParser<UnlockTargetCmd> _parser = new pb::MessageParser<UnlockTargetCmd>(() => new UnlockTargetCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnlockTargetCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockTargetCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockTargetCmd(UnlockTargetCmd other) : this() {
      entryid_ = other.entryid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockTargetCmd Clone() {
      return new UnlockTargetCmd(this);
    }

    /// <summary>Field number for the "entryid" field.</summary>
    public const int EntryidFieldNumber = 3;
    private ulong entryid_;
    /// <summary>
    ///  guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Entryid {
      get { return entryid_; }
      set {
        entryid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnlockTargetCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnlockTargetCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entryid != other.Entryid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Entryid != 0UL) hash ^= Entryid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Entryid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Entryid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Entryid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Entryid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnlockTargetCmd other) {
      if (other == null) {
        return;
      }
      if (other.Entryid != 0UL) {
        Entryid = other.Entryid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Entryid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  同步方向,S->C
  /// </summary>
  public sealed partial class SyncDirectionCmd : pb::IMessage<SyncDirectionCmd> {
    private static readonly pb::MessageParser<SyncDirectionCmd> _parser = new pb::MessageParser<SyncDirectionCmd>(() => new SyncDirectionCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncDirectionCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncDirectionCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncDirectionCmd(SyncDirectionCmd other) : this() {
      guid_ = other.guid_;
      dir_ = other.dir_;
      instantrotate_ = other.instantrotate_;
      playaction_ = other.playaction_;
      curdir_ = other.curdir_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncDirectionCmd Clone() {
      return new SyncDirectionCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 3;
    private ulong guid_;
    /// <summary>
    ///  唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 4;
    private int dir_;
    /// <summary>
    ///  目标方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "instantrotate" field.</summary>
    public const int InstantrotateFieldNumber = 5;
    private bool instantrotate_;
    /// <summary>
    ///  是否计入动作cd
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Instantrotate {
      get { return instantrotate_; }
      set {
        instantrotate_ = value;
      }
    }

    /// <summary>Field number for the "playaction" field.</summary>
    public const int PlayactionFieldNumber = 6;
    private bool playaction_;
    /// <summary>
    ///  是否播放转向动作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Playaction {
      get { return playaction_; }
      set {
        playaction_ = value;
      }
    }

    /// <summary>Field number for the "curdir" field.</summary>
    public const int CurdirFieldNumber = 7;
    private int curdir_;
    /// <summary>
    ///  当前方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Curdir {
      get { return curdir_; }
      set {
        curdir_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncDirectionCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncDirectionCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Dir != other.Dir) return false;
      if (Instantrotate != other.Instantrotate) return false;
      if (Playaction != other.Playaction) return false;
      if (Curdir != other.Curdir) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Dir != 0) hash ^= Dir.GetHashCode();
      if (Instantrotate != false) hash ^= Instantrotate.GetHashCode();
      if (Playaction != false) hash ^= Playaction.GetHashCode();
      if (Curdir != 0) hash ^= Curdir.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Guid);
      }
      if (Dir != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Dir);
      }
      if (Instantrotate != false) {
        output.WriteRawTag(40);
        output.WriteBool(Instantrotate);
      }
      if (Playaction != false) {
        output.WriteRawTag(48);
        output.WriteBool(Playaction);
      }
      if (Curdir != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Curdir);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Dir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dir);
      }
      if (Instantrotate != false) {
        size += 1 + 1;
      }
      if (Playaction != false) {
        size += 1 + 1;
      }
      if (Curdir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Curdir);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncDirectionCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Dir != 0) {
        Dir = other.Dir;
      }
      if (other.Instantrotate != false) {
        Instantrotate = other.Instantrotate;
      }
      if (other.Playaction != false) {
        Playaction = other.Playaction;
      }
      if (other.Curdir != 0) {
        Curdir = other.Curdir;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Guid = input.ReadUInt64();
            break;
          }
          case 32: {
            Dir = input.ReadInt32();
            break;
          }
          case 40: {
            Instantrotate = input.ReadBool();
            break;
          }
          case 48: {
            Playaction = input.ReadBool();
            break;
          }
          case 56: {
            Curdir = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  npc注视对象
  /// </summary>
  public sealed partial class SyncNpcWatchCmd : pb::IMessage<SyncNpcWatchCmd> {
    private static readonly pb::MessageParser<SyncNpcWatchCmd> _parser = new pb::MessageParser<SyncNpcWatchCmd>(() => new SyncNpcWatchCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncNpcWatchCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncNpcWatchCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncNpcWatchCmd(SyncNpcWatchCmd other) : this() {
      npcid_ = other.npcid_;
      guid_ = other.guid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncNpcWatchCmd Clone() {
      return new SyncNpcWatchCmd(this);
    }

    /// <summary>Field number for the "npcid" field.</summary>
    public const int NpcidFieldNumber = 3;
    private ulong npcid_;
    /// <summary>
    ///  npc唯一id,表Npc.xlsx列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Npcid {
      get { return npcid_; }
      set {
        npcid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 4;
    private ulong guid_;
    /// <summary>
    ///  注视对象唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncNpcWatchCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncNpcWatchCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Npcid != other.Npcid) return false;
      if (Guid != other.Guid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Npcid != 0UL) hash ^= Npcid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Npcid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Npcid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Guid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Npcid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Npcid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncNpcWatchCmd other) {
      if (other == null) {
        return;
      }
      if (other.Npcid != 0UL) {
        Npcid = other.Npcid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Npcid = input.ReadUInt64();
            break;
          }
          case 32: {
            Guid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  可见性同步,S->C
  /// </summary>
  public sealed partial class SyncNpcVisibleStatusCmd : pb::IMessage<SyncNpcVisibleStatusCmd> {
    private static readonly pb::MessageParser<SyncNpcVisibleStatusCmd> _parser = new pb::MessageParser<SyncNpcVisibleStatusCmd>(() => new SyncNpcVisibleStatusCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncNpcVisibleStatusCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncNpcVisibleStatusCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncNpcVisibleStatusCmd(SyncNpcVisibleStatusCmd other) : this() {
      npcs_ = other.npcs_.Clone();
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncNpcVisibleStatusCmd Clone() {
      return new SyncNpcVisibleStatusCmd(this);
    }

    /// <summary>Field number for the "npcs" field.</summary>
    public const int NpcsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.MapNpcVisibleStatusData> _repeated_npcs_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.MapNpcVisibleStatusData.Parser);
    private readonly pbc::RepeatedField<global::Cmd.MapNpcVisibleStatusData> npcs_ = new pbc::RepeatedField<global::Cmd.MapNpcVisibleStatusData>();
    /// <summary>
    ///  可见性数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.MapNpcVisibleStatusData> Npcs {
      get { return npcs_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Cmd.SyncNpcDataType type_ = 0;
    /// <summary>
    ///  同步方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.SyncNpcDataType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncNpcVisibleStatusCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncNpcVisibleStatusCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!npcs_.Equals(other.npcs_)) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= npcs_.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      npcs_.WriteTo(output, _repeated_npcs_codec);
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += npcs_.CalculateSize(_repeated_npcs_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncNpcVisibleStatusCmd other) {
      if (other == null) {
        return;
      }
      npcs_.Add(other.npcs_);
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            npcs_.AddEntriesFrom(input, _repeated_npcs_codec);
            break;
          }
          case 32: {
            type_ = (global::Cmd.SyncNpcDataType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  物件私人状态
  /// </summary>
  public sealed partial class MapObjectStatus : pb::IMessage<MapObjectStatus> {
    private static readonly pb::MessageParser<MapObjectStatus> _parser = new pb::MessageParser<MapObjectStatus>(() => new MapObjectStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapObjectStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapObjectStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapObjectStatus(MapObjectStatus other) : this() {
      cfgid_ = other.cfgid_;
      status_ = other.status_;
      alias_ = other.alias_;
      guids_ = other.guids_.Clone();
      spawnerid_ = other.spawnerid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapObjectStatus Clone() {
      return new MapObjectStatus(this);
    }

    /// <summary>Field number for the "cfgid" field.</summary>
    public const int CfgidFieldNumber = 1;
    private uint cfgid_;
    /// <summary>
    ///  配置表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cfgid {
      get { return cfgid_; }
      set {
        cfgid_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private string status_ = "";
    /// <summary>
    ///  状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 3;
    private string alias_ = "";
    /// <summary>
    ///  alias 标识npc(别名)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guids" field.</summary>
    public const int GuidsFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_guids_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> guids_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// 对象列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Guids {
      get { return guids_; }
    }

    /// <summary>Field number for the "spawnerid" field.</summary>
    public const int SpawneridFieldNumber = 5;
    private string spawnerid_ = "";
    /// <summary>
    ///  SpawnerID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Spawnerid {
      get { return spawnerid_; }
      set {
        spawnerid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapObjectStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapObjectStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cfgid != other.Cfgid) return false;
      if (Status != other.Status) return false;
      if (Alias != other.Alias) return false;
      if(!guids_.Equals(other.guids_)) return false;
      if (Spawnerid != other.Spawnerid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cfgid != 0) hash ^= Cfgid.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (Alias.Length != 0) hash ^= Alias.GetHashCode();
      hash ^= guids_.GetHashCode();
      if (Spawnerid.Length != 0) hash ^= Spawnerid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cfgid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Cfgid);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Status);
      }
      if (Alias.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Alias);
      }
      guids_.WriteTo(output, _repeated_guids_codec);
      if (Spawnerid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Spawnerid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cfgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cfgid);
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (Alias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      size += guids_.CalculateSize(_repeated_guids_codec);
      if (Spawnerid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Spawnerid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapObjectStatus other) {
      if (other == null) {
        return;
      }
      if (other.Cfgid != 0) {
        Cfgid = other.Cfgid;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.Alias.Length != 0) {
        Alias = other.Alias;
      }
      guids_.Add(other.guids_);
      if (other.Spawnerid.Length != 0) {
        Spawnerid = other.Spawnerid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Cfgid = input.ReadUInt32();
            break;
          }
          case 18: {
            Status = input.ReadString();
            break;
          }
          case 26: {
            Alias = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            guids_.AddEntriesFrom(input, _repeated_guids_codec);
            break;
          }
          case 42: {
            Spawnerid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  同步npc的私人数据,S->C
  /// </summary>
  public sealed partial class SyncNpcPrivateDataCmd : pb::IMessage<SyncNpcPrivateDataCmd> {
    private static readonly pb::MessageParser<SyncNpcPrivateDataCmd> _parser = new pb::MessageParser<SyncNpcPrivateDataCmd>(() => new SyncNpcPrivateDataCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncNpcPrivateDataCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncNpcPrivateDataCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncNpcPrivateDataCmd(SyncNpcPrivateDataCmd other) : this() {
      npcs_ = other.npcs_.Clone();
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncNpcPrivateDataCmd Clone() {
      return new SyncNpcPrivateDataCmd(this);
    }

    /// <summary>Field number for the "npcs" field.</summary>
    public const int NpcsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cmd.MapNpcPrivateData> _repeated_npcs_codec
        = pb::FieldCodec.ForMessage(10, global::Cmd.MapNpcPrivateData.Parser);
    private readonly pbc::RepeatedField<global::Cmd.MapNpcPrivateData> npcs_ = new pbc::RepeatedField<global::Cmd.MapNpcPrivateData>();
    /// <summary>
    ///  npc数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.MapNpcPrivateData> Npcs {
      get { return npcs_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Cmd.SyncNpcDataType type_ = 0;
    /// <summary>
    ///  同步方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.SyncNpcDataType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncNpcPrivateDataCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncNpcPrivateDataCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!npcs_.Equals(other.npcs_)) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= npcs_.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      npcs_.WriteTo(output, _repeated_npcs_codec);
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += npcs_.CalculateSize(_repeated_npcs_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncNpcPrivateDataCmd other) {
      if (other == null) {
        return;
      }
      npcs_.Add(other.npcs_);
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            npcs_.AddEntriesFrom(input, _repeated_npcs_codec);
            break;
          }
          case 16: {
            type_ = (global::Cmd.SyncNpcDataType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  到达地图块,C->S
  /// </summary>
  public sealed partial class BlockSceneMapCmd : pb::IMessage<BlockSceneMapCmd> {
    private static readonly pb::MessageParser<BlockSceneMapCmd> _parser = new pb::MessageParser<BlockSceneMapCmd>(() => new BlockSceneMapCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockSceneMapCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockSceneMapCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockSceneMapCmd(BlockSceneMapCmd other) : this() {
      type_ = other.type_;
      blockid_ = other.blockid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockSceneMapCmd Clone() {
      return new BlockSceneMapCmd(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Cmd.MapBlockType type_ = 0;
    /// <summary>
    ///  地图块类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.MapBlockType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "blockid" field.</summary>
    public const int BlockidFieldNumber = 2;
    private uint blockid_;
    /// <summary>
    ///  id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Blockid {
      get { return blockid_; }
      set {
        blockid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockSceneMapCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockSceneMapCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Blockid != other.Blockid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Blockid != 0) hash ^= Blockid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Blockid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Blockid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Blockid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Blockid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockSceneMapCmd other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Blockid != 0) {
        Blockid = other.Blockid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Cmd.MapBlockType) input.ReadEnum();
            break;
          }
          case 16: {
            Blockid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  NPC特性更新,S->C
  /// </summary>
  public sealed partial class NpcFeaturesUpdateCmd : pb::IMessage<NpcFeaturesUpdateCmd> {
    private static readonly pb::MessageParser<NpcFeaturesUpdateCmd> _parser = new pb::MessageParser<NpcFeaturesUpdateCmd>(() => new NpcFeaturesUpdateCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcFeaturesUpdateCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcFeaturesUpdateCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcFeaturesUpdateCmd(NpcFeaturesUpdateCmd other) : this() {
      guid_ = other.guid_;
      featureflag_ = other.featureflag_;
      feature_ = other.feature_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcFeaturesUpdateCmd Clone() {
      return new NpcFeaturesUpdateCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    /// <summary>
    ///  npc唯一id    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "featureflag" field.</summary>
    public const int FeatureflagFieldNumber = 2;
    private ulong featureflag_;
    /// <summary>
    ///  npc特性状态标志
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Featureflag {
      get { return featureflag_; }
      set {
        featureflag_ = value;
      }
    }

    /// <summary>Field number for the "feature" field.</summary>
    public const int FeatureFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_feature_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> feature_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  特性id,表FeaturesType.xlsx中列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Feature {
      get { return feature_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NpcFeaturesUpdateCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NpcFeaturesUpdateCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Featureflag != other.Featureflag) return false;
      if(!feature_.Equals(other.feature_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Featureflag != 0UL) hash ^= Featureflag.GetHashCode();
      hash ^= feature_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (Featureflag != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Featureflag);
      }
      feature_.WriteTo(output, _repeated_feature_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Featureflag != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Featureflag);
      }
      size += feature_.CalculateSize(_repeated_feature_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NpcFeaturesUpdateCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Featureflag != 0UL) {
        Featureflag = other.Featureflag;
      }
      feature_.Add(other.feature_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 16: {
            Featureflag = input.ReadUInt64();
            break;
          }
          case 26:
          case 24: {
            feature_.AddEntriesFrom(input, _repeated_feature_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  九屏同步,S->C
  /// </summary>
  public sealed partial class NpcNineSyncCmd : pb::IMessage<NpcNineSyncCmd> {
    private static readonly pb::MessageParser<NpcNineSyncCmd> _parser = new pb::MessageParser<NpcNineSyncCmd>(() => new NpcNineSyncCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcNineSyncCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcNineSyncCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcNineSyncCmd(NpcNineSyncCmd other) : this() {
      guid_ = other.guid_;
      attrs_ = other.attrs_.Clone();
      Data = other.data_ != null ? other.Data.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcNineSyncCmd Clone() {
      return new NpcNineSyncCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 3;
    private ulong guid_;
    /// <summary>
    ///  唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Cmd.UserAttr> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(34, global::Cmd.UserAttr.Parser);
    private readonly pbc::RepeatedField<global::Cmd.UserAttr> attrs_ = new pbc::RepeatedField<global::Cmd.UserAttr>();
    /// <summary>
    ///  属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.UserAttr> Attrs {
      get { return attrs_; }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 5;
    private global::Cmd.NineData data_;
    /// <summary>
    ///  九屏数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.NineData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NpcNineSyncCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NpcNineSyncCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if(!attrs_.Equals(other.attrs_)) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      hash ^= attrs_.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Guid);
      }
      attrs_.WriteTo(output, _repeated_attrs_codec);
      if (data_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NpcNineSyncCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      attrs_.Add(other.attrs_);
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::Cmd.NineData();
        }
        Data.MergeFrom(other.Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Guid = input.ReadUInt64();
            break;
          }
          case 34: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
          case 42: {
            if (data_ == null) {
              data_ = new global::Cmd.NineData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Item九屏同步,S->C
  /// </summary>
  public sealed partial class ItemNineSyncCmd : pb::IMessage<ItemNineSyncCmd> {
    private static readonly pb::MessageParser<ItemNineSyncCmd> _parser = new pb::MessageParser<ItemNineSyncCmd>(() => new ItemNineSyncCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemNineSyncCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemNineSyncCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemNineSyncCmd(ItemNineSyncCmd other) : this() {
      guid_ = other.guid_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      itementrydata_ = other.itementrydata_.Clone();
      state_ = other.state_;
      iscollected_ = other.iscollected_;
      energy_ = other.energy_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemNineSyncCmd Clone() {
      return new ItemNineSyncCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    /// <summary>
    ///  唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "itementrydata" field.</summary>
    public const int ItementrydataFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.ItemEntryData> _repeated_itementrydata_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.ItemEntryData.Parser);
    private readonly pbc::RepeatedField<global::Cmd.ItemEntryData> itementrydata_ = new pbc::RepeatedField<global::Cmd.ItemEntryData>();
    /// <summary>
    ///  枚举数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.ItemEntryData> Itementrydata {
      get { return itementrydata_; }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 4;
    private string state_ = "";
    /// <summary>
    ///  物件状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string State {
      get { return state_; }
      set {
        state_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "iscollected" field.</summary>
    public const int IscollectedFieldNumber = 5;
    private bool iscollected_;
    /// <summary>
    ///  是否被采集
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Iscollected {
      get { return iscollected_; }
      set {
        iscollected_ = value;
      }
    }

    /// <summary>Field number for the "energy" field.</summary>
    public const int EnergyFieldNumber = 6;
    private uint energy_;
    /// <summary>
    ///  能量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Energy {
      get { return energy_; }
      set {
        energy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemNineSyncCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemNineSyncCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if(!itementrydata_.Equals(other.itementrydata_)) return false;
      if (State != other.State) return false;
      if (Iscollected != other.Iscollected) return false;
      if (Energy != other.Energy) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      hash ^= itementrydata_.GetHashCode();
      if (State.Length != 0) hash ^= State.GetHashCode();
      if (Iscollected != false) hash ^= Iscollected.GetHashCode();
      if (Energy != 0) hash ^= Energy.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      itementrydata_.WriteTo(output, _repeated_itementrydata_codec);
      if (State.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(State);
      }
      if (Iscollected != false) {
        output.WriteRawTag(40);
        output.WriteBool(Iscollected);
      }
      if (Energy != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Energy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      size += itementrydata_.CalculateSize(_repeated_itementrydata_codec);
      if (State.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(State);
      }
      if (Iscollected != false) {
        size += 1 + 1;
      }
      if (Energy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Energy);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemNineSyncCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      itementrydata_.Add(other.itementrydata_);
      if (other.State.Length != 0) {
        State = other.State;
      }
      if (other.Iscollected != false) {
        Iscollected = other.Iscollected;
      }
      if (other.Energy != 0) {
        Energy = other.Energy;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 18: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 26: {
            itementrydata_.AddEntriesFrom(input, _repeated_itementrydata_codec);
            break;
          }
          case 34: {
            State = input.ReadString();
            break;
          }
          case 40: {
            Iscollected = input.ReadBool();
            break;
          }
          case 48: {
            Energy = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  离开原地副本,C->S
  /// </summary>
  public sealed partial class LeaveCopyCmd : pb::IMessage<LeaveCopyCmd> {
    private static readonly pb::MessageParser<LeaveCopyCmd> _parser = new pb::MessageParser<LeaveCopyCmd>(() => new LeaveCopyCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveCopyCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveCopyCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveCopyCmd(LeaveCopyCmd other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveCopyCmd Clone() {
      return new LeaveCopyCmd(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveCopyCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveCopyCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveCopyCmd other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class MoveStateCmd : pb::IMessage<MoveStateCmd> {
    private static readonly pb::MessageParser<MoveStateCmd> _parser = new pb::MessageParser<MoveStateCmd>(() => new MoveStateCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveStateCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveStateCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveStateCmd(MoveStateCmd other) : this() {
      guid_ = other.guid_;
      state_ = other.state_;
      substate_ = other.substate_;
      Curpos = other.curpos_ != null ? other.Curpos.Clone() : null;
      Targetpos = other.targetpos_ != null ? other.Targetpos.Clone() : null;
      rotate_ = other.rotate_;
      movespeed_ = other.movespeed_;
      clientDt_ = other.clientDt_;
      Jumpdata = other.jumpdata_ != null ? other.Jumpdata.Clone() : null;
      Vehicledata = other.vehicledata_ != null ? other.Vehicledata.Clone() : null;
      stopaction_ = other.stopaction_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveStateCmd Clone() {
      return new MoveStateCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    /// <summary>
    /// 移动对象guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private global::Cmd.EMoveStateType state_ = 0;
    /// <summary>
    /// 移动方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EMoveStateType State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "substate" field.</summary>
    public const int SubstateFieldNumber = 3;
    private global::Cmd.EMoveSubStateType substate_ = 0;
    /// <summary>
    /// 移动子方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EMoveSubStateType Substate {
      get { return substate_; }
      set {
        substate_ = value;
      }
    }

    /// <summary>Field number for the "curpos" field.</summary>
    public const int CurposFieldNumber = 4;
    private global::Cmd.ScenePos curpos_;
    /// <summary>
    ///  当前坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Curpos {
      get { return curpos_; }
      set {
        curpos_ = value;
      }
    }

    /// <summary>Field number for the "targetpos" field.</summary>
    public const int TargetposFieldNumber = 5;
    private global::Cmd.ScenePos targetpos_;
    /// <summary>
    /// 目標位置，这个值只有在ai控制移动中有效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Targetpos {
      get { return targetpos_; }
      set {
        targetpos_ = value;
      }
    }

    /// <summary>Field number for the "rotate" field.</summary>
    public const int RotateFieldNumber = 6;
    private int rotate_;
    /// <summary>
    ///  移动方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rotate {
      get { return rotate_; }
      set {
        rotate_ = value;
      }
    }

    /// <summary>Field number for the "movespeed" field.</summary>
    public const int MovespeedFieldNumber = 7;
    private float movespeed_;
    /// <summary>
    ///  移动速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Movespeed {
      get { return movespeed_; }
      set {
        movespeed_ = value;
      }
    }

    /// <summary>Field number for the "clientDt" field.</summary>
    public const int ClientDtFieldNumber = 8;
    private uint clientDt_;
    /// <summary>
    /// 客户端时机的移动时间(ms)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClientDt {
      get { return clientDt_; }
      set {
        clientDt_ = value;
      }
    }

    /// <summary>Field number for the "jumpdata" field.</summary>
    public const int JumpdataFieldNumber = 9;
    private global::Cmd.JumpData jumpdata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.JumpData Jumpdata {
      get { return jumpdata_; }
      set {
        jumpdata_ = value;
      }
    }

    /// <summary>Field number for the "vehicledata" field.</summary>
    public const int VehicledataFieldNumber = 10;
    private global::Cmd.VehicleData vehicledata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.VehicleData Vehicledata {
      get { return vehicledata_; }
      set {
        vehicledata_ = value;
      }
    }

    /// <summary>Field number for the "stopaction" field.</summary>
    public const int StopactionFieldNumber = 11;
    private bool stopaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Stopaction {
      get { return stopaction_; }
      set {
        stopaction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveStateCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveStateCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (State != other.State) return false;
      if (Substate != other.Substate) return false;
      if (!object.Equals(Curpos, other.Curpos)) return false;
      if (!object.Equals(Targetpos, other.Targetpos)) return false;
      if (Rotate != other.Rotate) return false;
      if (Movespeed != other.Movespeed) return false;
      if (ClientDt != other.ClientDt) return false;
      if (!object.Equals(Jumpdata, other.Jumpdata)) return false;
      if (!object.Equals(Vehicledata, other.Vehicledata)) return false;
      if (Stopaction != other.Stopaction) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (Substate != 0) hash ^= Substate.GetHashCode();
      if (curpos_ != null) hash ^= Curpos.GetHashCode();
      if (targetpos_ != null) hash ^= Targetpos.GetHashCode();
      if (Rotate != 0) hash ^= Rotate.GetHashCode();
      if (Movespeed != 0F) hash ^= Movespeed.GetHashCode();
      if (ClientDt != 0) hash ^= ClientDt.GetHashCode();
      if (jumpdata_ != null) hash ^= Jumpdata.GetHashCode();
      if (vehicledata_ != null) hash ^= Vehicledata.GetHashCode();
      if (Stopaction != false) hash ^= Stopaction.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      if (Substate != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Substate);
      }
      if (curpos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Curpos);
      }
      if (targetpos_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Targetpos);
      }
      if (Rotate != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Rotate);
      }
      if (Movespeed != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Movespeed);
      }
      if (ClientDt != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ClientDt);
      }
      if (jumpdata_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Jumpdata);
      }
      if (vehicledata_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Vehicledata);
      }
      if (Stopaction != false) {
        output.WriteRawTag(88);
        output.WriteBool(Stopaction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (Substate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Substate);
      }
      if (curpos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Curpos);
      }
      if (targetpos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Targetpos);
      }
      if (Rotate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rotate);
      }
      if (Movespeed != 0F) {
        size += 1 + 4;
      }
      if (ClientDt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClientDt);
      }
      if (jumpdata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Jumpdata);
      }
      if (vehicledata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vehicledata);
      }
      if (Stopaction != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveStateCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Substate != 0) {
        Substate = other.Substate;
      }
      if (other.curpos_ != null) {
        if (curpos_ == null) {
          curpos_ = new global::Cmd.ScenePos();
        }
        Curpos.MergeFrom(other.Curpos);
      }
      if (other.targetpos_ != null) {
        if (targetpos_ == null) {
          targetpos_ = new global::Cmd.ScenePos();
        }
        Targetpos.MergeFrom(other.Targetpos);
      }
      if (other.Rotate != 0) {
        Rotate = other.Rotate;
      }
      if (other.Movespeed != 0F) {
        Movespeed = other.Movespeed;
      }
      if (other.ClientDt != 0) {
        ClientDt = other.ClientDt;
      }
      if (other.jumpdata_ != null) {
        if (jumpdata_ == null) {
          jumpdata_ = new global::Cmd.JumpData();
        }
        Jumpdata.MergeFrom(other.Jumpdata);
      }
      if (other.vehicledata_ != null) {
        if (vehicledata_ == null) {
          vehicledata_ = new global::Cmd.VehicleData();
        }
        Vehicledata.MergeFrom(other.Vehicledata);
      }
      if (other.Stopaction != false) {
        Stopaction = other.Stopaction;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 16: {
            state_ = (global::Cmd.EMoveStateType) input.ReadEnum();
            break;
          }
          case 24: {
            substate_ = (global::Cmd.EMoveSubStateType) input.ReadEnum();
            break;
          }
          case 34: {
            if (curpos_ == null) {
              curpos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(curpos_);
            break;
          }
          case 42: {
            if (targetpos_ == null) {
              targetpos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(targetpos_);
            break;
          }
          case 48: {
            Rotate = input.ReadInt32();
            break;
          }
          case 61: {
            Movespeed = input.ReadFloat();
            break;
          }
          case 64: {
            ClientDt = input.ReadUInt32();
            break;
          }
          case 74: {
            if (jumpdata_ == null) {
              jumpdata_ = new global::Cmd.JumpData();
            }
            input.ReadMessage(jumpdata_);
            break;
          }
          case 82: {
            if (vehicledata_ == null) {
              vehicledata_ = new global::Cmd.VehicleData();
            }
            input.ReadMessage(vehicledata_);
            break;
          }
          case 88: {
            Stopaction = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 修复物对象状态信息, S->C
  /// </summary>
  public sealed partial class SingleRepairObjData : pb::IMessage<SingleRepairObjData> {
    private static readonly pb::MessageParser<SingleRepairObjData> _parser = new pb::MessageParser<SingleRepairObjData>(() => new SingleRepairObjData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleRepairObjData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleRepairObjData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleRepairObjData(SingleRepairObjData other) : this() {
      spawnerid_ = other.spawnerid_;
      boeliterepair_ = other.boeliterepair_;
      showeliteitem_ = other.showeliteitem_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleRepairObjData Clone() {
      return new SingleRepairObjData(this);
    }

    /// <summary>Field number for the "spawnerid" field.</summary>
    public const int SpawneridFieldNumber = 1;
    private string spawnerid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Spawnerid {
      get { return spawnerid_; }
      set {
        spawnerid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "boeliterepair" field.</summary>
    public const int BoeliterepairFieldNumber = 2;
    private bool boeliterepair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Boeliterepair {
      get { return boeliterepair_; }
      set {
        boeliterepair_ = value;
      }
    }

    /// <summary>Field number for the "showeliteitem" field.</summary>
    public const int ShoweliteitemFieldNumber = 3;
    private bool showeliteitem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Showeliteitem {
      get { return showeliteitem_; }
      set {
        showeliteitem_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleRepairObjData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleRepairObjData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Spawnerid != other.Spawnerid) return false;
      if (Boeliterepair != other.Boeliterepair) return false;
      if (Showeliteitem != other.Showeliteitem) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Spawnerid.Length != 0) hash ^= Spawnerid.GetHashCode();
      if (Boeliterepair != false) hash ^= Boeliterepair.GetHashCode();
      if (Showeliteitem != false) hash ^= Showeliteitem.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Spawnerid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Spawnerid);
      }
      if (Boeliterepair != false) {
        output.WriteRawTag(16);
        output.WriteBool(Boeliterepair);
      }
      if (Showeliteitem != false) {
        output.WriteRawTag(24);
        output.WriteBool(Showeliteitem);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Spawnerid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Spawnerid);
      }
      if (Boeliterepair != false) {
        size += 1 + 1;
      }
      if (Showeliteitem != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleRepairObjData other) {
      if (other == null) {
        return;
      }
      if (other.Spawnerid.Length != 0) {
        Spawnerid = other.Spawnerid;
      }
      if (other.Boeliterepair != false) {
        Boeliterepair = other.Boeliterepair;
      }
      if (other.Showeliteitem != false) {
        Showeliteitem = other.Showeliteitem;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Spawnerid = input.ReadString();
            break;
          }
          case 16: {
            Boeliterepair = input.ReadBool();
            break;
          }
          case 24: {
            Showeliteitem = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 地图上修复物对象信息列表，S->C
  /// </summary>
  public sealed partial class UpdateRepairObjState : pb::IMessage<UpdateRepairObjState> {
    private static readonly pb::MessageParser<UpdateRepairObjState> _parser = new pb::MessageParser<UpdateRepairObjState>(() => new UpdateRepairObjState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateRepairObjState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRepairObjState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRepairObjState(UpdateRepairObjState other) : this() {
      mapid_ = other.mapid_;
      repairdatas_ = other.repairdatas_.Clone();
      reteliterepair_ = other.reteliterepair_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRepairObjState Clone() {
      return new UpdateRepairObjState(this);
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 1;
    private uint mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    /// <summary>Field number for the "repairdatas" field.</summary>
    public const int RepairdatasFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cmd.SingleRepairObjData> _repeated_repairdatas_codec
        = pb::FieldCodec.ForMessage(18, global::Cmd.SingleRepairObjData.Parser);
    private readonly pbc::RepeatedField<global::Cmd.SingleRepairObjData> repairdatas_ = new pbc::RepeatedField<global::Cmd.SingleRepairObjData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.SingleRepairObjData> Repairdatas {
      get { return repairdatas_; }
    }

    /// <summary>Field number for the "reteliterepair" field.</summary>
    public const int ReteliterepairFieldNumber = 3;
    private uint reteliterepair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Reteliterepair {
      get { return reteliterepair_; }
      set {
        reteliterepair_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateRepairObjState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateRepairObjState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mapid != other.Mapid) return false;
      if(!repairdatas_.Equals(other.repairdatas_)) return false;
      if (Reteliterepair != other.Reteliterepair) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      hash ^= repairdatas_.GetHashCode();
      if (Reteliterepair != 0) hash ^= Reteliterepair.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mapid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mapid);
      }
      repairdatas_.WriteTo(output, _repeated_repairdatas_codec);
      if (Reteliterepair != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Reteliterepair);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mapid);
      }
      size += repairdatas_.CalculateSize(_repeated_repairdatas_codec);
      if (Reteliterepair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Reteliterepair);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateRepairObjState other) {
      if (other == null) {
        return;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
      repairdatas_.Add(other.repairdatas_);
      if (other.Reteliterepair != 0) {
        Reteliterepair = other.Reteliterepair;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mapid = input.ReadUInt32();
            break;
          }
          case 18: {
            repairdatas_.AddEntriesFrom(input, _repeated_repairdatas_codec);
            break;
          }
          case 24: {
            Reteliterepair = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 修复结束后的关闭修复状态 S->C
  /// </summary>
  public sealed partial class SendEffectClosedType : pb::IMessage<SendEffectClosedType> {
    private static readonly pb::MessageParser<SendEffectClosedType> _parser = new pb::MessageParser<SendEffectClosedType>(() => new SendEffectClosedType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendEffectClosedType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendEffectClosedType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendEffectClosedType(SendEffectClosedType other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendEffectClosedType Clone() {
      return new SendEffectClosedType(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendEffectClosedType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendEffectClosedType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendEffectClosedType other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class BoxChoiceFunction : pb::IMessage<BoxChoiceFunction> {
    private static readonly pb::MessageParser<BoxChoiceFunction> _parser = new pb::MessageParser<BoxChoiceFunction>(() => new BoxChoiceFunction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoxChoiceFunction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoxChoiceFunction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoxChoiceFunction(BoxChoiceFunction other) : this() {
      guid_ = other.guid_;
      choiceid_ = other.choiceid_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoxChoiceFunction Clone() {
      return new BoxChoiceFunction(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private uint guid_;
    /// <summary>
    /// 宝箱guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "choiceid" field.</summary>
    public const int ChoiceidFieldNumber = 2;
    private uint choiceid_;
    /// <summary>
    /// 选择的功能性id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Choiceid {
      get { return choiceid_; }
      set {
        choiceid_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Cmd.EBoxType type_ = 0;
    /// <summary>
    /// 宝箱类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EBoxType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoxChoiceFunction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoxChoiceFunction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Choiceid != other.Choiceid) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0) hash ^= Guid.GetHashCode();
      if (Choiceid != 0) hash ^= Choiceid.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Guid);
      }
      if (Choiceid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Choiceid);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Guid);
      }
      if (Choiceid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Choiceid);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoxChoiceFunction other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0) {
        Guid = other.Guid;
      }
      if (other.Choiceid != 0) {
        Choiceid = other.Choiceid;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt32();
            break;
          }
          case 16: {
            Choiceid = input.ReadUInt32();
            break;
          }
          case 24: {
            type_ = (global::Cmd.EBoxType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerPosTestCmd : pb::IMessage<ServerPosTestCmd> {
    private static readonly pb::MessageParser<ServerPosTestCmd> _parser = new pb::MessageParser<ServerPosTestCmd>(() => new ServerPosTestCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerPosTestCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerPosTestCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerPosTestCmd(ServerPosTestCmd other) : this() {
      guid_ = other.guid_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerPosTestCmd Clone() {
      return new ServerPosTestCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::Cmd.ScenePos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerPosTestCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerPosTestCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerPosTestCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 18: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  AI视觉感知扇形区域调试协议
  /// </summary>
  public sealed partial class ServerSectorPosTestCmd : pb::IMessage<ServerSectorPosTestCmd> {
    private static readonly pb::MessageParser<ServerSectorPosTestCmd> _parser = new pb::MessageParser<ServerSectorPosTestCmd>(() => new ServerSectorPosTestCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerSectorPosTestCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSectorPosTestCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSectorPosTestCmd(ServerSectorPosTestCmd other) : this() {
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      rotate_ = other.rotate_;
      angle_ = other.angle_;
      radius_ = other.radius_;
      drawtime_ = other.drawtime_;
      coloralpha_ = other.coloralpha_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSectorPosTestCmd Clone() {
      return new ServerSectorPosTestCmd(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  原点位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "rotate" field.</summary>
    public const int RotateFieldNumber = 2;
    private uint rotate_;
    /// <summary>
    ///  朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rotate {
      get { return rotate_; }
      set {
        rotate_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 3;
    private uint angle_;
    /// <summary>
    ///  角度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 4;
    private uint radius_;
    /// <summary>
    ///  半径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "drawtime" field.</summary>
    public const int DrawtimeFieldNumber = 5;
    private uint drawtime_;
    /// <summary>
    ///  持续时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Drawtime {
      get { return drawtime_; }
      set {
        drawtime_ = value;
      }
    }

    /// <summary>Field number for the "coloralpha" field.</summary>
    public const int ColoralphaFieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_coloralpha_codec
        = pb::FieldCodec.ForFloat(50);
    private readonly pbc::RepeatedField<float> coloralpha_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///  颜色以及透明度 RGBA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Coloralpha {
      get { return coloralpha_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerSectorPosTestCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerSectorPosTestCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Rotate != other.Rotate) return false;
      if (Angle != other.Angle) return false;
      if (Radius != other.Radius) return false;
      if (Drawtime != other.Drawtime) return false;
      if(!coloralpha_.Equals(other.coloralpha_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Rotate != 0) hash ^= Rotate.GetHashCode();
      if (Angle != 0) hash ^= Angle.GetHashCode();
      if (Radius != 0) hash ^= Radius.GetHashCode();
      if (Drawtime != 0) hash ^= Drawtime.GetHashCode();
      hash ^= coloralpha_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
      if (Rotate != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Rotate);
      }
      if (Angle != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Angle);
      }
      if (Radius != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Radius);
      }
      if (Drawtime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Drawtime);
      }
      coloralpha_.WriteTo(output, _repeated_coloralpha_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Rotate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rotate);
      }
      if (Angle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Angle);
      }
      if (Radius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Radius);
      }
      if (Drawtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Drawtime);
      }
      size += coloralpha_.CalculateSize(_repeated_coloralpha_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerSectorPosTestCmd other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Rotate != 0) {
        Rotate = other.Rotate;
      }
      if (other.Angle != 0) {
        Angle = other.Angle;
      }
      if (other.Radius != 0) {
        Radius = other.Radius;
      }
      if (other.Drawtime != 0) {
        Drawtime = other.Drawtime;
      }
      coloralpha_.Add(other.coloralpha_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 16: {
            Rotate = input.ReadUInt32();
            break;
          }
          case 24: {
            Angle = input.ReadUInt32();
            break;
          }
          case 32: {
            Radius = input.ReadUInt32();
            break;
          }
          case 40: {
            Drawtime = input.ReadUInt32();
            break;
          }
          case 50:
          case 53: {
            coloralpha_.AddEntriesFrom(input, _repeated_coloralpha_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  射线检测调试协议
  /// </summary>
  public sealed partial class ServerSweepTestCmd : pb::IMessage<ServerSweepTestCmd> {
    private static readonly pb::MessageParser<ServerSweepTestCmd> _parser = new pb::MessageParser<ServerSweepTestCmd>(() => new ServerSweepTestCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerSweepTestCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSweepTestCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSweepTestCmd(ServerSweepTestCmd other) : this() {
      guid_ = other.guid_;
      From = other.from_ != null ? other.From.Clone() : null;
      To = other.to_ != null ? other.To.Clone() : null;
      Hit = other.hit_ != null ? other.Hit.Clone() : null;
      drawtime_ = other.drawtime_;
      coloralpha_ = other.coloralpha_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSweepTestCmd Clone() {
      return new ServerSweepTestCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private global::Cmd.ScenePos from_;
    /// <summary>
    ///  起点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 3;
    private global::Cmd.ScenePos to_;
    /// <summary>
    ///  终点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "hit" field.</summary>
    public const int HitFieldNumber = 4;
    private global::Cmd.ScenePos hit_;
    /// <summary>
    ///  hit位置(如果有值且不等于from或to 则说明sweep时命中)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Hit {
      get { return hit_; }
      set {
        hit_ = value;
      }
    }

    /// <summary>Field number for the "drawtime" field.</summary>
    public const int DrawtimeFieldNumber = 5;
    private uint drawtime_;
    /// <summary>
    ///  持续时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Drawtime {
      get { return drawtime_; }
      set {
        drawtime_ = value;
      }
    }

    /// <summary>Field number for the "coloralpha" field.</summary>
    public const int ColoralphaFieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_coloralpha_codec
        = pb::FieldCodec.ForFloat(50);
    private readonly pbc::RepeatedField<float> coloralpha_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///  颜色以及透明度 RGBA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Coloralpha {
      get { return coloralpha_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerSweepTestCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerSweepTestCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      if (!object.Equals(Hit, other.Hit)) return false;
      if (Drawtime != other.Drawtime) return false;
      if(!coloralpha_.Equals(other.coloralpha_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (hit_ != null) hash ^= Hit.GetHashCode();
      if (Drawtime != 0) hash ^= Drawtime.GetHashCode();
      hash ^= coloralpha_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (hit_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Hit);
      }
      if (Drawtime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Drawtime);
      }
      coloralpha_.WriteTo(output, _repeated_coloralpha_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (hit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hit);
      }
      if (Drawtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Drawtime);
      }
      size += coloralpha_.CalculateSize(_repeated_coloralpha_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerSweepTestCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          from_ = new global::Cmd.ScenePos();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          to_ = new global::Cmd.ScenePos();
        }
        To.MergeFrom(other.To);
      }
      if (other.hit_ != null) {
        if (hit_ == null) {
          hit_ = new global::Cmd.ScenePos();
        }
        Hit.MergeFrom(other.Hit);
      }
      if (other.Drawtime != 0) {
        Drawtime = other.Drawtime;
      }
      coloralpha_.Add(other.coloralpha_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 18: {
            if (from_ == null) {
              from_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(from_);
            break;
          }
          case 26: {
            if (to_ == null) {
              to_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(to_);
            break;
          }
          case 34: {
            if (hit_ == null) {
              hit_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(hit_);
            break;
          }
          case 40: {
            Drawtime = input.ReadUInt32();
            break;
          }
          case 50:
          case 53: {
            coloralpha_.AddEntriesFrom(input, _repeated_coloralpha_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  绘制Box
  /// </summary>
  public sealed partial class ServerBoxPosTestCmd : pb::IMessage<ServerBoxPosTestCmd> {
    private static readonly pb::MessageParser<ServerBoxPosTestCmd> _parser = new pb::MessageParser<ServerBoxPosTestCmd>(() => new ServerBoxPosTestCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerBoxPosTestCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerBoxPosTestCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerBoxPosTestCmd(ServerBoxPosTestCmd other) : this() {
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      Rotator = other.rotator_ != null ? other.Rotator.Clone() : null;
      Extent = other.extent_ != null ? other.Extent.Clone() : null;
      drawtime_ = other.drawtime_;
      coloralpha_ = other.coloralpha_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerBoxPosTestCmd Clone() {
      return new ServerBoxPosTestCmd(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  中心位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "rotator" field.</summary>
    public const int RotatorFieldNumber = 2;
    private global::Cmd.ScenePos rotator_;
    /// <summary>
    ///  旋转
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Rotator {
      get { return rotator_; }
      set {
        rotator_ = value;
      }
    }

    /// <summary>Field number for the "extent" field.</summary>
    public const int ExtentFieldNumber = 3;
    private global::Cmd.ScenePos extent_;
    /// <summary>
    ///  Extend
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Extent {
      get { return extent_; }
      set {
        extent_ = value;
      }
    }

    /// <summary>Field number for the "drawtime" field.</summary>
    public const int DrawtimeFieldNumber = 4;
    private uint drawtime_;
    /// <summary>
    ///  持续时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Drawtime {
      get { return drawtime_; }
      set {
        drawtime_ = value;
      }
    }

    /// <summary>Field number for the "coloralpha" field.</summary>
    public const int ColoralphaFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_coloralpha_codec
        = pb::FieldCodec.ForFloat(42);
    private readonly pbc::RepeatedField<float> coloralpha_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///  颜色以及透明度 RGBA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Coloralpha {
      get { return coloralpha_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerBoxPosTestCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerBoxPosTestCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Rotator, other.Rotator)) return false;
      if (!object.Equals(Extent, other.Extent)) return false;
      if (Drawtime != other.Drawtime) return false;
      if(!coloralpha_.Equals(other.coloralpha_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (rotator_ != null) hash ^= Rotator.GetHashCode();
      if (extent_ != null) hash ^= Extent.GetHashCode();
      if (Drawtime != 0) hash ^= Drawtime.GetHashCode();
      hash ^= coloralpha_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
      if (rotator_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotator);
      }
      if (extent_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Extent);
      }
      if (Drawtime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Drawtime);
      }
      coloralpha_.WriteTo(output, _repeated_coloralpha_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (rotator_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotator);
      }
      if (extent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extent);
      }
      if (Drawtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Drawtime);
      }
      size += coloralpha_.CalculateSize(_repeated_coloralpha_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerBoxPosTestCmd other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.rotator_ != null) {
        if (rotator_ == null) {
          rotator_ = new global::Cmd.ScenePos();
        }
        Rotator.MergeFrom(other.Rotator);
      }
      if (other.extent_ != null) {
        if (extent_ == null) {
          extent_ = new global::Cmd.ScenePos();
        }
        Extent.MergeFrom(other.Extent);
      }
      if (other.Drawtime != 0) {
        Drawtime = other.Drawtime;
      }
      coloralpha_.Add(other.coloralpha_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 18: {
            if (rotator_ == null) {
              rotator_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(rotator_);
            break;
          }
          case 26: {
            if (extent_ == null) {
              extent_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(extent_);
            break;
          }
          case 32: {
            Drawtime = input.ReadUInt32();
            break;
          }
          case 42:
          case 45: {
            coloralpha_.AddEntriesFrom(input, _repeated_coloralpha_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  绘制Capsule
  /// </summary>
  public sealed partial class ServerCapsulePosTestCmd : pb::IMessage<ServerCapsulePosTestCmd> {
    private static readonly pb::MessageParser<ServerCapsulePosTestCmd> _parser = new pb::MessageParser<ServerCapsulePosTestCmd>(() => new ServerCapsulePosTestCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerCapsulePosTestCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerCapsulePosTestCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerCapsulePosTestCmd(ServerCapsulePosTestCmd other) : this() {
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      Rotator = other.rotator_ != null ? other.Rotator.Clone() : null;
      halfheight_ = other.halfheight_;
      radius_ = other.radius_;
      drawtime_ = other.drawtime_;
      coloralpha_ = other.coloralpha_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerCapsulePosTestCmd Clone() {
      return new ServerCapsulePosTestCmd(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  中心位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "rotator" field.</summary>
    public const int RotatorFieldNumber = 2;
    private global::Cmd.ScenePos rotator_;
    /// <summary>
    ///  旋转
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Rotator {
      get { return rotator_; }
      set {
        rotator_ = value;
      }
    }

    /// <summary>Field number for the "halfheight" field.</summary>
    public const int HalfheightFieldNumber = 3;
    private uint halfheight_;
    /// <summary>
    ///  半高
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Halfheight {
      get { return halfheight_; }
      set {
        halfheight_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 4;
    private uint radius_;
    /// <summary>
    ///  半径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "drawtime" field.</summary>
    public const int DrawtimeFieldNumber = 5;
    private uint drawtime_;
    /// <summary>
    ///  持续时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Drawtime {
      get { return drawtime_; }
      set {
        drawtime_ = value;
      }
    }

    /// <summary>Field number for the "coloralpha" field.</summary>
    public const int ColoralphaFieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_coloralpha_codec
        = pb::FieldCodec.ForFloat(50);
    private readonly pbc::RepeatedField<float> coloralpha_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///  颜色以及透明度 RGBA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Coloralpha {
      get { return coloralpha_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerCapsulePosTestCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerCapsulePosTestCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Rotator, other.Rotator)) return false;
      if (Halfheight != other.Halfheight) return false;
      if (Radius != other.Radius) return false;
      if (Drawtime != other.Drawtime) return false;
      if(!coloralpha_.Equals(other.coloralpha_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (rotator_ != null) hash ^= Rotator.GetHashCode();
      if (Halfheight != 0) hash ^= Halfheight.GetHashCode();
      if (Radius != 0) hash ^= Radius.GetHashCode();
      if (Drawtime != 0) hash ^= Drawtime.GetHashCode();
      hash ^= coloralpha_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
      if (rotator_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotator);
      }
      if (Halfheight != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Halfheight);
      }
      if (Radius != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Radius);
      }
      if (Drawtime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Drawtime);
      }
      coloralpha_.WriteTo(output, _repeated_coloralpha_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (rotator_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotator);
      }
      if (Halfheight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Halfheight);
      }
      if (Radius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Radius);
      }
      if (Drawtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Drawtime);
      }
      size += coloralpha_.CalculateSize(_repeated_coloralpha_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerCapsulePosTestCmd other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.rotator_ != null) {
        if (rotator_ == null) {
          rotator_ = new global::Cmd.ScenePos();
        }
        Rotator.MergeFrom(other.Rotator);
      }
      if (other.Halfheight != 0) {
        Halfheight = other.Halfheight;
      }
      if (other.Radius != 0) {
        Radius = other.Radius;
      }
      if (other.Drawtime != 0) {
        Drawtime = other.Drawtime;
      }
      coloralpha_.Add(other.coloralpha_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 18: {
            if (rotator_ == null) {
              rotator_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(rotator_);
            break;
          }
          case 24: {
            Halfheight = input.ReadUInt32();
            break;
          }
          case 32: {
            Radius = input.ReadUInt32();
            break;
          }
          case 40: {
            Drawtime = input.ReadUInt32();
            break;
          }
          case 50:
          case 53: {
            coloralpha_.AddEntriesFrom(input, _repeated_coloralpha_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  绘制Arrow
  /// </summary>
  public sealed partial class ServerArrowPosTestCmd : pb::IMessage<ServerArrowPosTestCmd> {
    private static readonly pb::MessageParser<ServerArrowPosTestCmd> _parser = new pb::MessageParser<ServerArrowPosTestCmd>(() => new ServerArrowPosTestCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerArrowPosTestCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerArrowPosTestCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerArrowPosTestCmd(ServerArrowPosTestCmd other) : this() {
      From = other.from_ != null ? other.From.Clone() : null;
      To = other.to_ != null ? other.To.Clone() : null;
      size_ = other.size_;
      drawtime_ = other.drawtime_;
      coloralpha_ = other.coloralpha_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerArrowPosTestCmd Clone() {
      return new ServerArrowPosTestCmd(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::Cmd.ScenePos from_;
    /// <summary>
    ///  起点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private global::Cmd.ScenePos to_;
    /// <summary>
    ///  终点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 3;
    private uint size_;
    /// <summary>
    ///  大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "drawtime" field.</summary>
    public const int DrawtimeFieldNumber = 4;
    private uint drawtime_;
    /// <summary>
    ///  持续时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Drawtime {
      get { return drawtime_; }
      set {
        drawtime_ = value;
      }
    }

    /// <summary>Field number for the "coloralpha" field.</summary>
    public const int ColoralphaFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_coloralpha_codec
        = pb::FieldCodec.ForFloat(42);
    private readonly pbc::RepeatedField<float> coloralpha_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///  颜色以及透明度 RGBA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Coloralpha {
      get { return coloralpha_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerArrowPosTestCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerArrowPosTestCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      if (Size != other.Size) return false;
      if (Drawtime != other.Drawtime) return false;
      if(!coloralpha_.Equals(other.coloralpha_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (Drawtime != 0) hash ^= Drawtime.GetHashCode();
      hash ^= coloralpha_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(To);
      }
      if (Size != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Size);
      }
      if (Drawtime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Drawtime);
      }
      coloralpha_.WriteTo(output, _repeated_coloralpha_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
      }
      if (Drawtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Drawtime);
      }
      size += coloralpha_.CalculateSize(_repeated_coloralpha_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerArrowPosTestCmd other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          from_ = new global::Cmd.ScenePos();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          to_ = new global::Cmd.ScenePos();
        }
        To.MergeFrom(other.To);
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.Drawtime != 0) {
        Drawtime = other.Drawtime;
      }
      coloralpha_.Add(other.coloralpha_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (from_ == null) {
              from_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(from_);
            break;
          }
          case 18: {
            if (to_ == null) {
              to_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(to_);
            break;
          }
          case 24: {
            Size = input.ReadUInt32();
            break;
          }
          case 32: {
            Drawtime = input.ReadUInt32();
            break;
          }
          case 42:
          case 45: {
            coloralpha_.AddEntriesFrom(input, _repeated_coloralpha_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  绘制Sphere
  /// </summary>
  public sealed partial class ServerSpherePosTestCmd : pb::IMessage<ServerSpherePosTestCmd> {
    private static readonly pb::MessageParser<ServerSpherePosTestCmd> _parser = new pb::MessageParser<ServerSpherePosTestCmd>(() => new ServerSpherePosTestCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerSpherePosTestCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSpherePosTestCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSpherePosTestCmd(ServerSpherePosTestCmd other) : this() {
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      radius_ = other.radius_;
      drawtime_ = other.drawtime_;
      coloralpha_ = other.coloralpha_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerSpherePosTestCmd Clone() {
      return new ServerSpherePosTestCmd(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  中心位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 2;
    private uint radius_;
    /// <summary>
    ///  半径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "drawtime" field.</summary>
    public const int DrawtimeFieldNumber = 3;
    private uint drawtime_;
    /// <summary>
    ///  持续时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Drawtime {
      get { return drawtime_; }
      set {
        drawtime_ = value;
      }
    }

    /// <summary>Field number for the "coloralpha" field.</summary>
    public const int ColoralphaFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_coloralpha_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> coloralpha_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///  颜色以及透明度 RGBA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Coloralpha {
      get { return coloralpha_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerSpherePosTestCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerSpherePosTestCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Radius != other.Radius) return false;
      if (Drawtime != other.Drawtime) return false;
      if(!coloralpha_.Equals(other.coloralpha_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Radius != 0) hash ^= Radius.GetHashCode();
      if (Drawtime != 0) hash ^= Drawtime.GetHashCode();
      hash ^= coloralpha_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
      if (Radius != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Radius);
      }
      if (Drawtime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Drawtime);
      }
      coloralpha_.WriteTo(output, _repeated_coloralpha_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Radius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Radius);
      }
      if (Drawtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Drawtime);
      }
      size += coloralpha_.CalculateSize(_repeated_coloralpha_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerSpherePosTestCmd other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Radius != 0) {
        Radius = other.Radius;
      }
      if (other.Drawtime != 0) {
        Drawtime = other.Drawtime;
      }
      coloralpha_.Add(other.coloralpha_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 16: {
            Radius = input.ReadUInt32();
            break;
          }
          case 24: {
            Drawtime = input.ReadUInt32();
            break;
          }
          case 34:
          case 37: {
            coloralpha_.AddEntriesFrom(input, _repeated_coloralpha_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterRaidSceneByStage : pb::IMessage<EnterRaidSceneByStage> {
    private static readonly pb::MessageParser<EnterRaidSceneByStage> _parser = new pb::MessageParser<EnterRaidSceneByStage>(() => new EnterRaidSceneByStage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterRaidSceneByStage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRaidSceneByStage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRaidSceneByStage(EnterRaidSceneByStage other) : this() {
      character_ = other.character_;
      stage_ = other.stage_;
      copyid_ = other.copyid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRaidSceneByStage Clone() {
      return new EnterRaidSceneByStage(this);
    }

    /// <summary>Field number for the "character" field.</summary>
    public const int CharacterFieldNumber = 1;
    private uint character_;
    /// <summary>
    ///  角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 2;
    private uint stage_;
    /// <summary>
    ///  关卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "copyid" field.</summary>
    public const int CopyidFieldNumber = 3;
    private uint copyid_;
    /// <summary>
    ///  原地副本id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Copyid {
      get { return copyid_; }
      set {
        copyid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterRaidSceneByStage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterRaidSceneByStage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Character != other.Character) return false;
      if (Stage != other.Stage) return false;
      if (Copyid != other.Copyid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Character != 0) hash ^= Character.GetHashCode();
      if (Stage != 0) hash ^= Stage.GetHashCode();
      if (Copyid != 0) hash ^= Copyid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Character != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Character);
      }
      if (Stage != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Stage);
      }
      if (Copyid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Copyid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Character != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Character);
      }
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stage);
      }
      if (Copyid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Copyid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterRaidSceneByStage other) {
      if (other == null) {
        return;
      }
      if (other.Character != 0) {
        Character = other.Character;
      }
      if (other.Stage != 0) {
        Stage = other.Stage;
      }
      if (other.Copyid != 0) {
        Copyid = other.Copyid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Character = input.ReadUInt32();
            break;
          }
          case 16: {
            Stage = input.ReadUInt32();
            break;
          }
          case 24: {
            Copyid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendBoxInfoList : pb::IMessage<SendBoxInfoList> {
    private static readonly pb::MessageParser<SendBoxInfoList> _parser = new pb::MessageParser<SendBoxInfoList>(() => new SendBoxInfoList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendBoxInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendBoxInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendBoxInfoList(SendBoxInfoList other) : this() {
      guid_ = other.guid_;
      type_ = other.type_;
      id_ = other.id_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendBoxInfoList Clone() {
      return new SendBoxInfoList(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private uint guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Cmd.EBoxType type_ = 0;
    /// <summary>
    /// 宝箱类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EBoxType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_id_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> id_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Id {
      get { return id_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendBoxInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendBoxInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Type != other.Type) return false;
      if(!id_.Equals(other.id_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0) hash ^= Guid.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= id_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Guid);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      id_.WriteTo(output, _repeated_id_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Guid);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += id_.CalculateSize(_repeated_id_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendBoxInfoList other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0) {
        Guid = other.Guid;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      id_.Add(other.id_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt32();
            break;
          }
          case 16: {
            type_ = (global::Cmd.EBoxType) input.ReadEnum();
            break;
          }
          case 26:
          case 24: {
            id_.AddEntriesFrom(input, _repeated_id_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendBossEnterMap : pb::IMessage<SendBossEnterMap> {
    private static readonly pb::MessageParser<SendBossEnterMap> _parser = new pb::MessageParser<SendBossEnterMap>(() => new SendBossEnterMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendBossEnterMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendBossEnterMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendBossEnterMap(SendBossEnterMap other) : this() {
      guid_ = other.guid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendBossEnterMap Clone() {
      return new SendBossEnterMap(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private uint guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendBossEnterMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendBossEnterMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0) hash ^= Guid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Guid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Guid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendBossEnterMap other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0) {
        Guid = other.Guid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WXKJLeaveMapCmd : pb::IMessage<WXKJLeaveMapCmd> {
    private static readonly pb::MessageParser<WXKJLeaveMapCmd> _parser = new pb::MessageParser<WXKJLeaveMapCmd>(() => new WXKJLeaveMapCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WXKJLeaveMapCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WXKJLeaveMapCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WXKJLeaveMapCmd(WXKJLeaveMapCmd other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WXKJLeaveMapCmd Clone() {
      return new WXKJLeaveMapCmd(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WXKJLeaveMapCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WXKJLeaveMapCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WXKJLeaveMapCmd other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class MapObject : pb::IMessage<MapObject> {
    private static readonly pb::MessageParser<MapObject> _parser = new pb::MessageParser<MapObject>(() => new MapObject());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapObject(MapObject other) : this() {
      Entry = other.entry_ != null ? other.Entry.Clone() : null;
      Item = other.item_ != null ? other.Item.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapObject Clone() {
      return new MapObject(this);
    }

    /// <summary>Field number for the "entry" field.</summary>
    public const int EntryFieldNumber = 1;
    private global::Cmd.MapEntry entry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.MapEntry Entry {
      get { return entry_; }
      set {
        entry_ = value;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 2;
    private global::Cmd.MapItem item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.MapItem Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Entry, other.Entry)) return false;
      if (!object.Equals(Item, other.Item)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (entry_ != null) hash ^= Entry.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (entry_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Entry);
      }
      if (item_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Item);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (entry_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Entry);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapObject other) {
      if (other == null) {
        return;
      }
      if (other.entry_ != null) {
        if (entry_ == null) {
          entry_ = new global::Cmd.MapEntry();
        }
        Entry.MergeFrom(other.Entry);
      }
      if (other.item_ != null) {
        if (item_ == null) {
          item_ = new global::Cmd.MapItem();
        }
        Item.MergeFrom(other.Item);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (entry_ == null) {
              entry_ = new global::Cmd.MapEntry();
            }
            input.ReadMessage(entry_);
            break;
          }
          case 18: {
            if (item_ == null) {
              item_ = new global::Cmd.MapItem();
            }
            input.ReadMessage(item_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  地图数据,S->C (下发npc和item)
  ///  npc和item合并下发，保证在一个消息里，用于玩家上线下发同场景的对象。
  ///  比如解决有npc与item互相关联的情况。
  /// </summary>
  public sealed partial class AddMapObject : pb::IMessage<AddMapObject> {
    private static readonly pb::MessageParser<AddMapObject> _parser = new pb::MessageParser<AddMapObject>(() => new AddMapObject());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddMapObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddMapObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddMapObject(AddMapObject other) : this() {
      mapobjectarray_ = other.mapobjectarray_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddMapObject Clone() {
      return new AddMapObject(this);
    }

    /// <summary>Field number for the "mapobjectarray" field.</summary>
    public const int MapobjectarrayFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cmd.MapObject> _repeated_mapobjectarray_codec
        = pb::FieldCodec.ForMessage(10, global::Cmd.MapObject.Parser);
    private readonly pbc::RepeatedField<global::Cmd.MapObject> mapobjectarray_ = new pbc::RepeatedField<global::Cmd.MapObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.MapObject> Mapobjectarray {
      get { return mapobjectarray_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddMapObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddMapObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mapobjectarray_.Equals(other.mapobjectarray_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mapobjectarray_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mapobjectarray_.WriteTo(output, _repeated_mapobjectarray_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mapobjectarray_.CalculateSize(_repeated_mapobjectarray_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddMapObject other) {
      if (other == null) {
        return;
      }
      mapobjectarray_.Add(other.mapobjectarray_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mapobjectarray_.AddEntriesFrom(input, _repeated_mapobjectarray_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InteractionMode : pb::IMessage<InteractionMode> {
    private static readonly pb::MessageParser<InteractionMode> _parser = new pb::MessageParser<InteractionMode>(() => new InteractionMode());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionMode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionMode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionMode(InteractionMode other) : this() {
      cfgid_ = other.cfgid_;
      spawnerid_ = other.spawnerid_;
      mode_ = other.mode_;
      guids_ = other.guids_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionMode Clone() {
      return new InteractionMode(this);
    }

    /// <summary>Field number for the "cfgid" field.</summary>
    public const int CfgidFieldNumber = 1;
    private uint cfgid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cfgid {
      get { return cfgid_; }
      set {
        cfgid_ = value;
      }
    }

    /// <summary>Field number for the "spawnerid" field.</summary>
    public const int SpawneridFieldNumber = 2;
    private string spawnerid_ = "";
    /// <summary>
    /// 地编spawner唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Spawnerid {
      get { return spawnerid_; }
      set {
        spawnerid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 3;
    private global::Cmd.ESceneObjectInteractionMode mode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ESceneObjectInteractionMode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "guids" field.</summary>
    public const int GuidsFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_guids_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> guids_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// 对象列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Guids {
      get { return guids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionMode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionMode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cfgid != other.Cfgid) return false;
      if (Spawnerid != other.Spawnerid) return false;
      if (Mode != other.Mode) return false;
      if(!guids_.Equals(other.guids_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cfgid != 0) hash ^= Cfgid.GetHashCode();
      if (Spawnerid.Length != 0) hash ^= Spawnerid.GetHashCode();
      if (Mode != 0) hash ^= Mode.GetHashCode();
      hash ^= guids_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cfgid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Cfgid);
      }
      if (Spawnerid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Spawnerid);
      }
      if (Mode != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Mode);
      }
      guids_.WriteTo(output, _repeated_guids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cfgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cfgid);
      }
      if (Spawnerid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Spawnerid);
      }
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      size += guids_.CalculateSize(_repeated_guids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionMode other) {
      if (other == null) {
        return;
      }
      if (other.Cfgid != 0) {
        Cfgid = other.Cfgid;
      }
      if (other.Spawnerid.Length != 0) {
        Spawnerid = other.Spawnerid;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      guids_.Add(other.guids_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Cfgid = input.ReadUInt32();
            break;
          }
          case 18: {
            Spawnerid = input.ReadString();
            break;
          }
          case 24: {
            mode_ = (global::Cmd.ESceneObjectInteractionMode) input.ReadEnum();
            break;
          }
          case 34:
          case 32: {
            guids_.AddEntriesFrom(input, _repeated_guids_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// / 交互模式同步,S->C
  /// </summary>
  public sealed partial class SyncNpcInteractionModeCmd : pb::IMessage<SyncNpcInteractionModeCmd> {
    private static readonly pb::MessageParser<SyncNpcInteractionModeCmd> _parser = new pb::MessageParser<SyncNpcInteractionModeCmd>(() => new SyncNpcInteractionModeCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncNpcInteractionModeCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncNpcInteractionModeCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncNpcInteractionModeCmd(SyncNpcInteractionModeCmd other) : this() {
      data_ = other.data_.Clone();
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncNpcInteractionModeCmd Clone() {
      return new SyncNpcInteractionModeCmd(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cmd.InteractionMode> _repeated_data_codec
        = pb::FieldCodec.ForMessage(10, global::Cmd.InteractionMode.Parser);
    private readonly pbc::RepeatedField<global::Cmd.InteractionMode> data_ = new pbc::RepeatedField<global::Cmd.InteractionMode>();
    /// <summary>
    ///  交互模式数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.InteractionMode> Data {
      get { return data_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Cmd.SyncNpcDataType type_ = 0;
    /// <summary>
    ///  同步方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.SyncNpcDataType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncNpcInteractionModeCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncNpcInteractionModeCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncNpcInteractionModeCmd other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
          case 16: {
            type_ = (global::Cmd.SyncNpcDataType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  负责客户端之间的行为表现同步，服务器仅负责转发,C->S->C
  /// </summary>
  public sealed partial class SyncStageObjectBehaviorCmd : pb::IMessage<SyncStageObjectBehaviorCmd> {
    private static readonly pb::MessageParser<SyncStageObjectBehaviorCmd> _parser = new pb::MessageParser<SyncStageObjectBehaviorCmd>(() => new SyncStageObjectBehaviorCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncStageObjectBehaviorCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncStageObjectBehaviorCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncStageObjectBehaviorCmd(SyncStageObjectBehaviorCmd other) : this() {
      stageObject_ = other.stageObject_;
      operator_ = other.operator_;
      controllerName_ = other.controllerName_;
      controllerVersion_ = other.controllerVersion_;
      controllerNodeID_ = other.controllerNodeID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncStageObjectBehaviorCmd Clone() {
      return new SyncStageObjectBehaviorCmd(this);
    }

    /// <summary>Field number for the "stageObject" field.</summary>
    public const int StageObjectFieldNumber = 1;
    private ulong stageObject_;
    /// <summary>
    ///  被触发行为对象的GUID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StageObject {
      get { return stageObject_; }
      set {
        stageObject_ = value;
      }
    }

    /// <summary>Field number for the "operator" field.</summary>
    public const int OperatorFieldNumber = 2;
    private ulong operator_;
    /// <summary>
    ///  操作者的GUID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Operator {
      get { return operator_; }
      set {
        operator_ = value;
      }
    }

    /// <summary>Field number for the "controllerName" field.</summary>
    public const int ControllerNameFieldNumber = 3;
    private string controllerName_ = "";
    /// <summary>
    ///  行为控制器的名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ControllerName {
      get { return controllerName_; }
      set {
        controllerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "controllerVersion" field.</summary>
    public const int ControllerVersionFieldNumber = 4;
    private uint controllerVersion_;
    /// <summary>
    ///  行为控制器的版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ControllerVersion {
      get { return controllerVersion_; }
      set {
        controllerVersion_ = value;
      }
    }

    /// <summary>Field number for the "controllerNodeID" field.</summary>
    public const int ControllerNodeIDFieldNumber = 5;
    private uint controllerNodeID_;
    /// <summary>
    ///  行为控制器的节点ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ControllerNodeID {
      get { return controllerNodeID_; }
      set {
        controllerNodeID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncStageObjectBehaviorCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncStageObjectBehaviorCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StageObject != other.StageObject) return false;
      if (Operator != other.Operator) return false;
      if (ControllerName != other.ControllerName) return false;
      if (ControllerVersion != other.ControllerVersion) return false;
      if (ControllerNodeID != other.ControllerNodeID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StageObject != 0UL) hash ^= StageObject.GetHashCode();
      if (Operator != 0UL) hash ^= Operator.GetHashCode();
      if (ControllerName.Length != 0) hash ^= ControllerName.GetHashCode();
      if (ControllerVersion != 0) hash ^= ControllerVersion.GetHashCode();
      if (ControllerNodeID != 0) hash ^= ControllerNodeID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StageObject != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(StageObject);
      }
      if (Operator != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Operator);
      }
      if (ControllerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ControllerName);
      }
      if (ControllerVersion != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ControllerVersion);
      }
      if (ControllerNodeID != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ControllerNodeID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StageObject != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StageObject);
      }
      if (Operator != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Operator);
      }
      if (ControllerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ControllerName);
      }
      if (ControllerVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ControllerVersion);
      }
      if (ControllerNodeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ControllerNodeID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncStageObjectBehaviorCmd other) {
      if (other == null) {
        return;
      }
      if (other.StageObject != 0UL) {
        StageObject = other.StageObject;
      }
      if (other.Operator != 0UL) {
        Operator = other.Operator;
      }
      if (other.ControllerName.Length != 0) {
        ControllerName = other.ControllerName;
      }
      if (other.ControllerVersion != 0) {
        ControllerVersion = other.ControllerVersion;
      }
      if (other.ControllerNodeID != 0) {
        ControllerNodeID = other.ControllerNodeID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StageObject = input.ReadUInt64();
            break;
          }
          case 16: {
            Operator = input.ReadUInt64();
            break;
          }
          case 26: {
            ControllerName = input.ReadString();
            break;
          }
          case 32: {
            ControllerVersion = input.ReadUInt32();
            break;
          }
          case 40: {
            ControllerNodeID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VarList : pb::IMessage<VarList> {
    private static readonly pb::MessageParser<VarList> _parser = new pb::MessageParser<VarList>(() => new VarList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VarList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VarList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VarList(VarList other) : this() {
      name_ = other.name_;
      Value = other.value_ != null ? other.Value.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VarList Clone() {
      return new VarList(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::Cmd.TemplateValue value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.TemplateValue Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VarList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VarList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VarList other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::Cmd.TemplateValue();
        }
        Value.MergeFrom(other.Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (value_ == null) {
              value_ = new global::Cmd.TemplateValue();
            }
            input.ReadMessage(value_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  负责客户端之间的表现同步，服务器仅负责转发,C->S->C
  /// </summary>
  public sealed partial class SyncBlueprintPerformanceCmd : pb::IMessage<SyncBlueprintPerformanceCmd> {
    private static readonly pb::MessageParser<SyncBlueprintPerformanceCmd> _parser = new pb::MessageParser<SyncBlueprintPerformanceCmd>(() => new SyncBlueprintPerformanceCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncBlueprintPerformanceCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncBlueprintPerformanceCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncBlueprintPerformanceCmd(SyncBlueprintPerformanceCmd other) : this() {
      target_ = other.target_;
      type_ = other.type_;
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncBlueprintPerformanceCmd Clone() {
      return new SyncBlueprintPerformanceCmd(this);
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    private ulong target_;
    /// <summary>
    ///  需要表演对象的guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Cmd.ENetPerformanceType type_ = 0;
    /// <summary>
    ///  表演的类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ENetPerformanceType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.VarList> _repeated_list_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.VarList.Parser);
    private readonly pbc::RepeatedField<global::Cmd.VarList> list_ = new pbc::RepeatedField<global::Cmd.VarList>();
    /// <summary>
    ///  参数列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.VarList> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncBlueprintPerformanceCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncBlueprintPerformanceCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Target != other.Target) return false;
      if (Type != other.Type) return false;
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Target != 0UL) hash ^= Target.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Target != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Target);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Target != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Target);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncBlueprintPerformanceCmd other) {
      if (other == null) {
        return;
      }
      if (other.Target != 0UL) {
        Target = other.Target;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Target = input.ReadUInt64();
            break;
          }
          case 16: {
            type_ = (global::Cmd.ENetPerformanceType) input.ReadEnum();
            break;
          }
          case 26: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SyncTime : pb::IMessage<SyncTime> {
    private static readonly pb::MessageParser<SyncTime> _parser = new pb::MessageParser<SyncTime>(() => new SyncTime());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncTime(SyncTime other) : this() {
      clientTime_ = other.clientTime_;
      serverTime_ = other.serverTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncTime Clone() {
      return new SyncTime(this);
    }

    /// <summary>Field number for the "client_time" field.</summary>
    public const int ClientTimeFieldNumber = 1;
    private ulong clientTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClientTime {
      get { return clientTime_; }
      set {
        clientTime_ = value;
      }
    }

    /// <summary>Field number for the "server_time" field.</summary>
    public const int ServerTimeFieldNumber = 2;
    private ulong serverTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ServerTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientTime != other.ClientTime) return false;
      if (ServerTime != other.ServerTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientTime != 0UL) hash ^= ClientTime.GetHashCode();
      if (ServerTime != 0UL) hash ^= ServerTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ClientTime);
      }
      if (ServerTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ServerTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClientTime);
      }
      if (ServerTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ServerTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncTime other) {
      if (other == null) {
        return;
      }
      if (other.ClientTime != 0UL) {
        ClientTime = other.ClientTime;
      }
      if (other.ServerTime != 0UL) {
        ServerTime = other.ServerTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ClientTime = input.ReadUInt64();
            break;
          }
          case 16: {
            ServerTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetCollisionCmd : pb::IMessage<SetCollisionCmd> {
    private static readonly pb::MessageParser<SetCollisionCmd> _parser = new pb::MessageParser<SetCollisionCmd>(() => new SetCollisionCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetCollisionCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetCollisionCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetCollisionCmd(SetCollisionCmd other) : this() {
      guid_ = other.guid_;
      open_ = other.open_;
      preset_ = other.preset_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetCollisionCmd Clone() {
      return new SetCollisionCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 2;
    private bool open_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    /// <summary>Field number for the "preset" field.</summary>
    public const int PresetFieldNumber = 3;
    private string preset_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Preset {
      get { return preset_; }
      set {
        preset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetCollisionCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetCollisionCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Open != other.Open) return false;
      if (Preset != other.Preset) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Open != false) hash ^= Open.GetHashCode();
      if (Preset.Length != 0) hash ^= Preset.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (Open != false) {
        output.WriteRawTag(16);
        output.WriteBool(Open);
      }
      if (Preset.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Preset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Open != false) {
        size += 1 + 1;
      }
      if (Preset.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Preset);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetCollisionCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Open != false) {
        Open = other.Open;
      }
      if (other.Preset.Length != 0) {
        Preset = other.Preset;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 16: {
            Open = input.ReadBool();
            break;
          }
          case 26: {
            Preset = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  触发感知区域
  /// </summary>
  public sealed partial class TriggerPerceptionCmd : pb::IMessage<TriggerPerceptionCmd> {
    private static readonly pb::MessageParser<TriggerPerceptionCmd> _parser = new pb::MessageParser<TriggerPerceptionCmd>(() => new TriggerPerceptionCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerPerceptionCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerPerceptionCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerPerceptionCmd(TriggerPerceptionCmd other) : this() {
      perceptionType_ = other.perceptionType_;
      trigger_ = other.trigger_;
      npcid_ = other.npcid_;
      guid_ = other.guid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerPerceptionCmd Clone() {
      return new TriggerPerceptionCmd(this);
    }

    /// <summary>Field number for the "perceptionType" field.</summary>
    public const int PerceptionTypeFieldNumber = 1;
    private global::Cmd.NpcPerceptionType perceptionType_ = 0;
    /// <summary>
    ///  感知类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.NpcPerceptionType PerceptionType {
      get { return perceptionType_; }
      set {
        perceptionType_ = value;
      }
    }

    /// <summary>Field number for the "trigger" field.</summary>
    public const int TriggerFieldNumber = 2;
    private global::Cmd.NpcPerceptionTriggerType trigger_ = 0;
    /// <summary>
    ///  感知触发方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.NpcPerceptionTriggerType Trigger {
      get { return trigger_; }
      set {
        trigger_ = value;
      }
    }

    /// <summary>Field number for the "npcid" field.</summary>
    public const int NpcidFieldNumber = 3;
    private ulong npcid_;
    /// <summary>
    ///  被触发感知单位的guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Npcid {
      get { return npcid_; }
      set {
        npcid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 4;
    private ulong guid_;
    /// <summary>
    ///  触发者id(理论上也是上报的单位自身)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerPerceptionCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerPerceptionCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PerceptionType != other.PerceptionType) return false;
      if (Trigger != other.Trigger) return false;
      if (Npcid != other.Npcid) return false;
      if (Guid != other.Guid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PerceptionType != 0) hash ^= PerceptionType.GetHashCode();
      if (Trigger != 0) hash ^= Trigger.GetHashCode();
      if (Npcid != 0UL) hash ^= Npcid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PerceptionType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PerceptionType);
      }
      if (Trigger != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Trigger);
      }
      if (Npcid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Npcid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Guid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PerceptionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PerceptionType);
      }
      if (Trigger != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Trigger);
      }
      if (Npcid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Npcid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerPerceptionCmd other) {
      if (other == null) {
        return;
      }
      if (other.PerceptionType != 0) {
        PerceptionType = other.PerceptionType;
      }
      if (other.Trigger != 0) {
        Trigger = other.Trigger;
      }
      if (other.Npcid != 0UL) {
        Npcid = other.Npcid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            perceptionType_ = (global::Cmd.NpcPerceptionType) input.ReadEnum();
            break;
          }
          case 16: {
            trigger_ = (global::Cmd.NpcPerceptionTriggerType) input.ReadEnum();
            break;
          }
          case 24: {
            Npcid = input.ReadUInt64();
            break;
          }
          case 32: {
            Guid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  召唤静态物 
  /// </summary>
  public sealed partial class SkillActorEffectUserCmd : pb::IMessage<SkillActorEffectUserCmd> {
    private static readonly pb::MessageParser<SkillActorEffectUserCmd> _parser = new pb::MessageParser<SkillActorEffectUserCmd>(() => new SkillActorEffectUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillActorEffectUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillActorEffectUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillActorEffectUserCmd(SkillActorEffectUserCmd other) : this() {
      charid_ = other.charid_;
      skillid_ = other.skillid_;
      effectid_ = other.effectid_;
      timeAxis_ = other.timeAxis_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      Addmapitem = other.addmapitem_ != null ? other.Addmapitem.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillActorEffectUserCmd Clone() {
      return new SkillActorEffectUserCmd(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 1;
    private ulong charid_;
    /// <summary>
    ///  施法者唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 2;
    private uint skillid_;
    /// <summary>
    ///  技能id,表Skill.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "effectid" field.</summary>
    public const int EffectidFieldNumber = 3;
    private uint effectid_;
    /// <summary>
    ///  配置表id,表SpecialEffect.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Effectid {
      get { return effectid_; }
      set {
        effectid_ = value;
      }
    }

    /// <summary>Field number for the "time_axis" field.</summary>
    public const int TimeAxisFieldNumber = 4;
    private uint timeAxis_;
    /// <summary>
    ///  时间轴(毫秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeAxis {
      get { return timeAxis_; }
      set {
        timeAxis_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 5;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "addmapitem" field.</summary>
    public const int AddmapitemFieldNumber = 6;
    private global::Cmd.AddMapItem addmapitem_;
    /// <summary>
    ///  召唤物数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.AddMapItem Addmapitem {
      get { return addmapitem_; }
      set {
        addmapitem_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillActorEffectUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillActorEffectUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      if (Skillid != other.Skillid) return false;
      if (Effectid != other.Effectid) return false;
      if (TimeAxis != other.TimeAxis) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Addmapitem, other.Addmapitem)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (Effectid != 0) hash ^= Effectid.GetHashCode();
      if (TimeAxis != 0) hash ^= TimeAxis.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (addmapitem_ != null) hash ^= Addmapitem.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Charid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Charid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Skillid);
      }
      if (Effectid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Effectid);
      }
      if (TimeAxis != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TimeAxis);
      }
      if (pos_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Pos);
      }
      if (addmapitem_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Addmapitem);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      if (Effectid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Effectid);
      }
      if (TimeAxis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeAxis);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (addmapitem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Addmapitem);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillActorEffectUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.Effectid != 0) {
        Effectid = other.Effectid;
      }
      if (other.TimeAxis != 0) {
        TimeAxis = other.TimeAxis;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.addmapitem_ != null) {
        if (addmapitem_ == null) {
          addmapitem_ = new global::Cmd.AddMapItem();
        }
        Addmapitem.MergeFrom(other.Addmapitem);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Charid = input.ReadUInt64();
            break;
          }
          case 16: {
            Skillid = input.ReadUInt32();
            break;
          }
          case 24: {
            Effectid = input.ReadUInt32();
            break;
          }
          case 32: {
            TimeAxis = input.ReadUInt32();
            break;
          }
          case 42: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 50: {
            if (addmapitem_ == null) {
              addmapitem_ = new global::Cmd.AddMapItem();
            }
            input.ReadMessage(addmapitem_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SyncUserDeadCmd : pb::IMessage<SyncUserDeadCmd> {
    private static readonly pb::MessageParser<SyncUserDeadCmd> _parser = new pb::MessageParser<SyncUserDeadCmd>(() => new SyncUserDeadCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncUserDeadCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneMapReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncUserDeadCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncUserDeadCmd(SyncUserDeadCmd other) : this() {
      guid_ = other.guid_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncUserDeadCmd Clone() {
      return new SyncUserDeadCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    /// <summary>
    ///  主控死亡才有guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Cmd.UserDeadType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.UserDeadType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncUserDeadCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncUserDeadCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncUserDeadCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 16: {
            type_ = (global::Cmd.UserDeadType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
