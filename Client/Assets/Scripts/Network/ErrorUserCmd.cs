// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ErrorUserCmd.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Cmd {

  /// <summary>Holder for reflection information generated from ErrorUserCmd.proto</summary>
  public static partial class ErrorUserCmdReflection {

    #region Descriptor
    /// <summary>File descriptor for ErrorUserCmd.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ErrorUserCmdReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJFcnJvclVzZXJDbWQucHJvdG8SA0NtZCJ6Cg1SZWdFcnJVc2VyQ21kEhsK",
            "A3JldBgBIAEoDjIOLkNtZC5SZWdFcnJSZXQSDQoFYWNjaWQYAiABKAQSDgoG",
            "em9uZUlEGAMgASgNEg4KBmNoYXJpZBgEIAEoBBIMCgRhcmdzGAUgAygNEg8K",
            "B2VycmRlc2MYBiABKAkq1gcKCVJlZ0VyclJldBIQCgxSRUdfRVJSX1NVQ0MQ",
            "ABIXChNSRUdfRVJSX1NFUlZFUl9TVE9QEAESHQoZUkVHX0VSUl9TRVJWRVJf",
            "U1RPUF9MT0dJThACEhsKF1JFR19FUlJfRFVQTElDQVRFX0xPR0lOEAMSHAoY",
            "UkVHX0VSUl9SRUxPR0lOX09WRVJUSU1FEAQSFwoTUkVHX0VSUl9ORVdfVkVS",
            "U0lPThAFEhcKE1JFR19FUlJfQUNDSURfRU1QVFkQBhIYChRSRUdfRVJSX05B",
            "TUVfSU5WQUxJRBAHEhYKElJFR19FUlJfTkFNRV9FTVBUWRAIEhsKF1JFR19F",
            "UlJfTkFNRV9PVkVSTUFYTEVOEAkSGgoWUkVHX0VSUl9OQU1FX0RVUExJQ0FU",
            "RRAKEhgKFFJFR19FUlJfU05BUFNIT1RfRVJSEBASGAoUUkVHX0VSUl9ERUxF",
            "VEVfRVJST1IQERIfChtSRUdfRVJSX0RFTEVURV9FUlJPUl9MT0NLRUQQEhIa",
            "ChZSRUdfRVJSX1BBU1NXRF9JTlZBTElEEBQSFAoQUkVHX0VSUl9PVkVSVElN",
            "RRAVEhYKElJFR19FUlJfQUNDX0ZPUkJJRBAWEiMKH1JFR19FUlJfUEVSU09O",
            "QUxJVFlEQVRBX0lOVkFMSUQQFxIZChVSRUdfRVJSX05PVF9GSU5EX0NIQVIQ",
            "GBIaChZSRUdfRVJSX0NSRUFURV9BQ0NPVU5UEBkSFAoQUkVHX0VSUl9BRERf",
            "R0FURRAaEhgKFFJFR19FUlJfQ01EX09WRVJMT0FEEBsSGQoVUkVHX0VSUl9I",
            "RUFSVF9USU1FT1VUEBwSGwoXUkVHX0VSUl9TRVJWRVJfVU5PUEVORUQQMxIZ",
            "ChVSRUdfRVJSX1JFTE9HSU5fU0NFTkUQZBIgChxSRUdfRVJSX1NFU1NJT05f",
            "Q1JFQVRFX0ZBSUxEEGUSGAoUUkVHX0VSUl9OT1RJRllfU0NFTkUQZhIeChpS",
            "RUdfRVJSX1NDRU5FX0NSRUFURV9GQUlMRBBnEhUKEVJFR19FUlJfRklORF9H",
            "QVRFEGgSIAocUkVHX0VSUl9SRVFfREFUQV9GUk9NX1JFQ09SRBBpEh8KG1JF",
            "R19FUlJfU0VUX1VTRVJfREFUQV9TQ0VORRBqEhYKElJFR19FUlJfRk9SQklE",
            "X1JFRxBrEhcKE1JFR19FUlJfRU5URVJfU0NFTkUQbBIZChVSRUdfRVJSX0dF",
            "VF9VU0VSX0RBVEEQbRIQCgxSRUdfRVJSX0ZBSUwQbhIVChFSRUdfRVJSX1VO",
            "REVGSU5FRBBvQgdaBS47Q21kYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Cmd.RegErrRet), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.RegErrUserCmd), global::Cmd.RegErrUserCmd.Parser, new[]{ "Ret", "Accid", "ZoneID", "Charid", "Args", "Errdesc" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum RegErrRet {
    /// <summary>
    ///  登陆成功
    /// </summary>
    [pbr::OriginalName("REG_ERR_SUCC")] RegErrSucc = 0,
    /// <summary>
    ///  服务器维护
    /// </summary>
    [pbr::OriginalName("REG_ERR_SERVER_STOP")] RegErrServerStop = 1,
    /// <summary>
    ///  服务器流程中服务器维护
    /// </summary>
    [pbr::OriginalName("REG_ERR_SERVER_STOP_LOGIN")] RegErrServerStopLogin = 2,
    /// <summary>
    ///  账号强行登陆
    /// </summary>
    [pbr::OriginalName("REG_ERR_DUPLICATE_LOGIN")] RegErrDuplicateLogin = 3,
    /// <summary>
    ///  重连超时
    /// </summary>
    [pbr::OriginalName("REG_ERR_RELOGIN_OVERTIME")] RegErrReloginOvertime = 4,
    /// <summary>
    ///  有新版本更新
    /// </summary>
    [pbr::OriginalName("REG_ERR_NEW_VERSION")] RegErrNewVersion = 5,
    /// <summary>
    ///  账号空
    /// </summary>
    [pbr::OriginalName("REG_ERR_ACCID_EMPTY")] RegErrAccidEmpty = 6,
    /// <summary>
    ///  无法创建-含非法字符
    /// </summary>
    [pbr::OriginalName("REG_ERR_NAME_INVALID")] RegErrNameInvalid = 7,
    /// <summary>
    ///  无法创建-名字为空
    /// </summary>
    [pbr::OriginalName("REG_ERR_NAME_EMPTY")] RegErrNameEmpty = 8,
    /// <summary>
    ///  无法创建-名字太长
    /// </summary>
    [pbr::OriginalName("REG_ERR_NAME_OVERMAXLEN")] RegErrNameOvermaxlen = 9,
    /// <summary>
    ///  无法创建-重名
    /// </summary>
    [pbr::OriginalName("REG_ERR_NAME_DUPLICATE")] RegErrNameDuplicate = 10,
    /// <summary>
    ///  获取角色列表失败
    /// </summary>
    [pbr::OriginalName("REG_ERR_SNAPSHOT_ERR")] RegErrSnapshotErr = 16,
    /// <summary>
    ///  无法删除
    /// </summary>
    [pbr::OriginalName("REG_ERR_DELETE_ERROR")] RegErrDeleteError = 17,
    /// <summary>
    ///  无法删除-被封号
    /// </summary>
    [pbr::OriginalName("REG_ERR_DELETE_ERROR_LOCKED")] RegErrDeleteErrorLocked = 18,
    /// <summary>
    ///  服务器密码验证错误
    /// </summary>
    [pbr::OriginalName("REG_ERR_PASSWD_INVALID")] RegErrPasswdInvalid = 20,
    [pbr::OriginalName("REG_ERR_OVERTIME")] RegErrOvertime = 21,
    /// <summary>
    ///  账号封停
    /// </summary>
    [pbr::OriginalName("REG_ERR_ACC_FORBID")] RegErrAccForbid = 22,
    /// <summary>
    ///  捏人数据不合法
    /// </summary>
    [pbr::OriginalName("REG_ERR_PERSONALITYDATA_INVALID")] RegErrPersonalitydataInvalid = 23,
    /// <summary>
    ///  没有该角色
    /// </summary>
    [pbr::OriginalName("REG_ERR_NOT_FIND_CHAR")] RegErrNotFindChar = 24,
    /// <summary>
    ///  创建账号失败
    /// </summary>
    [pbr::OriginalName("REG_ERR_CREATE_ACCOUNT")] RegErrCreateAccount = 25,
    /// <summary>
    ///  添加gate失败
    /// </summary>
    [pbr::OriginalName("REG_ERR_ADD_GATE")] RegErrAddGate = 26,
    /// <summary>
    ///  协议频率过高，怀疑外挂
    /// </summary>
    [pbr::OriginalName("REG_ERR_CMD_OVERLOAD")] RegErrCmdOverload = 27,
    /// <summary>
    ///  心跳超时
    /// </summary>
    [pbr::OriginalName("REG_ERR_HEART_TIMEOUT")] RegErrHeartTimeout = 28,
    /// <summary>
    ///  服务器未开放
    /// </summary>
    [pbr::OriginalName("REG_ERR_SERVER_UNOPENED")] RegErrServerUnopened = 51,
    /// <summary>
    ///  场景重复登录
    /// </summary>
    [pbr::OriginalName("REG_ERR_RELOGIN_SCENE")] RegErrReloginScene = 100,
    /// <summary>
    ///  会话创建角色失败
    /// </summary>
    [pbr::OriginalName("REG_ERR_SESSION_CREATE_FAILD")] RegErrSessionCreateFaild = 101,
    /// <summary>
    ///  未找到对应场景
    /// </summary>
    [pbr::OriginalName("REG_ERR_NOTIFY_SCENE")] RegErrNotifyScene = 102,
    /// <summary>
    ///  场景创建角色失败
    /// </summary>
    [pbr::OriginalName("REG_ERR_SCENE_CREATE_FAILD")] RegErrSceneCreateFaild = 103,
    /// <summary>
    ///  找不到登录网关
    /// </summary>
    [pbr::OriginalName("REG_ERR_FIND_GATE")] RegErrFindGate = 104,
    /// <summary>
    ///  从record请求数据错误
    /// </summary>
    [pbr::OriginalName("REG_ERR_REQ_DATA_FROM_RECORD")] RegErrReqDataFromRecord = 105,
    /// <summary>
    ///  设置玩家数据失败
    /// </summary>
    [pbr::OriginalName("REG_ERR_SET_USER_DATA_SCENE")] RegErrSetUserDataScene = 106,
    /// <summary>
    ///  被封号
    /// </summary>
    [pbr::OriginalName("REG_ERR_FORBID_REG")] RegErrForbidReg = 107,
    /// <summary>
    ///  进入场景失败
    /// </summary>
    [pbr::OriginalName("REG_ERR_ENTER_SCENE")] RegErrEnterScene = 108,
    /// <summary>
    ///  读档失败
    /// </summary>
    [pbr::OriginalName("REG_ERR_GET_USER_DATA")] RegErrGetUserData = 109,
    /// <summary>
    ///  其他失败
    /// </summary>
    [pbr::OriginalName("REG_ERR_FAIL")] RegErrFail = 110,
    /// <summary>
    ///  未定义错误
    /// </summary>
    [pbr::OriginalName("REG_ERR_UNDEFINED")] RegErrUndefined = 111,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 登录错误,S->C
  /// </summary>
  public sealed partial class RegErrUserCmd : pb::IMessage<RegErrUserCmd> {
    private static readonly pb::MessageParser<RegErrUserCmd> _parser = new pb::MessageParser<RegErrUserCmd>(() => new RegErrUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegErrUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ErrorUserCmdReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegErrUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegErrUserCmd(RegErrUserCmd other) : this() {
      ret_ = other.ret_;
      accid_ = other.accid_;
      zoneID_ = other.zoneID_;
      charid_ = other.charid_;
      args_ = other.args_.Clone();
      errdesc_ = other.errdesc_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegErrUserCmd Clone() {
      return new RegErrUserCmd(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private global::Cmd.RegErrRet ret_ = 0;
    /// <summary>
    /// 错误原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.RegErrRet Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "accid" field.</summary>
    public const int AccidFieldNumber = 2;
    private ulong accid_;
    /// <summary>
    /// 账号id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Accid {
      get { return accid_; }
      set {
        accid_ = value;
      }
    }

    /// <summary>Field number for the "zoneID" field.</summary>
    public const int ZoneIDFieldNumber = 3;
    private uint zoneID_;
    /// <summary>
    /// 大区id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ZoneID {
      get { return zoneID_; }
      set {
        zoneID_ = value;
      }
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 4;
    private ulong charid_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_args_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> args_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Args {
      get { return args_; }
    }

    /// <summary>Field number for the "errdesc" field.</summary>
    public const int ErrdescFieldNumber = 6;
    private string errdesc_ = "";
    /// <summary>
    /// 错误描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Errdesc {
      get { return errdesc_; }
      set {
        errdesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegErrUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegErrUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Accid != other.Accid) return false;
      if (ZoneID != other.ZoneID) return false;
      if (Charid != other.Charid) return false;
      if(!args_.Equals(other.args_)) return false;
      if (Errdesc != other.Errdesc) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Accid != 0UL) hash ^= Accid.GetHashCode();
      if (ZoneID != 0) hash ^= ZoneID.GetHashCode();
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      hash ^= args_.GetHashCode();
      if (Errdesc.Length != 0) hash ^= Errdesc.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Ret);
      }
      if (Accid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Accid);
      }
      if (ZoneID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ZoneID);
      }
      if (Charid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Charid);
      }
      args_.WriteTo(output, _repeated_args_codec);
      if (Errdesc.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Errdesc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ret);
      }
      if (Accid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Accid);
      }
      if (ZoneID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ZoneID);
      }
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      size += args_.CalculateSize(_repeated_args_codec);
      if (Errdesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Errdesc);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegErrUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Accid != 0UL) {
        Accid = other.Accid;
      }
      if (other.ZoneID != 0) {
        ZoneID = other.ZoneID;
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      args_.Add(other.args_);
      if (other.Errdesc.Length != 0) {
        Errdesc = other.Errdesc;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ret_ = (global::Cmd.RegErrRet) input.ReadEnum();
            break;
          }
          case 16: {
            Accid = input.ReadUInt64();
            break;
          }
          case 24: {
            ZoneID = input.ReadUInt32();
            break;
          }
          case 32: {
            Charid = input.ReadUInt64();
            break;
          }
          case 42:
          case 40: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
          case 50: {
            Errdesc = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
