// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginUserCmd.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Cmd {

  /// <summary>Holder for reflection information generated from LoginUserCmd.proto</summary>
  public static partial class LoginUserCmdReflection {

    #region Descriptor
    /// <summary>File descriptor for LoginUserCmd.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LoginUserCmdReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJMb2dpblVzZXJDbWQucHJvdG8SA0NtZBoRUHJvdG9Db21tb24ucHJvdG8i",
            "iQEKEUNyZWF0ZUNoYXJVc2VyQ21kEgwKBG5hbWUYASABKAkSEAoIcm9sZV9z",
            "ZXgYAiABKA0SEgoKcHJvZmVzc2lvbhgDIAEoDRINCgVhY2NpZBgEIAEoBBIP",
            "Cgd2ZXJzaW9uGAYgASgJEiAKAnBkGAcgASgLMhQuQ21kLlBlcnNvbmFsaXR5",
            "RGF0YSJyCg9TbmFwU2hvdFVzZXJDbWQSIQoEZGF0YRgDIAMoCzITLkNtZC5T",
            "bmFwU2hvdERhdGFQQhISCgpsYXN0c2VsZWN0GAQgASgEEhIKCmRlbGV0ZWNo",
            "YXIYBSABKAgSFAoMZGVsZXRlY2R0aW1lGAYgASgNIi4KCUV4dHJhRGF0YRIN",
            "CgVwaG9uZRgBIAEoCRISCgpzYWZlZGV2aWNlGAIgASgIIpQCChFTZWxlY3RS",
            "b2xlVXNlckNtZBIKCgJpZBgDIAEoBBIOCgZ6b25lSUQYBCABKA0SDQoFYWNj",
            "aWQYBSABKAQSEAoIZGV2aWNlaWQYBiABKAkSDAoEbmFtZRgHIAEoCRIPCgd2",
            "ZXJzaW9uGAggASgJEiEKCWV4dHJhRGF0YRgJIAEoCzIOLkNtZC5FeHRyYURh",
            "dGESEQoJaWdub3JlcHdkGAogASgIEhAKCHBhc3N3b3JkGAsgASgJEhEKCXJl",
            "c2V0dGltZRgMIAEoDRIQCghsYW5ndWFnZRgNIAEoDRIWCg5yZWFsYXV0aG9y",
            "aXplZBgOIAEoCBINCgVtYXBpZBgQIAEoDRIPCgdzY2VuZWlkGBEgASgNIiEK",
            "EkxvZ2luUmVzdWx0VXNlckNtZBILCgNyZXQYAyABKA0iPwoRRGVsZXRlQ2hh",
            "clVzZXJDbWQSCgoCaWQYAyABKAQSDQoFYWNjaWQYBCABKAQSDwoHdmVyc2lv",
            "bhgFIAEoCSIgChBIZWFydEJlYXRVc2VyQ21kEgwKBHRpbWUYAyABKAQiIQoR",
            "U2VydmVyVGltZVVzZXJDbWQSDAoEdGltZRgDIAEoBCI0ChNHTURlbGV0ZUNo",
            "YXJVc2VyQ21kEg0KBWFjY2lkGAMgASgEEg4KBnpvbmVpZBgEIAEoDSKKAgoP",
            "UmVxTG9naW5Vc2VyQ21kEg0KBWFjY2lkGAMgASgEEgwKBHNoYTEYBCABKAkS",
            "DgoGem9uZWlkGAUgASgNEhEKCXRpbWVzdGFtcBgGIAEoDRIPCgd2ZXJzaW9u",
            "GAcgASgJEg4KBmRvbWFpbhgIIAEoCRIKCgJpcBgJIAEoCRIOCgZkZXZpY2UY",
            "CiABKAkSDQoFcGhvbmUYCyABKAkSEwoLc2FmZV9kZXZpY2UYDCABKAkSEAoI",
            "bGFuZ3VhZ2UYDSABKA0SDAoEc2l0ZRgOIAEoDRIRCglhdXRob3JpemUYDyAB",
            "KAkSDwoHcmVsb2dpbhgQIAEoCBISCgpyZWxvZ2luYWNrGBEgASgNIjQKF0Nh",
            "bmNlbERlbGV0ZUNoYXJVc2VyQ21kEgoKAmlkGAMgASgEEg0KBWFjY2lkGAQg",
            "ASgEIiMKEkNsaWVudEZyYW1lVXNlckNtZBINCgVmcmFtZRgDIAEoDUIHWgUu",
            "O0NtZGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Cmd.ProtoCommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.CreateCharUserCmd), global::Cmd.CreateCharUserCmd.Parser, new[]{ "Name", "RoleSex", "Profession", "Accid", "Version", "Pd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SnapShotUserCmd), global::Cmd.SnapShotUserCmd.Parser, new[]{ "Data", "Lastselect", "Deletechar", "Deletecdtime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ExtraData), global::Cmd.ExtraData.Parser, new[]{ "Phone", "Safedevice" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SelectRoleUserCmd), global::Cmd.SelectRoleUserCmd.Parser, new[]{ "Id", "ZoneID", "Accid", "Deviceid", "Name", "Version", "ExtraData", "Ignorepwd", "Password", "Resettime", "Language", "Realauthorized", "Mapid", "Sceneid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.LoginResultUserCmd), global::Cmd.LoginResultUserCmd.Parser, new[]{ "Ret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.DeleteCharUserCmd), global::Cmd.DeleteCharUserCmd.Parser, new[]{ "Id", "Accid", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.HeartBeatUserCmd), global::Cmd.HeartBeatUserCmd.Parser, new[]{ "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ServerTimeUserCmd), global::Cmd.ServerTimeUserCmd.Parser, new[]{ "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.GMDeleteCharUserCmd), global::Cmd.GMDeleteCharUserCmd.Parser, new[]{ "Accid", "Zoneid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ReqLoginUserCmd), global::Cmd.ReqLoginUserCmd.Parser, new[]{ "Accid", "Sha1", "Zoneid", "Timestamp", "Version", "Domain", "Ip", "Device", "Phone", "SafeDevice", "Language", "Site", "Authorize", "Relogin", "Reloginack" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.CancelDeleteCharUserCmd), global::Cmd.CancelDeleteCharUserCmd.Parser, new[]{ "Id", "Accid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ClientFrameUserCmd), global::Cmd.ClientFrameUserCmd.Parser, new[]{ "Frame" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 创建角色,C->S
  /// </summary>
  public sealed partial class CreateCharUserCmd : pb::IMessage<CreateCharUserCmd> {
    private static readonly pb::MessageParser<CreateCharUserCmd> _parser = new pb::MessageParser<CreateCharUserCmd>(() => new CreateCharUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateCharUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.LoginUserCmdReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCharUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCharUserCmd(CreateCharUserCmd other) : this() {
      name_ = other.name_;
      roleSex_ = other.roleSex_;
      profession_ = other.profession_;
      accid_ = other.accid_;
      version_ = other.version_;
      Pd = other.pd_ != null ? other.Pd.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCharUserCmd Clone() {
      return new CreateCharUserCmd(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 角色名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "role_sex" field.</summary>
    public const int RoleSexFieldNumber = 2;
    private uint roleSex_;
    /// <summary>
    /// 性别,abandoned
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleSex {
      get { return roleSex_; }
      set {
        roleSex_ = value;
      }
    }

    /// <summary>Field number for the "profession" field.</summary>
    public const int ProfessionFieldNumber = 3;
    private uint profession_;
    /// <summary>
    /// 职业,abandoned
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Profession {
      get { return profession_; }
      set {
        profession_ = value;
      }
    }

    /// <summary>Field number for the "accid" field.</summary>
    public const int AccidFieldNumber = 4;
    private ulong accid_;
    /// <summary>
    /// 账号id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Accid {
      get { return accid_; }
      set {
        accid_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 6;
    private string version_ = "";
    /// <summary>
    /// uint32 sequence = 5;     //abandoned
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pd" field.</summary>
    public const int PdFieldNumber = 7;
    private global::Cmd.PersonalityData pd_;
    /// <summary>
    /// 捏脸数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.PersonalityData Pd {
      get { return pd_; }
      set {
        pd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateCharUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateCharUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (RoleSex != other.RoleSex) return false;
      if (Profession != other.Profession) return false;
      if (Accid != other.Accid) return false;
      if (Version != other.Version) return false;
      if (!object.Equals(Pd, other.Pd)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (RoleSex != 0) hash ^= RoleSex.GetHashCode();
      if (Profession != 0) hash ^= Profession.GetHashCode();
      if (Accid != 0UL) hash ^= Accid.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (pd_ != null) hash ^= Pd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (RoleSex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RoleSex);
      }
      if (Profession != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Profession);
      }
      if (Accid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Accid);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Version);
      }
      if (pd_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Pd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (RoleSex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleSex);
      }
      if (Profession != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Profession);
      }
      if (Accid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Accid);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (pd_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateCharUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.RoleSex != 0) {
        RoleSex = other.RoleSex;
      }
      if (other.Profession != 0) {
        Profession = other.Profession;
      }
      if (other.Accid != 0UL) {
        Accid = other.Accid;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.pd_ != null) {
        if (pd_ == null) {
          pd_ = new global::Cmd.PersonalityData();
        }
        Pd.MergeFrom(other.Pd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            RoleSex = input.ReadUInt32();
            break;
          }
          case 24: {
            Profession = input.ReadUInt32();
            break;
          }
          case 32: {
            Accid = input.ReadUInt64();
            break;
          }
          case 50: {
            Version = input.ReadString();
            break;
          }
          case 58: {
            if (pd_ == null) {
              pd_ = new global::Cmd.PersonalityData();
            }
            input.ReadMessage(pd_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 角色列表,S->C
  /// </summary>
  public sealed partial class SnapShotUserCmd : pb::IMessage<SnapShotUserCmd> {
    private static readonly pb::MessageParser<SnapShotUserCmd> _parser = new pb::MessageParser<SnapShotUserCmd>(() => new SnapShotUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SnapShotUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.LoginUserCmdReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapShotUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapShotUserCmd(SnapShotUserCmd other) : this() {
      data_ = other.data_.Clone();
      lastselect_ = other.lastselect_;
      deletechar_ = other.deletechar_;
      deletecdtime_ = other.deletecdtime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapShotUserCmd Clone() {
      return new SnapShotUserCmd(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.SnapShotDataPB> _repeated_data_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.SnapShotDataPB.Parser);
    private readonly pbc::RepeatedField<global::Cmd.SnapShotDataPB> data_ = new pbc::RepeatedField<global::Cmd.SnapShotDataPB>();
    /// <summary>
    /// 角色列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.SnapShotDataPB> Data {
      get { return data_; }
    }

    /// <summary>Field number for the "lastselect" field.</summary>
    public const int LastselectFieldNumber = 4;
    private ulong lastselect_;
    /// <summary>
    /// 最后一次登录角色的charid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Lastselect {
      get { return lastselect_; }
      set {
        lastselect_ = value;
      }
    }

    /// <summary>Field number for the "deletechar" field.</summary>
    public const int DeletecharFieldNumber = 5;
    private bool deletechar_;
    /// <summary>
    /// 已删除角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Deletechar {
      get { return deletechar_; }
      set {
        deletechar_ = value;
      }
    }

    /// <summary>Field number for the "deletecdtime" field.</summary>
    public const int DeletecdtimeFieldNumber = 6;
    private uint deletecdtime_;
    /// <summary>
    /// 删角功能解锁时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Deletecdtime {
      get { return deletecdtime_; }
      set {
        deletecdtime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SnapShotUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SnapShotUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      if (Lastselect != other.Lastselect) return false;
      if (Deletechar != other.Deletechar) return false;
      if (Deletecdtime != other.Deletecdtime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      if (Lastselect != 0UL) hash ^= Lastselect.GetHashCode();
      if (Deletechar != false) hash ^= Deletechar.GetHashCode();
      if (Deletecdtime != 0) hash ^= Deletecdtime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
      if (Lastselect != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Lastselect);
      }
      if (Deletechar != false) {
        output.WriteRawTag(40);
        output.WriteBool(Deletechar);
      }
      if (Deletecdtime != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Deletecdtime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      if (Lastselect != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Lastselect);
      }
      if (Deletechar != false) {
        size += 1 + 1;
      }
      if (Deletecdtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Deletecdtime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SnapShotUserCmd other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
      if (other.Lastselect != 0UL) {
        Lastselect = other.Lastselect;
      }
      if (other.Deletechar != false) {
        Deletechar = other.Deletechar;
      }
      if (other.Deletecdtime != 0) {
        Deletecdtime = other.Deletecdtime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
          case 32: {
            Lastselect = input.ReadUInt64();
            break;
          }
          case 40: {
            Deletechar = input.ReadBool();
            break;
          }
          case 48: {
            Deletecdtime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExtraData : pb::IMessage<ExtraData> {
    private static readonly pb::MessageParser<ExtraData> _parser = new pb::MessageParser<ExtraData>(() => new ExtraData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExtraData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.LoginUserCmdReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtraData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtraData(ExtraData other) : this() {
      phone_ = other.phone_;
      safedevice_ = other.safedevice_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtraData Clone() {
      return new ExtraData(this);
    }

    /// <summary>Field number for the "phone" field.</summary>
    public const int PhoneFieldNumber = 1;
    private string phone_ = "";
    /// <summary>
    /// 绑定的手机号码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phone {
      get { return phone_; }
      set {
        phone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "safedevice" field.</summary>
    public const int SafedeviceFieldNumber = 2;
    private bool safedevice_;
    /// <summary>
    /// 安全设备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Safedevice {
      get { return safedevice_; }
      set {
        safedevice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExtraData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExtraData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Phone != other.Phone) return false;
      if (Safedevice != other.Safedevice) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Phone.Length != 0) hash ^= Phone.GetHashCode();
      if (Safedevice != false) hash ^= Safedevice.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Phone.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Phone);
      }
      if (Safedevice != false) {
        output.WriteRawTag(16);
        output.WriteBool(Safedevice);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Phone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phone);
      }
      if (Safedevice != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExtraData other) {
      if (other == null) {
        return;
      }
      if (other.Phone.Length != 0) {
        Phone = other.Phone;
      }
      if (other.Safedevice != false) {
        Safedevice = other.Safedevice;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Phone = input.ReadString();
            break;
          }
          case 16: {
            Safedevice = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 选择角色,C->S
  /// </summary>
  public sealed partial class SelectRoleUserCmd : pb::IMessage<SelectRoleUserCmd> {
    private static readonly pb::MessageParser<SelectRoleUserCmd> _parser = new pb::MessageParser<SelectRoleUserCmd>(() => new SelectRoleUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SelectRoleUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.LoginUserCmdReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectRoleUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectRoleUserCmd(SelectRoleUserCmd other) : this() {
      id_ = other.id_;
      zoneID_ = other.zoneID_;
      accid_ = other.accid_;
      deviceid_ = other.deviceid_;
      name_ = other.name_;
      version_ = other.version_;
      ExtraData = other.extraData_ != null ? other.ExtraData.Clone() : null;
      ignorepwd_ = other.ignorepwd_;
      password_ = other.password_;
      resettime_ = other.resettime_;
      language_ = other.language_;
      realauthorized_ = other.realauthorized_;
      mapid_ = other.mapid_;
      sceneid_ = other.sceneid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectRoleUserCmd Clone() {
      return new SelectRoleUserCmd(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private ulong id_;
    /// <summary>
    /// 角色charid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "zoneID" field.</summary>
    public const int ZoneIDFieldNumber = 4;
    private uint zoneID_;
    /// <summary>
    /// 大区id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ZoneID {
      get { return zoneID_; }
      set {
        zoneID_ = value;
      }
    }

    /// <summary>Field number for the "accid" field.</summary>
    public const int AccidFieldNumber = 5;
    private ulong accid_;
    /// <summary>
    /// 账号id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Accid {
      get { return accid_; }
      set {
        accid_ = value;
      }
    }

    /// <summary>Field number for the "deviceid" field.</summary>
    public const int DeviceidFieldNumber = 6;
    private string deviceid_ = "";
    /// <summary>
    /// 设备id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Deviceid {
      get { return deviceid_; }
      set {
        deviceid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 7;
    private string name_ = "";
    /// <summary>
    /// 角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 8;
    private string version_ = "";
    /// <summary>
    /// 版本号,unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraData" field.</summary>
    public const int ExtraDataFieldNumber = 9;
    private global::Cmd.ExtraData extraData_;
    /// <summary>
    /// 设备相关数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ExtraData ExtraData {
      get { return extraData_; }
      set {
        extraData_ = value;
      }
    }

    /// <summary>Field number for the "ignorepwd" field.</summary>
    public const int IgnorepwdFieldNumber = 10;
    private bool ignorepwd_;
    /// <summary>
    /// true 需要密码 false 不需要
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ignorepwd {
      get { return ignorepwd_; }
      set {
        ignorepwd_ = value;
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 11;
    private string password_ = "";
    /// <summary>
    /// 密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resettime" field.</summary>
    public const int ResettimeFieldNumber = 12;
    private uint resettime_;
    /// <summary>
    /// 重置时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Resettime {
      get { return resettime_; }
      set {
        resettime_ = value;
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 13;
    private uint language_;
    /// <summary>
    /// 语言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Language {
      get { return language_; }
      set {
        language_ = value;
      }
    }

    /// <summary>Field number for the "realauthorized" field.</summary>
    public const int RealauthorizedFieldNumber = 14;
    private bool realauthorized_;
    /// <summary>
    /// 安全密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Realauthorized {
      get { return realauthorized_; }
      set {
        realauthorized_ = value;
      }
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 16;
    private uint mapid_;
    /// <summary>
    /// 登录地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    /// <summary>Field number for the "sceneid" field.</summary>
    public const int SceneidFieldNumber = 17;
    private uint sceneid_;
    /// <summary>
    /// 登录地图guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sceneid {
      get { return sceneid_; }
      set {
        sceneid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SelectRoleUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SelectRoleUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ZoneID != other.ZoneID) return false;
      if (Accid != other.Accid) return false;
      if (Deviceid != other.Deviceid) return false;
      if (Name != other.Name) return false;
      if (Version != other.Version) return false;
      if (!object.Equals(ExtraData, other.ExtraData)) return false;
      if (Ignorepwd != other.Ignorepwd) return false;
      if (Password != other.Password) return false;
      if (Resettime != other.Resettime) return false;
      if (Language != other.Language) return false;
      if (Realauthorized != other.Realauthorized) return false;
      if (Mapid != other.Mapid) return false;
      if (Sceneid != other.Sceneid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (ZoneID != 0) hash ^= ZoneID.GetHashCode();
      if (Accid != 0UL) hash ^= Accid.GetHashCode();
      if (Deviceid.Length != 0) hash ^= Deviceid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (extraData_ != null) hash ^= ExtraData.GetHashCode();
      if (Ignorepwd != false) hash ^= Ignorepwd.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Resettime != 0) hash ^= Resettime.GetHashCode();
      if (Language != 0) hash ^= Language.GetHashCode();
      if (Realauthorized != false) hash ^= Realauthorized.GetHashCode();
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      if (Sceneid != 0) hash ^= Sceneid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Id);
      }
      if (ZoneID != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ZoneID);
      }
      if (Accid != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Accid);
      }
      if (Deviceid.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Deviceid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Name);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Version);
      }
      if (extraData_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ExtraData);
      }
      if (Ignorepwd != false) {
        output.WriteRawTag(80);
        output.WriteBool(Ignorepwd);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Password);
      }
      if (Resettime != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Resettime);
      }
      if (Language != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Language);
      }
      if (Realauthorized != false) {
        output.WriteRawTag(112);
        output.WriteBool(Realauthorized);
      }
      if (Mapid != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(Mapid);
      }
      if (Sceneid != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(Sceneid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (ZoneID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ZoneID);
      }
      if (Accid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Accid);
      }
      if (Deviceid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Deviceid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (extraData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExtraData);
      }
      if (Ignorepwd != false) {
        size += 1 + 1;
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Resettime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Resettime);
      }
      if (Language != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Language);
      }
      if (Realauthorized != false) {
        size += 1 + 1;
      }
      if (Mapid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Mapid);
      }
      if (Sceneid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Sceneid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SelectRoleUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.ZoneID != 0) {
        ZoneID = other.ZoneID;
      }
      if (other.Accid != 0UL) {
        Accid = other.Accid;
      }
      if (other.Deviceid.Length != 0) {
        Deviceid = other.Deviceid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.extraData_ != null) {
        if (extraData_ == null) {
          extraData_ = new global::Cmd.ExtraData();
        }
        ExtraData.MergeFrom(other.ExtraData);
      }
      if (other.Ignorepwd != false) {
        Ignorepwd = other.Ignorepwd;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Resettime != 0) {
        Resettime = other.Resettime;
      }
      if (other.Language != 0) {
        Language = other.Language;
      }
      if (other.Realauthorized != false) {
        Realauthorized = other.Realauthorized;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
      if (other.Sceneid != 0) {
        Sceneid = other.Sceneid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Id = input.ReadUInt64();
            break;
          }
          case 32: {
            ZoneID = input.ReadUInt32();
            break;
          }
          case 40: {
            Accid = input.ReadUInt64();
            break;
          }
          case 50: {
            Deviceid = input.ReadString();
            break;
          }
          case 58: {
            Name = input.ReadString();
            break;
          }
          case 66: {
            Version = input.ReadString();
            break;
          }
          case 74: {
            if (extraData_ == null) {
              extraData_ = new global::Cmd.ExtraData();
            }
            input.ReadMessage(extraData_);
            break;
          }
          case 80: {
            Ignorepwd = input.ReadBool();
            break;
          }
          case 90: {
            Password = input.ReadString();
            break;
          }
          case 96: {
            Resettime = input.ReadUInt32();
            break;
          }
          case 104: {
            Language = input.ReadUInt32();
            break;
          }
          case 112: {
            Realauthorized = input.ReadBool();
            break;
          }
          case 128: {
            Mapid = input.ReadUInt32();
            break;
          }
          case 136: {
            Sceneid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 登录结果,S->C
  /// </summary>
  public sealed partial class LoginResultUserCmd : pb::IMessage<LoginResultUserCmd> {
    private static readonly pb::MessageParser<LoginResultUserCmd> _parser = new pb::MessageParser<LoginResultUserCmd>(() => new LoginResultUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginResultUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.LoginUserCmdReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResultUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResultUserCmd(LoginResultUserCmd other) : this() {
      ret_ = other.ret_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResultUserCmd Clone() {
      return new LoginResultUserCmd(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 3;
    private uint ret_;
    /// <summary>
    /// enum RegErrRet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginResultUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginResultUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginResultUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Ret = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 删除角色,C->S,unused
  /// </summary>
  public sealed partial class DeleteCharUserCmd : pb::IMessage<DeleteCharUserCmd> {
    private static readonly pb::MessageParser<DeleteCharUserCmd> _parser = new pb::MessageParser<DeleteCharUserCmd>(() => new DeleteCharUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteCharUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.LoginUserCmdReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteCharUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteCharUserCmd(DeleteCharUserCmd other) : this() {
      id_ = other.id_;
      accid_ = other.accid_;
      version_ = other.version_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteCharUserCmd Clone() {
      return new DeleteCharUserCmd(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private ulong id_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "accid" field.</summary>
    public const int AccidFieldNumber = 4;
    private ulong accid_;
    /// <summary>
    /// 账号id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Accid {
      get { return accid_; }
      set {
        accid_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 5;
    private string version_ = "";
    /// <summary>
    /// 版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteCharUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteCharUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Accid != other.Accid) return false;
      if (Version != other.Version) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Accid != 0UL) hash ^= Accid.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Id);
      }
      if (Accid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Accid);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Accid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Accid);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteCharUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Accid != 0UL) {
        Accid = other.Accid;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Id = input.ReadUInt64();
            break;
          }
          case 32: {
            Accid = input.ReadUInt64();
            break;
          }
          case 42: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 心跳协议,C&lt;->S
  /// </summary>
  public sealed partial class HeartBeatUserCmd : pb::IMessage<HeartBeatUserCmd> {
    private static readonly pb::MessageParser<HeartBeatUserCmd> _parser = new pb::MessageParser<HeartBeatUserCmd>(() => new HeartBeatUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartBeatUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.LoginUserCmdReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatUserCmd(HeartBeatUserCmd other) : this() {
      time_ = other.time_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatUserCmd Clone() {
      return new HeartBeatUserCmd(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private ulong time_;
    /// <summary>
    /// 时间戳,单位:ms
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartBeatUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartBeatUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0UL) hash ^= Time.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartBeatUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0UL) {
        Time = other.Time;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Time = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器时间,S->C
  /// </summary>
  public sealed partial class ServerTimeUserCmd : pb::IMessage<ServerTimeUserCmd> {
    private static readonly pb::MessageParser<ServerTimeUserCmd> _parser = new pb::MessageParser<ServerTimeUserCmd>(() => new ServerTimeUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerTimeUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.LoginUserCmdReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerTimeUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerTimeUserCmd(ServerTimeUserCmd other) : this() {
      time_ = other.time_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerTimeUserCmd Clone() {
      return new ServerTimeUserCmd(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private ulong time_;
    /// <summary>
    /// 单位:ms
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerTimeUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerTimeUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0UL) hash ^= Time.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerTimeUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0UL) {
        Time = other.Time;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Time = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// GM删除账号,S->S
  /// </summary>
  public sealed partial class GMDeleteCharUserCmd : pb::IMessage<GMDeleteCharUserCmd> {
    private static readonly pb::MessageParser<GMDeleteCharUserCmd> _parser = new pb::MessageParser<GMDeleteCharUserCmd>(() => new GMDeleteCharUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMDeleteCharUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.LoginUserCmdReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMDeleteCharUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMDeleteCharUserCmd(GMDeleteCharUserCmd other) : this() {
      accid_ = other.accid_;
      zoneid_ = other.zoneid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMDeleteCharUserCmd Clone() {
      return new GMDeleteCharUserCmd(this);
    }

    /// <summary>Field number for the "accid" field.</summary>
    public const int AccidFieldNumber = 3;
    private ulong accid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Accid {
      get { return accid_; }
      set {
        accid_ = value;
      }
    }

    /// <summary>Field number for the "zoneid" field.</summary>
    public const int ZoneidFieldNumber = 4;
    private uint zoneid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Zoneid {
      get { return zoneid_; }
      set {
        zoneid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GMDeleteCharUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GMDeleteCharUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Accid != other.Accid) return false;
      if (Zoneid != other.Zoneid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Accid != 0UL) hash ^= Accid.GetHashCode();
      if (Zoneid != 0) hash ^= Zoneid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Accid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Accid);
      }
      if (Zoneid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Zoneid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Accid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Accid);
      }
      if (Zoneid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Zoneid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GMDeleteCharUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Accid != 0UL) {
        Accid = other.Accid;
      }
      if (other.Zoneid != 0) {
        Zoneid = other.Zoneid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Accid = input.ReadUInt64();
            break;
          }
          case 32: {
            Zoneid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求连接服务器,C->S
  /// </summary>
  public sealed partial class ReqLoginUserCmd : pb::IMessage<ReqLoginUserCmd> {
    private static readonly pb::MessageParser<ReqLoginUserCmd> _parser = new pb::MessageParser<ReqLoginUserCmd>(() => new ReqLoginUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqLoginUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.LoginUserCmdReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLoginUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLoginUserCmd(ReqLoginUserCmd other) : this() {
      accid_ = other.accid_;
      sha1_ = other.sha1_;
      zoneid_ = other.zoneid_;
      timestamp_ = other.timestamp_;
      version_ = other.version_;
      domain_ = other.domain_;
      ip_ = other.ip_;
      device_ = other.device_;
      phone_ = other.phone_;
      safeDevice_ = other.safeDevice_;
      language_ = other.language_;
      site_ = other.site_;
      authorize_ = other.authorize_;
      relogin_ = other.relogin_;
      reloginack_ = other.reloginack_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLoginUserCmd Clone() {
      return new ReqLoginUserCmd(this);
    }

    /// <summary>Field number for the "accid" field.</summary>
    public const int AccidFieldNumber = 3;
    private ulong accid_;
    /// <summary>
    /// 账号id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Accid {
      get { return accid_; }
      set {
        accid_ = value;
      }
    }

    /// <summary>Field number for the "sha1" field.</summary>
    public const int Sha1FieldNumber = 4;
    private string sha1_ = "";
    /// <summary>
    /// sha1验证码,unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sha1 {
      get { return sha1_; }
      set {
        sha1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zoneid" field.</summary>
    public const int ZoneidFieldNumber = 5;
    private uint zoneid_;
    /// <summary>
    /// 大区id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Zoneid {
      get { return zoneid_; }
      set {
        zoneid_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 6;
    private uint timestamp_;
    /// <summary>
    /// 时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 7;
    private string version_ = "";
    /// <summary>
    /// 版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 8;
    private string domain_ = "";
    /// <summary>
    /// 域名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domain_; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 9;
    private string ip_ = "";
    /// <summary>
    /// ip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 10;
    private string device_ = "";
    /// <summary>
    /// 设备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Device {
      get { return device_; }
      set {
        device_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "phone" field.</summary>
    public const int PhoneFieldNumber = 11;
    private string phone_ = "";
    /// <summary>
    /// 手机号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phone {
      get { return phone_; }
      set {
        phone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "safe_device" field.</summary>
    public const int SafeDeviceFieldNumber = 12;
    private string safeDevice_ = "";
    /// <summary>
    /// 安全设备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SafeDevice {
      get { return safeDevice_; }
      set {
        safeDevice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 13;
    private uint language_;
    /// <summary>
    /// 语言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Language {
      get { return language_; }
      set {
        language_ = value;
      }
    }

    /// <summary>Field number for the "site" field.</summary>
    public const int SiteFieldNumber = 14;
    private uint site_;
    /// <summary>
    /// unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Site {
      get { return site_; }
      set {
        site_ = value;
      }
    }

    /// <summary>Field number for the "authorize" field.</summary>
    public const int AuthorizeFieldNumber = 15;
    private string authorize_ = "";
    /// <summary>
    /// 安全密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Authorize {
      get { return authorize_; }
      set {
        authorize_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "relogin" field.</summary>
    public const int ReloginFieldNumber = 16;
    private bool relogin_;
    /// <summary>
    /// 短线重连
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Relogin {
      get { return relogin_; }
      set {
        relogin_ = value;
      }
    }

    /// <summary>Field number for the "reloginack" field.</summary>
    public const int ReloginackFieldNumber = 17;
    private uint reloginack_;
    /// <summary>
    /// 断线重连确认序号 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Reloginack {
      get { return reloginack_; }
      set {
        reloginack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqLoginUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqLoginUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Accid != other.Accid) return false;
      if (Sha1 != other.Sha1) return false;
      if (Zoneid != other.Zoneid) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Version != other.Version) return false;
      if (Domain != other.Domain) return false;
      if (Ip != other.Ip) return false;
      if (Device != other.Device) return false;
      if (Phone != other.Phone) return false;
      if (SafeDevice != other.SafeDevice) return false;
      if (Language != other.Language) return false;
      if (Site != other.Site) return false;
      if (Authorize != other.Authorize) return false;
      if (Relogin != other.Relogin) return false;
      if (Reloginack != other.Reloginack) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Accid != 0UL) hash ^= Accid.GetHashCode();
      if (Sha1.Length != 0) hash ^= Sha1.GetHashCode();
      if (Zoneid != 0) hash ^= Zoneid.GetHashCode();
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Domain.Length != 0) hash ^= Domain.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Device.Length != 0) hash ^= Device.GetHashCode();
      if (Phone.Length != 0) hash ^= Phone.GetHashCode();
      if (SafeDevice.Length != 0) hash ^= SafeDevice.GetHashCode();
      if (Language != 0) hash ^= Language.GetHashCode();
      if (Site != 0) hash ^= Site.GetHashCode();
      if (Authorize.Length != 0) hash ^= Authorize.GetHashCode();
      if (Relogin != false) hash ^= Relogin.GetHashCode();
      if (Reloginack != 0) hash ^= Reloginack.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Accid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Accid);
      }
      if (Sha1.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Sha1);
      }
      if (Zoneid != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Zoneid);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Timestamp);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Version);
      }
      if (Domain.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Domain);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Ip);
      }
      if (Device.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Device);
      }
      if (Phone.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Phone);
      }
      if (SafeDevice.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(SafeDevice);
      }
      if (Language != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Language);
      }
      if (Site != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(Site);
      }
      if (Authorize.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Authorize);
      }
      if (Relogin != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Relogin);
      }
      if (Reloginack != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(Reloginack);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Accid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Accid);
      }
      if (Sha1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sha1);
      }
      if (Zoneid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Zoneid);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Domain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Device.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Device);
      }
      if (Phone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Phone);
      }
      if (SafeDevice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SafeDevice);
      }
      if (Language != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Language);
      }
      if (Site != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Site);
      }
      if (Authorize.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Authorize);
      }
      if (Relogin != false) {
        size += 2 + 1;
      }
      if (Reloginack != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Reloginack);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqLoginUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Accid != 0UL) {
        Accid = other.Accid;
      }
      if (other.Sha1.Length != 0) {
        Sha1 = other.Sha1;
      }
      if (other.Zoneid != 0) {
        Zoneid = other.Zoneid;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Domain.Length != 0) {
        Domain = other.Domain;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Device.Length != 0) {
        Device = other.Device;
      }
      if (other.Phone.Length != 0) {
        Phone = other.Phone;
      }
      if (other.SafeDevice.Length != 0) {
        SafeDevice = other.SafeDevice;
      }
      if (other.Language != 0) {
        Language = other.Language;
      }
      if (other.Site != 0) {
        Site = other.Site;
      }
      if (other.Authorize.Length != 0) {
        Authorize = other.Authorize;
      }
      if (other.Relogin != false) {
        Relogin = other.Relogin;
      }
      if (other.Reloginack != 0) {
        Reloginack = other.Reloginack;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Accid = input.ReadUInt64();
            break;
          }
          case 34: {
            Sha1 = input.ReadString();
            break;
          }
          case 40: {
            Zoneid = input.ReadUInt32();
            break;
          }
          case 48: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 58: {
            Version = input.ReadString();
            break;
          }
          case 66: {
            Domain = input.ReadString();
            break;
          }
          case 74: {
            Ip = input.ReadString();
            break;
          }
          case 82: {
            Device = input.ReadString();
            break;
          }
          case 90: {
            Phone = input.ReadString();
            break;
          }
          case 98: {
            SafeDevice = input.ReadString();
            break;
          }
          case 104: {
            Language = input.ReadUInt32();
            break;
          }
          case 112: {
            Site = input.ReadUInt32();
            break;
          }
          case 122: {
            Authorize = input.ReadString();
            break;
          }
          case 128: {
            Relogin = input.ReadBool();
            break;
          }
          case 136: {
            Reloginack = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 取消删除角色,C->S
  /// </summary>
  public sealed partial class CancelDeleteCharUserCmd : pb::IMessage<CancelDeleteCharUserCmd> {
    private static readonly pb::MessageParser<CancelDeleteCharUserCmd> _parser = new pb::MessageParser<CancelDeleteCharUserCmd>(() => new CancelDeleteCharUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelDeleteCharUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.LoginUserCmdReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelDeleteCharUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelDeleteCharUserCmd(CancelDeleteCharUserCmd other) : this() {
      id_ = other.id_;
      accid_ = other.accid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelDeleteCharUserCmd Clone() {
      return new CancelDeleteCharUserCmd(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private ulong id_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "accid" field.</summary>
    public const int AccidFieldNumber = 4;
    private ulong accid_;
    /// <summary>
    /// 账号id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Accid {
      get { return accid_; }
      set {
        accid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelDeleteCharUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelDeleteCharUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Accid != other.Accid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Accid != 0UL) hash ^= Accid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Id);
      }
      if (Accid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Accid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Accid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Accid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelDeleteCharUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Accid != 0UL) {
        Accid = other.Accid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Id = input.ReadUInt64();
            break;
          }
          case 32: {
            Accid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端帧率,C->S
  /// </summary>
  public sealed partial class ClientFrameUserCmd : pb::IMessage<ClientFrameUserCmd> {
    private static readonly pb::MessageParser<ClientFrameUserCmd> _parser = new pb::MessageParser<ClientFrameUserCmd>(() => new ClientFrameUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientFrameUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.LoginUserCmdReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientFrameUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientFrameUserCmd(ClientFrameUserCmd other) : this() {
      frame_ = other.frame_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientFrameUserCmd Clone() {
      return new ClientFrameUserCmd(this);
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 3;
    private uint frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientFrameUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientFrameUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Frame != other.Frame) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Frame != 0) hash ^= Frame.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Frame != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Frame);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Frame);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientFrameUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Frame != 0) {
        Frame = other.Frame;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Frame = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
