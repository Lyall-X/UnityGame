// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoItemCommon.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Cmd {

  /// <summary>Holder for reflection information generated from ProtoItemCommon.proto</summary>
  public static partial class ProtoItemCommonReflection {

    #region Descriptor
    /// <summary>File descriptor for ProtoItemCommon.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtoItemCommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVQcm90b0l0ZW1Db21tb24ucHJvdG8SA0NtZBoPUHJvdG9BdHRyLnByb3Rv",
            "IjoKC0VuY2hhbnRBdHRyEhwKBHR5cGUYASABKA4yDi5DbWQuRUF0dHJUeXBl",
            "Eg0KBXZhbHVlGAIgASgNIjAKDEVuY2hhbnRFeHRyYRIQCghjb25maWdpZBgB",
            "IAEoDRIOCgZidWZmaWQYAiABKA0igQMKCEl0ZW1JbmZvEgwKBGd1aWQYASAB",
            "KAkSCgoCaWQYAiABKA0SDQoFY291bnQYAyABKA0SDQoFaW5kZXgYBCABKA0S",
            "EgoKY3JlYXRldGltZRgFIAEoDRIKCgJjZBgGIAEoBBInCgpncm91cF90eXBl",
            "GBYgASgOMhMuQ21kLkVJdGVtR3JvdXBUeXBlEgwKBHR5cGUYByABKA0SDwoH",
            "cXVhbGl0eRgKIAEoDRIiCgllcXVpcFR5cGUYCyABKA4yDy5DbWQuRUVxdWlw",
            "VHlwZRIcCgZzb3VyY2UYDCABKA4yDC5DbWQuRVNvdXJjZRINCgVpc25ldxgN",
            "IAEoCBISCgpzb3VyY2VfbnBjGBEgASgNEhAKCHJlZmluZWx2GBIgASgNEhMK",
            "C2NoYXJnZW1vbmV5GBMgASgNEhAKCG92ZXJ0aW1lGBQgASgNEg0KBXF1b3Rh",
            "GBUgASgEEhQKDHVzZXBhcnRuZXJpZBgXIAEoDRISCgp1c2Vza2lsbGlkGBgg",
            "ASgNImEKCEl0ZW1EYXRhEhsKBGJhc2UYASABKAsyDS5DbWQuSXRlbUluZm8S",
            "HQoFZXF1aXAYAiABKAsyDi5DbWQuRXF1aXBEYXRhEhkKA2VnZxgJIAEoCzIM",
            "LkNtZC5FZ2dEYXRhIkQKCUVxdWlwRGF0YRITCgtzdHJlbmd0aGV4cBgBIAEo",
            "DRISCgpzdHJlbmd0aGx2GAIgASgNEg4KBnN0YXJsdhgDIAEoDSKxBAoHRWdn",
            "RGF0YRILCgNleHAYASABKAQSEQoJZnJpZW5kZXhwGAIgASgEEhEKCXJld2Fy",
            "ZGV4cBgDIAEoBBIKCgJpZBgEIAEoDRIKCgJsdhgFIAEoDRIQCghmcmllbmRs",
            "dhgGIAEoDRIMCgRib2R5GAcgASgNEhIKCnJlbGl2ZXRpbWUYCCABKA0SCgoC",
            "aHAYCSABKA0SEwoLcmVzdG9yZXRpbWUYCiABKA0SEwoLdGltZV9oYXBwbHkY",
            "CyABKA0SEwoLdGltZV9leGNpdGUYDCABKA0SFgoOdGltZV9oYXBwaW5lc3MY",
            "DSABKA0SGAoQdGltZV9oYXBwbHlfZ2lmdBgOIAEoDRIYChB0aW1lX2V4Y2l0",
            "ZV9naWZ0GA8gASgNEhsKE3RpbWVfaGFwcGluZXNzX2dpZnQYECABKA0SEgoK",
            "dG91Y2hfdGljaxgWIAEoDRIRCglmZWVkX3RpY2sYFyABKA0SDAoEbmFtZRgR",
            "IAEoCRILCgN2YXIYEiABKAwSEAoIc2tpbGxpZHMYEyADKA0SHQoGZXF1aXBz",
            "GBQgAygLMg0uQ21kLkVnZ0VxdWlwEgwKBGJ1ZmYYFSABKAwSFAoMdW5sb2Nr",
            "X2VxdWlwGBggAygNEhMKC3VubG9ja19ib2R5GBkgAygNEg8KB3ZlcnNpb24Y",
            "GiABKA0SEAoIc2tpbGxvZmYYGyABKAgSFgoOZXhjaGFuZ2VfY291bnQYHCAB",
            "KA0SDAoEZ3VpZBgdIAEoCSIoCg1SZWZpbmVDb21wb3NlEgoKAmlkGAEgASgN",
            "EgsKA251bRgCIAEoDSJFCghFZ2dFcXVpcBIbCgRiYXNlGAEgASgLMg0uQ21k",
            "Lkl0ZW1JbmZvEhwKBGRhdGEYAiABKAsyDi5DbWQuRXF1aXBEYXRhItQFCghT",
            "aG9wSXRlbRIKCgJpZBgBIAEoDRIKCgJsdhgCIAEoDRIPCgdtb25leWlkGAMg",
            "ASgNEhIKCm1vbmV5Y291bnQYBCABKA0SEAoIbW9uZXlpZDIYBSABKA0SEwoL",
            "bW9uZXljb3VudDIYBiABKA0SEQoJc3RhcnR0aW1lGAcgASgNEg8KB2VuZHRp",
            "bWUYCCABKA0SEAoIZGlzY291bnQYCSABKA0SEAoIbWF4Y291bnQYCiABKA0S",
            "DgoGc2hvcGlkGAsgASgNEg4KBnNjcmVlbhgMIAEoDRIOCgZpdGVtaWQYDSAB",
            "KA0SDwoHc2tpbGxpZBgOIAEoDRITCgtoYWlyY29sb3JpZBgQIAEoDRILCgNu",
            "dW0YESABKA0SDgoGbWVudWlkGBIgASgNEhAKCHNob3B0eXBlGBMgASgNEiYK",
            "CWxpbWl0dHlwZRgVIAEoDjITLkNtZC5FU2hvcExpbWl0VHlwZRILCgNkZXMY",
            "FiABKAkSDgoGbGV2ZGVzGBcgASgJEhAKCGJ1c2luZXNzGBggASgNEg8KB3By",
            "ZWNvc3QYGSABKA0SDwoHZGlzcGxheRgaIAEoDRIRCglzaG9wb3JkZXIYGyAB",
            "KA0SDQoFaWZtc2cYHCABKA0SDwoHYWRkZGF0ZRgdIAEoDRISCgpyZW1vdmVk",
            "YXRlGB4gASgNEiAKBnNvdXJjZRglIAEoDjIQLkNtZC5FU2hvcFNvdXJjZRIk",
            "Cghsb2NrdHlwZRgfIAEoDjISLkNtZC5FU2hvcExvY2tUeXBlEg8KB2xvY2th",
            "cmcYICABKAkSEwoLZGlzY291bnRtYXgYISABKA0SEwoLYWN0ZGlzY291bnQY",
            "IiABKA0SEgoKcHJvZHVjZW51bRgjIAEoDRITCgtuZXh0Z29vZHNpZBgkIAEo",
            "DRIUCgxjbG90aGNvbG9yaWQYJiABKA0SFQoNY2xvdGhjb2xvcmlkcxgnIAMo",
            "DSq7AgoORUl0ZW1Hcm91cFR5cGUSFgoSRUlURU1HUk9VUFRZUEVfTUlOEAAS",
            "GgoWRUlURU1HUk9VUFRZUEVfRk9STVVMQRABEhgKFEVJVEVNR1JPVVBUWVBF",
            "X0VRVUlQEAISHAoYRUlURU1HUk9VUFRZUEVfRlVSTklUVVJFEAMSGAoURUlU",
            "RU1HUk9VUFRZUEVfTU9ORVkQBBIXChNFSVRFTUdST1VQVFlQRV9GT09EEAYS",
            "GwoXRUlURU1HUk9VUFRZUEVfTUFURVJJQUwQBxIXChNFSVRFTUdST1VQVFlQ",
            "RV9HSUZUEAgSHgoaRUlURU1HUk9VUFRZUEVfQ09OU1VNQUJMRVMQCRIcChhF",
            "SVRFTUdST1VQVFlQRV9RVUVTVElURU0QChIWChJFSVRFTUdST1VQVFlQRV9N",
            "QVgQDSqBFwoJRUl0ZW1UeXBlEhEKDUVJVEVNVFlQRV9NSU4QABIcChhFSVRF",
            "TVRZUEVfV0VBUE9OX0ZPUk1VTEEQChIeChpFSVRFTVRZUEVfTkVDS0xBQ0Vf",
            "Rk9STVVMQRALEhoKFkVJVEVNVFlQRV9SSU5HX0ZPUk1VTEEQDBIeChpFSVRF",
            "TVRZUEVfRUFSUklOR1NfRk9STVVMQRANEiAKHEVJVEVNVFlQRV9XUklTVEJB",
            "TkRTX0ZPUk1VTEEQDhIeChpFSVRFTVRZUEVfSEVBRFdFQVJfRk9STVVMQRAP",
            "EhoKFkVJVEVNVFlQRV9GQUNFX0ZPUk1VTEEQEBIbChdFSVRFTVRZUEVfTU9V",
            "VEhfRk9STVVMQRAREhoKFkVJVEVNVFlQRV9CQUNLX0ZPUk1VTEEQEhIaChZF",
            "SVRFTVRZUEVfVEFJTF9GT1JNVUxBEBMSGgoWRUlURU1UWVBFX0ZPT0RfRk9S",
            "TVVMQRAXEigKJEVJVEVNVFlQRV9OT1JNQUxfTU9OU1RFUkNBUkRfRk9STVVM",
            "QRAYEigKJEVJVEVNVFlQRV9FTElURVNfTU9OU1RFUkNBUkRfRk9STVVMQRAZ",
            "EiYKIkVJVEVNVFlQRV9CT1NTX01PTlNURVJDQVJEX0ZPUk1VTEEQGhIhCh1F",
            "SVRFTVRZUEVfUEFSVE5FUkNBUkRfRk9STVVMQRAbEh0KGUVJVEVNVFlQRV9O",
            "UENDQVJEX0ZPUk1VTEEQHBIfChtFSVRFTVRZUEVfV0FMTFBBUEVSX0ZPUk1V",
            "TEEQHRIaChZFSVRFTVRZUEVfRE9PUl9GT1JNVUxBEB4SHAoYRUlURU1UWVBF",
            "X1dJTkRPV19GT1JNVUxBEB8SGQoVRUlURU1UWVBFX0JFRF9GT1JNVUxBECAS",
            "GwoXRUlURU1UWVBFX1RBQkxFX0ZPUk1VTEEQIRIdChlFSVRFTVRZUEVfQ0FC",
            "SU5FVF9GT1JNVUxBECISHgoaRUlURU1UWVBFX09STkFNRU5UX0ZPUk1VTEEQ",
            "IxIbChdFSVRFTVRZUEVfRkxPT1JfRk9STVVMQRAkEhsKF0VJVEVNVFlQRV9D",
            "SEFJUl9GT1JNVUxBECUSGgoWRUlURU1UWVBFX0dJRlRfRk9STVVMQRAmEhUK",
            "EUVJVEVNVFlQRV9XRUFQT04xEEYSFQoRRUlURU1UWVBFX1dFQVBPTjIQRxIV",
            "ChFFSVRFTVRZUEVfV0VBUE9OMxBIEhUKEUVJVEVNVFlQRV9XRUFQT040EEkS",
            "FQoRRUlURU1UWVBFX1dFQVBPTjUQShIVChFFSVRFTVRZUEVfV0VBUE9ONhBL",
            "EhUKEUVJVEVNVFlQRV9XRUFQT043EEwSFQoRRUlURU1UWVBFX1dFQVBPTjgQ",
            "TRIVChFFSVRFTVRZUEVfV0VBUE9OORBOEhYKEkVJVEVNVFlQRV9XRUFQT04x",
            "MBBPEhYKEkVJVEVNVFlQRV9XRUFQT04xMRBQEhYKEkVJVEVNVFlQRV9XRUFQ",
            "T04xMhBREhYKEkVJVEVNVFlQRV9XRUFQT04xMxBSEhYKEkVJVEVNVFlQRV9X",
            "RUFQT04xNBBTEhYKEkVJVEVNVFlQRV9XRUFQT04xNRBUEhYKEkVJVEVNVFlQ",
            "RV9XRUFQT04xNhBVEhYKEkVJVEVNVFlQRV9XRUFQT04xNxBWEhYKEkVJVEVN",
            "VFlQRV9XRUFQT04xOBBXEhYKEkVJVEVNVFlQRV9XRUFQT04xORBYEhYKEkVJ",
            "VEVNVFlQRV9XRUFQT04yMBBZEhYKEkVJVEVNVFlQRV9XRUFQT04yMRBaEhYK",
            "EkVJVEVNVFlQRV9XRUFQT04yMhBbEhYKEkVJVEVNVFlQRV9XRUFQT04yMxBc",
            "EhYKEkVJVEVNVFlQRV9XRUFQT04yNBBdEhYKEkVJVEVNVFlQRV9XRUFQT04y",
            "NRBeEhYKEkVJVEVNVFlQRV9XRUFQT04yNhBfEhYKEkVJVEVNVFlQRV9XRUFQ",
            "T04yNxBgEhYKEkVJVEVNVFlQRV9XRUFQT04yOBBhEhYKEkVJVEVNVFlQRV9X",
            "RUFQT04yORBiEhYKEkVJVEVNVFlQRV9XRUFQT04zMBBjEhYKEkVJVEVNVFlQ",
            "RV9XRUFQT04zMRBkEhYKEkVJVEVNVFlQRV9XRUFQT04zMhBlEhYKEkVJVEVN",
            "VFlQRV9XRUFQT04zMxBmEhYKEkVJVEVNVFlQRV9XRUFQT04zNBBnEhYKEkVJ",
            "VEVNVFlQRV9XRUFQT04zNRBoEhYKEkVJVEVNVFlQRV9XRUFQT04zNhBpEhYK",
            "EkVJVEVNVFlQRV9XRUFQT04zNxBqEhYKEkVJVEVNVFlQRV9XRUFQT04zOBBr",
            "EhYKEkVJVEVNVFlQRV9XRUFQT04zORBsEhYKEkVJVEVNVFlQRV9XRUFQT040",
            "MBBtEhYKEkVJVEVNVFlQRV9ORUNLTEFDRRBuEhIKDkVJVEVNVFlQRV9SSU5H",
            "EHgSFwoSRUlURU1UWVBFX0JSQUNFTEVUEIIBEhUKEEVJVEVNVFlQRV9CUk9P",
            "Q0gQjAESFwoSRUlURU1UWVBFX0hFQURXRUFSEJYBEhYKEUVJVEVNVFlQRV9F",
            "QVJXRUFSEJcBEhMKDkVJVEVNVFlQRV9GQUNFEKABEhQKD0VJVEVNVFlQRV9N",
            "T1VUSBCqARITCg5FSVRFTVRZUEVfQkFDSxC0ARITCg5FSVRFTVRZUEVfVEFJ",
            "TBC+ARIaChVFSVRFTVRZUEVfUExBWUVSX1NLSU4QyAESEgoNRUlURU1UWVBF",
            "X0JFRBCiAhIUCg9FSVRFTVRZUEVfVEFCTEUQrAISFAoPRUlURU1UWVBFX0NI",
            "QUlSELYCEhYKEUVJVEVNVFlQRV9DQUJJTkVUEMACEhQKD0VJVEVNVFlQRV9M",
            "SUdIVBDKAhIVChBFSVRFTVRZUEVfQ0FSUEVUEMsCEhsKFkVJVEVNVFlQRV9H",
            "Uk9VTkRfQUJPVkUQzAISFgoRRUlURU1UWVBFX1dBTExQSUMQ1AISGAoTRUlU",
            "RU1UWVBFX1dBTExfU0lERRDVAhIWChFFVFRFTVRZUEVfQ0VJTElORxDWAhIY",
            "ChNFSVRFTVRZUEVfV0FMTFBBUEVSEN4CEhcKEkVJVEVNVFlQRV9PUk5BTUVO",
            "VBDoAhITCg5FSVRFTVRZUEVfRE9PUhDyAhIVChBFSVRFTVRZUEVfV0lORE9X",
            "EPwCEhQKD0VJVEVNVFlQRV9NT05FWRCQAxISCg1FSVRFTVRZUEVfRVhQEJID",
            "Eh8KGkVJVEVNVFlQRV9NSU5FUkFMX01BVEVSSUFMEKQDEh0KGEVJVEVNVFlQ",
            "RV9HUkFTU19NQVRFUklBTBClAxIlCiBFSVRFTVRZUEVfTk9STUFMTU9OU1RF",
            "Ul9NQVRFUklBTBCuAxIlCiBFSVRFTVRZUEVfRUxJVEVTTU9OU1RFUl9NQVRF",
            "UklBTBC4AxIjCh5FSVRFTVRZUEVfQk9TU01PTlNURVJfTUFURVJJQUwQwgMS",
            "HAoXRUlURU1UWVBFX1JBUkVfTUFURVJJQUwQzAMSHwoaRUlURU1UWVBFX1BB",
            "UlRORVJfTUFURVJJQUwQ1gMSHAoXRUlURU1UWVBFX01BTkFfTUFURVJJQUwQ",
            "1wMSGgoVRUlURU1UWVBFX01BTkFfQ09VUE9OENgDEhUKEEVJVEVNVFlQRV9S",
            "RVdBUkQQ4AMSGgoVRUlURU1UWVBFX0NPTlNVTUFCTEVTEOoDEh4KGUVJVEVN",
            "VFlQRV9BVVRPQ09OU1VNQUJMRVMQ6wMSGAoTRUlURU1UWVBFX1FVRVNUSVRF",
            "TRD0AxIbChZFSVRFTVRZUEVfUkVQQUlSRU5FUkdZEP4DEh8KGkVJVEVNVFlQ",
            "RV9GSUdIVEVSX0VYUF9QT09MEP8DEh0KGEVJVEVNVFlQRV9EQUlMWV9BQ1RJ",
            "VklUWRCABBISCg1FSVRFTVRZUEVfTUFYEOkgKqQECgpFRXF1aXBUeXBlEhIK",
            "DkVFUVVJUFRZUEVfTUlOEAASFQoRRUVRVUlQVFlQRV9XRUFQT04QARIVChFF",
            "RVFVSVBUWVBFX1NISUVMRBADEhUKEUVFUVVJUFRZUEVfQVJNT1VSEAISEwoP",
            "RUVRVUlQVFlQRV9ST0JFEAQSFAoQRUVRVUlQVFlQRV9TSE9FUxAFEhgKFEVF",
            "UVVJUFRZUEVfQUNDRVNTT1JZEAYSEwoPRUVRVUlQVFlQRV9IRUFEEAgSEwoP",
            "RUVRVUlQVFlQRV9CQUNLEAkSEwoPRUVRVUlQVFlQRV9GQUNFEAoSEwoPRUVR",
            "VUlQVFlQRV9UQUlMEAsSFAoQRUVRVUlQVFlQRV9NT1VOVBAMEhQKEEVFUVVJ",
            "UFRZUEVfTU9VVEgQDRIVChFFRVFVSVBUWVBFX0JBUlJPVxAOEhQKEEVFUVVJ",
            "UFRZUEVfUEVBUkwQEBIUChBFRVFVSVBUWVBFX0VJS09OEBESFwoTRUVRVUlQ",
            "VFlQRV9CUkFDRUxFVBASEhsKF0VFUVVJUFRZUEVfSEFOREJSQUNFTEVUEBMS",
            "FgoSRUVRVUlQVFlQRV9UUk9MTEVZEBQSFwoTRUVRVUlQVFlQRV9BUlRJRkFD",
            "VBAVEhwKGEVFUVVJUFRZUEVfQVJUSUZBQ1RfSEVBRBAWEhwKGEVFUVVJUFRZ",
            "UEVfQVJUSUZBQ1RfQkFDSxAXEhIKDkVFUVVJUFRZUEVfTUFYEBgqtQEKDEVR",
            "dWFsaXR5VHlwZRIUChBFUVVBTElUWVRZUEVfTUlOEAASGAoURVFVQUxJVFlU",
            "WVBFX09ORVNUQVIQARIYChRFUVVBTElUWVRZUEVfVFdPU1RBUhACEhoKFkVR",
            "VUFMSVRZVFlQRV9USFJFRVNUQVIQAxITCg9FUVVBTElUWVRZUEVfU1IQBBIU",
            "ChBFUVVBTElUWVRZUEVfU1NSEAUSFAoQRVFVQUxJVFlUWVBFX01BWBAGKtwH",
            "CgdFU291cmNlEg8KC0VTT1VSQ0VfTUlOEAASEgoORVNPVVJDRV9OT1JNQUwQ",
            "ARITCg9FU09VUkNFX1BBQ0tBR0UQAhIRCg1FU09VUkNFX1FVRVNUEAMSEgoO",
            "RVNPVVJDRV9SRVdBUkQQBBIXChNFU09VUkNFX01PTlNURVJLSUxMEAUSDgoK",
            "RVNPVVJDRV9HTRAGEhIKDkVTT1VSQ0VfUElDS1VQEAcSEAoMRVNPVVJDRV9M",
            "VlVQEAgSEgoORVNPVVJDRV9SRUxJVkUQCRIUChBFU09VUkNFX0pVTVBaT05F",
            "EAoSEwoPRVNPVVJDRV9VU0VJVEVNEAsSEAoMRVNPVVJDRV9NQUlMEAwSFwoT",
            "RVNPVVJDRV9VU0VSX1JFTkFNRRANEhkKFUVTT1VSQ0VfRklHVEhURVJfU1RB",
            "UhAOEhsKF0VTT1VSQ0VfRklHVEhURVJfVU5MT0NLEA8SGQoVRVNPVVJDRV9T",
            "VEFUVVNfQ0hBTkdFEBASFQoRRVNPVVJDRV9SRUNPTkNJTEUQERIUChBFU09V",
            "UkNFX0FDVFNLSUxMEBMSFQoRRVNPVVJDRV9NQU5BU0tJTEwQFBIXChNFU09V",
            "UkNFX01BTkFfVU5MT0NLEBUSFgoSRVNPVVJDRV9VTkxPQ0tfQk9YEBYSGQoV",
            "RVNPVVJDRV9TS0lMTF9MRVZFTFVQEBcSFwoTRVNPVVJDRV9JTlRFUkFDVElP",
            "ThAYEhMKD0VTT1VSQ0VfTE9UVEVSWRAaEhwKGEVTT1VSQ0VfVFJBTlNQT1JU",
            "X1JFV0FSRBAbEhUKEUVTT1VSQ0VfU0tJTExMVlVQEBwSFQoRRVNPVVJDRV9F",
            "WElUX0NPUFkQHRIVChFFU09VUkNFX1JBSURTQ0VORRAfEhoKFkVTT1VSQ0Vf",
            "RVFVSVBfU1RSRU5HVEgQIBIYChRFU09VUkNFX0VRVUlQX1VQU1RBUhAhEhwK",
            "GEVTT1VSQ0VfRklHSFRFUl9FWFBfUE9PTBAjEhwKGEVTT1VSQ0VfV1hLSl9J",
            "VEVNX1NVQk1JVBAlEhYKEkVTT1VSQ0VfV1hLSl9FTlRFUhAmEhgKFEVTT1VS",
            "Q0VfQ09MTEVHRV9HSUZUECcSGQoVRVNPVVJDRV9EQUlMWUFDVElWSVRZECgS",
            "HAoYRVNPVVJDRV9EQUlMWUFDVElWSVRZX1VQECkSGQoVRVNPVVJDRV9DTFVC",
            "Q0hBTExFTkdFECoSGAoURVNPVVJDRV9BQ1RJVkVEQVRJTkcQKxIfChtFU09V",
            "UkNFX0VRVUlQX1NUUkVOR1RIX0JBQ0sQLBIQCgtFU09VUkNFX01BWBCABCqG",
            "AQoMRUVuY2hhbnRUeXBlEhQKEEVFTkNIQU5UVFlQRV9NSU4QABIYChRFRU5D",
            "SEFOVFRZUEVfUFJJTUFSWRABEhcKE0VFTkNIQU5UVFlQRV9NRURJVU0QAhIX",
            "ChNFRU5DSEFOVFRZUEVfU0VOSU9SEAMSFAoQRUVOQ0hBTlRUWVBFX01BWBAE",
            "KrECCg5FU2hvcExpbWl0VHlwZRIWChJFU0hPUExJTUlUVFlQRV9NSU4QABIX",
            "ChNFU0hPUExJTUlUVFlQRV9VU0VSEAESGwoXRVNIT1BMSU1JVFRZUEVfT05F",
            "X09OTFkQAhIbChdFU0hPUExJTUlUVFlQRV9BQ0NfVVNFUhAEEiIKHkVTSE9Q",
            "TElNSVRUWVBFX0FDQ19VU0VSX0FMV0FZUxAIEhwKGEVTSE9QTElNSVRUWVBF",
            "X1VTRVJfV0VFSxAQEh0KGUVTSE9QTElNSVRUWVBFX1VTRVJfTU9OVEgQIBIb",
            "ChdFU0hPUExJTUlUVFlQRV9BQ0NfV0VFSxBAEh0KGEVTSE9QTElNSVRUWVBF",
            "X0FDQ19NT05USBCAARIXChJFU0hPUExJTUlUVFlQRV9NQVgQgAIqdwoNRVNo",
            "b3BMb2NrVHlwZRIVChFFU0hPUExPQ0tUWVBFX01JThAAEhcKE0VTSE9QTE9D",
            "S1RZUEVfUVVFU1QQARIfChtFU0hPUExPQ0tUWVBFX0dVSUxEQlVJTERJTkcQ",
            "AhIVChFFU0hPUExPQ0tUWVBFX01BWBADKjoKC0VTaG9wU291cmNlEhQKEEVT",
            "SE9QU09VUkNFX1VTRVIQABIVChFFU0hPUFNPVVJDRV9HVUlMRBABKrkCCglF",
            "RXF1aXBQb3MSEQoNRUVRVUlQUE9TX01JThAAEhQKEEVFUVVJUFBPU19XRUFQ",
            "T04QARITCg9FRVFVSVBQT1NfQVJNT1IQAhIZChVFRVFVSVBQT1NfQUNDRVNT",
            "T1JJRVMQAxIWChJFRVFVSVBQT1NfQlJBQ0VMRVQQBBIUChBFRVFVSVBQT1Nf",
            "QlJPT0NIEAUSEgoORUVRVUlQUE9TX0hFQUQQBhIWChJFRVFVSVBQT1NfRUFS",
            "UklOR1MQBxISCg5FRVFVSVBQT1NfRkFDRRAIEhMKD0VFUVVJUFBPU19NT1VU",
            "SBAJEhIKDkVFUVVJUFBPU19CQUNLEAoSEgoORUVRVUlQUE9TX1RBSUwQCxIV",
            "ChFFRVFVSVBQT1NfRkFTSElPThAMEhEKDUVFUVVJUFBPU19NQVgQDSpaCglF",
            "UGFja1R5cGUSEQoNRVBBQ0tUWVBFX01JThAAEhMKD0VQQUNLVFlQRV9FUVVJ",
            "UBABEhIKDkVQQUNLVFlQRV9NQUlOEAISEQoNRVBBQ0tUWVBFX01BWBADQgda",
            "BS47Q21kYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Cmd.ProtoAttrReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Cmd.EItemGroupType), typeof(global::Cmd.EItemType), typeof(global::Cmd.EEquipType), typeof(global::Cmd.EQualityType), typeof(global::Cmd.ESource), typeof(global::Cmd.EEnchantType), typeof(global::Cmd.EShopLimitType), typeof(global::Cmd.EShopLockType), typeof(global::Cmd.EShopSource), typeof(global::Cmd.EEquipPos), typeof(global::Cmd.EPackType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.EnchantAttr), global::Cmd.EnchantAttr.Parser, new[]{ "Type", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.EnchantExtra), global::Cmd.EnchantExtra.Parser, new[]{ "Configid", "Buffid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ItemInfo), global::Cmd.ItemInfo.Parser, new[]{ "Guid", "Id", "Count", "Index", "Createtime", "Cd", "GroupType", "Type", "Quality", "EquipType", "Source", "Isnew", "SourceNpc", "Refinelv", "Chargemoney", "Overtime", "Quota", "Usepartnerid", "Useskillid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ItemData), global::Cmd.ItemData.Parser, new[]{ "Base", "Equip", "Egg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.EquipData), global::Cmd.EquipData.Parser, new[]{ "Strengthexp", "Strengthlv", "Starlv" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.EggData), global::Cmd.EggData.Parser, new[]{ "Exp", "Friendexp", "Rewardexp", "Id", "Lv", "Friendlv", "Body", "Relivetime", "Hp", "Restoretime", "TimeHapply", "TimeExcite", "TimeHappiness", "TimeHapplyGift", "TimeExciteGift", "TimeHappinessGift", "TouchTick", "FeedTick", "Name", "Var", "Skillids", "Equips", "Buff", "UnlockEquip", "UnlockBody", "Version", "Skilloff", "ExchangeCount", "Guid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.RefineCompose), global::Cmd.RefineCompose.Parser, new[]{ "Id", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.EggEquip), global::Cmd.EggEquip.Parser, new[]{ "Base", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ShopItem), global::Cmd.ShopItem.Parser, new[]{ "Id", "Lv", "Moneyid", "Moneycount", "Moneyid2", "Moneycount2", "Starttime", "Endtime", "Discount", "Maxcount", "Shopid", "Screen", "Itemid", "Skillid", "Haircolorid", "Num", "Menuid", "Shoptype", "Limittype", "Des", "Levdes", "Business", "Precost", "Display", "Shoporder", "Ifmsg", "Adddate", "Removedate", "Source", "Locktype", "Lockarg", "Discountmax", "Actdiscount", "Producenum", "Nextgoodsid", "Clothcolorid", "Clothcolorids" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  道具组类型
  /// </summary>
  public enum EItemGroupType {
    [pbr::OriginalName("EITEMGROUPTYPE_MIN")] Min = 0,
    /// <summary>
    /// 配方,abandoned
    /// </summary>
    [pbr::OriginalName("EITEMGROUPTYPE_FORMULA")] Formula = 1,
    /// <summary>
    /// 装备
    /// </summary>
    [pbr::OriginalName("EITEMGROUPTYPE_EQUIP")] Equip = 2,
    /// <summary>
    /// 家具,abandoned
    /// </summary>
    [pbr::OriginalName("EITEMGROUPTYPE_FURNITURE")] Furniture = 3,
    /// <summary>
    /// 货币,abandoned
    /// </summary>
    [pbr::OriginalName("EITEMGROUPTYPE_MONEY")] Money = 4,
    /// <summary>
    /// EITEMGROUPTYPE_CONVERT        = 5; //兑换券,abandoned
    /// </summary>
    [pbr::OriginalName("EITEMGROUPTYPE_FOOD")] Food = 6,
    /// <summary>
    /// 素材 材料
    /// </summary>
    [pbr::OriginalName("EITEMGROUPTYPE_MATERIAL")] Material = 7,
    /// <summary>
    /// 礼包
    /// </summary>
    [pbr::OriginalName("EITEMGROUPTYPE_GIFT")] Gift = 8,
    /// <summary>
    /// EITEMGROUPTYPE_REWARD         = 9; //礼包
    /// </summary>
    [pbr::OriginalName("EITEMGROUPTYPE_CONSUMABLES")] Consumables = 9,
    /// <summary>
    /// 任务道具
    /// </summary>
    [pbr::OriginalName("EITEMGROUPTYPE_QUESTITEM")] Questitem = 10,
    /// <summary>
    /// EITEMGROUPTYPE_ENERGY	        = 11; //修复能量
    /// </summary>
    [pbr::OriginalName("EITEMGROUPTYPE_MAX")] Max = 13,
  }

  /// <summary>
  ///  道具类型
  /// </summary>
  public enum EItemType {
    [pbr::OriginalName("EITEMTYPE_MIN")] Min = 0,
    /// <summary>
    /// 武器配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON_FORMULA")] WeaponFormula = 10,
    /// <summary>
    /// 项链配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_NECKLACE_FORMULA")] NecklaceFormula = 11,
    /// <summary>
    /// 戒指配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_RING_FORMULA")] RingFormula = 12,
    /// <summary>
    /// 耳环配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_EARRINGS_FORMULA")] EarringsFormula = 13,
    /// <summary>
    /// 手环配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WRISTBANDS_FORMULA")] WristbandsFormula = 14,
    /// <summary>
    /// 头饰配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_HEADWEAR_FORMULA")] HeadwearFormula = 15,
    /// <summary>
    /// 脸部配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_FACE_FORMULA")] FaceFormula = 16,
    /// <summary>
    /// 嘴部配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_MOUTH_FORMULA")] MouthFormula = 17,
    /// <summary>
    /// 背部配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_BACK_FORMULA")] BackFormula = 18,
    /// <summary>
    /// 尾部配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_TAIL_FORMULA")] TailFormula = 19,
    /// <summary>
    /// EITEMTYPE_PLAYERSKIN_FORMULA  = 20; //角色皮肤配方
    /// EITEMTYPE_WEAPONSKIN_FORMULA  = 21; //武器皮肤配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_FOOD_FORMULA")] FoodFormula = 23,
    /// <summary>
    /// 普通魔物卡片配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_NORMAL_MONSTERCARD_FORMULA")] NormalMonstercardFormula = 24,
    /// <summary>
    /// 精英魔物卡片配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_ELITES_MONSTERCARD_FORMULA")] ElitesMonstercardFormula = 25,
    /// <summary>
    /// Boss魔物卡片配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_BOSS_MONSTERCARD_FORMULA")] BossMonstercardFormula = 26,
    /// <summary>
    /// 伙伴卡片配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_PARTNERCARD_FORMULA")] PartnercardFormula = 27,
    /// <summary>
    /// Npc卡片配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_NPCCARD_FORMULA")] NpccardFormula = 28,
    /// <summary>
    /// 墙纸配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WALLPAPER_FORMULA")] WallpaperFormula = 29,
    /// <summary>
    /// 门配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_DOOR_FORMULA")] DoorFormula = 30,
    /// <summary>
    /// 窗配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WINDOW_FORMULA")] WindowFormula = 31,
    /// <summary>
    /// 床配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_BED_FORMULA")] BedFormula = 32,
    /// <summary>
    /// 桌配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_TABLE_FORMULA")] TableFormula = 33,
    /// <summary>
    /// 柜配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_CABINET_FORMULA")] CabinetFormula = 34,
    /// <summary>
    /// 装饰品配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_ORNAMENT_FORMULA")] OrnamentFormula = 35,
    /// <summary>
    /// 地板配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_FLOOR_FORMULA")] FloorFormula = 36,
    /// <summary>
    /// 椅子配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_CHAIR_FORMULA")] ChairFormula = 37,
    /// <summary>
    /// 礼物配方
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_GIFT_FORMULA")] GiftFormula = 38,
    /// <summary>
    /// 武器-双手剑
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON1")] Weapon1 = 70,
    /// <summary>
    /// 武器-单手剑
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON2")] Weapon2 = 71,
    /// <summary>
    /// 武器-剑盾
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON3")] Weapon3 = 72,
    /// <summary>
    /// 武器-长矛
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON4")] Weapon4 = 73,
    /// <summary>
    /// 武器-匕首
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON5")] Weapon5 = 74,
    /// <summary>
    /// 武器-拳刃
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON6")] Weapon6 = 75,
    /// <summary>
    /// 武器-弓
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON7")] Weapon7 = 76,
    /// <summary>
    /// 武器-弩
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON8")] Weapon8 = 77,
    /// <summary>
    /// 武器-水晶球
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON9")] Weapon9 = 78,
    /// <summary>
    /// 武器-魔导书
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON10")] Weapon10 = 79,
    /// <summary>
    /// 武器-双手杖
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON11")] Weapon11 = 80,
    /// <summary>
    /// 武器-单手杖
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON12")] Weapon12 = 81,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON13")] Weapon13 = 82,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON14")] Weapon14 = 83,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON15")] Weapon15 = 84,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON16")] Weapon16 = 85,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON17")] Weapon17 = 86,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON18")] Weapon18 = 87,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON19")] Weapon19 = 88,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON20")] Weapon20 = 89,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON21")] Weapon21 = 90,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON22")] Weapon22 = 91,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON23")] Weapon23 = 92,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON24")] Weapon24 = 93,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON25")] Weapon25 = 94,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON26")] Weapon26 = 95,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON27")] Weapon27 = 96,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON28")] Weapon28 = 97,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON29")] Weapon29 = 98,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON30")] Weapon30 = 99,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON31")] Weapon31 = 100,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON32")] Weapon32 = 101,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON33")] Weapon33 = 102,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON34")] Weapon34 = 103,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON35")] Weapon35 = 104,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON36")] Weapon36 = 105,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON37")] Weapon37 = 106,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON38")] Weapon38 = 107,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON39")] Weapon39 = 108,
    /// <summary>
    /// 武器-预留
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WEAPON40")] Weapon40 = 109,
    /// <summary>
    /// 项链
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_NECKLACE")] Necklace = 110,
    /// <summary>
    /// 戒指
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_RING")] Ring = 120,
    /// <summary>
    /// 手镯
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_BRACELET")] Bracelet = 130,
    /// <summary>
    /// 胸针
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_BROOCH")] Brooch = 140,
    /// <summary>
    /// 头饰
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_HEADWEAR")] Headwear = 150,
    /// <summary>
    /// 耳饰
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_EARWEAR")] Earwear = 151,
    /// <summary>
    /// 脸部
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_FACE")] Face = 160,
    /// <summary>
    /// 嘴部
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_MOUTH")] Mouth = 170,
    /// <summary>
    /// 背部
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_BACK")] Back = 180,
    /// <summary>
    /// 尾部
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_TAIL")] Tail = 190,
    /// <summary>
    /// 角色皮肤
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_PLAYER_SKIN")] PlayerSkin = 200,
    /// <summary>
    /// 床
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_BED")] Bed = 290,
    /// <summary>
    /// 桌
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_TABLE")] Table = 300,
    /// <summary>
    /// 椅子
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_CHAIR")] Chair = 310,
    /// <summary>
    /// 柜
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_CABINET")] Cabinet = 320,
    /// <summary>
    /// 灯
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_LIGHT")] Light = 330,
    /// <summary>
    /// 地毯
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_CARPET")] Carpet = 331,
    /// <summary>
    /// 地面+家具顶面装饰
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_GROUND_ABOVE")] GroundAbove = 332,
    /// <summary>
    /// 挂墙的东西
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WALLPIC")] Wallpic = 340,
    /// <summary>
    /// 墙面+家具侧面装饰
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WALL_SIDE")] WallSide = 341,
    /// <summary>
    /// 天花板装饰
    /// </summary>
    [pbr::OriginalName("ETTEMTYPE_CEILING")] EttemtypeCeiling = 342,
    /// <summary>
    /// 墙纸
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WALLPAPER")] Wallpaper = 350,
    /// <summary>
    /// 装饰品(地板)
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_ORNAMENT")] Ornament = 360,
    /// <summary>
    /// 门
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_DOOR")] Door = 370,
    /// <summary>
    /// 窗
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_WINDOW")] Window = 380,
    /// <summary>
    /// 金币
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_MONEY")] Money = 400,
    /// <summary>
    /// 经验类道具，获得直接使用
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_EXP")] Exp = 402,
    /// <summary>
    /// 采集素材 矿石
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_MINERAL_MATERIAL")] MineralMaterial = 420,
    /// <summary>
    /// 采集素材 草
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_GRASS_MATERIAL")] GrassMaterial = 421,
    /// <summary>
    /// 普通魔物素材
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_NORMALMONSTER_MATERIAL")] NormalmonsterMaterial = 430,
    /// <summary>
    /// 精英魔物素材
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_ELITESMONSTER_MATERIAL")] ElitesmonsterMaterial = 440,
    /// <summary>
    /// Boss魔物素材
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_BOSSMONSTER_MATERIAL")] BossmonsterMaterial = 450,
    /// <summary>
    /// 稀有素材
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_RARE_MATERIAL")] RareMaterial = 460,
    /// <summary>
    /// 伙伴素材
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_PARTNER_MATERIAL")] PartnerMaterial = 470,
    /// <summary>
    /// 玛娜素材
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_MANA_MATERIAL")] ManaMaterial = 471,
    /// <summary>
    /// 玛娜抵扣券
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_MANA_COUPON")] ManaCoupon = 472,
    /// <summary>
    /// 礼包
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_REWARD")] Reward = 480,
    /// <summary>
    /// 消耗品
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_CONSUMABLES")] Consumables = 490,
    /// <summary>
    /// 自动使用消耗品
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_AUTOCONSUMABLES")] Autoconsumables = 491,
    /// <summary>
    /// 任务道具
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_QUESTITEM")] Questitem = 500,
    /// <summary>
    /// 修复能量
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_REPAIRENERGY")] Repairenergy = 510,
    /// <summary>
    /// 经验药水进经验池
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_FIGHTER_EXP_POOL")] FighterExpPool = 511,
    /// <summary>
    /// 日常活跃度
    /// </summary>
    [pbr::OriginalName("EITEMTYPE_DAILY_ACTIVITY")] DailyActivity = 512,
    [pbr::OriginalName("EITEMTYPE_MAX")] Max = 4201,
  }

  /// <summary>
  ///  unused
  /// </summary>
  public enum EEquipType {
    [pbr::OriginalName("EEQUIPTYPE_MIN")] Min = 0,
    [pbr::OriginalName("EEQUIPTYPE_WEAPON")] Weapon = 1,
    [pbr::OriginalName("EEQUIPTYPE_SHIELD")] Shield = 3,
    [pbr::OriginalName("EEQUIPTYPE_ARMOUR")] Armour = 2,
    [pbr::OriginalName("EEQUIPTYPE_ROBE")] Robe = 4,
    [pbr::OriginalName("EEQUIPTYPE_SHOES")] Shoes = 5,
    [pbr::OriginalName("EEQUIPTYPE_ACCESSORY")] Accessory = 6,
    [pbr::OriginalName("EEQUIPTYPE_HEAD")] Head = 8,
    [pbr::OriginalName("EEQUIPTYPE_BACK")] Back = 9,
    [pbr::OriginalName("EEQUIPTYPE_FACE")] Face = 10,
    [pbr::OriginalName("EEQUIPTYPE_TAIL")] Tail = 11,
    [pbr::OriginalName("EEQUIPTYPE_MOUNT")] Mount = 12,
    [pbr::OriginalName("EEQUIPTYPE_MOUTH")] Mouth = 13,
    [pbr::OriginalName("EEQUIPTYPE_BARROW")] Barrow = 14,
    [pbr::OriginalName("EEQUIPTYPE_PEARL")] Pearl = 16,
    [pbr::OriginalName("EEQUIPTYPE_EIKON")] Eikon = 17,
    [pbr::OriginalName("EEQUIPTYPE_BRACELET")] Bracelet = 18,
    [pbr::OriginalName("EEQUIPTYPE_HANDBRACELET")] Handbracelet = 19,
    [pbr::OriginalName("EEQUIPTYPE_TROLLEY")] Trolley = 20,
    [pbr::OriginalName("EEQUIPTYPE_ARTIFACT")] Artifact = 21,
    [pbr::OriginalName("EEQUIPTYPE_ARTIFACT_HEAD")] ArtifactHead = 22,
    [pbr::OriginalName("EEQUIPTYPE_ARTIFACT_BACK")] ArtifactBack = 23,
    [pbr::OriginalName("EEQUIPTYPE_MAX")] Max = 24,
  }

  public enum EQualityType {
    [pbr::OriginalName("EQUALITYTYPE_MIN")] Min = 0,
    [pbr::OriginalName("EQUALITYTYPE_ONESTAR")] Onestar = 1,
    [pbr::OriginalName("EQUALITYTYPE_TWOSTAR")] Twostar = 2,
    [pbr::OriginalName("EQUALITYTYPE_THREESTAR")] Threestar = 3,
    [pbr::OriginalName("EQUALITYTYPE_SR")] Sr = 4,
    [pbr::OriginalName("EQUALITYTYPE_SSR")] Ssr = 5,
    [pbr::OriginalName("EQUALITYTYPE_MAX")] Max = 6,
  }

  /// <summary>
  ///  道具获取来源
  /// </summary>
  public enum ESource {
    [pbr::OriginalName("ESOURCE_MIN")] Min = 0,
    /// <summary>
    /// 一般获取
    /// </summary>
    [pbr::OriginalName("ESOURCE_NORMAL")] Normal = 1,
    /// <summary>
    /// 背包间转移
    /// </summary>
    [pbr::OriginalName("ESOURCE_PACKAGE")] Package = 2,
    /// <summary>
    /// 任务获取
    /// </summary>
    [pbr::OriginalName("ESOURCE_QUEST")] Quest = 3,
    /// <summary>
    /// 奖励获取
    /// </summary>
    [pbr::OriginalName("ESOURCE_REWARD")] Reward = 4,
    /// <summary>
    /// 魔物击杀
    /// </summary>
    [pbr::OriginalName("ESOURCE_MONSTERKILL")] Monsterkill = 5,
    /// <summary>
    /// GM命令获取
    /// </summary>
    [pbr::OriginalName("ESOURCE_GM")] Gm = 6,
    /// <summary>
    /// unused
    /// </summary>
    [pbr::OriginalName("ESOURCE_PICKUP")] Pickup = 7,
    /// <summary>
    /// unused
    /// </summary>
    [pbr::OriginalName("ESOURCE_LVUP")] Lvup = 8,
    /// <summary>
    /// unused
    /// </summary>
    [pbr::OriginalName("ESOURCE_RELIVE")] Relive = 9,
    /// <summary>
    /// unused
    /// </summary>
    [pbr::OriginalName("ESOURCE_JUMPZONE")] Jumpzone = 10,
    /// <summary>
    /// 主动使用useitem
    /// </summary>
    [pbr::OriginalName("ESOURCE_USEITEM")] Useitem = 11,
    /// <summary>
    /// 邮件获得,unused
    /// </summary>
    [pbr::OriginalName("ESOURCE_MAIL")] Mail = 12,
    /// <summary>
    /// 改名获得,abandoned
    /// </summary>
    [pbr::OriginalName("ESOURCE_USER_RENAME")] UserRename = 13,
    /// <summary>
    /// 流派升星
    /// </summary>
    [pbr::OriginalName("ESOURCE_FIGTHTER_STAR")] FigthterStar = 14,
    /// <summary>
    /// 自动解锁流派
    /// </summary>
    [pbr::OriginalName("ESOURCE_FIGTHTER_UNLOCK")] FigthterUnlock = 15,
    /// <summary>
    /// 采集物状态改变
    /// </summary>
    [pbr::OriginalName("ESOURCE_STATUS_CHANGE")] StatusChange = 16,
    /// <summary>
    /// 调和获得
    /// </summary>
    [pbr::OriginalName("ESOURCE_RECONCILE")] Reconcile = 17,
    /// <summary>
    /// 激活使用技能消耗
    /// </summary>
    [pbr::OriginalName("ESOURCE_ACTSKILL")] Actskill = 19,
    /// <summary>
    /// 使用玛娜技能消耗
    /// </summary>
    [pbr::OriginalName("ESOURCE_MANASKILL")] Manaskill = 20,
    /// <summary>
    /// 自动解锁玛娜
    /// </summary>
    [pbr::OriginalName("ESOURCE_MANA_UNLOCK")] ManaUnlock = 21,
    /// <summary>
    /// 解锁宝箱
    /// </summary>
    [pbr::OriginalName("ESOURCE_UNLOCK_BOX")] UnlockBox = 22,
    [pbr::OriginalName("ESOURCE_SKILL_LEVELUP")] SkillLevelup = 23,
    /// <summary>
    /// 交互扣除道具
    /// </summary>
    [pbr::OriginalName("ESOURCE_INTERACTION")] Interaction = 24,
    /// <summary>
    /// 抽卡扣除道具
    /// </summary>
    [pbr::OriginalName("ESOURCE_LOTTERY")] Lottery = 26,
    /// <summary>
    /// 搬运奖励
    /// </summary>
    [pbr::OriginalName("ESOURCE_TRANSPORT_REWARD")] TransportReward = 27,
    /// <summary>
    /// 技能升级消耗
    /// </summary>
    [pbr::OriginalName("ESOURCE_SKILLLVUP")] Skilllvup = 28,
    /// <summary>
    /// 退出原地副本返还
    /// </summary>
    [pbr::OriginalName("ESOURCE_EXIT_COPY")] ExitCopy = 29,
    /// <summary>
    /// 关卡副本通关奖励
    /// </summary>
    [pbr::OriginalName("ESOURCE_RAIDSCENE")] Raidscene = 31,
    /// <summary>
    /// 装备强化
    /// </summary>
    [pbr::OriginalName("ESOURCE_EQUIP_STRENGTH")] EquipStrength = 32,
    /// <summary>
    /// 装备升星
    /// </summary>
    [pbr::OriginalName("ESOURCE_EQUIP_UPSTAR")] EquipUpstar = 33,
    /// <summary>
    /// 伙伴经验池
    /// </summary>
    [pbr::OriginalName("ESOURCE_FIGHTER_EXP_POOL")] FighterExpPool = 35,
    /// <summary>
    /// 妄想空间材料提交
    /// </summary>
    [pbr::OriginalName("ESOURCE_WXKJ_ITEM_SUBMIT")] WxkjItemSubmit = 37,
    /// <summary>
    /// 妄想空间进入门票扣除
    /// </summary>
    [pbr::OriginalName("ESOURCE_WXKJ_ENTER")] WxkjEnter = 38,
    /// <summary>
    /// 学院赠礼
    /// </summary>
    [pbr::OriginalName("ESOURCE_COLLEGE_GIFT")] CollegeGift = 39,
    /// <summary>
    /// 日常活动
    /// </summary>
    [pbr::OriginalName("ESOURCE_DAILYACTIVITY")] Dailyactivity = 40,
    /// <summary>
    /// 日常活动UP奖励
    /// </summary>
    [pbr::OriginalName("ESOURCE_DAILYACTIVITY_UP")] DailyactivityUp = 41,
    /// <summary>
    /// 天团挑战奖励
    /// </summary>
    [pbr::OriginalName("ESOURCE_CLUBCHALLENGE")] Clubchallenge = 42,
    /// <summary>
    /// 主动约会
    /// </summary>
    [pbr::OriginalName("ESOURCE_ACTIVEDATING")] Activedating = 43,
    /// <summary>
    /// 装备强化返还
    /// </summary>
    [pbr::OriginalName("ESOURCE_EQUIP_STRENGTH_BACK")] EquipStrengthBack = 44,
    [pbr::OriginalName("ESOURCE_MAX")] Max = 512,
  }

  /// <summary>
  ///  unused
  /// </summary>
  public enum EEnchantType {
    [pbr::OriginalName("EENCHANTTYPE_MIN")] Min = 0,
    [pbr::OriginalName("EENCHANTTYPE_PRIMARY")] Primary = 1,
    [pbr::OriginalName("EENCHANTTYPE_MEDIUM")] Medium = 2,
    [pbr::OriginalName("EENCHANTTYPE_SENIOR")] Senior = 3,
    [pbr::OriginalName("EENCHANTTYPE_MAX")] Max = 4,
  }

  /// <summary>
  ///  unused
  /// </summary>
  public enum EShopLimitType {
    [pbr::OriginalName("ESHOPLIMITTYPE_MIN")] Min = 0,
    [pbr::OriginalName("ESHOPLIMITTYPE_USER")] User = 1,
    [pbr::OriginalName("ESHOPLIMITTYPE_ONE_ONLY")] OneOnly = 2,
    /// <summary>
    /// 账号共享次数 每天
    /// </summary>
    [pbr::OriginalName("ESHOPLIMITTYPE_ACC_USER")] AccUser = 4,
    /// <summary>
    /// 账号永久共享次数
    /// </summary>
    [pbr::OriginalName("ESHOPLIMITTYPE_ACC_USER_ALWAYS")] AccUserAlways = 8,
    /// <summary>
    /// 角色周限购
    /// </summary>
    [pbr::OriginalName("ESHOPLIMITTYPE_USER_WEEK")] UserWeek = 16,
    /// <summary>
    /// 角色月限购
    /// </summary>
    [pbr::OriginalName("ESHOPLIMITTYPE_USER_MONTH")] UserMonth = 32,
    /// <summary>
    /// 账号周限购
    /// </summary>
    [pbr::OriginalName("ESHOPLIMITTYPE_ACC_WEEK")] AccWeek = 64,
    /// <summary>
    /// 账号月限购
    /// </summary>
    [pbr::OriginalName("ESHOPLIMITTYPE_ACC_MONTH")] AccMonth = 128,
    [pbr::OriginalName("ESHOPLIMITTYPE_MAX")] Max = 256,
  }

  /// <summary>
  /// unused
  /// </summary>
  public enum EShopLockType {
    [pbr::OriginalName("ESHOPLOCKTYPE_MIN")] Min = 0,
    [pbr::OriginalName("ESHOPLOCKTYPE_QUEST")] Quest = 1,
    [pbr::OriginalName("ESHOPLOCKTYPE_GUILDBUILDING")] Guildbuilding = 2,
    [pbr::OriginalName("ESHOPLOCKTYPE_MAX")] Max = 3,
  }

  /// <summary>
  ///  unused
  /// </summary>
  public enum EShopSource {
    [pbr::OriginalName("ESHOPSOURCE_USER")] User = 0,
    [pbr::OriginalName("ESHOPSOURCE_GUILD")] Guild = 1,
  }

  /// <summary>
  ///  装备部位
  /// </summary>
  public enum EEquipPos {
    [pbr::OriginalName("EEQUIPPOS_MIN")] Min = 0,
    /// <summary>
    /// 武器
    /// </summary>
    [pbr::OriginalName("EEQUIPPOS_WEAPON")] Weapon = 1,
    /// <summary>
    /// 防具
    /// </summary>
    [pbr::OriginalName("EEQUIPPOS_ARMOR")] Armor = 2,
    /// <summary>
    /// 饰品
    /// </summary>
    [pbr::OriginalName("EEQUIPPOS_ACCESSORIES")] Accessories = 3,
    /// <summary>
    /// 手镯
    /// </summary>
    [pbr::OriginalName("EEQUIPPOS_BRACELET")] Bracelet = 4,
    /// <summary>
    /// 胸针
    /// </summary>
    [pbr::OriginalName("EEQUIPPOS_BROOCH")] Brooch = 5,
    /// <summary>
    /// 头饰
    /// </summary>
    [pbr::OriginalName("EEQUIPPOS_HEAD")] Head = 6,
    /// <summary>
    /// 耳饰
    /// </summary>
    [pbr::OriginalName("EEQUIPPOS_EARRINGS")] Earrings = 7,
    /// <summary>
    /// 面饰
    /// </summary>
    [pbr::OriginalName("EEQUIPPOS_FACE")] Face = 8,
    /// <summary>
    /// 嘴饰
    /// </summary>
    [pbr::OriginalName("EEQUIPPOS_MOUTH")] Mouth = 9,
    /// <summary>
    /// 背饰
    /// </summary>
    [pbr::OriginalName("EEQUIPPOS_BACK")] Back = 10,
    /// <summary>
    /// 尾饰
    /// </summary>
    [pbr::OriginalName("EEQUIPPOS_TAIL")] Tail = 11,
    /// <summary>
    /// 时装
    /// </summary>
    [pbr::OriginalName("EEQUIPPOS_FASHION")] Fashion = 12,
    [pbr::OriginalName("EEQUIPPOS_MAX")] Max = 13,
  }

  /// <summary>
  ///  只有使用到的加了中文
  ///  包裹类型
  /// </summary>
  public enum EPackType {
    [pbr::OriginalName("EPACKTYPE_MIN")] Min = 0,
    /// <summary>
    ///  装备
    /// </summary>
    [pbr::OriginalName("EPACKTYPE_EQUIP")] Equip = 1,
    /// <summary>
    ///  背包
    /// </summary>
    [pbr::OriginalName("EPACKTYPE_MAIN")] Main = 2,
    [pbr::OriginalName("EPACKTYPE_MAX")] Max = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  unused
  /// </summary>
  public sealed partial class EnchantAttr : pb::IMessage<EnchantAttr> {
    private static readonly pb::MessageParser<EnchantAttr> _parser = new pb::MessageParser<EnchantAttr>(() => new EnchantAttr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnchantAttr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoItemCommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnchantAttr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnchantAttr(EnchantAttr other) : this() {
      type_ = other.type_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnchantAttr Clone() {
      return new EnchantAttr(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Cmd.EAttrType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EAttrType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnchantAttr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnchantAttr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnchantAttr other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Cmd.EAttrType) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  unused
  /// </summary>
  public sealed partial class EnchantExtra : pb::IMessage<EnchantExtra> {
    private static readonly pb::MessageParser<EnchantExtra> _parser = new pb::MessageParser<EnchantExtra>(() => new EnchantExtra());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnchantExtra> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoItemCommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnchantExtra() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnchantExtra(EnchantExtra other) : this() {
      configid_ = other.configid_;
      buffid_ = other.buffid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnchantExtra Clone() {
      return new EnchantExtra(this);
    }

    /// <summary>Field number for the "configid" field.</summary>
    public const int ConfigidFieldNumber = 1;
    private uint configid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Configid {
      get { return configid_; }
      set {
        configid_ = value;
      }
    }

    /// <summary>Field number for the "buffid" field.</summary>
    public const int BuffidFieldNumber = 2;
    private uint buffid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Buffid {
      get { return buffid_; }
      set {
        buffid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnchantExtra);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnchantExtra other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Configid != other.Configid) return false;
      if (Buffid != other.Buffid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Configid != 0) hash ^= Configid.GetHashCode();
      if (Buffid != 0) hash ^= Buffid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Configid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Configid);
      }
      if (Buffid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Buffid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Configid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Configid);
      }
      if (Buffid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Buffid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnchantExtra other) {
      if (other == null) {
        return;
      }
      if (other.Configid != 0) {
        Configid = other.Configid;
      }
      if (other.Buffid != 0) {
        Buffid = other.Buffid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Configid = input.ReadUInt32();
            break;
          }
          case 16: {
            Buffid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  道具信息
  /// </summary>
  public sealed partial class ItemInfo : pb::IMessage<ItemInfo> {
    private static readonly pb::MessageParser<ItemInfo> _parser = new pb::MessageParser<ItemInfo>(() => new ItemInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoItemCommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemInfo(ItemInfo other) : this() {
      guid_ = other.guid_;
      id_ = other.id_;
      count_ = other.count_;
      index_ = other.index_;
      createtime_ = other.createtime_;
      cd_ = other.cd_;
      groupType_ = other.groupType_;
      type_ = other.type_;
      quality_ = other.quality_;
      equipType_ = other.equipType_;
      source_ = other.source_;
      isnew_ = other.isnew_;
      sourceNpc_ = other.sourceNpc_;
      refinelv_ = other.refinelv_;
      chargemoney_ = other.chargemoney_;
      overtime_ = other.overtime_;
      quota_ = other.quota_;
      usepartnerid_ = other.usepartnerid_;
      useskillid_ = other.useskillid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemInfo Clone() {
      return new ItemInfo(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private string guid_ = "";
    /// <summary>
    ///  道具guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Guid {
      get { return guid_; }
      set {
        guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    /// <summary>
    ///  道具id,表Item.xlsx以及表Item_Furniture.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private uint count_;
    /// <summary>
    ///  道具数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 4;
    private uint index_;
    /// <summary>
    ///  程序生成的唯一索引(从1开始)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "createtime" field.</summary>
    public const int CreatetimeFieldNumber = 5;
    private uint createtime_;
    /// <summary>
    ///  创建时间(秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Createtime {
      get { return createtime_; }
      set {
        createtime_ = value;
      }
    }

    /// <summary>Field number for the "cd" field.</summary>
    public const int CdFieldNumber = 6;
    private ulong cd_;
    /// <summary>
    ///  unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Cd {
      get { return cd_; }
      set {
        cd_ = value;
      }
    }

    /// <summary>Field number for the "group_type" field.</summary>
    public const int GroupTypeFieldNumber = 22;
    private global::Cmd.EItemGroupType groupType_ = 0;
    /// <summary>
    ///  道具组类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EItemGroupType GroupType {
      get { return groupType_; }
      set {
        groupType_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 7;
    private uint type_;
    /// <summary>
    /// EItemType type = 7;             // 道具类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 10;
    private uint quality_;
    /// <summary>
    ///  道具质量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "equipType" field.</summary>
    public const int EquipTypeFieldNumber = 11;
    private global::Cmd.EEquipType equipType_ = 0;
    /// <summary>
    ///  装备类型,unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EEquipType EquipType {
      get { return equipType_; }
      set {
        equipType_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 12;
    private global::Cmd.ESource source_ = 0;
    /// <summary>
    ///  道具来源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ESource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "isnew" field.</summary>
    public const int IsnewFieldNumber = 13;
    private bool isnew_;
    /// <summary>
    ///  unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isnew {
      get { return isnew_; }
      set {
        isnew_ = value;
      }
    }

    /// <summary>Field number for the "source_npc" field.</summary>
    public const int SourceNpcFieldNumber = 17;
    private uint sourceNpc_;
    /// <summary>
    ///  来源npcid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SourceNpc {
      get { return sourceNpc_; }
      set {
        sourceNpc_ = value;
      }
    }

    /// <summary>Field number for the "refinelv" field.</summary>
    public const int RefinelvFieldNumber = 18;
    private uint refinelv_;
    /// <summary>
    ///  unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Refinelv {
      get { return refinelv_; }
      set {
        refinelv_ = value;
      }
    }

    /// <summary>Field number for the "chargemoney" field.</summary>
    public const int ChargemoneyFieldNumber = 19;
    private uint chargemoney_;
    /// <summary>
    ///  充多少钱获得的，在邮件里赋值。单位元，注意多个道具时，只需要一个道具赋值。  unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Chargemoney {
      get { return chargemoney_; }
      set {
        chargemoney_ = value;
      }
    }

    /// <summary>Field number for the "overtime" field.</summary>
    public const int OvertimeFieldNumber = 20;
    private uint overtime_;
    /// <summary>
    ///  unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Overtime {
      get { return overtime_; }
      set {
        overtime_ = value;
      }
    }

    /// <summary>Field number for the "quota" field.</summary>
    public const int QuotaFieldNumber = 21;
    private ulong quota_;
    /// <summary>
    ///  充值获得的额度  在邮件里赋值。注意多个道具时，只需要一个道具赋值。 unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Quota {
      get { return quota_; }
      set {
        quota_ = value;
      }
    }

    /// <summary>Field number for the "usepartnerid" field.</summary>
    public const int UsepartneridFieldNumber = 23;
    private uint usepartnerid_;
    /// <summary>
    ///  使用同伴id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Usepartnerid {
      get { return usepartnerid_; }
      set {
        usepartnerid_ = value;
      }
    }

    /// <summary>Field number for the "useskillid" field.</summary>
    public const int UseskillidFieldNumber = 24;
    private uint useskillid_;
    /// <summary>
    ///  使用技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Useskillid {
      get { return useskillid_; }
      set {
        useskillid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Id != other.Id) return false;
      if (Count != other.Count) return false;
      if (Index != other.Index) return false;
      if (Createtime != other.Createtime) return false;
      if (Cd != other.Cd) return false;
      if (GroupType != other.GroupType) return false;
      if (Type != other.Type) return false;
      if (Quality != other.Quality) return false;
      if (EquipType != other.EquipType) return false;
      if (Source != other.Source) return false;
      if (Isnew != other.Isnew) return false;
      if (SourceNpc != other.SourceNpc) return false;
      if (Refinelv != other.Refinelv) return false;
      if (Chargemoney != other.Chargemoney) return false;
      if (Overtime != other.Overtime) return false;
      if (Quota != other.Quota) return false;
      if (Usepartnerid != other.Usepartnerid) return false;
      if (Useskillid != other.Useskillid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid.Length != 0) hash ^= Guid.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Createtime != 0) hash ^= Createtime.GetHashCode();
      if (Cd != 0UL) hash ^= Cd.GetHashCode();
      if (GroupType != 0) hash ^= GroupType.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      if (EquipType != 0) hash ^= EquipType.GetHashCode();
      if (Source != 0) hash ^= Source.GetHashCode();
      if (Isnew != false) hash ^= Isnew.GetHashCode();
      if (SourceNpc != 0) hash ^= SourceNpc.GetHashCode();
      if (Refinelv != 0) hash ^= Refinelv.GetHashCode();
      if (Chargemoney != 0) hash ^= Chargemoney.GetHashCode();
      if (Overtime != 0) hash ^= Overtime.GetHashCode();
      if (Quota != 0UL) hash ^= Quota.GetHashCode();
      if (Usepartnerid != 0) hash ^= Usepartnerid.GetHashCode();
      if (Useskillid != 0) hash ^= Useskillid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Guid);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Count);
      }
      if (Index != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Index);
      }
      if (Createtime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Createtime);
      }
      if (Cd != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Cd);
      }
      if (Type != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Type);
      }
      if (Quality != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Quality);
      }
      if (EquipType != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) EquipType);
      }
      if (Source != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) Source);
      }
      if (Isnew != false) {
        output.WriteRawTag(104);
        output.WriteBool(Isnew);
      }
      if (SourceNpc != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(SourceNpc);
      }
      if (Refinelv != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(Refinelv);
      }
      if (Chargemoney != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(Chargemoney);
      }
      if (Overtime != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Overtime);
      }
      if (Quota != 0UL) {
        output.WriteRawTag(168, 1);
        output.WriteUInt64(Quota);
      }
      if (GroupType != 0) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) GroupType);
      }
      if (Usepartnerid != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(Usepartnerid);
      }
      if (Useskillid != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(Useskillid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (Createtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Createtime);
      }
      if (Cd != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Cd);
      }
      if (GroupType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) GroupType);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quality);
      }
      if (EquipType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EquipType);
      }
      if (Source != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Source);
      }
      if (Isnew != false) {
        size += 1 + 1;
      }
      if (SourceNpc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SourceNpc);
      }
      if (Refinelv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Refinelv);
      }
      if (Chargemoney != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Chargemoney);
      }
      if (Overtime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Overtime);
      }
      if (Quota != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Quota);
      }
      if (Usepartnerid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Usepartnerid);
      }
      if (Useskillid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Useskillid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemInfo other) {
      if (other == null) {
        return;
      }
      if (other.Guid.Length != 0) {
        Guid = other.Guid;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Createtime != 0) {
        Createtime = other.Createtime;
      }
      if (other.Cd != 0UL) {
        Cd = other.Cd;
      }
      if (other.GroupType != 0) {
        GroupType = other.GroupType;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
      if (other.EquipType != 0) {
        EquipType = other.EquipType;
      }
      if (other.Source != 0) {
        Source = other.Source;
      }
      if (other.Isnew != false) {
        Isnew = other.Isnew;
      }
      if (other.SourceNpc != 0) {
        SourceNpc = other.SourceNpc;
      }
      if (other.Refinelv != 0) {
        Refinelv = other.Refinelv;
      }
      if (other.Chargemoney != 0) {
        Chargemoney = other.Chargemoney;
      }
      if (other.Overtime != 0) {
        Overtime = other.Overtime;
      }
      if (other.Quota != 0UL) {
        Quota = other.Quota;
      }
      if (other.Usepartnerid != 0) {
        Usepartnerid = other.Usepartnerid;
      }
      if (other.Useskillid != 0) {
        Useskillid = other.Useskillid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Guid = input.ReadString();
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            Count = input.ReadUInt32();
            break;
          }
          case 32: {
            Index = input.ReadUInt32();
            break;
          }
          case 40: {
            Createtime = input.ReadUInt32();
            break;
          }
          case 48: {
            Cd = input.ReadUInt64();
            break;
          }
          case 56: {
            Type = input.ReadUInt32();
            break;
          }
          case 80: {
            Quality = input.ReadUInt32();
            break;
          }
          case 88: {
            equipType_ = (global::Cmd.EEquipType) input.ReadEnum();
            break;
          }
          case 96: {
            source_ = (global::Cmd.ESource) input.ReadEnum();
            break;
          }
          case 104: {
            Isnew = input.ReadBool();
            break;
          }
          case 136: {
            SourceNpc = input.ReadUInt32();
            break;
          }
          case 144: {
            Refinelv = input.ReadUInt32();
            break;
          }
          case 152: {
            Chargemoney = input.ReadUInt32();
            break;
          }
          case 160: {
            Overtime = input.ReadUInt32();
            break;
          }
          case 168: {
            Quota = input.ReadUInt64();
            break;
          }
          case 176: {
            groupType_ = (global::Cmd.EItemGroupType) input.ReadEnum();
            break;
          }
          case 184: {
            Usepartnerid = input.ReadUInt32();
            break;
          }
          case 192: {
            Useskillid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  道具数据
  /// </summary>
  public sealed partial class ItemData : pb::IMessage<ItemData> {
    private static readonly pb::MessageParser<ItemData> _parser = new pb::MessageParser<ItemData>(() => new ItemData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoItemCommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemData(ItemData other) : this() {
      Base = other.base_ != null ? other.Base.Clone() : null;
      Equip = other.equip_ != null ? other.Equip.Clone() : null;
      Egg = other.egg_ != null ? other.Egg.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemData Clone() {
      return new ItemData(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Cmd.ItemInfo base_;
    /// <summary>
    ///  道具基本信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ItemInfo Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "equip" field.</summary>
    public const int EquipFieldNumber = 2;
    private global::Cmd.EquipData equip_;
    /// <summary>
    ///  装备信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EquipData Equip {
      get { return equip_; }
      set {
        equip_ = value;
      }
    }

    /// <summary>Field number for the "egg" field.</summary>
    public const int EggFieldNumber = 9;
    private global::Cmd.EggData egg_;
    /// <summary>
    ///  unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EggData Egg {
      get { return egg_; }
      set {
        egg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (!object.Equals(Equip, other.Equip)) return false;
      if (!object.Equals(Egg, other.Egg)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (equip_ != null) hash ^= Equip.GetHashCode();
      if (egg_ != null) hash ^= Egg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (equip_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Equip);
      }
      if (egg_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Egg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (equip_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equip);
      }
      if (egg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Egg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemData other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          base_ = new global::Cmd.ItemInfo();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.equip_ != null) {
        if (equip_ == null) {
          equip_ = new global::Cmd.EquipData();
        }
        Equip.MergeFrom(other.Equip);
      }
      if (other.egg_ != null) {
        if (egg_ == null) {
          egg_ = new global::Cmd.EggData();
        }
        Egg.MergeFrom(other.Egg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (base_ == null) {
              base_ = new global::Cmd.ItemInfo();
            }
            input.ReadMessage(base_);
            break;
          }
          case 18: {
            if (equip_ == null) {
              equip_ = new global::Cmd.EquipData();
            }
            input.ReadMessage(equip_);
            break;
          }
          case 74: {
            if (egg_ == null) {
              egg_ = new global::Cmd.EggData();
            }
            input.ReadMessage(egg_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EquipData : pb::IMessage<EquipData> {
    private static readonly pb::MessageParser<EquipData> _parser = new pb::MessageParser<EquipData>(() => new EquipData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquipData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoItemCommonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipData(EquipData other) : this() {
      strengthexp_ = other.strengthexp_;
      strengthlv_ = other.strengthlv_;
      starlv_ = other.starlv_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipData Clone() {
      return new EquipData(this);
    }

    /// <summary>Field number for the "strengthexp" field.</summary>
    public const int StrengthexpFieldNumber = 1;
    private uint strengthexp_;
    /// <summary>
    /// 强化经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Strengthexp {
      get { return strengthexp_; }
      set {
        strengthexp_ = value;
      }
    }

    /// <summary>Field number for the "strengthlv" field.</summary>
    public const int StrengthlvFieldNumber = 2;
    private uint strengthlv_;
    /// <summary>
    /// 强化等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Strengthlv {
      get { return strengthlv_; }
      set {
        strengthlv_ = value;
      }
    }

    /// <summary>Field number for the "starlv" field.</summary>
    public const int StarlvFieldNumber = 3;
    private uint starlv_;
    /// <summary>
    /// 装备星级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Starlv {
      get { return starlv_; }
      set {
        starlv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EquipData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EquipData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Strengthexp != other.Strengthexp) return false;
      if (Strengthlv != other.Strengthlv) return false;
      if (Starlv != other.Starlv) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Strengthexp != 0) hash ^= Strengthexp.GetHashCode();
      if (Strengthlv != 0) hash ^= Strengthlv.GetHashCode();
      if (Starlv != 0) hash ^= Starlv.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Strengthexp != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Strengthexp);
      }
      if (Strengthlv != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Strengthlv);
      }
      if (Starlv != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Starlv);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Strengthexp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Strengthexp);
      }
      if (Strengthlv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Strengthlv);
      }
      if (Starlv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Starlv);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EquipData other) {
      if (other == null) {
        return;
      }
      if (other.Strengthexp != 0) {
        Strengthexp = other.Strengthexp;
      }
      if (other.Strengthlv != 0) {
        Strengthlv = other.Strengthlv;
      }
      if (other.Starlv != 0) {
        Starlv = other.Starlv;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Strengthexp = input.ReadUInt32();
            break;
          }
          case 16: {
            Strengthlv = input.ReadUInt32();
            break;
          }
          case 24: {
            Starlv = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  unused
  /// </summary>
  public sealed partial class EggData : pb::IMessage<EggData> {
    private static readonly pb::MessageParser<EggData> _parser = new pb::MessageParser<EggData>(() => new EggData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EggData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoItemCommonReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EggData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EggData(EggData other) : this() {
      exp_ = other.exp_;
      friendexp_ = other.friendexp_;
      rewardexp_ = other.rewardexp_;
      id_ = other.id_;
      lv_ = other.lv_;
      friendlv_ = other.friendlv_;
      body_ = other.body_;
      relivetime_ = other.relivetime_;
      hp_ = other.hp_;
      restoretime_ = other.restoretime_;
      timeHapply_ = other.timeHapply_;
      timeExcite_ = other.timeExcite_;
      timeHappiness_ = other.timeHappiness_;
      timeHapplyGift_ = other.timeHapplyGift_;
      timeExciteGift_ = other.timeExciteGift_;
      timeHappinessGift_ = other.timeHappinessGift_;
      touchTick_ = other.touchTick_;
      feedTick_ = other.feedTick_;
      name_ = other.name_;
      var_ = other.var_;
      skillids_ = other.skillids_.Clone();
      equips_ = other.equips_.Clone();
      buff_ = other.buff_;
      unlockEquip_ = other.unlockEquip_.Clone();
      unlockBody_ = other.unlockBody_.Clone();
      version_ = other.version_;
      skilloff_ = other.skilloff_;
      exchangeCount_ = other.exchangeCount_;
      guid_ = other.guid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EggData Clone() {
      return new EggData(this);
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 1;
    private ulong exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "friendexp" field.</summary>
    public const int FriendexpFieldNumber = 2;
    private ulong friendexp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Friendexp {
      get { return friendexp_; }
      set {
        friendexp_ = value;
      }
    }

    /// <summary>Field number for the "rewardexp" field.</summary>
    public const int RewardexpFieldNumber = 3;
    private ulong rewardexp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Rewardexp {
      get { return rewardexp_; }
      set {
        rewardexp_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 4;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "lv" field.</summary>
    public const int LvFieldNumber = 5;
    private uint lv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lv {
      get { return lv_; }
      set {
        lv_ = value;
      }
    }

    /// <summary>Field number for the "friendlv" field.</summary>
    public const int FriendlvFieldNumber = 6;
    private uint friendlv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Friendlv {
      get { return friendlv_; }
      set {
        friendlv_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 7;
    private uint body_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Body {
      get { return body_; }
      set {
        body_ = value;
      }
    }

    /// <summary>Field number for the "relivetime" field.</summary>
    public const int RelivetimeFieldNumber = 8;
    private uint relivetime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Relivetime {
      get { return relivetime_; }
      set {
        relivetime_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 9;
    private uint hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "restoretime" field.</summary>
    public const int RestoretimeFieldNumber = 10;
    private uint restoretime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Restoretime {
      get { return restoretime_; }
      set {
        restoretime_ = value;
      }
    }

    /// <summary>Field number for the "time_happly" field.</summary>
    public const int TimeHapplyFieldNumber = 11;
    private uint timeHapply_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeHapply {
      get { return timeHapply_; }
      set {
        timeHapply_ = value;
      }
    }

    /// <summary>Field number for the "time_excite" field.</summary>
    public const int TimeExciteFieldNumber = 12;
    private uint timeExcite_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeExcite {
      get { return timeExcite_; }
      set {
        timeExcite_ = value;
      }
    }

    /// <summary>Field number for the "time_happiness" field.</summary>
    public const int TimeHappinessFieldNumber = 13;
    private uint timeHappiness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeHappiness {
      get { return timeHappiness_; }
      set {
        timeHappiness_ = value;
      }
    }

    /// <summary>Field number for the "time_happly_gift" field.</summary>
    public const int TimeHapplyGiftFieldNumber = 14;
    private uint timeHapplyGift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeHapplyGift {
      get { return timeHapplyGift_; }
      set {
        timeHapplyGift_ = value;
      }
    }

    /// <summary>Field number for the "time_excite_gift" field.</summary>
    public const int TimeExciteGiftFieldNumber = 15;
    private uint timeExciteGift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeExciteGift {
      get { return timeExciteGift_; }
      set {
        timeExciteGift_ = value;
      }
    }

    /// <summary>Field number for the "time_happiness_gift" field.</summary>
    public const int TimeHappinessGiftFieldNumber = 16;
    private uint timeHappinessGift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeHappinessGift {
      get { return timeHappinessGift_; }
      set {
        timeHappinessGift_ = value;
      }
    }

    /// <summary>Field number for the "touch_tick" field.</summary>
    public const int TouchTickFieldNumber = 22;
    private uint touchTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TouchTick {
      get { return touchTick_; }
      set {
        touchTick_ = value;
      }
    }

    /// <summary>Field number for the "feed_tick" field.</summary>
    public const int FeedTickFieldNumber = 23;
    private uint feedTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FeedTick {
      get { return feedTick_; }
      set {
        feedTick_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 17;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "var" field.</summary>
    public const int VarFieldNumber = 18;
    private pb::ByteString var_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Var {
      get { return var_; }
      set {
        var_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skillids" field.</summary>
    public const int SkillidsFieldNumber = 19;
    private static readonly pb::FieldCodec<uint> _repeated_skillids_codec
        = pb::FieldCodec.ForUInt32(154);
    private readonly pbc::RepeatedField<uint> skillids_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Skillids {
      get { return skillids_; }
    }

    /// <summary>Field number for the "equips" field.</summary>
    public const int EquipsFieldNumber = 20;
    private static readonly pb::FieldCodec<global::Cmd.EggEquip> _repeated_equips_codec
        = pb::FieldCodec.ForMessage(162, global::Cmd.EggEquip.Parser);
    private readonly pbc::RepeatedField<global::Cmd.EggEquip> equips_ = new pbc::RepeatedField<global::Cmd.EggEquip>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.EggEquip> Equips {
      get { return equips_; }
    }

    /// <summary>Field number for the "buff" field.</summary>
    public const int BuffFieldNumber = 21;
    private pb::ByteString buff_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Buff {
      get { return buff_; }
      set {
        buff_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unlock_equip" field.</summary>
    public const int UnlockEquipFieldNumber = 24;
    private static readonly pb::FieldCodec<uint> _repeated_unlockEquip_codec
        = pb::FieldCodec.ForUInt32(194);
    private readonly pbc::RepeatedField<uint> unlockEquip_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UnlockEquip {
      get { return unlockEquip_; }
    }

    /// <summary>Field number for the "unlock_body" field.</summary>
    public const int UnlockBodyFieldNumber = 25;
    private static readonly pb::FieldCodec<uint> _repeated_unlockBody_codec
        = pb::FieldCodec.ForUInt32(202);
    private readonly pbc::RepeatedField<uint> unlockBody_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UnlockBody {
      get { return unlockBody_; }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 26;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "skilloff" field.</summary>
    public const int SkilloffFieldNumber = 27;
    private bool skilloff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Skilloff {
      get { return skilloff_; }
      set {
        skilloff_ = value;
      }
    }

    /// <summary>Field number for the "exchange_count" field.</summary>
    public const int ExchangeCountFieldNumber = 28;
    private uint exchangeCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExchangeCount {
      get { return exchangeCount_; }
      set {
        exchangeCount_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 29;
    private string guid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Guid {
      get { return guid_; }
      set {
        guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EggData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EggData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Exp != other.Exp) return false;
      if (Friendexp != other.Friendexp) return false;
      if (Rewardexp != other.Rewardexp) return false;
      if (Id != other.Id) return false;
      if (Lv != other.Lv) return false;
      if (Friendlv != other.Friendlv) return false;
      if (Body != other.Body) return false;
      if (Relivetime != other.Relivetime) return false;
      if (Hp != other.Hp) return false;
      if (Restoretime != other.Restoretime) return false;
      if (TimeHapply != other.TimeHapply) return false;
      if (TimeExcite != other.TimeExcite) return false;
      if (TimeHappiness != other.TimeHappiness) return false;
      if (TimeHapplyGift != other.TimeHapplyGift) return false;
      if (TimeExciteGift != other.TimeExciteGift) return false;
      if (TimeHappinessGift != other.TimeHappinessGift) return false;
      if (TouchTick != other.TouchTick) return false;
      if (FeedTick != other.FeedTick) return false;
      if (Name != other.Name) return false;
      if (Var != other.Var) return false;
      if(!skillids_.Equals(other.skillids_)) return false;
      if(!equips_.Equals(other.equips_)) return false;
      if (Buff != other.Buff) return false;
      if(!unlockEquip_.Equals(other.unlockEquip_)) return false;
      if(!unlockBody_.Equals(other.unlockBody_)) return false;
      if (Version != other.Version) return false;
      if (Skilloff != other.Skilloff) return false;
      if (ExchangeCount != other.ExchangeCount) return false;
      if (Guid != other.Guid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Exp != 0UL) hash ^= Exp.GetHashCode();
      if (Friendexp != 0UL) hash ^= Friendexp.GetHashCode();
      if (Rewardexp != 0UL) hash ^= Rewardexp.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Lv != 0) hash ^= Lv.GetHashCode();
      if (Friendlv != 0) hash ^= Friendlv.GetHashCode();
      if (Body != 0) hash ^= Body.GetHashCode();
      if (Relivetime != 0) hash ^= Relivetime.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (Restoretime != 0) hash ^= Restoretime.GetHashCode();
      if (TimeHapply != 0) hash ^= TimeHapply.GetHashCode();
      if (TimeExcite != 0) hash ^= TimeExcite.GetHashCode();
      if (TimeHappiness != 0) hash ^= TimeHappiness.GetHashCode();
      if (TimeHapplyGift != 0) hash ^= TimeHapplyGift.GetHashCode();
      if (TimeExciteGift != 0) hash ^= TimeExciteGift.GetHashCode();
      if (TimeHappinessGift != 0) hash ^= TimeHappinessGift.GetHashCode();
      if (TouchTick != 0) hash ^= TouchTick.GetHashCode();
      if (FeedTick != 0) hash ^= FeedTick.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Var.Length != 0) hash ^= Var.GetHashCode();
      hash ^= skillids_.GetHashCode();
      hash ^= equips_.GetHashCode();
      if (Buff.Length != 0) hash ^= Buff.GetHashCode();
      hash ^= unlockEquip_.GetHashCode();
      hash ^= unlockBody_.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Skilloff != false) hash ^= Skilloff.GetHashCode();
      if (ExchangeCount != 0) hash ^= ExchangeCount.GetHashCode();
      if (Guid.Length != 0) hash ^= Guid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Exp != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Exp);
      }
      if (Friendexp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Friendexp);
      }
      if (Rewardexp != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Rewardexp);
      }
      if (Id != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Id);
      }
      if (Lv != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Lv);
      }
      if (Friendlv != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Friendlv);
      }
      if (Body != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Body);
      }
      if (Relivetime != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Relivetime);
      }
      if (Hp != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Hp);
      }
      if (Restoretime != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Restoretime);
      }
      if (TimeHapply != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(TimeHapply);
      }
      if (TimeExcite != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(TimeExcite);
      }
      if (TimeHappiness != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(TimeHappiness);
      }
      if (TimeHapplyGift != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(TimeHapplyGift);
      }
      if (TimeExciteGift != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(TimeExciteGift);
      }
      if (TimeHappinessGift != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(TimeHappinessGift);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Name);
      }
      if (Var.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteBytes(Var);
      }
      skillids_.WriteTo(output, _repeated_skillids_codec);
      equips_.WriteTo(output, _repeated_equips_codec);
      if (Buff.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteBytes(Buff);
      }
      if (TouchTick != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(TouchTick);
      }
      if (FeedTick != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(FeedTick);
      }
      unlockEquip_.WriteTo(output, _repeated_unlockEquip_codec);
      unlockBody_.WriteTo(output, _repeated_unlockBody_codec);
      if (Version != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(Version);
      }
      if (Skilloff != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(Skilloff);
      }
      if (ExchangeCount != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(ExchangeCount);
      }
      if (Guid.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(Guid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Exp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Exp);
      }
      if (Friendexp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Friendexp);
      }
      if (Rewardexp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Rewardexp);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Lv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lv);
      }
      if (Friendlv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Friendlv);
      }
      if (Body != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Body);
      }
      if (Relivetime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Relivetime);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hp);
      }
      if (Restoretime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Restoretime);
      }
      if (TimeHapply != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeHapply);
      }
      if (TimeExcite != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeExcite);
      }
      if (TimeHappiness != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeHappiness);
      }
      if (TimeHapplyGift != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeHapplyGift);
      }
      if (TimeExciteGift != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeExciteGift);
      }
      if (TimeHappinessGift != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TimeHappinessGift);
      }
      if (TouchTick != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TouchTick);
      }
      if (FeedTick != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FeedTick);
      }
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Var.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Var);
      }
      size += skillids_.CalculateSize(_repeated_skillids_codec);
      size += equips_.CalculateSize(_repeated_equips_codec);
      if (Buff.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Buff);
      }
      size += unlockEquip_.CalculateSize(_repeated_unlockEquip_codec);
      size += unlockBody_.CalculateSize(_repeated_unlockBody_codec);
      if (Version != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (Skilloff != false) {
        size += 2 + 1;
      }
      if (ExchangeCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ExchangeCount);
      }
      if (Guid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Guid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EggData other) {
      if (other == null) {
        return;
      }
      if (other.Exp != 0UL) {
        Exp = other.Exp;
      }
      if (other.Friendexp != 0UL) {
        Friendexp = other.Friendexp;
      }
      if (other.Rewardexp != 0UL) {
        Rewardexp = other.Rewardexp;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Lv != 0) {
        Lv = other.Lv;
      }
      if (other.Friendlv != 0) {
        Friendlv = other.Friendlv;
      }
      if (other.Body != 0) {
        Body = other.Body;
      }
      if (other.Relivetime != 0) {
        Relivetime = other.Relivetime;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.Restoretime != 0) {
        Restoretime = other.Restoretime;
      }
      if (other.TimeHapply != 0) {
        TimeHapply = other.TimeHapply;
      }
      if (other.TimeExcite != 0) {
        TimeExcite = other.TimeExcite;
      }
      if (other.TimeHappiness != 0) {
        TimeHappiness = other.TimeHappiness;
      }
      if (other.TimeHapplyGift != 0) {
        TimeHapplyGift = other.TimeHapplyGift;
      }
      if (other.TimeExciteGift != 0) {
        TimeExciteGift = other.TimeExciteGift;
      }
      if (other.TimeHappinessGift != 0) {
        TimeHappinessGift = other.TimeHappinessGift;
      }
      if (other.TouchTick != 0) {
        TouchTick = other.TouchTick;
      }
      if (other.FeedTick != 0) {
        FeedTick = other.FeedTick;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Var.Length != 0) {
        Var = other.Var;
      }
      skillids_.Add(other.skillids_);
      equips_.Add(other.equips_);
      if (other.Buff.Length != 0) {
        Buff = other.Buff;
      }
      unlockEquip_.Add(other.unlockEquip_);
      unlockBody_.Add(other.unlockBody_);
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Skilloff != false) {
        Skilloff = other.Skilloff;
      }
      if (other.ExchangeCount != 0) {
        ExchangeCount = other.ExchangeCount;
      }
      if (other.Guid.Length != 0) {
        Guid = other.Guid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Exp = input.ReadUInt64();
            break;
          }
          case 16: {
            Friendexp = input.ReadUInt64();
            break;
          }
          case 24: {
            Rewardexp = input.ReadUInt64();
            break;
          }
          case 32: {
            Id = input.ReadUInt32();
            break;
          }
          case 40: {
            Lv = input.ReadUInt32();
            break;
          }
          case 48: {
            Friendlv = input.ReadUInt32();
            break;
          }
          case 56: {
            Body = input.ReadUInt32();
            break;
          }
          case 64: {
            Relivetime = input.ReadUInt32();
            break;
          }
          case 72: {
            Hp = input.ReadUInt32();
            break;
          }
          case 80: {
            Restoretime = input.ReadUInt32();
            break;
          }
          case 88: {
            TimeHapply = input.ReadUInt32();
            break;
          }
          case 96: {
            TimeExcite = input.ReadUInt32();
            break;
          }
          case 104: {
            TimeHappiness = input.ReadUInt32();
            break;
          }
          case 112: {
            TimeHapplyGift = input.ReadUInt32();
            break;
          }
          case 120: {
            TimeExciteGift = input.ReadUInt32();
            break;
          }
          case 128: {
            TimeHappinessGift = input.ReadUInt32();
            break;
          }
          case 138: {
            Name = input.ReadString();
            break;
          }
          case 146: {
            Var = input.ReadBytes();
            break;
          }
          case 154:
          case 152: {
            skillids_.AddEntriesFrom(input, _repeated_skillids_codec);
            break;
          }
          case 162: {
            equips_.AddEntriesFrom(input, _repeated_equips_codec);
            break;
          }
          case 170: {
            Buff = input.ReadBytes();
            break;
          }
          case 176: {
            TouchTick = input.ReadUInt32();
            break;
          }
          case 184: {
            FeedTick = input.ReadUInt32();
            break;
          }
          case 194:
          case 192: {
            unlockEquip_.AddEntriesFrom(input, _repeated_unlockEquip_codec);
            break;
          }
          case 202:
          case 200: {
            unlockBody_.AddEntriesFrom(input, _repeated_unlockBody_codec);
            break;
          }
          case 208: {
            Version = input.ReadUInt32();
            break;
          }
          case 216: {
            Skilloff = input.ReadBool();
            break;
          }
          case 224: {
            ExchangeCount = input.ReadUInt32();
            break;
          }
          case 234: {
            Guid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  unused
  /// </summary>
  public sealed partial class RefineCompose : pb::IMessage<RefineCompose> {
    private static readonly pb::MessageParser<RefineCompose> _parser = new pb::MessageParser<RefineCompose>(() => new RefineCompose());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RefineCompose> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoItemCommonReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefineCompose() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefineCompose(RefineCompose other) : this() {
      id_ = other.id_;
      num_ = other.num_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefineCompose Clone() {
      return new RefineCompose(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private uint num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RefineCompose);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RefineCompose other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Num != other.Num) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RefineCompose other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Num = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// unused
  /// </summary>
  public sealed partial class EggEquip : pb::IMessage<EggEquip> {
    private static readonly pb::MessageParser<EggEquip> _parser = new pb::MessageParser<EggEquip>(() => new EggEquip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EggEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoItemCommonReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EggEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EggEquip(EggEquip other) : this() {
      Base = other.base_ != null ? other.Base.Clone() : null;
      Data = other.data_ != null ? other.Data.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EggEquip Clone() {
      return new EggEquip(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Cmd.ItemInfo base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ItemInfo Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::Cmd.EquipData data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EquipData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EggEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EggEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EggEquip other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          base_ = new global::Cmd.ItemInfo();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::Cmd.EquipData();
        }
        Data.MergeFrom(other.Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (base_ == null) {
              base_ = new global::Cmd.ItemInfo();
            }
            input.ReadMessage(base_);
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::Cmd.EquipData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  unused
  /// </summary>
  public sealed partial class ShopItem : pb::IMessage<ShopItem> {
    private static readonly pb::MessageParser<ShopItem> _parser = new pb::MessageParser<ShopItem>(() => new ShopItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoItemCommonReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopItem(ShopItem other) : this() {
      id_ = other.id_;
      lv_ = other.lv_;
      moneyid_ = other.moneyid_;
      moneycount_ = other.moneycount_;
      moneyid2_ = other.moneyid2_;
      moneycount2_ = other.moneycount2_;
      starttime_ = other.starttime_;
      endtime_ = other.endtime_;
      discount_ = other.discount_;
      maxcount_ = other.maxcount_;
      shopid_ = other.shopid_;
      screen_ = other.screen_;
      itemid_ = other.itemid_;
      skillid_ = other.skillid_;
      haircolorid_ = other.haircolorid_;
      num_ = other.num_;
      menuid_ = other.menuid_;
      shoptype_ = other.shoptype_;
      limittype_ = other.limittype_;
      des_ = other.des_;
      levdes_ = other.levdes_;
      business_ = other.business_;
      precost_ = other.precost_;
      display_ = other.display_;
      shoporder_ = other.shoporder_;
      ifmsg_ = other.ifmsg_;
      adddate_ = other.adddate_;
      removedate_ = other.removedate_;
      source_ = other.source_;
      locktype_ = other.locktype_;
      lockarg_ = other.lockarg_;
      discountmax_ = other.discountmax_;
      actdiscount_ = other.actdiscount_;
      producenum_ = other.producenum_;
      nextgoodsid_ = other.nextgoodsid_;
      clothcolorid_ = other.clothcolorid_;
      clothcolorids_ = other.clothcolorids_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopItem Clone() {
      return new ShopItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "lv" field.</summary>
    public const int LvFieldNumber = 2;
    private uint lv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lv {
      get { return lv_; }
      set {
        lv_ = value;
      }
    }

    /// <summary>Field number for the "moneyid" field.</summary>
    public const int MoneyidFieldNumber = 3;
    private uint moneyid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Moneyid {
      get { return moneyid_; }
      set {
        moneyid_ = value;
      }
    }

    /// <summary>Field number for the "moneycount" field.</summary>
    public const int MoneycountFieldNumber = 4;
    private uint moneycount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Moneycount {
      get { return moneycount_; }
      set {
        moneycount_ = value;
      }
    }

    /// <summary>Field number for the "moneyid2" field.</summary>
    public const int Moneyid2FieldNumber = 5;
    private uint moneyid2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Moneyid2 {
      get { return moneyid2_; }
      set {
        moneyid2_ = value;
      }
    }

    /// <summary>Field number for the "moneycount2" field.</summary>
    public const int Moneycount2FieldNumber = 6;
    private uint moneycount2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Moneycount2 {
      get { return moneycount2_; }
      set {
        moneycount2_ = value;
      }
    }

    /// <summary>Field number for the "starttime" field.</summary>
    public const int StarttimeFieldNumber = 7;
    private uint starttime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Starttime {
      get { return starttime_; }
      set {
        starttime_ = value;
      }
    }

    /// <summary>Field number for the "endtime" field.</summary>
    public const int EndtimeFieldNumber = 8;
    private uint endtime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Endtime {
      get { return endtime_; }
      set {
        endtime_ = value;
      }
    }

    /// <summary>Field number for the "discount" field.</summary>
    public const int DiscountFieldNumber = 9;
    private uint discount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Discount {
      get { return discount_; }
      set {
        discount_ = value;
      }
    }

    /// <summary>Field number for the "maxcount" field.</summary>
    public const int MaxcountFieldNumber = 10;
    private uint maxcount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Maxcount {
      get { return maxcount_; }
      set {
        maxcount_ = value;
      }
    }

    /// <summary>Field number for the "shopid" field.</summary>
    public const int ShopidFieldNumber = 11;
    private uint shopid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Shopid {
      get { return shopid_; }
      set {
        shopid_ = value;
      }
    }

    /// <summary>Field number for the "screen" field.</summary>
    public const int ScreenFieldNumber = 12;
    private uint screen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Screen {
      get { return screen_; }
      set {
        screen_ = value;
      }
    }

    /// <summary>Field number for the "itemid" field.</summary>
    public const int ItemidFieldNumber = 13;
    private uint itemid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Itemid {
      get { return itemid_; }
      set {
        itemid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 14;
    private uint skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "haircolorid" field.</summary>
    public const int HaircoloridFieldNumber = 16;
    private uint haircolorid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Haircolorid {
      get { return haircolorid_; }
      set {
        haircolorid_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 17;
    private uint num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "menuid" field.</summary>
    public const int MenuidFieldNumber = 18;
    private uint menuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Menuid {
      get { return menuid_; }
      set {
        menuid_ = value;
      }
    }

    /// <summary>Field number for the "shoptype" field.</summary>
    public const int ShoptypeFieldNumber = 19;
    private uint shoptype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Shoptype {
      get { return shoptype_; }
      set {
        shoptype_ = value;
      }
    }

    /// <summary>Field number for the "limittype" field.</summary>
    public const int LimittypeFieldNumber = 21;
    private global::Cmd.EShopLimitType limittype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EShopLimitType Limittype {
      get { return limittype_; }
      set {
        limittype_ = value;
      }
    }

    /// <summary>Field number for the "des" field.</summary>
    public const int DesFieldNumber = 22;
    private string des_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Des {
      get { return des_; }
      set {
        des_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "levdes" field.</summary>
    public const int LevdesFieldNumber = 23;
    private string levdes_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Levdes {
      get { return levdes_; }
      set {
        levdes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "business" field.</summary>
    public const int BusinessFieldNumber = 24;
    private uint business_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Business {
      get { return business_; }
      set {
        business_ = value;
      }
    }

    /// <summary>Field number for the "precost" field.</summary>
    public const int PrecostFieldNumber = 25;
    private uint precost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Precost {
      get { return precost_; }
      set {
        precost_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 26;
    private uint display_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "shoporder" field.</summary>
    public const int ShoporderFieldNumber = 27;
    private uint shoporder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Shoporder {
      get { return shoporder_; }
      set {
        shoporder_ = value;
      }
    }

    /// <summary>Field number for the "ifmsg" field.</summary>
    public const int IfmsgFieldNumber = 28;
    private uint ifmsg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ifmsg {
      get { return ifmsg_; }
      set {
        ifmsg_ = value;
      }
    }

    /// <summary>Field number for the "adddate" field.</summary>
    public const int AdddateFieldNumber = 29;
    private uint adddate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Adddate {
      get { return adddate_; }
      set {
        adddate_ = value;
      }
    }

    /// <summary>Field number for the "removedate" field.</summary>
    public const int RemovedateFieldNumber = 30;
    private uint removedate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Removedate {
      get { return removedate_; }
      set {
        removedate_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 37;
    private global::Cmd.EShopSource source_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EShopSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "locktype" field.</summary>
    public const int LocktypeFieldNumber = 31;
    private global::Cmd.EShopLockType locktype_ = 0;
    /// <summary>
    ///  客户端用动态数据, 表示当前商品是否解锁和原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EShopLockType Locktype {
      get { return locktype_; }
      set {
        locktype_ = value;
      }
    }

    /// <summary>Field number for the "lockarg" field.</summary>
    public const int LockargFieldNumber = 32;
    private string lockarg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lockarg {
      get { return lockarg_; }
      set {
        lockarg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "discountmax" field.</summary>
    public const int DiscountmaxFieldNumber = 33;
    private uint discountmax_;
    /// <summary>
    ///  折扣活动商品最大打折次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Discountmax {
      get { return discountmax_; }
      set {
        discountmax_ = value;
      }
    }

    /// <summary>Field number for the "actdiscount" field.</summary>
    public const int ActdiscountFieldNumber = 34;
    private uint actdiscount_;
    /// <summary>
    ///  折扣活动商品折扣
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Actdiscount {
      get { return actdiscount_; }
      set {
        actdiscount_ = value;
      }
    }

    /// <summary>Field number for the "producenum" field.</summary>
    public const int ProducenumFieldNumber = 35;
    private uint producenum_;
    /// <summary>
    /// 全服产出数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Producenum {
      get { return producenum_; }
      set {
        producenum_ = value;
      }
    }

    /// <summary>Field number for the "nextgoodsid" field.</summary>
    public const int NextgoodsidFieldNumber = 36;
    private uint nextgoodsid_;
    /// <summary>
    /// lzq 随购买次数价格递增功能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Nextgoodsid {
      get { return nextgoodsid_; }
      set {
        nextgoodsid_ = value;
      }
    }

    /// <summary>Field number for the "clothcolorid" field.</summary>
    public const int ClothcoloridFieldNumber = 38;
    private uint clothcolorid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Clothcolorid {
      get { return clothcolorid_; }
      set {
        clothcolorid_ = value;
      }
    }

    /// <summary>Field number for the "clothcolorids" field.</summary>
    public const int ClothcoloridsFieldNumber = 39;
    private static readonly pb::FieldCodec<uint> _repeated_clothcolorids_codec
        = pb::FieldCodec.ForUInt32(314);
    private readonly pbc::RepeatedField<uint> clothcolorids_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Clothcolorids {
      get { return clothcolorids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Lv != other.Lv) return false;
      if (Moneyid != other.Moneyid) return false;
      if (Moneycount != other.Moneycount) return false;
      if (Moneyid2 != other.Moneyid2) return false;
      if (Moneycount2 != other.Moneycount2) return false;
      if (Starttime != other.Starttime) return false;
      if (Endtime != other.Endtime) return false;
      if (Discount != other.Discount) return false;
      if (Maxcount != other.Maxcount) return false;
      if (Shopid != other.Shopid) return false;
      if (Screen != other.Screen) return false;
      if (Itemid != other.Itemid) return false;
      if (Skillid != other.Skillid) return false;
      if (Haircolorid != other.Haircolorid) return false;
      if (Num != other.Num) return false;
      if (Menuid != other.Menuid) return false;
      if (Shoptype != other.Shoptype) return false;
      if (Limittype != other.Limittype) return false;
      if (Des != other.Des) return false;
      if (Levdes != other.Levdes) return false;
      if (Business != other.Business) return false;
      if (Precost != other.Precost) return false;
      if (Display != other.Display) return false;
      if (Shoporder != other.Shoporder) return false;
      if (Ifmsg != other.Ifmsg) return false;
      if (Adddate != other.Adddate) return false;
      if (Removedate != other.Removedate) return false;
      if (Source != other.Source) return false;
      if (Locktype != other.Locktype) return false;
      if (Lockarg != other.Lockarg) return false;
      if (Discountmax != other.Discountmax) return false;
      if (Actdiscount != other.Actdiscount) return false;
      if (Producenum != other.Producenum) return false;
      if (Nextgoodsid != other.Nextgoodsid) return false;
      if (Clothcolorid != other.Clothcolorid) return false;
      if(!clothcolorids_.Equals(other.clothcolorids_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Lv != 0) hash ^= Lv.GetHashCode();
      if (Moneyid != 0) hash ^= Moneyid.GetHashCode();
      if (Moneycount != 0) hash ^= Moneycount.GetHashCode();
      if (Moneyid2 != 0) hash ^= Moneyid2.GetHashCode();
      if (Moneycount2 != 0) hash ^= Moneycount2.GetHashCode();
      if (Starttime != 0) hash ^= Starttime.GetHashCode();
      if (Endtime != 0) hash ^= Endtime.GetHashCode();
      if (Discount != 0) hash ^= Discount.GetHashCode();
      if (Maxcount != 0) hash ^= Maxcount.GetHashCode();
      if (Shopid != 0) hash ^= Shopid.GetHashCode();
      if (Screen != 0) hash ^= Screen.GetHashCode();
      if (Itemid != 0) hash ^= Itemid.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (Haircolorid != 0) hash ^= Haircolorid.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (Menuid != 0) hash ^= Menuid.GetHashCode();
      if (Shoptype != 0) hash ^= Shoptype.GetHashCode();
      if (Limittype != 0) hash ^= Limittype.GetHashCode();
      if (Des.Length != 0) hash ^= Des.GetHashCode();
      if (Levdes.Length != 0) hash ^= Levdes.GetHashCode();
      if (Business != 0) hash ^= Business.GetHashCode();
      if (Precost != 0) hash ^= Precost.GetHashCode();
      if (Display != 0) hash ^= Display.GetHashCode();
      if (Shoporder != 0) hash ^= Shoporder.GetHashCode();
      if (Ifmsg != 0) hash ^= Ifmsg.GetHashCode();
      if (Adddate != 0) hash ^= Adddate.GetHashCode();
      if (Removedate != 0) hash ^= Removedate.GetHashCode();
      if (Source != 0) hash ^= Source.GetHashCode();
      if (Locktype != 0) hash ^= Locktype.GetHashCode();
      if (Lockarg.Length != 0) hash ^= Lockarg.GetHashCode();
      if (Discountmax != 0) hash ^= Discountmax.GetHashCode();
      if (Actdiscount != 0) hash ^= Actdiscount.GetHashCode();
      if (Producenum != 0) hash ^= Producenum.GetHashCode();
      if (Nextgoodsid != 0) hash ^= Nextgoodsid.GetHashCode();
      if (Clothcolorid != 0) hash ^= Clothcolorid.GetHashCode();
      hash ^= clothcolorids_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Lv != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Lv);
      }
      if (Moneyid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Moneyid);
      }
      if (Moneycount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Moneycount);
      }
      if (Moneyid2 != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Moneyid2);
      }
      if (Moneycount2 != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Moneycount2);
      }
      if (Starttime != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Starttime);
      }
      if (Endtime != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Endtime);
      }
      if (Discount != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Discount);
      }
      if (Maxcount != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Maxcount);
      }
      if (Shopid != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Shopid);
      }
      if (Screen != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Screen);
      }
      if (Itemid != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Itemid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(Skillid);
      }
      if (Haircolorid != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(Haircolorid);
      }
      if (Num != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(Num);
      }
      if (Menuid != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(Menuid);
      }
      if (Shoptype != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(Shoptype);
      }
      if (Limittype != 0) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) Limittype);
      }
      if (Des.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Des);
      }
      if (Levdes.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Levdes);
      }
      if (Business != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(Business);
      }
      if (Precost != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(Precost);
      }
      if (Display != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(Display);
      }
      if (Shoporder != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(Shoporder);
      }
      if (Ifmsg != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(Ifmsg);
      }
      if (Adddate != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(Adddate);
      }
      if (Removedate != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(Removedate);
      }
      if (Locktype != 0) {
        output.WriteRawTag(248, 1);
        output.WriteEnum((int) Locktype);
      }
      if (Lockarg.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(Lockarg);
      }
      if (Discountmax != 0) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(Discountmax);
      }
      if (Actdiscount != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(Actdiscount);
      }
      if (Producenum != 0) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(Producenum);
      }
      if (Nextgoodsid != 0) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(Nextgoodsid);
      }
      if (Source != 0) {
        output.WriteRawTag(168, 2);
        output.WriteEnum((int) Source);
      }
      if (Clothcolorid != 0) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(Clothcolorid);
      }
      clothcolorids_.WriteTo(output, _repeated_clothcolorids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Lv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lv);
      }
      if (Moneyid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Moneyid);
      }
      if (Moneycount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Moneycount);
      }
      if (Moneyid2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Moneyid2);
      }
      if (Moneycount2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Moneycount2);
      }
      if (Starttime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Starttime);
      }
      if (Endtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Endtime);
      }
      if (Discount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Discount);
      }
      if (Maxcount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Maxcount);
      }
      if (Shopid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Shopid);
      }
      if (Screen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Screen);
      }
      if (Itemid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Itemid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      if (Haircolorid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Haircolorid);
      }
      if (Num != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Num);
      }
      if (Menuid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Menuid);
      }
      if (Shoptype != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Shoptype);
      }
      if (Limittype != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Limittype);
      }
      if (Des.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Des);
      }
      if (Levdes.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Levdes);
      }
      if (Business != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Business);
      }
      if (Precost != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Precost);
      }
      if (Display != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Display);
      }
      if (Shoporder != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Shoporder);
      }
      if (Ifmsg != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ifmsg);
      }
      if (Adddate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Adddate);
      }
      if (Removedate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Removedate);
      }
      if (Source != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Source);
      }
      if (Locktype != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Locktype);
      }
      if (Lockarg.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Lockarg);
      }
      if (Discountmax != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Discountmax);
      }
      if (Actdiscount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Actdiscount);
      }
      if (Producenum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Producenum);
      }
      if (Nextgoodsid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Nextgoodsid);
      }
      if (Clothcolorid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Clothcolorid);
      }
      size += clothcolorids_.CalculateSize(_repeated_clothcolorids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopItem other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Lv != 0) {
        Lv = other.Lv;
      }
      if (other.Moneyid != 0) {
        Moneyid = other.Moneyid;
      }
      if (other.Moneycount != 0) {
        Moneycount = other.Moneycount;
      }
      if (other.Moneyid2 != 0) {
        Moneyid2 = other.Moneyid2;
      }
      if (other.Moneycount2 != 0) {
        Moneycount2 = other.Moneycount2;
      }
      if (other.Starttime != 0) {
        Starttime = other.Starttime;
      }
      if (other.Endtime != 0) {
        Endtime = other.Endtime;
      }
      if (other.Discount != 0) {
        Discount = other.Discount;
      }
      if (other.Maxcount != 0) {
        Maxcount = other.Maxcount;
      }
      if (other.Shopid != 0) {
        Shopid = other.Shopid;
      }
      if (other.Screen != 0) {
        Screen = other.Screen;
      }
      if (other.Itemid != 0) {
        Itemid = other.Itemid;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.Haircolorid != 0) {
        Haircolorid = other.Haircolorid;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.Menuid != 0) {
        Menuid = other.Menuid;
      }
      if (other.Shoptype != 0) {
        Shoptype = other.Shoptype;
      }
      if (other.Limittype != 0) {
        Limittype = other.Limittype;
      }
      if (other.Des.Length != 0) {
        Des = other.Des;
      }
      if (other.Levdes.Length != 0) {
        Levdes = other.Levdes;
      }
      if (other.Business != 0) {
        Business = other.Business;
      }
      if (other.Precost != 0) {
        Precost = other.Precost;
      }
      if (other.Display != 0) {
        Display = other.Display;
      }
      if (other.Shoporder != 0) {
        Shoporder = other.Shoporder;
      }
      if (other.Ifmsg != 0) {
        Ifmsg = other.Ifmsg;
      }
      if (other.Adddate != 0) {
        Adddate = other.Adddate;
      }
      if (other.Removedate != 0) {
        Removedate = other.Removedate;
      }
      if (other.Source != 0) {
        Source = other.Source;
      }
      if (other.Locktype != 0) {
        Locktype = other.Locktype;
      }
      if (other.Lockarg.Length != 0) {
        Lockarg = other.Lockarg;
      }
      if (other.Discountmax != 0) {
        Discountmax = other.Discountmax;
      }
      if (other.Actdiscount != 0) {
        Actdiscount = other.Actdiscount;
      }
      if (other.Producenum != 0) {
        Producenum = other.Producenum;
      }
      if (other.Nextgoodsid != 0) {
        Nextgoodsid = other.Nextgoodsid;
      }
      if (other.Clothcolorid != 0) {
        Clothcolorid = other.Clothcolorid;
      }
      clothcolorids_.Add(other.clothcolorids_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Lv = input.ReadUInt32();
            break;
          }
          case 24: {
            Moneyid = input.ReadUInt32();
            break;
          }
          case 32: {
            Moneycount = input.ReadUInt32();
            break;
          }
          case 40: {
            Moneyid2 = input.ReadUInt32();
            break;
          }
          case 48: {
            Moneycount2 = input.ReadUInt32();
            break;
          }
          case 56: {
            Starttime = input.ReadUInt32();
            break;
          }
          case 64: {
            Endtime = input.ReadUInt32();
            break;
          }
          case 72: {
            Discount = input.ReadUInt32();
            break;
          }
          case 80: {
            Maxcount = input.ReadUInt32();
            break;
          }
          case 88: {
            Shopid = input.ReadUInt32();
            break;
          }
          case 96: {
            Screen = input.ReadUInt32();
            break;
          }
          case 104: {
            Itemid = input.ReadUInt32();
            break;
          }
          case 112: {
            Skillid = input.ReadUInt32();
            break;
          }
          case 128: {
            Haircolorid = input.ReadUInt32();
            break;
          }
          case 136: {
            Num = input.ReadUInt32();
            break;
          }
          case 144: {
            Menuid = input.ReadUInt32();
            break;
          }
          case 152: {
            Shoptype = input.ReadUInt32();
            break;
          }
          case 168: {
            limittype_ = (global::Cmd.EShopLimitType) input.ReadEnum();
            break;
          }
          case 178: {
            Des = input.ReadString();
            break;
          }
          case 186: {
            Levdes = input.ReadString();
            break;
          }
          case 192: {
            Business = input.ReadUInt32();
            break;
          }
          case 200: {
            Precost = input.ReadUInt32();
            break;
          }
          case 208: {
            Display = input.ReadUInt32();
            break;
          }
          case 216: {
            Shoporder = input.ReadUInt32();
            break;
          }
          case 224: {
            Ifmsg = input.ReadUInt32();
            break;
          }
          case 232: {
            Adddate = input.ReadUInt32();
            break;
          }
          case 240: {
            Removedate = input.ReadUInt32();
            break;
          }
          case 248: {
            locktype_ = (global::Cmd.EShopLockType) input.ReadEnum();
            break;
          }
          case 258: {
            Lockarg = input.ReadString();
            break;
          }
          case 264: {
            Discountmax = input.ReadUInt32();
            break;
          }
          case 272: {
            Actdiscount = input.ReadUInt32();
            break;
          }
          case 280: {
            Producenum = input.ReadUInt32();
            break;
          }
          case 288: {
            Nextgoodsid = input.ReadUInt32();
            break;
          }
          case 296: {
            source_ = (global::Cmd.EShopSource) input.ReadEnum();
            break;
          }
          case 304: {
            Clothcolorid = input.ReadUInt32();
            break;
          }
          case 314:
          case 312: {
            clothcolorids_.AddEntriesFrom(input, _repeated_clothcolorids_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
