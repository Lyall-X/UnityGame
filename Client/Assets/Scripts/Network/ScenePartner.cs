// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ScenePartner.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Cmd {

  /// <summary>Holder for reflection information generated from ScenePartner.proto</summary>
  public static partial class ScenePartnerReflection {

    #region Descriptor
    /// <summary>File descriptor for ScenePartner.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ScenePartnerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJTY2VuZVBhcnRuZXIucHJvdG8SA0NtZBoRUHJvdG9Db21tb24ucHJvdG8i",
            "eAoJU2tpbGxJbmZvEgoKAmlkGAEgASgNEhQKDG5vcm1hbGF0dGFjaxgCIAEo",
            "CBIRCglyZXBsYWNlaWQYAyABKA0SEgoKc2tpbGxsZXZlbBgEIAEoDRIQCghw",
            "b3NpdGlvbhgFIAEoDRIQCghpc2xvY2tlZBgGIAEoCCLmAQoLRmlnaHRlcklu",
            "Zm8SEgoKcHJvZmVzc2lvbhgBIAEoDRINCgVjZmdpZBgCIAEoDRINCgVsZXZl",
            "bBgDIAEoDRILCgNleHAYBCABKAQSDAoEbG9jaxgFIAEoCBIMCgRzdGFyGAYg",
            "ASgNEhIKCnNraWxscG9pbnQYDCABKA0SHAoFYXR0cnMYByADKAsyDS5DbWQu",
            "VXNlckF0dHISHgoGc2tpbGxzGAggAygLMg4uQ21kLlNraWxsSW5mbxIYChBB",
            "YmFuZG9uc3RhcmxldmVsGAkgASgNEhAKCHRvdGFsZXhwGAogASgEIjQKDlBh",
            "cnRuZXJMaXN0Q21kEiIKCGZpZ2h0ZXJzGAMgAygLMhAuQ21kLkZpZ2h0ZXJJ",
            "bmZvIjIKDUFkZEZpZ2h0ZXJDbWQSIQoHZmlnaHRlchgDIAEoCzIQLkNtZC5G",
            "aWdodGVySW5mbyIiCg1EZWxGaWdodGVyQ21kEhEKCWZpZ2h0ZXJpZBgBIAEo",
            "DSJSChVTdGFyVXBncmFkZVBhcnRuZXJDbWQSEQoJZmlnaHRlcmlkGAEgASgN",
            "EgwKBHN0YXIYAiABKA0SGAoQQWJhbmRvbnN0YXJsZXZlbBgDIAEoDSJFChZT",
            "a2lsbFJlcGxhY2VQYXJ0bmVyQ21kEgwKBGd1aWQYAyABKAQSHQoFaW5mb3MY",
            "BCADKAsyDi5DbWQuU2tpbGxJbmZvIjMKD0ZpZ2h0ZXJMZXZlbENtZBIRCglm",
            "aWdodGVyaWQYASABKA0SDQoFbGV2ZWwYAiABKA0iQQoNRmlnaHRlckV4cENt",
            "ZBIRCglmaWdodGVyaWQYASABKA0SCwoDZXhwGAIgASgEEhAKCHRvdGFsZXhw",
            "GAMgASgEIkEKDkZpZ2h0ZXJBdHRyQ21kEhEKCWZpZ2h0ZXJpZBgBIAEoDRIc",
            "CgVhdHRycxgCIAMoCzINLkNtZC5Vc2VyQXR0ciJgCg9GaWdodGVyU2tpbGxD",
            "bWQSEQoJZmlnaHRlcmlkGAEgASgNEh4KBnNraWxscxgCIAMoCzIOLkNtZC5T",
            "a2lsbEluZm8SDAoEZGVscxgDIAMoDRIMCgRndWlkGAQgASgEIjwKFkZpZ2h0",
            "ZXJTa2lsbExldmVsVXBDbWQSEQoJZmlnaHRlcmlkGAEgASgNEg8KB3NraWxs",
            "aWQYAiABKA0iTwoaRmlnaHRlclNraWxsUG9zaXRpb25TZXRDbWQSEQoJZmln",
            "aHRlcmlkGAEgASgNEh4KBnNraWxscxgCIAMoCzIOLkNtZC5Ta2lsbEluZm8i",
            "RQocRmlnaHRlclNraWxsUG9pbnRTeW5jSW5mb0NtZBIRCglmaWdodGVyaWQY",
            "ASABKA0SEgoKc2tpbGxwb2ludBgCIAEoDSqTAwoORVNraWxsU2xvdFR5cGUS",
            "FgoSRVNLSUxMU0xPVFRZUEVfTUlOEAASHwobRVNLSUxMU0xPVFRZUEVfTk9S",
            "TUFMQVRUQUNLEAESGQoVRVNLSUxMU0xPVFRZUEVfU0tJTEwxEAISGQoVRVNL",
            "SUxMU0xPVFRZUEVfU0tJTEwyEAMSGQoVRVNLSUxMU0xPVFRZUEVfU0tJTEwz",
            "EAQSGwoXRVNLSUxMU0xPVFRZUEVfU0tJTExaWEMQBRIYChRFU0tJTExTTE9U",
            "VFlQRV9ET0RHRRAGEhsKF0VTS0lMTFNMT1RUWVBFX0JMQUNLU0FOEGUSGgoV",
            "RVNLSUxMU0xPVFRZUEVfSU5URVIxEMkBEhoKFUVTS0lMTFNMT1RUWVBFX0lO",
            "VEVSMhDKARIaChVFU0tJTExTTE9UVFlQRV9JTlRFUjMQywESGgoVRVNLSUxM",
            "U0xPVFRZUEVfSU5URVI0EMwBEhoKFUVTS0lMTFNMT1RUWVBFX0lOVEVSNRDN",
            "ARIXChJFU0tJTExTTE9UVFlQRV9NQVgQzgFCB1oFLjtDbWRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Cmd.ProtoCommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Cmd.ESkillSlotType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SkillInfo), global::Cmd.SkillInfo.Parser, new[]{ "Id", "Normalattack", "Replaceid", "Skilllevel", "Position", "Islocked" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.FighterInfo), global::Cmd.FighterInfo.Parser, new[]{ "Profession", "Cfgid", "Level", "Exp", "Lock", "Star", "Skillpoint", "Attrs", "Skills", "Abandonstarlevel", "Totalexp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.PartnerListCmd), global::Cmd.PartnerListCmd.Parser, new[]{ "Fighters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.AddFighterCmd), global::Cmd.AddFighterCmd.Parser, new[]{ "Fighter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.DelFighterCmd), global::Cmd.DelFighterCmd.Parser, new[]{ "Fighterid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.StarUpgradePartnerCmd), global::Cmd.StarUpgradePartnerCmd.Parser, new[]{ "Fighterid", "Star", "Abandonstarlevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SkillReplacePartnerCmd), global::Cmd.SkillReplacePartnerCmd.Parser, new[]{ "Guid", "Infos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.FighterLevelCmd), global::Cmd.FighterLevelCmd.Parser, new[]{ "Fighterid", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.FighterExpCmd), global::Cmd.FighterExpCmd.Parser, new[]{ "Fighterid", "Exp", "Totalexp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.FighterAttrCmd), global::Cmd.FighterAttrCmd.Parser, new[]{ "Fighterid", "Attrs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.FighterSkillCmd), global::Cmd.FighterSkillCmd.Parser, new[]{ "Fighterid", "Skills", "Dels", "Guid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.FighterSkillLevelUpCmd), global::Cmd.FighterSkillLevelUpCmd.Parser, new[]{ "Fighterid", "Skillid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.FighterSkillPositionSetCmd), global::Cmd.FighterSkillPositionSetCmd.Parser, new[]{ "Fighterid", "Skills" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.FighterSkillPointSyncInfoCmd), global::Cmd.FighterSkillPointSyncInfoCmd.Parser, new[]{ "Fighterid", "Skillpoint" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ESkillSlotType {
    [pbr::OriginalName("ESKILLSLOTTYPE_MIN")] Min = 0,
    /// <summary>
    /// 普攻位置
    /// </summary>
    [pbr::OriginalName("ESKILLSLOTTYPE_NORMALATTACK")] Normalattack = 1,
    /// <summary>
    /// 技能1位置
    /// </summary>
    [pbr::OriginalName("ESKILLSLOTTYPE_SKILL1")] Skill1 = 2,
    /// <summary>
    /// 技能2位置
    /// </summary>
    [pbr::OriginalName("ESKILLSLOTTYPE_SKILL2")] Skill2 = 3,
    /// <summary>
    /// 技能3位置
    /// </summary>
    [pbr::OriginalName("ESKILLSLOTTYPE_SKILL3")] Skill3 = 4,
    /// <summary>
    /// 大招技能位置
    /// </summary>
    [pbr::OriginalName("ESKILLSLOTTYPE_SKILLZXC")] Skillzxc = 5,
    /// <summary>
    /// 闪避技能位置
    /// </summary>
    [pbr::OriginalName("ESKILLSLOTTYPE_DODGE")] Dodge = 6,
    /// <summary>
    /// 黑化槽位
    /// </summary>
    [pbr::OriginalName("ESKILLSLOTTYPE_BLACKSAN")] Blacksan = 101,
    /// <summary>
    /// 交互技能槽位
    /// </summary>
    [pbr::OriginalName("ESKILLSLOTTYPE_INTER1")] Inter1 = 201,
    /// <summary>
    /// 交互技能位置2
    /// </summary>
    [pbr::OriginalName("ESKILLSLOTTYPE_INTER2")] Inter2 = 202,
    /// <summary>
    /// 交互技能位置3
    /// </summary>
    [pbr::OriginalName("ESKILLSLOTTYPE_INTER3")] Inter3 = 203,
    /// <summary>
    /// 交互技能位置4
    /// </summary>
    [pbr::OriginalName("ESKILLSLOTTYPE_INTER4")] Inter4 = 204,
    /// <summary>
    /// 交互技能位置5
    /// </summary>
    [pbr::OriginalName("ESKILLSLOTTYPE_INTER5")] Inter5 = 205,
    [pbr::OriginalName("ESKILLSLOTTYPE_MAX")] Max = 206,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  技能信息
  /// </summary>
  public sealed partial class SkillInfo : pb::IMessage<SkillInfo> {
    private static readonly pb::MessageParser<SkillInfo> _parser = new pb::MessageParser<SkillInfo>(() => new SkillInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ScenePartnerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillInfo(SkillInfo other) : this() {
      id_ = other.id_;
      normalattack_ = other.normalattack_;
      replaceid_ = other.replaceid_;
      skilllevel_ = other.skilllevel_;
      position_ = other.position_;
      islocked_ = other.islocked_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillInfo Clone() {
      return new SkillInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///  当前技能id,表Skill.xlsx列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "normalattack" field.</summary>
    public const int NormalattackFieldNumber = 2;
    private bool normalattack_;
    /// <summary>
    ///  是否为普攻
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Normalattack {
      get { return normalattack_; }
      set {
        normalattack_ = value;
      }
    }

    /// <summary>Field number for the "replaceid" field.</summary>
    public const int ReplaceidFieldNumber = 3;
    private uint replaceid_;
    /// <summary>
    ///  替换技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Replaceid {
      get { return replaceid_; }
      set {
        replaceid_ = value;
      }
    }

    /// <summary>Field number for the "skilllevel" field.</summary>
    public const int SkilllevelFieldNumber = 4;
    private uint skilllevel_;
    /// <summary>
    ///  技能等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skilllevel {
      get { return skilllevel_; }
      set {
        skilllevel_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 5;
    private uint position_;
    /// <summary>
    ///  技能槽位（0表示未装备） ESkillSlotType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "islocked" field.</summary>
    public const int IslockedFieldNumber = 6;
    private bool islocked_;
    /// <summary>
    ///  是否锁定 (譬如大招初始就会在技能槽位上，但有可能未开放解锁)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Islocked {
      get { return islocked_; }
      set {
        islocked_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Normalattack != other.Normalattack) return false;
      if (Replaceid != other.Replaceid) return false;
      if (Skilllevel != other.Skilllevel) return false;
      if (Position != other.Position) return false;
      if (Islocked != other.Islocked) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Normalattack != false) hash ^= Normalattack.GetHashCode();
      if (Replaceid != 0) hash ^= Replaceid.GetHashCode();
      if (Skilllevel != 0) hash ^= Skilllevel.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      if (Islocked != false) hash ^= Islocked.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Normalattack != false) {
        output.WriteRawTag(16);
        output.WriteBool(Normalattack);
      }
      if (Replaceid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Replaceid);
      }
      if (Skilllevel != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Skilllevel);
      }
      if (Position != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Position);
      }
      if (Islocked != false) {
        output.WriteRawTag(48);
        output.WriteBool(Islocked);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Normalattack != false) {
        size += 1 + 1;
      }
      if (Replaceid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Replaceid);
      }
      if (Skilllevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skilllevel);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      if (Islocked != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Normalattack != false) {
        Normalattack = other.Normalattack;
      }
      if (other.Replaceid != 0) {
        Replaceid = other.Replaceid;
      }
      if (other.Skilllevel != 0) {
        Skilllevel = other.Skilllevel;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
      if (other.Islocked != false) {
        Islocked = other.Islocked;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Normalattack = input.ReadBool();
            break;
          }
          case 24: {
            Replaceid = input.ReadUInt32();
            break;
          }
          case 32: {
            Skilllevel = input.ReadUInt32();
            break;
          }
          case 40: {
            Position = input.ReadUInt32();
            break;
          }
          case 48: {
            Islocked = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  伙伴信息,S->C
  /// </summary>
  public sealed partial class FighterInfo : pb::IMessage<FighterInfo> {
    private static readonly pb::MessageParser<FighterInfo> _parser = new pb::MessageParser<FighterInfo>(() => new FighterInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FighterInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ScenePartnerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FighterInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FighterInfo(FighterInfo other) : this() {
      profession_ = other.profession_;
      cfgid_ = other.cfgid_;
      level_ = other.level_;
      exp_ = other.exp_;
      lock_ = other.lock_;
      star_ = other.star_;
      skillpoint_ = other.skillpoint_;
      attrs_ = other.attrs_.Clone();
      skills_ = other.skills_.Clone();
      abandonstarlevel_ = other.abandonstarlevel_;
      totalexp_ = other.totalexp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FighterInfo Clone() {
      return new FighterInfo(this);
    }

    /// <summary>Field number for the "profession" field.</summary>
    public const int ProfessionFieldNumber = 1;
    private uint profession_;
    /// <summary>
    ///  unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Profession {
      get { return profession_; }
      set {
        profession_ = value;
      }
    }

    /// <summary>Field number for the "cfgid" field.</summary>
    public const int CfgidFieldNumber = 2;
    private uint cfgid_;
    /// <summary>
    ///  配置表id,表Partner.xlsx列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cfgid {
      get { return cfgid_; }
      set {
        cfgid_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private uint level_;
    /// <summary>
    ///  等级,表UserLevel列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private ulong exp_;
    /// <summary>
    ///  经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "lock" field.</summary>
    public const int LockFieldNumber = 5;
    private bool lock_;
    /// <summary>
    ///  是否已解锁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Lock {
      get { return lock_; }
      set {
        lock_ = value;
      }
    }

    /// <summary>Field number for the "star" field.</summary>
    public const int StarFieldNumber = 6;
    private uint star_;
    /// <summary>
    ///  星级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    /// <summary>Field number for the "skillpoint" field.</summary>
    public const int SkillpointFieldNumber = 12;
    private uint skillpoint_;
    /// <summary>
    ///  技能点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillpoint {
      get { return skillpoint_; }
      set {
        skillpoint_ = value;
      }
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Cmd.UserAttr> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(58, global::Cmd.UserAttr.Parser);
    private readonly pbc::RepeatedField<global::Cmd.UserAttr> attrs_ = new pbc::RepeatedField<global::Cmd.UserAttr>();
    /// <summary>
    ///  属性数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.UserAttr> Attrs {
      get { return attrs_; }
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Cmd.SkillInfo> _repeated_skills_codec
        = pb::FieldCodec.ForMessage(66, global::Cmd.SkillInfo.Parser);
    private readonly pbc::RepeatedField<global::Cmd.SkillInfo> skills_ = new pbc::RepeatedField<global::Cmd.SkillInfo>();
    /// <summary>
    ///  技能信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.SkillInfo> Skills {
      get { return skills_; }
    }

    /// <summary>Field number for the "Abandonstarlevel" field.</summary>
    public const int AbandonstarlevelFieldNumber = 9;
    private uint abandonstarlevel_;
    /// <summary>
    ///  星阶
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Abandonstarlevel {
      get { return abandonstarlevel_; }
      set {
        abandonstarlevel_ = value;
      }
    }

    /// <summary>Field number for the "totalexp" field.</summary>
    public const int TotalexpFieldNumber = 10;
    private ulong totalexp_;
    /// <summary>
    ///  总经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Totalexp {
      get { return totalexp_; }
      set {
        totalexp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FighterInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FighterInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Profession != other.Profession) return false;
      if (Cfgid != other.Cfgid) return false;
      if (Level != other.Level) return false;
      if (Exp != other.Exp) return false;
      if (Lock != other.Lock) return false;
      if (Star != other.Star) return false;
      if (Skillpoint != other.Skillpoint) return false;
      if(!attrs_.Equals(other.attrs_)) return false;
      if(!skills_.Equals(other.skills_)) return false;
      if (Abandonstarlevel != other.Abandonstarlevel) return false;
      if (Totalexp != other.Totalexp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Profession != 0) hash ^= Profession.GetHashCode();
      if (Cfgid != 0) hash ^= Cfgid.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exp != 0UL) hash ^= Exp.GetHashCode();
      if (Lock != false) hash ^= Lock.GetHashCode();
      if (Star != 0) hash ^= Star.GetHashCode();
      if (Skillpoint != 0) hash ^= Skillpoint.GetHashCode();
      hash ^= attrs_.GetHashCode();
      hash ^= skills_.GetHashCode();
      if (Abandonstarlevel != 0) hash ^= Abandonstarlevel.GetHashCode();
      if (Totalexp != 0UL) hash ^= Totalexp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Profession != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Profession);
      }
      if (Cfgid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Cfgid);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Level);
      }
      if (Exp != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Exp);
      }
      if (Lock != false) {
        output.WriteRawTag(40);
        output.WriteBool(Lock);
      }
      if (Star != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Star);
      }
      attrs_.WriteTo(output, _repeated_attrs_codec);
      skills_.WriteTo(output, _repeated_skills_codec);
      if (Abandonstarlevel != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Abandonstarlevel);
      }
      if (Totalexp != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(Totalexp);
      }
      if (Skillpoint != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Skillpoint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Profession != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Profession);
      }
      if (Cfgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cfgid);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Exp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Exp);
      }
      if (Lock != false) {
        size += 1 + 1;
      }
      if (Star != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Star);
      }
      if (Skillpoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillpoint);
      }
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      size += skills_.CalculateSize(_repeated_skills_codec);
      if (Abandonstarlevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Abandonstarlevel);
      }
      if (Totalexp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Totalexp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FighterInfo other) {
      if (other == null) {
        return;
      }
      if (other.Profession != 0) {
        Profession = other.Profession;
      }
      if (other.Cfgid != 0) {
        Cfgid = other.Cfgid;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exp != 0UL) {
        Exp = other.Exp;
      }
      if (other.Lock != false) {
        Lock = other.Lock;
      }
      if (other.Star != 0) {
        Star = other.Star;
      }
      if (other.Skillpoint != 0) {
        Skillpoint = other.Skillpoint;
      }
      attrs_.Add(other.attrs_);
      skills_.Add(other.skills_);
      if (other.Abandonstarlevel != 0) {
        Abandonstarlevel = other.Abandonstarlevel;
      }
      if (other.Totalexp != 0UL) {
        Totalexp = other.Totalexp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Profession = input.ReadUInt32();
            break;
          }
          case 16: {
            Cfgid = input.ReadUInt32();
            break;
          }
          case 24: {
            Level = input.ReadUInt32();
            break;
          }
          case 32: {
            Exp = input.ReadUInt64();
            break;
          }
          case 40: {
            Lock = input.ReadBool();
            break;
          }
          case 48: {
            Star = input.ReadUInt32();
            break;
          }
          case 58: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
          case 66: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
          case 72: {
            Abandonstarlevel = input.ReadUInt32();
            break;
          }
          case 80: {
            Totalexp = input.ReadUInt64();
            break;
          }
          case 96: {
            Skillpoint = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  伙伴列表,S->C
  /// </summary>
  public sealed partial class PartnerListCmd : pb::IMessage<PartnerListCmd> {
    private static readonly pb::MessageParser<PartnerListCmd> _parser = new pb::MessageParser<PartnerListCmd>(() => new PartnerListCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartnerListCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ScenePartnerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartnerListCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartnerListCmd(PartnerListCmd other) : this() {
      fighters_ = other.fighters_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartnerListCmd Clone() {
      return new PartnerListCmd(this);
    }

    /// <summary>Field number for the "fighters" field.</summary>
    public const int FightersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.FighterInfo> _repeated_fighters_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.FighterInfo.Parser);
    private readonly pbc::RepeatedField<global::Cmd.FighterInfo> fighters_ = new pbc::RepeatedField<global::Cmd.FighterInfo>();
    /// <summary>
    ///  伙伴信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.FighterInfo> Fighters {
      get { return fighters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PartnerListCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PartnerListCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fighters_.Equals(other.fighters_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fighters_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fighters_.WriteTo(output, _repeated_fighters_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fighters_.CalculateSize(_repeated_fighters_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PartnerListCmd other) {
      if (other == null) {
        return;
      }
      fighters_.Add(other.fighters_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            fighters_.AddEntriesFrom(input, _repeated_fighters_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  添加伙伴,S->C
  /// </summary>
  public sealed partial class AddFighterCmd : pb::IMessage<AddFighterCmd> {
    private static readonly pb::MessageParser<AddFighterCmd> _parser = new pb::MessageParser<AddFighterCmd>(() => new AddFighterCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddFighterCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ScenePartnerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddFighterCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddFighterCmd(AddFighterCmd other) : this() {
      Fighter = other.fighter_ != null ? other.Fighter.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddFighterCmd Clone() {
      return new AddFighterCmd(this);
    }

    /// <summary>Field number for the "fighter" field.</summary>
    public const int FighterFieldNumber = 3;
    private global::Cmd.FighterInfo fighter_;
    /// <summary>
    ///  伙伴信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.FighterInfo Fighter {
      get { return fighter_; }
      set {
        fighter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddFighterCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddFighterCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Fighter, other.Fighter)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fighter_ != null) hash ^= Fighter.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (fighter_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Fighter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fighter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fighter);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddFighterCmd other) {
      if (other == null) {
        return;
      }
      if (other.fighter_ != null) {
        if (fighter_ == null) {
          fighter_ = new global::Cmd.FighterInfo();
        }
        Fighter.MergeFrom(other.Fighter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            if (fighter_ == null) {
              fighter_ = new global::Cmd.FighterInfo();
            }
            input.ReadMessage(fighter_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DelFighterCmd : pb::IMessage<DelFighterCmd> {
    private static readonly pb::MessageParser<DelFighterCmd> _parser = new pb::MessageParser<DelFighterCmd>(() => new DelFighterCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DelFighterCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ScenePartnerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelFighterCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelFighterCmd(DelFighterCmd other) : this() {
      fighterid_ = other.fighterid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelFighterCmd Clone() {
      return new DelFighterCmd(this);
    }

    /// <summary>Field number for the "fighterid" field.</summary>
    public const int FighteridFieldNumber = 1;
    private uint fighterid_;
    /// <summary>
    ///  fighterid from Table_Partner.txt
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fighterid {
      get { return fighterid_; }
      set {
        fighterid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DelFighterCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DelFighterCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fighterid != other.Fighterid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fighterid != 0) hash ^= Fighterid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fighterid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Fighterid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fighterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fighterid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DelFighterCmd other) {
      if (other == null) {
        return;
      }
      if (other.Fighterid != 0) {
        Fighterid = other.Fighterid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Fighterid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  伙伴升星
  /// </summary>
  public sealed partial class StarUpgradePartnerCmd : pb::IMessage<StarUpgradePartnerCmd> {
    private static readonly pb::MessageParser<StarUpgradePartnerCmd> _parser = new pb::MessageParser<StarUpgradePartnerCmd>(() => new StarUpgradePartnerCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StarUpgradePartnerCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ScenePartnerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StarUpgradePartnerCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StarUpgradePartnerCmd(StarUpgradePartnerCmd other) : this() {
      fighterid_ = other.fighterid_;
      star_ = other.star_;
      abandonstarlevel_ = other.abandonstarlevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StarUpgradePartnerCmd Clone() {
      return new StarUpgradePartnerCmd(this);
    }

    /// <summary>Field number for the "fighterid" field.</summary>
    public const int FighteridFieldNumber = 1;
    private uint fighterid_;
    /// <summary>
    ///  伙伴id,表Partner.xlsx列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fighterid {
      get { return fighterid_; }
      set {
        fighterid_ = value;
      }
    }

    /// <summary>Field number for the "star" field.</summary>
    public const int StarFieldNumber = 2;
    private uint star_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    /// <summary>Field number for the "Abandonstarlevel" field.</summary>
    public const int AbandonstarlevelFieldNumber = 3;
    private uint abandonstarlevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Abandonstarlevel {
      get { return abandonstarlevel_; }
      set {
        abandonstarlevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StarUpgradePartnerCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StarUpgradePartnerCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fighterid != other.Fighterid) return false;
      if (Star != other.Star) return false;
      if (Abandonstarlevel != other.Abandonstarlevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fighterid != 0) hash ^= Fighterid.GetHashCode();
      if (Star != 0) hash ^= Star.GetHashCode();
      if (Abandonstarlevel != 0) hash ^= Abandonstarlevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fighterid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Fighterid);
      }
      if (Star != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Star);
      }
      if (Abandonstarlevel != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Abandonstarlevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fighterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fighterid);
      }
      if (Star != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Star);
      }
      if (Abandonstarlevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Abandonstarlevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StarUpgradePartnerCmd other) {
      if (other == null) {
        return;
      }
      if (other.Fighterid != 0) {
        Fighterid = other.Fighterid;
      }
      if (other.Star != 0) {
        Star = other.Star;
      }
      if (other.Abandonstarlevel != 0) {
        Abandonstarlevel = other.Abandonstarlevel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Fighterid = input.ReadUInt32();
            break;
          }
          case 16: {
            Star = input.ReadUInt32();
            break;
          }
          case 24: {
            Abandonstarlevel = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  替换伙伴技能
  /// </summary>
  public sealed partial class SkillReplacePartnerCmd : pb::IMessage<SkillReplacePartnerCmd> {
    private static readonly pb::MessageParser<SkillReplacePartnerCmd> _parser = new pb::MessageParser<SkillReplacePartnerCmd>(() => new SkillReplacePartnerCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillReplacePartnerCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ScenePartnerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillReplacePartnerCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillReplacePartnerCmd(SkillReplacePartnerCmd other) : this() {
      guid_ = other.guid_;
      infos_ = other.infos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillReplacePartnerCmd Clone() {
      return new SkillReplacePartnerCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 3;
    private ulong guid_;
    /// <summary>
    ///  伙伴唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Cmd.SkillInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(34, global::Cmd.SkillInfo.Parser);
    private readonly pbc::RepeatedField<global::Cmd.SkillInfo> infos_ = new pbc::RepeatedField<global::Cmd.SkillInfo>();
    /// <summary>
    ///  技能信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.SkillInfo> Infos {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillReplacePartnerCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillReplacePartnerCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if(!infos_.Equals(other.infos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      hash ^= infos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Guid);
      }
      infos_.WriteTo(output, _repeated_infos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      size += infos_.CalculateSize(_repeated_infos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillReplacePartnerCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      infos_.Add(other.infos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Guid = input.ReadUInt64();
            break;
          }
          case 34: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  伙伴升级
  /// </summary>
  public sealed partial class FighterLevelCmd : pb::IMessage<FighterLevelCmd> {
    private static readonly pb::MessageParser<FighterLevelCmd> _parser = new pb::MessageParser<FighterLevelCmd>(() => new FighterLevelCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FighterLevelCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ScenePartnerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FighterLevelCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FighterLevelCmd(FighterLevelCmd other) : this() {
      fighterid_ = other.fighterid_;
      level_ = other.level_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FighterLevelCmd Clone() {
      return new FighterLevelCmd(this);
    }

    /// <summary>Field number for the "fighterid" field.</summary>
    public const int FighteridFieldNumber = 1;
    private uint fighterid_;
    /// <summary>
    ///  伙伴id,表Partner.xlsx列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fighterid {
      get { return fighterid_; }
      set {
        fighterid_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private uint level_;
    /// <summary>
    ///  等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FighterLevelCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FighterLevelCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fighterid != other.Fighterid) return false;
      if (Level != other.Level) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fighterid != 0) hash ^= Fighterid.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fighterid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Fighterid);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fighterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fighterid);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FighterLevelCmd other) {
      if (other == null) {
        return;
      }
      if (other.Fighterid != 0) {
        Fighterid = other.Fighterid;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Fighterid = input.ReadUInt32();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FighterExpCmd : pb::IMessage<FighterExpCmd> {
    private static readonly pb::MessageParser<FighterExpCmd> _parser = new pb::MessageParser<FighterExpCmd>(() => new FighterExpCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FighterExpCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ScenePartnerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FighterExpCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FighterExpCmd(FighterExpCmd other) : this() {
      fighterid_ = other.fighterid_;
      exp_ = other.exp_;
      totalexp_ = other.totalexp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FighterExpCmd Clone() {
      return new FighterExpCmd(this);
    }

    /// <summary>Field number for the "fighterid" field.</summary>
    public const int FighteridFieldNumber = 1;
    private uint fighterid_;
    /// <summary>
    ///  伙伴id,表Partner.xlsx列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fighterid {
      get { return fighterid_; }
      set {
        fighterid_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private ulong exp_;
    /// <summary>
    ///  经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "totalexp" field.</summary>
    public const int TotalexpFieldNumber = 3;
    private ulong totalexp_;
    /// <summary>
    ///  总经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Totalexp {
      get { return totalexp_; }
      set {
        totalexp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FighterExpCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FighterExpCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fighterid != other.Fighterid) return false;
      if (Exp != other.Exp) return false;
      if (Totalexp != other.Totalexp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fighterid != 0) hash ^= Fighterid.GetHashCode();
      if (Exp != 0UL) hash ^= Exp.GetHashCode();
      if (Totalexp != 0UL) hash ^= Totalexp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fighterid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Fighterid);
      }
      if (Exp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Exp);
      }
      if (Totalexp != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Totalexp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fighterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fighterid);
      }
      if (Exp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Exp);
      }
      if (Totalexp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Totalexp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FighterExpCmd other) {
      if (other == null) {
        return;
      }
      if (other.Fighterid != 0) {
        Fighterid = other.Fighterid;
      }
      if (other.Exp != 0UL) {
        Exp = other.Exp;
      }
      if (other.Totalexp != 0UL) {
        Totalexp = other.Totalexp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Fighterid = input.ReadUInt32();
            break;
          }
          case 16: {
            Exp = input.ReadUInt64();
            break;
          }
          case 24: {
            Totalexp = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FighterAttrCmd : pb::IMessage<FighterAttrCmd> {
    private static readonly pb::MessageParser<FighterAttrCmd> _parser = new pb::MessageParser<FighterAttrCmd>(() => new FighterAttrCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FighterAttrCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ScenePartnerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FighterAttrCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FighterAttrCmd(FighterAttrCmd other) : this() {
      fighterid_ = other.fighterid_;
      attrs_ = other.attrs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FighterAttrCmd Clone() {
      return new FighterAttrCmd(this);
    }

    /// <summary>Field number for the "fighterid" field.</summary>
    public const int FighteridFieldNumber = 1;
    private uint fighterid_;
    /// <summary>
    ///  伙伴id,表Partner.xlsx列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fighterid {
      get { return fighterid_; }
      set {
        fighterid_ = value;
      }
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cmd.UserAttr> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(18, global::Cmd.UserAttr.Parser);
    private readonly pbc::RepeatedField<global::Cmd.UserAttr> attrs_ = new pbc::RepeatedField<global::Cmd.UserAttr>();
    /// <summary>
    ///  属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.UserAttr> Attrs {
      get { return attrs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FighterAttrCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FighterAttrCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fighterid != other.Fighterid) return false;
      if(!attrs_.Equals(other.attrs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fighterid != 0) hash ^= Fighterid.GetHashCode();
      hash ^= attrs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fighterid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Fighterid);
      }
      attrs_.WriteTo(output, _repeated_attrs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fighterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fighterid);
      }
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FighterAttrCmd other) {
      if (other == null) {
        return;
      }
      if (other.Fighterid != 0) {
        Fighterid = other.Fighterid;
      }
      attrs_.Add(other.attrs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Fighterid = input.ReadUInt32();
            break;
          }
          case 18: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  技能升级回复 S -> C
  ///  技能替换 S -> C
  ///  技能增删 S -> C
  /// </summary>
  public sealed partial class FighterSkillCmd : pb::IMessage<FighterSkillCmd> {
    private static readonly pb::MessageParser<FighterSkillCmd> _parser = new pb::MessageParser<FighterSkillCmd>(() => new FighterSkillCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FighterSkillCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ScenePartnerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FighterSkillCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FighterSkillCmd(FighterSkillCmd other) : this() {
      fighterid_ = other.fighterid_;
      skills_ = other.skills_.Clone();
      dels_ = other.dels_.Clone();
      guid_ = other.guid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FighterSkillCmd Clone() {
      return new FighterSkillCmd(this);
    }

    /// <summary>Field number for the "fighterid" field.</summary>
    public const int FighteridFieldNumber = 1;
    private uint fighterid_;
    /// <summary>
    ///  伙伴id,表Partner.xlsx列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fighterid {
      get { return fighterid_; }
      set {
        fighterid_ = value;
      }
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cmd.SkillInfo> _repeated_skills_codec
        = pb::FieldCodec.ForMessage(18, global::Cmd.SkillInfo.Parser);
    private readonly pbc::RepeatedField<global::Cmd.SkillInfo> skills_ = new pbc::RepeatedField<global::Cmd.SkillInfo>();
    /// <summary>
    /// 技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.SkillInfo> Skills {
      get { return skills_; }
    }

    /// <summary>Field number for the "dels" field.</summary>
    public const int DelsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_dels_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> dels_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 去除的技能,表Skill.xlsx列id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Dels {
      get { return dels_; }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 4;
    private ulong guid_;
    /// <summary>
    /// 出战的伙伴场景对象ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FighterSkillCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FighterSkillCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fighterid != other.Fighterid) return false;
      if(!skills_.Equals(other.skills_)) return false;
      if(!dels_.Equals(other.dels_)) return false;
      if (Guid != other.Guid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fighterid != 0) hash ^= Fighterid.GetHashCode();
      hash ^= skills_.GetHashCode();
      hash ^= dels_.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fighterid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Fighterid);
      }
      skills_.WriteTo(output, _repeated_skills_codec);
      dels_.WriteTo(output, _repeated_dels_codec);
      if (Guid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Guid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fighterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fighterid);
      }
      size += skills_.CalculateSize(_repeated_skills_codec);
      size += dels_.CalculateSize(_repeated_dels_codec);
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FighterSkillCmd other) {
      if (other == null) {
        return;
      }
      if (other.Fighterid != 0) {
        Fighterid = other.Fighterid;
      }
      skills_.Add(other.skills_);
      dels_.Add(other.dels_);
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Fighterid = input.ReadUInt32();
            break;
          }
          case 18: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
          case 26:
          case 24: {
            dels_.AddEntriesFrom(input, _repeated_dels_codec);
            break;
          }
          case 32: {
            Guid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 技能升级 C -> S 
  /// </summary>
  public sealed partial class FighterSkillLevelUpCmd : pb::IMessage<FighterSkillLevelUpCmd> {
    private static readonly pb::MessageParser<FighterSkillLevelUpCmd> _parser = new pb::MessageParser<FighterSkillLevelUpCmd>(() => new FighterSkillLevelUpCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FighterSkillLevelUpCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ScenePartnerReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FighterSkillLevelUpCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FighterSkillLevelUpCmd(FighterSkillLevelUpCmd other) : this() {
      fighterid_ = other.fighterid_;
      skillid_ = other.skillid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FighterSkillLevelUpCmd Clone() {
      return new FighterSkillLevelUpCmd(this);
    }

    /// <summary>Field number for the "fighterid" field.</summary>
    public const int FighteridFieldNumber = 1;
    private uint fighterid_;
    /// <summary>
    ///  伙伴id,表Partner.xlsx列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fighterid {
      get { return fighterid_; }
      set {
        fighterid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 2;
    private uint skillid_;
    /// <summary>
    ///  技能id，表Skill.xlsx列id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FighterSkillLevelUpCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FighterSkillLevelUpCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fighterid != other.Fighterid) return false;
      if (Skillid != other.Skillid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fighterid != 0) hash ^= Fighterid.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fighterid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Fighterid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Skillid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fighterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fighterid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FighterSkillLevelUpCmd other) {
      if (other == null) {
        return;
      }
      if (other.Fighterid != 0) {
        Fighterid = other.Fighterid;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Fighterid = input.ReadUInt32();
            break;
          }
          case 16: {
            Skillid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FighterSkillPositionSetCmd : pb::IMessage<FighterSkillPositionSetCmd> {
    private static readonly pb::MessageParser<FighterSkillPositionSetCmd> _parser = new pb::MessageParser<FighterSkillPositionSetCmd>(() => new FighterSkillPositionSetCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FighterSkillPositionSetCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ScenePartnerReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FighterSkillPositionSetCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FighterSkillPositionSetCmd(FighterSkillPositionSetCmd other) : this() {
      fighterid_ = other.fighterid_;
      skills_ = other.skills_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FighterSkillPositionSetCmd Clone() {
      return new FighterSkillPositionSetCmd(this);
    }

    /// <summary>Field number for the "fighterid" field.</summary>
    public const int FighteridFieldNumber = 1;
    private uint fighterid_;
    /// <summary>
    ///  伙伴id,表Partner.xlsx列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fighterid {
      get { return fighterid_; }
      set {
        fighterid_ = value;
      }
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cmd.SkillInfo> _repeated_skills_codec
        = pb::FieldCodec.ForMessage(18, global::Cmd.SkillInfo.Parser);
    private readonly pbc::RepeatedField<global::Cmd.SkillInfo> skills_ = new pbc::RepeatedField<global::Cmd.SkillInfo>();
    /// <summary>
    /// 技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.SkillInfo> Skills {
      get { return skills_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FighterSkillPositionSetCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FighterSkillPositionSetCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fighterid != other.Fighterid) return false;
      if(!skills_.Equals(other.skills_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fighterid != 0) hash ^= Fighterid.GetHashCode();
      hash ^= skills_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fighterid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Fighterid);
      }
      skills_.WriteTo(output, _repeated_skills_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fighterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fighterid);
      }
      size += skills_.CalculateSize(_repeated_skills_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FighterSkillPositionSetCmd other) {
      if (other == null) {
        return;
      }
      if (other.Fighterid != 0) {
        Fighterid = other.Fighterid;
      }
      skills_.Add(other.skills_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Fighterid = input.ReadUInt32();
            break;
          }
          case 18: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 同步技能点 S -> C
  /// </summary>
  public sealed partial class FighterSkillPointSyncInfoCmd : pb::IMessage<FighterSkillPointSyncInfoCmd> {
    private static readonly pb::MessageParser<FighterSkillPointSyncInfoCmd> _parser = new pb::MessageParser<FighterSkillPointSyncInfoCmd>(() => new FighterSkillPointSyncInfoCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FighterSkillPointSyncInfoCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ScenePartnerReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FighterSkillPointSyncInfoCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FighterSkillPointSyncInfoCmd(FighterSkillPointSyncInfoCmd other) : this() {
      fighterid_ = other.fighterid_;
      skillpoint_ = other.skillpoint_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FighterSkillPointSyncInfoCmd Clone() {
      return new FighterSkillPointSyncInfoCmd(this);
    }

    /// <summary>Field number for the "fighterid" field.</summary>
    public const int FighteridFieldNumber = 1;
    private uint fighterid_;
    /// <summary>
    ///  伙伴id，表Partner.xlsx列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fighterid {
      get { return fighterid_; }
      set {
        fighterid_ = value;
      }
    }

    /// <summary>Field number for the "skillpoint" field.</summary>
    public const int SkillpointFieldNumber = 2;
    private uint skillpoint_;
    /// <summary>
    ///  剩余的技能点全量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillpoint {
      get { return skillpoint_; }
      set {
        skillpoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FighterSkillPointSyncInfoCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FighterSkillPointSyncInfoCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fighterid != other.Fighterid) return false;
      if (Skillpoint != other.Skillpoint) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fighterid != 0) hash ^= Fighterid.GetHashCode();
      if (Skillpoint != 0) hash ^= Skillpoint.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fighterid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Fighterid);
      }
      if (Skillpoint != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Skillpoint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fighterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fighterid);
      }
      if (Skillpoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillpoint);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FighterSkillPointSyncInfoCmd other) {
      if (other == null) {
        return;
      }
      if (other.Fighterid != 0) {
        Fighterid = other.Fighterid;
      }
      if (other.Skillpoint != 0) {
        Skillpoint = other.Skillpoint;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Fighterid = input.ReadUInt32();
            break;
          }
          case 16: {
            Skillpoint = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
