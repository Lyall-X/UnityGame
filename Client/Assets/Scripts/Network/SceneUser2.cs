// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneUser2.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Cmd {

  /// <summary>Holder for reflection information generated from SceneUser2.proto</summary>
  public static partial class SceneUser2Reflection {

    #region Descriptor
    /// <summary>File descriptor for SceneUser2.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SceneUser2Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBTY2VuZVVzZXIyLnByb3RvEgNDbWQaD1NjZW5lVXNlci5wcm90bxoRUHJv",
            "dG9Db21tb24ucHJvdG8aCVZhci5wcm90byIZCghNc2dQYXJhbRINCgVwYXJh",
            "bRgBIAEoCSIjCgZTeXNNc2cSCgoCaWQYAyABKA0SDQoFcGFyYW0YBSABKAki",
            "IQoPQ0V4aXRQb3NVc2VyQ21kEg4KBmV4aXRpZBgDIAEoDSIiChFDV29ybGRK",
            "dW1wVXNlckNtZBINCgVtYXBpZBgDIAEoDSI4ChdDQXNrVW5sb2NrZWRNZW51",
            "TGlzdENtZBIdCgR0eXBlGAMgASgOMg8uQ21kLkVNZW51RXZlbnQiJgoMU1Vz",
            "ZXJEYXRhQ21kEhYKBGRhdGEYAyADKAsyCC5DbWQuVmFyIlUKCUNhdEh1Z0Nt",
            "ZBIiCgRvcGVyGAEgASgOMhQuQ21kLkVDYXRJbnRlcmFjdGlvbhIPCgdjYXRn",
            "dWlkGAIgASgEEhMKC3BhcnRuZXJndWlkGAMgASgEIlwKCFRhbGtJbmZvEgwK",
            "BGd1aWQYAyABKAQSDgoGdGFsa2lkGAQgASgNEhMKC3RhbGttZXNzYWdlGAUg",
            "ASgJEh0KBnBhcmFtcxgGIAMoCzINLkNtZC5Nc2dQYXJhbSKXAgoNRWZmZWN0",
            "VXNlckNtZBIkCgplZmZlY3R0eXBlGAMgASgOMhAuQ21kLkVFZmZlY3RUeXBl",
            "Eg4KBmNoYXJpZBgEIAEoBBIRCgllZmZlY3Rwb3MYBSABKA0SGgoDcG9zGAYg",
            "ASgLMg0uQ21kLlNjZW5lUG9zEg4KBmVmZmVjdBgHIAEoCRIMCgRtc2VjGAgg",
            "ASgNEg0KBXRpbWVzGAkgASgNEg0KBWluZGV4GAogASgNEhwKA29wdBgLIAEo",
            "DjIPLkNtZC5FRWZmZWN0T3B0Eg8KB3Bvc2JpbmQYDCABKAgSDgoGZXBiaW5k",
            "GA0gASgIEg0KBWRlbGF5GA4gASgNEgoKAmlkGA8gASgEEgsKA2RpchgQIAEo",
            "DSJkCg5Tb3VuZEVmZmVjdENtZBIKCgJzZRgDIAEoCRIaCgNwb3MYBCABKAsy",
            "DS5DbWQuU2NlbmVQb3MSDAoEbXNlYxgFIAEoDRINCgV0aW1lcxgGIAEoDRIN",
            "CgVkZWxheRgHIAEoDSI4CgxDaGFuZ2VCZ21DbWQSCwoDYmdtGAMgASgJEgwK",
            "BHBsYXkYBCABKAgSDQoFdGltZXMYBSABKA0iSAoLR2FtZVRpbWVDbWQSHQoD",
            "b3B0GAMgASgOMhAuQ21kLkdhbWVUaW1lT3B0EgsKA3NlYxgEIAEoDRINCgVz",
            "cGVlZBgFIAEoDSJECgtTaGFrZVNjcmVlbhIUCgxtYXhhbXBsaXR1ZGUYAyAB",
            "KA0SDAoEbXNlYxgEIAEoDRIRCglzaGFrZXR5cGUYBSABKA0iPwoMRm9sbG93",
            "ZXJVc2VyEg4KBnVzZXJpZBgDIAEoBBIfCgVlVHlwZRgEIAEoDjIQLkNtZC5F",
            "Rm9sbG93VHlwZSJCCg9CZUZvbGxvd1VzZXJDbWQSDgoGdXNlcmlkGAMgASgE",
            "Eh8KBWVUeXBlGAQgASgOMhAuQ21kLkVGb2xsb3dUeXBlIkwKCFVweXVuVXJs",
            "Eh0KBHR5cGUYASABKA4yDy5DbWQuRUFsYnVtVHlwZRIQCghjaGFyX3VybBgC",
            "IAEoCRIPCgdhY2NfdXJsGAMgASgJIjoKG0Rvd25sb2FkU2NlbmVyeVBob3Rv",
            "VXNlckNtZBIbCgR1cmxzGAMgAygLMg0uQ21kLlVweXVuVXJsIi8KDkJ1ZmZG",
            "b3JldmVyQ21kEh0KBGJ1ZmYYAyADKAsyDy5DbWQuQnVmZmVyRGF0YSKgAQoJ",
            "TXVzaWNJdGVtEg4KBmNoYXJpZBgBIAEoBBISCgpkZW1hbmR0aW1lGAIgASgN",
            "Eg0KBW1hcGlkGAMgASgNEg0KBW5wY2lkGAQgASgNEg8KB211c2ljaWQYBSAB",
            "KA0SEQoJc3RhcnR0aW1lGAYgASgNEg8KB2VuZHRpbWUYByABKA0SDgoGc3Rh",
            "dHVzGAggASgNEgwKBG5hbWUYCSABKAkiKQoXSXRlbUltYWdlVXNlck50ZlVz",
            "ZXJDbWQSDgoGdXNlcmlkGAMgASgEIiEKEUNoYW5nZU5hbWVVc2VyQ21kEgwK",
            "BG5hbWUYAyABKAkiKgoVVXB5dW5BdXRob3JpemF0aW9uQ21kEhEKCWF1dGh2",
            "YWx1ZRgDIAEoCSJACg1Vc2VyUmVuYW1lQ21kEgwKBG5hbWUYAyABKAkSIQoE",
            "Y29kZRgEIAEoDjITLkNtZC5FUmVuYW1lRXJyQ29kZSIuChhDaGFuZ2VVc2Vy",
            "UG9zSW5SYXBhaXJDbWQSEgoKcmVwYWlyZ3VpZBgBIAEoDSKcAQoWU2VuZExv",
            "dHRlcnlQb29sSW5mb0NtZBI2Cghwb29saW5mbxgBIAMoCzIkLkNtZC5TZW5k",
            "TG90dGVyeVBvb2xJbmZvQ21kLlBvb2xJbmZvGkoKCFBvb2xJbmZvEg0KBWlu",
            "ZGV4GAEgASgNEhEKCWJlZ2ludGltZRgCIAEoDRIPCgdlbmR0aW1lGAMgASgN",
            "EgsKA01NRBgEIAEoCSLtAQoRV1hLSlN0YWdlc0luZm9DbWQSLgoEaW5mbxgB",
            "IAMoCzIgLkNtZC5XWEtKU3RhZ2VzSW5mb0NtZC5TdGFnZUluZm8SDQoFdGlt",
            "ZXMYAiABKA0SEQoJdGltZXNUYW1wGAMgASgNEjMKCXF1ZXN0aW5mbxgEIAMo",
            "CzIgLkNtZC5XWEtKU3RhZ2VzSW5mb0NtZC5TdGFnZUluZm8SEAoIYnVmZmxp",
            "c3QYBSADKA0aPwoJU3RhZ2VJbmZvEgoKAmlkGAEgASgNEiYKBXN0YXRlGAIg",
            "ASgOMhcuQ21kLkVXWEtKU3RhZ2VTY2hlZHVsZSIjChBXWEtKQ2hhbGxlbmdl",
            "Q21kEg8KB3F1ZXN0aWQYASABKA0iLAoORWxpdGVSZXBhaXJDbWQSDQoFbnBj",
            "aWQYASABKA0SCwoDcmV0GAIgASgNIjUKClJlZERvdEluZm8SDAoEdHlwZRgB",
            "IAEoDRIKCgJpZBgCIAEoDRINCgVpc2FkZBgDIAEoCCItCglSZWREb3RDbWQS",
            "IAoHcmVkZG90cxgBIAMoCzIPLkNtZC5SZWREb3RJbmZvIjQKEFJlZERvdENv",
            "bmZpcm1DbWQSIAoHcmVkZG90cxgBIAMoCzIPLkNtZC5SZWREb3RJbmZvImAK",
            "EEZhdm9yYWJpbGl0eUluZm8SEQoJcGFydG5lcmlkGAEgASgNEg0KBXZhbHVl",
            "GAIgASgNEhQKDHJld2FyZGJpdG1hcBgDIAEoDBIUCgxsYXN0bWVldHRpbWUY",
            "BCABKA0iSwoPRmF2b3JhYmlsaXR5Q21kEiQKBWluZm9zGAEgAygLMhUuQ21k",
            "LkZhdm9yYWJpbGl0eUluZm8SEgoKdXBkYXRldHlwZRgCIAEoDSIpChVXWEtK",
            "U3dpdGNoTWF0ZXJpYWxDbWQSEAoIbWF0ZXJpYWwYASABKAkiTQoXRHluYW1p",
            "Y01vdmVFZmZlY3RFbmRDbWQSDgoGY2hhcmlkGAEgASgEEg8KB3NraWxsaWQY",
            "AiABKA0SEQoJdGltZV9heGlzGAMgASgNIi8KF1NlbmRSZWxvZ2luU2VydmVy",
            "UmVxQ21kEhQKDHJlY29ubmVjdHJlcRgBIAEoDSqyAgoMRU1lc3NhZ2VUeXBl",
            "EhQKEEVNRVNTQUdFVFlQRV9NSU4QABIWChJFTUVTU0FHRVRZUEVfRlJBTUUQ",
            "ARIYChRFTUVTU0FHRVRZUEVfR0VUSVRFTRACEhQKEEVNRVNTQUdFVFlQRV9U",
            "T1AQBBIXChNFTUVTU0FHRVRZUEVfUkVXQVJEEAgSEwoPRU1FU1NBR0VUWVBF",
            "XzNEEBASGAoURU1FU1NBR0VUWVBFX0NPTkZJUk0QIBIbChdFTUVTU0FHRVRZ",
            "UEVfQUREUEFSVE5FUhA/EhUKEUVNRVNTQUdFVFlQRV9XQVJOEEASFwoSRU1F",
            "U1NBR0VUWVBFX0RFQlVHEIABEhgKE0VNRVNTQUdFVFlQRV9GSU5JU0gQgAIS",
            "FQoQRU1FU1NBR0VUWVBFX01BWBCBAipRCg5FTWVzc2FnZUFjdE9wdBIVChFF",
            "TUVTU0FHRUFDVF9GSVJTVBAAEhMKD0VNRVNTQUdFQUNUX0FERBABEhMKD0VN",
            "RVNTQUdFQUNUX0RFTBACKpoBCg9FQ2F0SW50ZXJhY3Rpb24SFAoQRUNBVElO",
            "VEVSX1BJQ0tVUBAAEhUKEUVDQVRJTlRFUl9QVVRET1dOEAESGQoVRUNBVElO",
            "VEVSX1BVVERPV05fRU5EEAISHgoaRUNBVElOVEVSX1BJQ0tVUF9CUk9BRENB",
            "U1QQAxIfChtFQ0FUSU5URVJfUFVURE9XTl9CUk9BRENBU1QQBCpjCgpFRWZm",
            "ZWN0T3B0EhQKEEVFRkZFQ1RPUFRfRklSU1QQABITCg9FRUZGRUNUT1BUX1BM",
            "QVkQARITCg9FRUZGRUNUT1BUX1NUT1AQAhIVChFFRUZGRUNUT1BUX0RFTEVU",
            "RRADKqwBCgtFRWZmZWN0VHlwZRIVChFFRUZGRUNUVFlQRV9GSVJTVBAAEhYK",
            "EkVFRkZFQ1RUWVBFX05PUk1BTBABEhsKF0VFRkZFQ1RUWVBFX0FDQ0VQVFFV",
            "RVNUEAISGwoXRUVGRkVDVFRZUEVfRklOSVNIUVVFU1QQAxIXChNFRUZGRUNU",
            "VFlQRV9NVlBTSE9XEAQSGwoXRUVGRkVDVFRZUEVfU0NFTkVFRkZFQ1QQBSpV",
            "CgtHYW1lVGltZU9wdBIWChJFR0FNRVRJTUVPUFRfRklSU1QQABIVChFFR0FN",
            "RVRJTUVPUFRfU1lOQxABEhcKE0VHQU1FVElNRU9QVF9BREpVU1QQAipKCgpF",
            "QWxidW1UeXBlEhIKDkVBTEJVTVRZUEVfTUlOEAASFAoQRUFMQlVNVFlQRV9Q",
            "SE9UTxACEhIKDkVBTEJVTVRZUEVfTUFYEAUqdQoKRVF1ZXJ5VHlwZRISCg5F",
            "UVVFUllUWVBFX01JThAAEhIKDkVRVUVSWVRZUEVfQUxMEAESFQoRRVFVRVJZ",
            "VFlQRV9GUklFTkQQAhIUChBFUVVFUllUWVBFX0NMT1NFEAMSEgoORVFVRVJZ",
            "VFlQRV9NQVgQBypLCg5FUmVuYW1lRXJyQ29kZRITCg9FUkVOQU1FX1NVQ0NF",
            "U1MQABIOCgpFUkVOQU1FX0NEEAESFAoQRVJFTkFNRV9DT05GTElDVBACKlkK",
            "ClJlZERvdFR5cGUSEwoPUkVERE9UVFlQRV9OT05FEAASGgoWUkVERE9UVFlQ",
            "RV9ORVdfUEFSVE5FUhABEhoKFlJFRERPVFRZUEVfVU5MT0NLX01FTlUQAkIH",
            "WgUuO0NtZGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Cmd.SceneUserReflection.Descriptor, global::Cmd.ProtoCommonReflection.Descriptor, global::Cmd.VarReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Cmd.EMessageType), typeof(global::Cmd.EMessageActOpt), typeof(global::Cmd.ECatInteraction), typeof(global::Cmd.EEffectOpt), typeof(global::Cmd.EEffectType), typeof(global::Cmd.GameTimeOpt), typeof(global::Cmd.EAlbumType), typeof(global::Cmd.EQueryType), typeof(global::Cmd.ERenameErrCode), typeof(global::Cmd.RedDotType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MsgParam), global::Cmd.MsgParam.Parser, new[]{ "Param" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SysMsg), global::Cmd.SysMsg.Parser, new[]{ "Id", "Param" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.CExitPosUserCmd), global::Cmd.CExitPosUserCmd.Parser, new[]{ "Exitid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.CWorldJumpUserCmd), global::Cmd.CWorldJumpUserCmd.Parser, new[]{ "Mapid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.CAskUnlockedMenuListCmd), global::Cmd.CAskUnlockedMenuListCmd.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SUserDataCmd), global::Cmd.SUserDataCmd.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.CatHugCmd), global::Cmd.CatHugCmd.Parser, new[]{ "Oper", "Catguid", "Partnerguid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.TalkInfo), global::Cmd.TalkInfo.Parser, new[]{ "Guid", "Talkid", "Talkmessage", "Params" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.EffectUserCmd), global::Cmd.EffectUserCmd.Parser, new[]{ "Effecttype", "Charid", "Effectpos", "Pos", "Effect", "Msec", "Times", "Index", "Opt", "Posbind", "Epbind", "Delay", "Id", "Dir" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SoundEffectCmd), global::Cmd.SoundEffectCmd.Parser, new[]{ "Se", "Pos", "Msec", "Times", "Delay" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ChangeBgmCmd), global::Cmd.ChangeBgmCmd.Parser, new[]{ "Bgm", "Play", "Times" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.GameTimeCmd), global::Cmd.GameTimeCmd.Parser, new[]{ "Opt", "Sec", "Speed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ShakeScreen), global::Cmd.ShakeScreen.Parser, new[]{ "Maxamplitude", "Msec", "Shaketype" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.FollowerUser), global::Cmd.FollowerUser.Parser, new[]{ "Userid", "EType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.BeFollowUserCmd), global::Cmd.BeFollowUserCmd.Parser, new[]{ "Userid", "EType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UpyunUrl), global::Cmd.UpyunUrl.Parser, new[]{ "Type", "CharUrl", "AccUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.DownloadSceneryPhotoUserCmd), global::Cmd.DownloadSceneryPhotoUserCmd.Parser, new[]{ "Urls" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.BuffForeverCmd), global::Cmd.BuffForeverCmd.Parser, new[]{ "Buff" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MusicItem), global::Cmd.MusicItem.Parser, new[]{ "Charid", "Demandtime", "Mapid", "Npcid", "Musicid", "Starttime", "Endtime", "Status", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ItemImageUserNtfUserCmd), global::Cmd.ItemImageUserNtfUserCmd.Parser, new[]{ "Userid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ChangeNameUserCmd), global::Cmd.ChangeNameUserCmd.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UpyunAuthorizationCmd), global::Cmd.UpyunAuthorizationCmd.Parser, new[]{ "Authvalue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UserRenameCmd), global::Cmd.UserRenameCmd.Parser, new[]{ "Name", "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ChangeUserPosInRapairCmd), global::Cmd.ChangeUserPosInRapairCmd.Parser, new[]{ "Repairguid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SendLotteryPoolInfoCmd), global::Cmd.SendLotteryPoolInfoCmd.Parser, new[]{ "Poolinfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SendLotteryPoolInfoCmd.Types.PoolInfo), global::Cmd.SendLotteryPoolInfoCmd.Types.PoolInfo.Parser, new[]{ "Index", "Begintime", "Endtime", "MMD" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.WXKJStagesInfoCmd), global::Cmd.WXKJStagesInfoCmd.Parser, new[]{ "Info", "Times", "TimesTamp", "Questinfo", "Bufflist" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.WXKJStagesInfoCmd.Types.StageInfo), global::Cmd.WXKJStagesInfoCmd.Types.StageInfo.Parser, new[]{ "Id", "State" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.WXKJChallengeCmd), global::Cmd.WXKJChallengeCmd.Parser, new[]{ "Questid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.EliteRepairCmd), global::Cmd.EliteRepairCmd.Parser, new[]{ "Npcid", "Ret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.RedDotInfo), global::Cmd.RedDotInfo.Parser, new[]{ "Type", "Id", "Isadd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.RedDotCmd), global::Cmd.RedDotCmd.Parser, new[]{ "Reddots" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.RedDotConfirmCmd), global::Cmd.RedDotConfirmCmd.Parser, new[]{ "Reddots" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.FavorabilityInfo), global::Cmd.FavorabilityInfo.Parser, new[]{ "Partnerid", "Value", "Rewardbitmap", "Lastmeettime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.FavorabilityCmd), global::Cmd.FavorabilityCmd.Parser, new[]{ "Infos", "Updatetype" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.WXKJSwitchMaterialCmd), global::Cmd.WXKJSwitchMaterialCmd.Parser, new[]{ "Material" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.DynamicMoveEffectEndCmd), global::Cmd.DynamicMoveEffectEndCmd.Parser, new[]{ "Charid", "Skillid", "TimeAxis" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SendReloginServerReqCmd), global::Cmd.SendReloginServerReqCmd.Parser, new[]{ "Reconnectreq" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  消息类型
  /// </summary>
  public enum EMessageType {
    [pbr::OriginalName("EMESSAGETYPE_MIN")] Min = 0,
    /// <summary>
    ///  系统提示
    /// </summary>
    [pbr::OriginalName("EMESSAGETYPE_FRAME")] Frame = 1,
    /// <summary>
    ///  获得道具
    /// </summary>
    [pbr::OriginalName("EMESSAGETYPE_GETITEM")] Getitem = 2,
    /// <summary>
    ///  头顶滚屏
    /// </summary>
    [pbr::OriginalName("EMESSAGETYPE_TOP")] Top = 4,
    /// <summary>
    ///  获得奖励
    /// </summary>
    [pbr::OriginalName("EMESSAGETYPE_REWARD")] Reward = 8,
    /// <summary>
    ///  3D展示
    /// </summary>
    [pbr::OriginalName("EMESSAGETYPE_3D")] _3D = 16,
    /// <summary>
    ///  确认框
    /// </summary>
    [pbr::OriginalName("EMESSAGETYPE_CONFIRM")] Confirm = 32,
    /// <summary>
    ///  添加伙伴弹框
    /// </summary>
    [pbr::OriginalName("EMESSAGETYPE_ADDPARTNER")] Addpartner = 63,
    /// <summary>
    ///  警告
    /// </summary>
    [pbr::OriginalName("EMESSAGETYPE_WARN")] Warn = 64,
    /// <summary>
    ///  内网提示
    /// </summary>
    [pbr::OriginalName("EMESSAGETYPE_DEBUG")] Debug = 128,
    /// <summary>
    ///  完成成功提示
    /// </summary>
    [pbr::OriginalName("EMESSAGETYPE_FINISH")] Finish = 256,
    [pbr::OriginalName("EMESSAGETYPE_MAX")] Max = 257,
  }

  /// <summary>
  ///  unused
  /// </summary>
  public enum EMessageActOpt {
    [pbr::OriginalName("EMESSAGEACT_FIRST")] EmessageactFirst = 0,
    [pbr::OriginalName("EMESSAGEACT_ADD")] EmessageactAdd = 1,
    [pbr::OriginalName("EMESSAGEACT_DEL")] EmessageactDel = 2,
  }

  public enum ECatInteraction {
    /// <summary>
    ///  抱起猫 C->S
    /// </summary>
    [pbr::OriginalName("ECATINTER_PICKUP")] EcatinterPickup = 0,
    /// <summary>
    ///  放下猫 C->S
    /// </summary>
    [pbr::OriginalName("ECATINTER_PUTDOWN")] EcatinterPutdown = 1,
    /// <summary>
    ///  放下猫结束 C->S
    /// </summary>
    [pbr::OriginalName("ECATINTER_PUTDOWN_END")] EcatinterPutdownEnd = 2,
    /// <summary>
    ///  广播抱起猫 S->C
    /// </summary>
    [pbr::OriginalName("ECATINTER_PICKUP_BROADCAST")] EcatinterPickupBroadcast = 3,
    /// <summary>
    ///  广播放下猫 S->C
    /// </summary>
    [pbr::OriginalName("ECATINTER_PUTDOWN_BROADCAST")] EcatinterPutdownBroadcast = 4,
  }

  /// <summary>
  ///  unused
  /// </summary>
  public enum EEffectOpt {
    [pbr::OriginalName("EEFFECTOPT_FIRST")] First = 0,
    [pbr::OriginalName("EEFFECTOPT_PLAY")] Play = 1,
    [pbr::OriginalName("EEFFECTOPT_STOP")] Stop = 2,
    [pbr::OriginalName("EEFFECTOPT_DELETE")] Delete = 3,
  }

  /// <summary>
  ///  unused
  /// </summary>
  public enum EEffectType {
    [pbr::OriginalName("EEFFECTTYPE_FIRST")] First = 0,
    [pbr::OriginalName("EEFFECTTYPE_NORMAL")] Normal = 1,
    [pbr::OriginalName("EEFFECTTYPE_ACCEPTQUEST")] Acceptquest = 2,
    [pbr::OriginalName("EEFFECTTYPE_FINISHQUEST")] Finishquest = 3,
    [pbr::OriginalName("EEFFECTTYPE_MVPSHOW")] Mvpshow = 4,
    [pbr::OriginalName("EEFFECTTYPE_SCENEEFFECT")] Sceneeffect = 5,
  }

  /// <summary>
  /// unused
  /// </summary>
  public enum GameTimeOpt {
    [pbr::OriginalName("EGAMETIMEOPT_FIRST")] EgametimeoptFirst = 0,
    [pbr::OriginalName("EGAMETIMEOPT_SYNC")] EgametimeoptSync = 1,
    [pbr::OriginalName("EGAMETIMEOPT_ADJUST")] EgametimeoptAdjust = 2,
  }

  /// <summary>
  ///  unused
  /// </summary>
  public enum EAlbumType {
    [pbr::OriginalName("EALBUMTYPE_MIN")] Min = 0,
    [pbr::OriginalName("EALBUMTYPE_PHOTO")] Photo = 2,
    [pbr::OriginalName("EALBUMTYPE_MAX")] Max = 5,
  }

  /// <summary>
  ///  unused
  /// </summary>
  public enum EQueryType {
    [pbr::OriginalName("EQUERYTYPE_MIN")] Min = 0,
    [pbr::OriginalName("EQUERYTYPE_ALL")] All = 1,
    [pbr::OriginalName("EQUERYTYPE_FRIEND")] Friend = 2,
    [pbr::OriginalName("EQUERYTYPE_CLOSE")] Close = 3,
    [pbr::OriginalName("EQUERYTYPE_MAX")] Max = 7,
  }

  /// <summary>
  ///  unused
  /// </summary>
  public enum ERenameErrCode {
    /// <summary>
    ///  成功
    /// </summary>
    [pbr::OriginalName("ERENAME_SUCCESS")] ErenameSuccess = 0,
    /// <summary>
    ///  未冷却
    /// </summary>
    [pbr::OriginalName("ERENAME_CD")] ErenameCd = 1,
    /// <summary>
    ///  名字冲突
    /// </summary>
    [pbr::OriginalName("ERENAME_CONFLICT")] ErenameConflict = 2,
  }

  /// <summary>
  ///  小红点枚举
  /// </summary>
  public enum RedDotType {
    [pbr::OriginalName("REDDOTTYPE_NONE")] None = 0,
    /// <summary>
    ///  新同伴
    /// </summary>
    [pbr::OriginalName("REDDOTTYPE_NEW_PARTNER")] NewPartner = 1,
    /// <summary>
    ///  解锁menu
    /// </summary>
    [pbr::OriginalName("REDDOTTYPE_UNLOCK_MENU")] UnlockMenu = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  消息参数,S->C
  /// </summary>
  public sealed partial class MsgParam : pb::IMessage<MsgParam> {
    private static readonly pb::MessageParser<MsgParam> _parser = new pb::MessageParser<MsgParam>(() => new MsgParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgParam(MsgParam other) : this() {
      param_ = other.param_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgParam Clone() {
      return new MsgParam(this);
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 1;
    private string param_ = "";
    /// <summary>
    ///  主参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Param {
      get { return param_; }
      set {
        param_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Param != other.Param) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Param.Length != 0) hash ^= Param.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Param.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Param);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Param.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Param);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgParam other) {
      if (other == null) {
        return;
      }
      if (other.Param.Length != 0) {
        Param = other.Param;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Param = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  提示消息,S->C
  /// </summary>
  public sealed partial class SysMsg : pb::IMessage<SysMsg> {
    private static readonly pb::MessageParser<SysMsg> _parser = new pb::MessageParser<SysMsg>(() => new SysMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SysMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SysMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SysMsg(SysMsg other) : this() {
      id_ = other.id_;
      param_ = other.param_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SysMsg Clone() {
      return new SysMsg(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private uint id_;
    /// <summary>
    ///  配置表id,表DT_SystemMessage列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 5;
    private string param_ = "";
    /// <summary>
    ///  消息参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Param {
      get { return param_; }
      set {
        param_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SysMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SysMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Param != other.Param) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Param.Length != 0) hash ^= Param.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Id);
      }
      if (Param.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Param);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Param.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Param);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SysMsg other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Param.Length != 0) {
        Param = other.Param;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Id = input.ReadUInt32();
            break;
          }
          case 42: {
            Param = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  传送点传送,C->S
  /// </summary>
  public sealed partial class CExitPosUserCmd : pb::IMessage<CExitPosUserCmd> {
    private static readonly pb::MessageParser<CExitPosUserCmd> _parser = new pb::MessageParser<CExitPosUserCmd>(() => new CExitPosUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CExitPosUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExitPosUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExitPosUserCmd(CExitPosUserCmd other) : this() {
      exitid_ = other.exitid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CExitPosUserCmd Clone() {
      return new CExitPosUserCmd(this);
    }

    /// <summary>Field number for the "exitid" field.</summary>
    public const int ExitidFieldNumber = 3;
    private uint exitid_;
    /// <summary>
    ///  地编中配置的传送点id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exitid {
      get { return exitid_; }
      set {
        exitid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CExitPosUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CExitPosUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Exitid != other.Exitid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Exitid != 0) hash ^= Exitid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Exitid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Exitid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Exitid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exitid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CExitPosUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Exitid != 0) {
        Exitid = other.Exitid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Exitid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  世界地图跳转,C->S
  /// </summary>
  public sealed partial class CWorldJumpUserCmd : pb::IMessage<CWorldJumpUserCmd> {
    private static readonly pb::MessageParser<CWorldJumpUserCmd> _parser = new pb::MessageParser<CWorldJumpUserCmd>(() => new CWorldJumpUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CWorldJumpUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CWorldJumpUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CWorldJumpUserCmd(CWorldJumpUserCmd other) : this() {
      mapid_ = other.mapid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CWorldJumpUserCmd Clone() {
      return new CWorldJumpUserCmd(this);
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 3;
    private uint mapid_;
    /// <summary>
    ///  地图id,Map.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CWorldJumpUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CWorldJumpUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mapid != other.Mapid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mapid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Mapid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mapid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CWorldJumpUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Mapid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  查询解锁内容,C->S
  /// </summary>
  public sealed partial class CAskUnlockedMenuListCmd : pb::IMessage<CAskUnlockedMenuListCmd> {
    private static readonly pb::MessageParser<CAskUnlockedMenuListCmd> _parser = new pb::MessageParser<CAskUnlockedMenuListCmd>(() => new CAskUnlockedMenuListCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CAskUnlockedMenuListCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAskUnlockedMenuListCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAskUnlockedMenuListCmd(CAskUnlockedMenuListCmd other) : this() {
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CAskUnlockedMenuListCmd Clone() {
      return new CAskUnlockedMenuListCmd(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Cmd.EMenuEvent type_ = 0;
    /// <summary>
    ///  解锁事件枚举
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EMenuEvent Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CAskUnlockedMenuListCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CAskUnlockedMenuListCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CAskUnlockedMenuListCmd other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            type_ = (global::Cmd.EMenuEvent) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  数据同步,S->C
  /// </summary>
  public sealed partial class SUserDataCmd : pb::IMessage<SUserDataCmd> {
    private static readonly pb::MessageParser<SUserDataCmd> _parser = new pb::MessageParser<SUserDataCmd>(() => new SUserDataCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SUserDataCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUserDataCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUserDataCmd(SUserDataCmd other) : this() {
      data_ = other.data_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SUserDataCmd Clone() {
      return new SUserDataCmd(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.Var> _repeated_data_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.Var.Parser);
    private readonly pbc::RepeatedField<global::Cmd.Var> data_ = new pbc::RepeatedField<global::Cmd.Var>();
    /// <summary>
    ///  数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.Var> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SUserDataCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SUserDataCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SUserDataCmd other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  抱猫消息,C->S
  /// </summary>
  public sealed partial class CatHugCmd : pb::IMessage<CatHugCmd> {
    private static readonly pb::MessageParser<CatHugCmd> _parser = new pb::MessageParser<CatHugCmd>(() => new CatHugCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CatHugCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatHugCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatHugCmd(CatHugCmd other) : this() {
      oper_ = other.oper_;
      catguid_ = other.catguid_;
      partnerguid_ = other.partnerguid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatHugCmd Clone() {
      return new CatHugCmd(this);
    }

    /// <summary>Field number for the "oper" field.</summary>
    public const int OperFieldNumber = 1;
    private global::Cmd.ECatInteraction oper_ = 0;
    /// <summary>
    ///  操作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ECatInteraction Oper {
      get { return oper_; }
      set {
        oper_ = value;
      }
    }

    /// <summary>Field number for the "catguid" field.</summary>
    public const int CatguidFieldNumber = 2;
    private ulong catguid_;
    /// <summary>
    ///  猫的guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Catguid {
      get { return catguid_; }
      set {
        catguid_ = value;
      }
    }

    /// <summary>Field number for the "partnerguid" field.</summary>
    public const int PartnerguidFieldNumber = 3;
    private ulong partnerguid_;
    /// <summary>
    ///  主控角色的guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Partnerguid {
      get { return partnerguid_; }
      set {
        partnerguid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CatHugCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CatHugCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oper != other.Oper) return false;
      if (Catguid != other.Catguid) return false;
      if (Partnerguid != other.Partnerguid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Oper != 0) hash ^= Oper.GetHashCode();
      if (Catguid != 0UL) hash ^= Catguid.GetHashCode();
      if (Partnerguid != 0UL) hash ^= Partnerguid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Oper != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Oper);
      }
      if (Catguid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Catguid);
      }
      if (Partnerguid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Partnerguid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Oper != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Oper);
      }
      if (Catguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Catguid);
      }
      if (Partnerguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Partnerguid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CatHugCmd other) {
      if (other == null) {
        return;
      }
      if (other.Oper != 0) {
        Oper = other.Oper;
      }
      if (other.Catguid != 0UL) {
        Catguid = other.Catguid;
      }
      if (other.Partnerguid != 0UL) {
        Partnerguid = other.Partnerguid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            oper_ = (global::Cmd.ECatInteraction) input.ReadEnum();
            break;
          }
          case 16: {
            Catguid = input.ReadUInt64();
            break;
          }
          case 24: {
            Partnerguid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  unused
  /// </summary>
  public sealed partial class TalkInfo : pb::IMessage<TalkInfo> {
    private static readonly pb::MessageParser<TalkInfo> _parser = new pb::MessageParser<TalkInfo>(() => new TalkInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TalkInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TalkInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TalkInfo(TalkInfo other) : this() {
      guid_ = other.guid_;
      talkid_ = other.talkid_;
      talkmessage_ = other.talkmessage_;
      params_ = other.params_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TalkInfo Clone() {
      return new TalkInfo(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 3;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "talkid" field.</summary>
    public const int TalkidFieldNumber = 4;
    private uint talkid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Talkid {
      get { return talkid_; }
      set {
        talkid_ = value;
      }
    }

    /// <summary>Field number for the "talkmessage" field.</summary>
    public const int TalkmessageFieldNumber = 5;
    private string talkmessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Talkmessage {
      get { return talkmessage_; }
      set {
        talkmessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Cmd.MsgParam> _repeated_params_codec
        = pb::FieldCodec.ForMessage(50, global::Cmd.MsgParam.Parser);
    private readonly pbc::RepeatedField<global::Cmd.MsgParam> params_ = new pbc::RepeatedField<global::Cmd.MsgParam>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.MsgParam> Params {
      get { return params_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TalkInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TalkInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Talkid != other.Talkid) return false;
      if (Talkmessage != other.Talkmessage) return false;
      if(!params_.Equals(other.params_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Talkid != 0) hash ^= Talkid.GetHashCode();
      if (Talkmessage.Length != 0) hash ^= Talkmessage.GetHashCode();
      hash ^= params_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Guid);
      }
      if (Talkid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Talkid);
      }
      if (Talkmessage.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Talkmessage);
      }
      params_.WriteTo(output, _repeated_params_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Talkid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Talkid);
      }
      if (Talkmessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Talkmessage);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TalkInfo other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Talkid != 0) {
        Talkid = other.Talkid;
      }
      if (other.Talkmessage.Length != 0) {
        Talkmessage = other.Talkmessage;
      }
      params_.Add(other.params_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Guid = input.ReadUInt64();
            break;
          }
          case 32: {
            Talkid = input.ReadUInt32();
            break;
          }
          case 42: {
            Talkmessage = input.ReadString();
            break;
          }
          case 50: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  unused
  /// </summary>
  public sealed partial class EffectUserCmd : pb::IMessage<EffectUserCmd> {
    private static readonly pb::MessageParser<EffectUserCmd> _parser = new pb::MessageParser<EffectUserCmd>(() => new EffectUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectUserCmd(EffectUserCmd other) : this() {
      effecttype_ = other.effecttype_;
      charid_ = other.charid_;
      effectpos_ = other.effectpos_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      effect_ = other.effect_;
      msec_ = other.msec_;
      times_ = other.times_;
      index_ = other.index_;
      opt_ = other.opt_;
      posbind_ = other.posbind_;
      epbind_ = other.epbind_;
      delay_ = other.delay_;
      id_ = other.id_;
      dir_ = other.dir_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectUserCmd Clone() {
      return new EffectUserCmd(this);
    }

    /// <summary>Field number for the "effecttype" field.</summary>
    public const int EffecttypeFieldNumber = 3;
    private global::Cmd.EEffectType effecttype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EEffectType Effecttype {
      get { return effecttype_; }
      set {
        effecttype_ = value;
      }
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 4;
    private ulong charid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "effectpos" field.</summary>
    public const int EffectposFieldNumber = 5;
    private uint effectpos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Effectpos {
      get { return effectpos_; }
      set {
        effectpos_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 6;
    private global::Cmd.ScenePos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "effect" field.</summary>
    public const int EffectFieldNumber = 7;
    private string effect_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Effect {
      get { return effect_; }
      set {
        effect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msec" field.</summary>
    public const int MsecFieldNumber = 8;
    private uint msec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Msec {
      get { return msec_; }
      set {
        msec_ = value;
      }
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 9;
    private uint times_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 10;
    private uint index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "opt" field.</summary>
    public const int OptFieldNumber = 11;
    private global::Cmd.EEffectOpt opt_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EEffectOpt Opt {
      get { return opt_; }
      set {
        opt_ = value;
      }
    }

    /// <summary>Field number for the "posbind" field.</summary>
    public const int PosbindFieldNumber = 12;
    private bool posbind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Posbind {
      get { return posbind_; }
      set {
        posbind_ = value;
      }
    }

    /// <summary>Field number for the "epbind" field.</summary>
    public const int EpbindFieldNumber = 13;
    private bool epbind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Epbind {
      get { return epbind_; }
      set {
        epbind_ = value;
      }
    }

    /// <summary>Field number for the "delay" field.</summary>
    public const int DelayFieldNumber = 14;
    private uint delay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Delay {
      get { return delay_; }
      set {
        delay_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 15;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 16;
    private uint dir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Effecttype != other.Effecttype) return false;
      if (Charid != other.Charid) return false;
      if (Effectpos != other.Effectpos) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Effect != other.Effect) return false;
      if (Msec != other.Msec) return false;
      if (Times != other.Times) return false;
      if (Index != other.Index) return false;
      if (Opt != other.Opt) return false;
      if (Posbind != other.Posbind) return false;
      if (Epbind != other.Epbind) return false;
      if (Delay != other.Delay) return false;
      if (Id != other.Id) return false;
      if (Dir != other.Dir) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Effecttype != 0) hash ^= Effecttype.GetHashCode();
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      if (Effectpos != 0) hash ^= Effectpos.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Effect.Length != 0) hash ^= Effect.GetHashCode();
      if (Msec != 0) hash ^= Msec.GetHashCode();
      if (Times != 0) hash ^= Times.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Opt != 0) hash ^= Opt.GetHashCode();
      if (Posbind != false) hash ^= Posbind.GetHashCode();
      if (Epbind != false) hash ^= Epbind.GetHashCode();
      if (Delay != 0) hash ^= Delay.GetHashCode();
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Dir != 0) hash ^= Dir.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Effecttype != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Effecttype);
      }
      if (Charid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Charid);
      }
      if (Effectpos != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Effectpos);
      }
      if (pos_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Pos);
      }
      if (Effect.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Effect);
      }
      if (Msec != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Msec);
      }
      if (Times != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Times);
      }
      if (Index != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Index);
      }
      if (Opt != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Opt);
      }
      if (Posbind != false) {
        output.WriteRawTag(96);
        output.WriteBool(Posbind);
      }
      if (Epbind != false) {
        output.WriteRawTag(104);
        output.WriteBool(Epbind);
      }
      if (Delay != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(Delay);
      }
      if (Id != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(Id);
      }
      if (Dir != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(Dir);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Effecttype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Effecttype);
      }
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      if (Effectpos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Effectpos);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Effect.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Effect);
      }
      if (Msec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Msec);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Times);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (Opt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Opt);
      }
      if (Posbind != false) {
        size += 1 + 1;
      }
      if (Epbind != false) {
        size += 1 + 1;
      }
      if (Delay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Delay);
      }
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Dir != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Dir);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EffectUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Effecttype != 0) {
        Effecttype = other.Effecttype;
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      if (other.Effectpos != 0) {
        Effectpos = other.Effectpos;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Effect.Length != 0) {
        Effect = other.Effect;
      }
      if (other.Msec != 0) {
        Msec = other.Msec;
      }
      if (other.Times != 0) {
        Times = other.Times;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Opt != 0) {
        Opt = other.Opt;
      }
      if (other.Posbind != false) {
        Posbind = other.Posbind;
      }
      if (other.Epbind != false) {
        Epbind = other.Epbind;
      }
      if (other.Delay != 0) {
        Delay = other.Delay;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Dir != 0) {
        Dir = other.Dir;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            effecttype_ = (global::Cmd.EEffectType) input.ReadEnum();
            break;
          }
          case 32: {
            Charid = input.ReadUInt64();
            break;
          }
          case 40: {
            Effectpos = input.ReadUInt32();
            break;
          }
          case 50: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 58: {
            Effect = input.ReadString();
            break;
          }
          case 64: {
            Msec = input.ReadUInt32();
            break;
          }
          case 72: {
            Times = input.ReadUInt32();
            break;
          }
          case 80: {
            Index = input.ReadUInt32();
            break;
          }
          case 88: {
            opt_ = (global::Cmd.EEffectOpt) input.ReadEnum();
            break;
          }
          case 96: {
            Posbind = input.ReadBool();
            break;
          }
          case 104: {
            Epbind = input.ReadBool();
            break;
          }
          case 112: {
            Delay = input.ReadUInt32();
            break;
          }
          case 120: {
            Id = input.ReadUInt64();
            break;
          }
          case 128: {
            Dir = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  unused
  /// </summary>
  public sealed partial class SoundEffectCmd : pb::IMessage<SoundEffectCmd> {
    private static readonly pb::MessageParser<SoundEffectCmd> _parser = new pb::MessageParser<SoundEffectCmd>(() => new SoundEffectCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SoundEffectCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoundEffectCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoundEffectCmd(SoundEffectCmd other) : this() {
      se_ = other.se_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      msec_ = other.msec_;
      times_ = other.times_;
      delay_ = other.delay_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoundEffectCmd Clone() {
      return new SoundEffectCmd(this);
    }

    /// <summary>Field number for the "se" field.</summary>
    public const int SeFieldNumber = 3;
    private string se_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Se {
      get { return se_; }
      set {
        se_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 4;
    private global::Cmd.ScenePos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "msec" field.</summary>
    public const int MsecFieldNumber = 5;
    private uint msec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Msec {
      get { return msec_; }
      set {
        msec_ = value;
      }
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 6;
    private uint times_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    /// <summary>Field number for the "delay" field.</summary>
    public const int DelayFieldNumber = 7;
    private uint delay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Delay {
      get { return delay_; }
      set {
        delay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SoundEffectCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SoundEffectCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Se != other.Se) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Msec != other.Msec) return false;
      if (Times != other.Times) return false;
      if (Delay != other.Delay) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Se.Length != 0) hash ^= Se.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Msec != 0) hash ^= Msec.GetHashCode();
      if (Times != 0) hash ^= Times.GetHashCode();
      if (Delay != 0) hash ^= Delay.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Se.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Se);
      }
      if (pos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pos);
      }
      if (Msec != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Msec);
      }
      if (Times != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Times);
      }
      if (Delay != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Delay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Se.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Se);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Msec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Msec);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Times);
      }
      if (Delay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Delay);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SoundEffectCmd other) {
      if (other == null) {
        return;
      }
      if (other.Se.Length != 0) {
        Se = other.Se;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Msec != 0) {
        Msec = other.Msec;
      }
      if (other.Times != 0) {
        Times = other.Times;
      }
      if (other.Delay != 0) {
        Delay = other.Delay;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            Se = input.ReadString();
            break;
          }
          case 34: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 40: {
            Msec = input.ReadUInt32();
            break;
          }
          case 48: {
            Times = input.ReadUInt32();
            break;
          }
          case 56: {
            Delay = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// unused
  /// </summary>
  public sealed partial class ChangeBgmCmd : pb::IMessage<ChangeBgmCmd> {
    private static readonly pb::MessageParser<ChangeBgmCmd> _parser = new pb::MessageParser<ChangeBgmCmd>(() => new ChangeBgmCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeBgmCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeBgmCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeBgmCmd(ChangeBgmCmd other) : this() {
      bgm_ = other.bgm_;
      play_ = other.play_;
      times_ = other.times_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeBgmCmd Clone() {
      return new ChangeBgmCmd(this);
    }

    /// <summary>Field number for the "bgm" field.</summary>
    public const int BgmFieldNumber = 3;
    private string bgm_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Bgm {
      get { return bgm_; }
      set {
        bgm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "play" field.</summary>
    public const int PlayFieldNumber = 4;
    private bool play_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Play {
      get { return play_; }
      set {
        play_ = value;
      }
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 5;
    private uint times_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeBgmCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeBgmCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Bgm != other.Bgm) return false;
      if (Play != other.Play) return false;
      if (Times != other.Times) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Bgm.Length != 0) hash ^= Bgm.GetHashCode();
      if (Play != false) hash ^= Play.GetHashCode();
      if (Times != 0) hash ^= Times.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Bgm.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Bgm);
      }
      if (Play != false) {
        output.WriteRawTag(32);
        output.WriteBool(Play);
      }
      if (Times != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Times);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Bgm.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Bgm);
      }
      if (Play != false) {
        size += 1 + 1;
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Times);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeBgmCmd other) {
      if (other == null) {
        return;
      }
      if (other.Bgm.Length != 0) {
        Bgm = other.Bgm;
      }
      if (other.Play != false) {
        Play = other.Play;
      }
      if (other.Times != 0) {
        Times = other.Times;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            Bgm = input.ReadString();
            break;
          }
          case 32: {
            Play = input.ReadBool();
            break;
          }
          case 40: {
            Times = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  同步游戏时间,S->C
  /// </summary>
  public sealed partial class GameTimeCmd : pb::IMessage<GameTimeCmd> {
    private static readonly pb::MessageParser<GameTimeCmd> _parser = new pb::MessageParser<GameTimeCmd>(() => new GameTimeCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameTimeCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameTimeCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameTimeCmd(GameTimeCmd other) : this() {
      opt_ = other.opt_;
      sec_ = other.sec_;
      speed_ = other.speed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameTimeCmd Clone() {
      return new GameTimeCmd(this);
    }

    /// <summary>Field number for the "opt" field.</summary>
    public const int OptFieldNumber = 3;
    private global::Cmd.GameTimeOpt opt_ = 0;
    /// <summary>
    ///  unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.GameTimeOpt Opt {
      get { return opt_; }
      set {
        opt_ = value;
      }
    }

    /// <summary>Field number for the "sec" field.</summary>
    public const int SecFieldNumber = 4;
    private uint sec_;
    /// <summary>
    ///  游戏中的时间（秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sec {
      get { return sec_; }
      set {
        sec_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 5;
    private uint speed_;
    /// <summary>
    ///  unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameTimeCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameTimeCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Opt != other.Opt) return false;
      if (Sec != other.Sec) return false;
      if (Speed != other.Speed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Opt != 0) hash ^= Opt.GetHashCode();
      if (Sec != 0) hash ^= Sec.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Opt != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Opt);
      }
      if (Sec != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Sec);
      }
      if (Speed != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Speed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Opt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Opt);
      }
      if (Sec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sec);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Speed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameTimeCmd other) {
      if (other == null) {
        return;
      }
      if (other.Opt != 0) {
        Opt = other.Opt;
      }
      if (other.Sec != 0) {
        Sec = other.Sec;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            opt_ = (global::Cmd.GameTimeOpt) input.ReadEnum();
            break;
          }
          case 32: {
            Sec = input.ReadUInt32();
            break;
          }
          case 40: {
            Speed = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  unused
  /// </summary>
  public sealed partial class ShakeScreen : pb::IMessage<ShakeScreen> {
    private static readonly pb::MessageParser<ShakeScreen> _parser = new pb::MessageParser<ShakeScreen>(() => new ShakeScreen());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShakeScreen> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShakeScreen() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShakeScreen(ShakeScreen other) : this() {
      maxamplitude_ = other.maxamplitude_;
      msec_ = other.msec_;
      shaketype_ = other.shaketype_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShakeScreen Clone() {
      return new ShakeScreen(this);
    }

    /// <summary>Field number for the "maxamplitude" field.</summary>
    public const int MaxamplitudeFieldNumber = 3;
    private uint maxamplitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Maxamplitude {
      get { return maxamplitude_; }
      set {
        maxamplitude_ = value;
      }
    }

    /// <summary>Field number for the "msec" field.</summary>
    public const int MsecFieldNumber = 4;
    private uint msec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Msec {
      get { return msec_; }
      set {
        msec_ = value;
      }
    }

    /// <summary>Field number for the "shaketype" field.</summary>
    public const int ShaketypeFieldNumber = 5;
    private uint shaketype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Shaketype {
      get { return shaketype_; }
      set {
        shaketype_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShakeScreen);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShakeScreen other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Maxamplitude != other.Maxamplitude) return false;
      if (Msec != other.Msec) return false;
      if (Shaketype != other.Shaketype) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Maxamplitude != 0) hash ^= Maxamplitude.GetHashCode();
      if (Msec != 0) hash ^= Msec.GetHashCode();
      if (Shaketype != 0) hash ^= Shaketype.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Maxamplitude != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Maxamplitude);
      }
      if (Msec != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Msec);
      }
      if (Shaketype != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Shaketype);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Maxamplitude != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Maxamplitude);
      }
      if (Msec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Msec);
      }
      if (Shaketype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Shaketype);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShakeScreen other) {
      if (other == null) {
        return;
      }
      if (other.Maxamplitude != 0) {
        Maxamplitude = other.Maxamplitude;
      }
      if (other.Msec != 0) {
        Msec = other.Msec;
      }
      if (other.Shaketype != 0) {
        Shaketype = other.Shaketype;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Maxamplitude = input.ReadUInt32();
            break;
          }
          case 32: {
            Msec = input.ReadUInt32();
            break;
          }
          case 40: {
            Shaketype = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  unused
  /// </summary>
  public sealed partial class FollowerUser : pb::IMessage<FollowerUser> {
    private static readonly pb::MessageParser<FollowerUser> _parser = new pb::MessageParser<FollowerUser>(() => new FollowerUser());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FollowerUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FollowerUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FollowerUser(FollowerUser other) : this() {
      userid_ = other.userid_;
      eType_ = other.eType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FollowerUser Clone() {
      return new FollowerUser(this);
    }

    /// <summary>Field number for the "userid" field.</summary>
    public const int UseridFieldNumber = 3;
    private ulong userid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Userid {
      get { return userid_; }
      set {
        userid_ = value;
      }
    }

    /// <summary>Field number for the "eType" field.</summary>
    public const int ETypeFieldNumber = 4;
    private global::Cmd.EFollowType eType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EFollowType EType {
      get { return eType_; }
      set {
        eType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FollowerUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FollowerUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Userid != other.Userid) return false;
      if (EType != other.EType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Userid != 0UL) hash ^= Userid.GetHashCode();
      if (EType != 0) hash ^= EType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Userid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Userid);
      }
      if (EType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Userid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Userid);
      }
      if (EType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FollowerUser other) {
      if (other == null) {
        return;
      }
      if (other.Userid != 0UL) {
        Userid = other.Userid;
      }
      if (other.EType != 0) {
        EType = other.EType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Userid = input.ReadUInt64();
            break;
          }
          case 32: {
            eType_ = (global::Cmd.EFollowType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  unused
  /// </summary>
  public sealed partial class BeFollowUserCmd : pb::IMessage<BeFollowUserCmd> {
    private static readonly pb::MessageParser<BeFollowUserCmd> _parser = new pb::MessageParser<BeFollowUserCmd>(() => new BeFollowUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BeFollowUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeFollowUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeFollowUserCmd(BeFollowUserCmd other) : this() {
      userid_ = other.userid_;
      eType_ = other.eType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeFollowUserCmd Clone() {
      return new BeFollowUserCmd(this);
    }

    /// <summary>Field number for the "userid" field.</summary>
    public const int UseridFieldNumber = 3;
    private ulong userid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Userid {
      get { return userid_; }
      set {
        userid_ = value;
      }
    }

    /// <summary>Field number for the "eType" field.</summary>
    public const int ETypeFieldNumber = 4;
    private global::Cmd.EFollowType eType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EFollowType EType {
      get { return eType_; }
      set {
        eType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BeFollowUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BeFollowUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Userid != other.Userid) return false;
      if (EType != other.EType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Userid != 0UL) hash ^= Userid.GetHashCode();
      if (EType != 0) hash ^= EType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Userid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Userid);
      }
      if (EType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) EType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Userid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Userid);
      }
      if (EType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BeFollowUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Userid != 0UL) {
        Userid = other.Userid;
      }
      if (other.EType != 0) {
        EType = other.EType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Userid = input.ReadUInt64();
            break;
          }
          case 32: {
            eType_ = (global::Cmd.EFollowType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  unused
  /// </summary>
  public sealed partial class UpyunUrl : pb::IMessage<UpyunUrl> {
    private static readonly pb::MessageParser<UpyunUrl> _parser = new pb::MessageParser<UpyunUrl>(() => new UpyunUrl());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpyunUrl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpyunUrl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpyunUrl(UpyunUrl other) : this() {
      type_ = other.type_;
      charUrl_ = other.charUrl_;
      accUrl_ = other.accUrl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpyunUrl Clone() {
      return new UpyunUrl(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Cmd.EAlbumType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EAlbumType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "char_url" field.</summary>
    public const int CharUrlFieldNumber = 2;
    private string charUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CharUrl {
      get { return charUrl_; }
      set {
        charUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "acc_url" field.</summary>
    public const int AccUrlFieldNumber = 3;
    private string accUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccUrl {
      get { return accUrl_; }
      set {
        accUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpyunUrl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpyunUrl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (CharUrl != other.CharUrl) return false;
      if (AccUrl != other.AccUrl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (CharUrl.Length != 0) hash ^= CharUrl.GetHashCode();
      if (AccUrl.Length != 0) hash ^= AccUrl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (CharUrl.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CharUrl);
      }
      if (AccUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AccUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (CharUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CharUrl);
      }
      if (AccUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpyunUrl other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.CharUrl.Length != 0) {
        CharUrl = other.CharUrl;
      }
      if (other.AccUrl.Length != 0) {
        AccUrl = other.AccUrl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Cmd.EAlbumType) input.ReadEnum();
            break;
          }
          case 18: {
            CharUrl = input.ReadString();
            break;
          }
          case 26: {
            AccUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  unused
  /// </summary>
  public sealed partial class DownloadSceneryPhotoUserCmd : pb::IMessage<DownloadSceneryPhotoUserCmd> {
    private static readonly pb::MessageParser<DownloadSceneryPhotoUserCmd> _parser = new pb::MessageParser<DownloadSceneryPhotoUserCmd>(() => new DownloadSceneryPhotoUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DownloadSceneryPhotoUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownloadSceneryPhotoUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownloadSceneryPhotoUserCmd(DownloadSceneryPhotoUserCmd other) : this() {
      urls_ = other.urls_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownloadSceneryPhotoUserCmd Clone() {
      return new DownloadSceneryPhotoUserCmd(this);
    }

    /// <summary>Field number for the "urls" field.</summary>
    public const int UrlsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.UpyunUrl> _repeated_urls_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.UpyunUrl.Parser);
    private readonly pbc::RepeatedField<global::Cmd.UpyunUrl> urls_ = new pbc::RepeatedField<global::Cmd.UpyunUrl>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.UpyunUrl> Urls {
      get { return urls_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DownloadSceneryPhotoUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DownloadSceneryPhotoUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!urls_.Equals(other.urls_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= urls_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      urls_.WriteTo(output, _repeated_urls_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += urls_.CalculateSize(_repeated_urls_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DownloadSceneryPhotoUserCmd other) {
      if (other == null) {
        return;
      }
      urls_.Add(other.urls_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            urls_.AddEntriesFrom(input, _repeated_urls_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  unused
  /// </summary>
  public sealed partial class BuffForeverCmd : pb::IMessage<BuffForeverCmd> {
    private static readonly pb::MessageParser<BuffForeverCmd> _parser = new pb::MessageParser<BuffForeverCmd>(() => new BuffForeverCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuffForeverCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffForeverCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffForeverCmd(BuffForeverCmd other) : this() {
      buff_ = other.buff_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffForeverCmd Clone() {
      return new BuffForeverCmd(this);
    }

    /// <summary>Field number for the "buff" field.</summary>
    public const int BuffFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.BufferData> _repeated_buff_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.BufferData.Parser);
    private readonly pbc::RepeatedField<global::Cmd.BufferData> buff_ = new pbc::RepeatedField<global::Cmd.BufferData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.BufferData> Buff {
      get { return buff_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuffForeverCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuffForeverCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!buff_.Equals(other.buff_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= buff_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      buff_.WriteTo(output, _repeated_buff_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += buff_.CalculateSize(_repeated_buff_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuffForeverCmd other) {
      if (other == null) {
        return;
      }
      buff_.Add(other.buff_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            buff_.AddEntriesFrom(input, _repeated_buff_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  unused
  /// </summary>
  public sealed partial class MusicItem : pb::IMessage<MusicItem> {
    private static readonly pb::MessageParser<MusicItem> _parser = new pb::MessageParser<MusicItem>(() => new MusicItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MusicItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MusicItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MusicItem(MusicItem other) : this() {
      charid_ = other.charid_;
      demandtime_ = other.demandtime_;
      mapid_ = other.mapid_;
      npcid_ = other.npcid_;
      musicid_ = other.musicid_;
      starttime_ = other.starttime_;
      endtime_ = other.endtime_;
      status_ = other.status_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MusicItem Clone() {
      return new MusicItem(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 1;
    private ulong charid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "demandtime" field.</summary>
    public const int DemandtimeFieldNumber = 2;
    private uint demandtime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Demandtime {
      get { return demandtime_; }
      set {
        demandtime_ = value;
      }
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 3;
    private uint mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    /// <summary>Field number for the "npcid" field.</summary>
    public const int NpcidFieldNumber = 4;
    private uint npcid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Npcid {
      get { return npcid_; }
      set {
        npcid_ = value;
      }
    }

    /// <summary>Field number for the "musicid" field.</summary>
    public const int MusicidFieldNumber = 5;
    private uint musicid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Musicid {
      get { return musicid_; }
      set {
        musicid_ = value;
      }
    }

    /// <summary>Field number for the "starttime" field.</summary>
    public const int StarttimeFieldNumber = 6;
    private uint starttime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Starttime {
      get { return starttime_; }
      set {
        starttime_ = value;
      }
    }

    /// <summary>Field number for the "endtime" field.</summary>
    public const int EndtimeFieldNumber = 7;
    private uint endtime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Endtime {
      get { return endtime_; }
      set {
        endtime_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 8;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 9;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MusicItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MusicItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      if (Demandtime != other.Demandtime) return false;
      if (Mapid != other.Mapid) return false;
      if (Npcid != other.Npcid) return false;
      if (Musicid != other.Musicid) return false;
      if (Starttime != other.Starttime) return false;
      if (Endtime != other.Endtime) return false;
      if (Status != other.Status) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      if (Demandtime != 0) hash ^= Demandtime.GetHashCode();
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      if (Npcid != 0) hash ^= Npcid.GetHashCode();
      if (Musicid != 0) hash ^= Musicid.GetHashCode();
      if (Starttime != 0) hash ^= Starttime.GetHashCode();
      if (Endtime != 0) hash ^= Endtime.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Charid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Charid);
      }
      if (Demandtime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Demandtime);
      }
      if (Mapid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Mapid);
      }
      if (Npcid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Npcid);
      }
      if (Musicid != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Musicid);
      }
      if (Starttime != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Starttime);
      }
      if (Endtime != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Endtime);
      }
      if (Status != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Status);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      if (Demandtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Demandtime);
      }
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mapid);
      }
      if (Npcid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Npcid);
      }
      if (Musicid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Musicid);
      }
      if (Starttime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Starttime);
      }
      if (Endtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Endtime);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MusicItem other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      if (other.Demandtime != 0) {
        Demandtime = other.Demandtime;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
      if (other.Npcid != 0) {
        Npcid = other.Npcid;
      }
      if (other.Musicid != 0) {
        Musicid = other.Musicid;
      }
      if (other.Starttime != 0) {
        Starttime = other.Starttime;
      }
      if (other.Endtime != 0) {
        Endtime = other.Endtime;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Charid = input.ReadUInt64();
            break;
          }
          case 16: {
            Demandtime = input.ReadUInt32();
            break;
          }
          case 24: {
            Mapid = input.ReadUInt32();
            break;
          }
          case 32: {
            Npcid = input.ReadUInt32();
            break;
          }
          case 40: {
            Musicid = input.ReadUInt32();
            break;
          }
          case 48: {
            Starttime = input.ReadUInt32();
            break;
          }
          case 56: {
            Endtime = input.ReadUInt32();
            break;
          }
          case 64: {
            Status = input.ReadUInt32();
            break;
          }
          case 74: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  unused
  /// </summary>
  public sealed partial class ItemImageUserNtfUserCmd : pb::IMessage<ItemImageUserNtfUserCmd> {
    private static readonly pb::MessageParser<ItemImageUserNtfUserCmd> _parser = new pb::MessageParser<ItemImageUserNtfUserCmd>(() => new ItemImageUserNtfUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemImageUserNtfUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemImageUserNtfUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemImageUserNtfUserCmd(ItemImageUserNtfUserCmd other) : this() {
      userid_ = other.userid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemImageUserNtfUserCmd Clone() {
      return new ItemImageUserNtfUserCmd(this);
    }

    /// <summary>Field number for the "userid" field.</summary>
    public const int UseridFieldNumber = 3;
    private ulong userid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Userid {
      get { return userid_; }
      set {
        userid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemImageUserNtfUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemImageUserNtfUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Userid != other.Userid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Userid != 0UL) hash ^= Userid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Userid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Userid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Userid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Userid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemImageUserNtfUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Userid != 0UL) {
        Userid = other.Userid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Userid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  unused
  /// </summary>
  public sealed partial class ChangeNameUserCmd : pb::IMessage<ChangeNameUserCmd> {
    private static readonly pb::MessageParser<ChangeNameUserCmd> _parser = new pb::MessageParser<ChangeNameUserCmd>(() => new ChangeNameUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeNameUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeNameUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeNameUserCmd(ChangeNameUserCmd other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeNameUserCmd Clone() {
      return new ChangeNameUserCmd(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeNameUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeNameUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeNameUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  unused
  /// </summary>
  public sealed partial class UpyunAuthorizationCmd : pb::IMessage<UpyunAuthorizationCmd> {
    private static readonly pb::MessageParser<UpyunAuthorizationCmd> _parser = new pb::MessageParser<UpyunAuthorizationCmd>(() => new UpyunAuthorizationCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpyunAuthorizationCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpyunAuthorizationCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpyunAuthorizationCmd(UpyunAuthorizationCmd other) : this() {
      authvalue_ = other.authvalue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpyunAuthorizationCmd Clone() {
      return new UpyunAuthorizationCmd(this);
    }

    /// <summary>Field number for the "authvalue" field.</summary>
    public const int AuthvalueFieldNumber = 3;
    private string authvalue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Authvalue {
      get { return authvalue_; }
      set {
        authvalue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpyunAuthorizationCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpyunAuthorizationCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Authvalue != other.Authvalue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Authvalue.Length != 0) hash ^= Authvalue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Authvalue.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Authvalue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Authvalue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Authvalue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpyunAuthorizationCmd other) {
      if (other == null) {
        return;
      }
      if (other.Authvalue.Length != 0) {
        Authvalue = other.Authvalue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            Authvalue = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  unused
  /// </summary>
  public sealed partial class UserRenameCmd : pb::IMessage<UserRenameCmd> {
    private static readonly pb::MessageParser<UserRenameCmd> _parser = new pb::MessageParser<UserRenameCmd>(() => new UserRenameCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserRenameCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserRenameCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserRenameCmd(UserRenameCmd other) : this() {
      name_ = other.name_;
      code_ = other.code_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserRenameCmd Clone() {
      return new UserRenameCmd(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 4;
    private global::Cmd.ERenameErrCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ERenameErrCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserRenameCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserRenameCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Code != other.Code) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Code != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserRenameCmd other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            code_ = (global::Cmd.ERenameErrCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// S &lt;- C
  /// </summary>
  public sealed partial class ChangeUserPosInRapairCmd : pb::IMessage<ChangeUserPosInRapairCmd> {
    private static readonly pb::MessageParser<ChangeUserPosInRapairCmd> _parser = new pb::MessageParser<ChangeUserPosInRapairCmd>(() => new ChangeUserPosInRapairCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeUserPosInRapairCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeUserPosInRapairCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeUserPosInRapairCmd(ChangeUserPosInRapairCmd other) : this() {
      repairguid_ = other.repairguid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeUserPosInRapairCmd Clone() {
      return new ChangeUserPosInRapairCmd(this);
    }

    /// <summary>Field number for the "repairguid" field.</summary>
    public const int RepairguidFieldNumber = 1;
    private uint repairguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Repairguid {
      get { return repairguid_; }
      set {
        repairguid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeUserPosInRapairCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeUserPosInRapairCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Repairguid != other.Repairguid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Repairguid != 0) hash ^= Repairguid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Repairguid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Repairguid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Repairguid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Repairguid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeUserPosInRapairCmd other) {
      if (other == null) {
        return;
      }
      if (other.Repairguid != 0) {
        Repairguid = other.Repairguid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Repairguid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendLotteryPoolInfoCmd : pb::IMessage<SendLotteryPoolInfoCmd> {
    private static readonly pb::MessageParser<SendLotteryPoolInfoCmd> _parser = new pb::MessageParser<SendLotteryPoolInfoCmd>(() => new SendLotteryPoolInfoCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendLotteryPoolInfoCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendLotteryPoolInfoCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendLotteryPoolInfoCmd(SendLotteryPoolInfoCmd other) : this() {
      poolinfo_ = other.poolinfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendLotteryPoolInfoCmd Clone() {
      return new SendLotteryPoolInfoCmd(this);
    }

    /// <summary>Field number for the "poolinfo" field.</summary>
    public const int PoolinfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cmd.SendLotteryPoolInfoCmd.Types.PoolInfo> _repeated_poolinfo_codec
        = pb::FieldCodec.ForMessage(10, global::Cmd.SendLotteryPoolInfoCmd.Types.PoolInfo.Parser);
    private readonly pbc::RepeatedField<global::Cmd.SendLotteryPoolInfoCmd.Types.PoolInfo> poolinfo_ = new pbc::RepeatedField<global::Cmd.SendLotteryPoolInfoCmd.Types.PoolInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.SendLotteryPoolInfoCmd.Types.PoolInfo> Poolinfo {
      get { return poolinfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendLotteryPoolInfoCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendLotteryPoolInfoCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!poolinfo_.Equals(other.poolinfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= poolinfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      poolinfo_.WriteTo(output, _repeated_poolinfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += poolinfo_.CalculateSize(_repeated_poolinfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendLotteryPoolInfoCmd other) {
      if (other == null) {
        return;
      }
      poolinfo_.Add(other.poolinfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            poolinfo_.AddEntriesFrom(input, _repeated_poolinfo_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SendLotteryPoolInfoCmd message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PoolInfo : pb::IMessage<PoolInfo> {
        private static readonly pb::MessageParser<PoolInfo> _parser = new pb::MessageParser<PoolInfo>(() => new PoolInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PoolInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Cmd.SendLotteryPoolInfoCmd.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PoolInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PoolInfo(PoolInfo other) : this() {
          index_ = other.index_;
          begintime_ = other.begintime_;
          endtime_ = other.endtime_;
          mMD_ = other.mMD_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PoolInfo Clone() {
          return new PoolInfo(this);
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private uint index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "begintime" field.</summary>
        public const int BegintimeFieldNumber = 2;
        private uint begintime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Begintime {
          get { return begintime_; }
          set {
            begintime_ = value;
          }
        }

        /// <summary>Field number for the "endtime" field.</summary>
        public const int EndtimeFieldNumber = 3;
        private uint endtime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Endtime {
          get { return endtime_; }
          set {
            endtime_ = value;
          }
        }

        /// <summary>Field number for the "MMD" field.</summary>
        public const int MMDFieldNumber = 4;
        private string mMD_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MMD {
          get { return mMD_; }
          set {
            mMD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PoolInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PoolInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Index != other.Index) return false;
          if (Begintime != other.Begintime) return false;
          if (Endtime != other.Endtime) return false;
          if (MMD != other.MMD) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Index != 0) hash ^= Index.GetHashCode();
          if (Begintime != 0) hash ^= Begintime.GetHashCode();
          if (Endtime != 0) hash ^= Endtime.GetHashCode();
          if (MMD.Length != 0) hash ^= MMD.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Index != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Index);
          }
          if (Begintime != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Begintime);
          }
          if (Endtime != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Endtime);
          }
          if (MMD.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(MMD);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (Begintime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Begintime);
          }
          if (Endtime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Endtime);
          }
          if (MMD.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MMD);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PoolInfo other) {
          if (other == null) {
            return;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          if (other.Begintime != 0) {
            Begintime = other.Begintime;
          }
          if (other.Endtime != 0) {
            Endtime = other.Endtime;
          }
          if (other.MMD.Length != 0) {
            MMD = other.MMD;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Index = input.ReadUInt32();
                break;
              }
              case 16: {
                Begintime = input.ReadUInt32();
                break;
              }
              case 24: {
                Endtime = input.ReadUInt32();
                break;
              }
              case 34: {
                MMD = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class WXKJStagesInfoCmd : pb::IMessage<WXKJStagesInfoCmd> {
    private static readonly pb::MessageParser<WXKJStagesInfoCmd> _parser = new pb::MessageParser<WXKJStagesInfoCmd>(() => new WXKJStagesInfoCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WXKJStagesInfoCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WXKJStagesInfoCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WXKJStagesInfoCmd(WXKJStagesInfoCmd other) : this() {
      info_ = other.info_.Clone();
      times_ = other.times_;
      timesTamp_ = other.timesTamp_;
      questinfo_ = other.questinfo_.Clone();
      bufflist_ = other.bufflist_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WXKJStagesInfoCmd Clone() {
      return new WXKJStagesInfoCmd(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cmd.WXKJStagesInfoCmd.Types.StageInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(10, global::Cmd.WXKJStagesInfoCmd.Types.StageInfo.Parser);
    private readonly pbc::RepeatedField<global::Cmd.WXKJStagesInfoCmd.Types.StageInfo> info_ = new pbc::RepeatedField<global::Cmd.WXKJStagesInfoCmd.Types.StageInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.WXKJStagesInfoCmd.Types.StageInfo> Info {
      get { return info_; }
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 2;
    private uint times_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    /// <summary>Field number for the "timesTamp" field.</summary>
    public const int TimesTampFieldNumber = 3;
    private uint timesTamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimesTamp {
      get { return timesTamp_; }
      set {
        timesTamp_ = value;
      }
    }

    /// <summary>Field number for the "questinfo" field.</summary>
    public const int QuestinfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Cmd.WXKJStagesInfoCmd.Types.StageInfo> _repeated_questinfo_codec
        = pb::FieldCodec.ForMessage(34, global::Cmd.WXKJStagesInfoCmd.Types.StageInfo.Parser);
    private readonly pbc::RepeatedField<global::Cmd.WXKJStagesInfoCmd.Types.StageInfo> questinfo_ = new pbc::RepeatedField<global::Cmd.WXKJStagesInfoCmd.Types.StageInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.WXKJStagesInfoCmd.Types.StageInfo> Questinfo {
      get { return questinfo_; }
    }

    /// <summary>Field number for the "bufflist" field.</summary>
    public const int BufflistFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_bufflist_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> bufflist_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Bufflist {
      get { return bufflist_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WXKJStagesInfoCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WXKJStagesInfoCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!info_.Equals(other.info_)) return false;
      if (Times != other.Times) return false;
      if (TimesTamp != other.TimesTamp) return false;
      if(!questinfo_.Equals(other.questinfo_)) return false;
      if(!bufflist_.Equals(other.bufflist_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= info_.GetHashCode();
      if (Times != 0) hash ^= Times.GetHashCode();
      if (TimesTamp != 0) hash ^= TimesTamp.GetHashCode();
      hash ^= questinfo_.GetHashCode();
      hash ^= bufflist_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      info_.WriteTo(output, _repeated_info_codec);
      if (Times != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Times);
      }
      if (TimesTamp != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TimesTamp);
      }
      questinfo_.WriteTo(output, _repeated_questinfo_codec);
      bufflist_.WriteTo(output, _repeated_bufflist_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += info_.CalculateSize(_repeated_info_codec);
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Times);
      }
      if (TimesTamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimesTamp);
      }
      size += questinfo_.CalculateSize(_repeated_questinfo_codec);
      size += bufflist_.CalculateSize(_repeated_bufflist_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WXKJStagesInfoCmd other) {
      if (other == null) {
        return;
      }
      info_.Add(other.info_);
      if (other.Times != 0) {
        Times = other.Times;
      }
      if (other.TimesTamp != 0) {
        TimesTamp = other.TimesTamp;
      }
      questinfo_.Add(other.questinfo_);
      bufflist_.Add(other.bufflist_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
          case 16: {
            Times = input.ReadUInt32();
            break;
          }
          case 24: {
            TimesTamp = input.ReadUInt32();
            break;
          }
          case 34: {
            questinfo_.AddEntriesFrom(input, _repeated_questinfo_codec);
            break;
          }
          case 42:
          case 40: {
            bufflist_.AddEntriesFrom(input, _repeated_bufflist_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the WXKJStagesInfoCmd message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class StageInfo : pb::IMessage<StageInfo> {
        private static readonly pb::MessageParser<StageInfo> _parser = new pb::MessageParser<StageInfo>(() => new StageInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StageInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Cmd.WXKJStagesInfoCmd.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StageInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StageInfo(StageInfo other) : this() {
          id_ = other.id_;
          state_ = other.state_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StageInfo Clone() {
          return new StageInfo(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "state" field.</summary>
        public const int StateFieldNumber = 2;
        private global::Cmd.EWXKJStageSchedule state_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Cmd.EWXKJStageSchedule State {
          get { return state_; }
          set {
            state_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StageInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StageInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (State != other.State) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (State != 0) hash ^= State.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (State != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) State);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (State != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StageInfo other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.State != 0) {
            State = other.State;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                state_ = (global::Cmd.EWXKJStageSchedule) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class WXKJChallengeCmd : pb::IMessage<WXKJChallengeCmd> {
    private static readonly pb::MessageParser<WXKJChallengeCmd> _parser = new pb::MessageParser<WXKJChallengeCmd>(() => new WXKJChallengeCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WXKJChallengeCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WXKJChallengeCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WXKJChallengeCmd(WXKJChallengeCmd other) : this() {
      questid_ = other.questid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WXKJChallengeCmd Clone() {
      return new WXKJChallengeCmd(this);
    }

    /// <summary>Field number for the "questid" field.</summary>
    public const int QuestidFieldNumber = 1;
    private uint questid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Questid {
      get { return questid_; }
      set {
        questid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WXKJChallengeCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WXKJChallengeCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Questid != other.Questid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Questid != 0) hash ^= Questid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Questid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Questid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Questid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Questid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WXKJChallengeCmd other) {
      if (other == null) {
        return;
      }
      if (other.Questid != 0) {
        Questid = other.Questid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Questid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 精英修复
  /// </summary>
  public sealed partial class EliteRepairCmd : pb::IMessage<EliteRepairCmd> {
    private static readonly pb::MessageParser<EliteRepairCmd> _parser = new pb::MessageParser<EliteRepairCmd>(() => new EliteRepairCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EliteRepairCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EliteRepairCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EliteRepairCmd(EliteRepairCmd other) : this() {
      npcid_ = other.npcid_;
      ret_ = other.ret_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EliteRepairCmd Clone() {
      return new EliteRepairCmd(this);
    }

    /// <summary>Field number for the "npcid" field.</summary>
    public const int NpcidFieldNumber = 1;
    private uint npcid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Npcid {
      get { return npcid_; }
      set {
        npcid_ = value;
      }
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 2;
    private uint ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EliteRepairCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EliteRepairCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Npcid != other.Npcid) return false;
      if (Ret != other.Ret) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Npcid != 0) hash ^= Npcid.GetHashCode();
      if (Ret != 0) hash ^= Ret.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Npcid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Npcid);
      }
      if (Ret != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Npcid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Npcid);
      }
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EliteRepairCmd other) {
      if (other == null) {
        return;
      }
      if (other.Npcid != 0) {
        Npcid = other.Npcid;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Npcid = input.ReadUInt32();
            break;
          }
          case 16: {
            Ret = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 小红点信息
  /// </summary>
  public sealed partial class RedDotInfo : pb::IMessage<RedDotInfo> {
    private static readonly pb::MessageParser<RedDotInfo> _parser = new pb::MessageParser<RedDotInfo>(() => new RedDotInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedDotInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedDotInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedDotInfo(RedDotInfo other) : this() {
      type_ = other.type_;
      id_ = other.id_;
      isadd_ = other.isadd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedDotInfo Clone() {
      return new RedDotInfo(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///  小红点类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    /// <summary>
    ///  子id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "isadd" field.</summary>
    public const int IsaddFieldNumber = 3;
    private bool isadd_;
    /// <summary>
    ///  true=新增，false=删除
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isadd {
      get { return isadd_; }
      set {
        isadd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedDotInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedDotInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Id != other.Id) return false;
      if (Isadd != other.Isadd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Isadd != false) hash ^= Isadd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (Isadd != false) {
        output.WriteRawTag(24);
        output.WriteBool(Isadd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Isadd != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedDotInfo other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Isadd != false) {
        Isadd = other.Isadd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            Isadd = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  下发小红点数据
  /// </summary>
  public sealed partial class RedDotCmd : pb::IMessage<RedDotCmd> {
    private static readonly pb::MessageParser<RedDotCmd> _parser = new pb::MessageParser<RedDotCmd>(() => new RedDotCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedDotCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedDotCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedDotCmd(RedDotCmd other) : this() {
      reddots_ = other.reddots_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedDotCmd Clone() {
      return new RedDotCmd(this);
    }

    /// <summary>Field number for the "reddots" field.</summary>
    public const int ReddotsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cmd.RedDotInfo> _repeated_reddots_codec
        = pb::FieldCodec.ForMessage(10, global::Cmd.RedDotInfo.Parser);
    private readonly pbc::RepeatedField<global::Cmd.RedDotInfo> reddots_ = new pbc::RepeatedField<global::Cmd.RedDotInfo>();
    /// <summary>
    ///  红点信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.RedDotInfo> Reddots {
      get { return reddots_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedDotCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedDotCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!reddots_.Equals(other.reddots_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= reddots_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      reddots_.WriteTo(output, _repeated_reddots_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += reddots_.CalculateSize(_repeated_reddots_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedDotCmd other) {
      if (other == null) {
        return;
      }
      reddots_.Add(other.reddots_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            reddots_.AddEntriesFrom(input, _repeated_reddots_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  前端确认小红点
  /// </summary>
  public sealed partial class RedDotConfirmCmd : pb::IMessage<RedDotConfirmCmd> {
    private static readonly pb::MessageParser<RedDotConfirmCmd> _parser = new pb::MessageParser<RedDotConfirmCmd>(() => new RedDotConfirmCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedDotConfirmCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedDotConfirmCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedDotConfirmCmd(RedDotConfirmCmd other) : this() {
      reddots_ = other.reddots_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedDotConfirmCmd Clone() {
      return new RedDotConfirmCmd(this);
    }

    /// <summary>Field number for the "reddots" field.</summary>
    public const int ReddotsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cmd.RedDotInfo> _repeated_reddots_codec
        = pb::FieldCodec.ForMessage(10, global::Cmd.RedDotInfo.Parser);
    private readonly pbc::RepeatedField<global::Cmd.RedDotInfo> reddots_ = new pbc::RepeatedField<global::Cmd.RedDotInfo>();
    /// <summary>
    ///  红点信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.RedDotInfo> Reddots {
      get { return reddots_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedDotConfirmCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedDotConfirmCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!reddots_.Equals(other.reddots_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= reddots_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      reddots_.WriteTo(output, _repeated_reddots_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += reddots_.CalculateSize(_repeated_reddots_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedDotConfirmCmd other) {
      if (other == null) {
        return;
      }
      reddots_.Add(other.reddots_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            reddots_.AddEntriesFrom(input, _repeated_reddots_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 好感度信息
  /// </summary>
  public sealed partial class FavorabilityInfo : pb::IMessage<FavorabilityInfo> {
    private static readonly pb::MessageParser<FavorabilityInfo> _parser = new pb::MessageParser<FavorabilityInfo>(() => new FavorabilityInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FavorabilityInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FavorabilityInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FavorabilityInfo(FavorabilityInfo other) : this() {
      partnerid_ = other.partnerid_;
      value_ = other.value_;
      rewardbitmap_ = other.rewardbitmap_;
      lastmeettime_ = other.lastmeettime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FavorabilityInfo Clone() {
      return new FavorabilityInfo(this);
    }

    /// <summary>Field number for the "partnerid" field.</summary>
    public const int PartneridFieldNumber = 1;
    private uint partnerid_;
    /// <summary>
    ///  同伴id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Partnerid {
      get { return partnerid_; }
      set {
        partnerid_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private uint value_;
    /// <summary>
    ///  好感度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "rewardbitmap" field.</summary>
    public const int RewardbitmapFieldNumber = 3;
    private pb::ByteString rewardbitmap_ = pb::ByteString.Empty;
    /// <summary>
    ///  好感度领取奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Rewardbitmap {
      get { return rewardbitmap_; }
      set {
        rewardbitmap_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lastmeettime" field.</summary>
    public const int LastmeettimeFieldNumber = 4;
    private uint lastmeettime_;
    /// <summary>
    ///  上次见面时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lastmeettime {
      get { return lastmeettime_; }
      set {
        lastmeettime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FavorabilityInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FavorabilityInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Partnerid != other.Partnerid) return false;
      if (Value != other.Value) return false;
      if (Rewardbitmap != other.Rewardbitmap) return false;
      if (Lastmeettime != other.Lastmeettime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Partnerid != 0) hash ^= Partnerid.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (Rewardbitmap.Length != 0) hash ^= Rewardbitmap.GetHashCode();
      if (Lastmeettime != 0) hash ^= Lastmeettime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Partnerid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Partnerid);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Value);
      }
      if (Rewardbitmap.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Rewardbitmap);
      }
      if (Lastmeettime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Lastmeettime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Partnerid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Partnerid);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (Rewardbitmap.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Rewardbitmap);
      }
      if (Lastmeettime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lastmeettime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FavorabilityInfo other) {
      if (other == null) {
        return;
      }
      if (other.Partnerid != 0) {
        Partnerid = other.Partnerid;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.Rewardbitmap.Length != 0) {
        Rewardbitmap = other.Rewardbitmap;
      }
      if (other.Lastmeettime != 0) {
        Lastmeettime = other.Lastmeettime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Partnerid = input.ReadUInt32();
            break;
          }
          case 16: {
            Value = input.ReadUInt32();
            break;
          }
          case 26: {
            Rewardbitmap = input.ReadBytes();
            break;
          }
          case 32: {
            Lastmeettime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  下发好感度数据
  /// </summary>
  public sealed partial class FavorabilityCmd : pb::IMessage<FavorabilityCmd> {
    private static readonly pb::MessageParser<FavorabilityCmd> _parser = new pb::MessageParser<FavorabilityCmd>(() => new FavorabilityCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FavorabilityCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FavorabilityCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FavorabilityCmd(FavorabilityCmd other) : this() {
      infos_ = other.infos_.Clone();
      updatetype_ = other.updatetype_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FavorabilityCmd Clone() {
      return new FavorabilityCmd(this);
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cmd.FavorabilityInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(10, global::Cmd.FavorabilityInfo.Parser);
    private readonly pbc::RepeatedField<global::Cmd.FavorabilityInfo> infos_ = new pbc::RepeatedField<global::Cmd.FavorabilityInfo>();
    /// <summary>
    ///  好感度信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.FavorabilityInfo> Infos {
      get { return infos_; }
    }

    /// <summary>Field number for the "updatetype" field.</summary>
    public const int UpdatetypeFieldNumber = 2;
    private uint updatetype_;
    /// <summary>
    ///  好感度更新类型(1是全量更新 0是增量)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Updatetype {
      get { return updatetype_; }
      set {
        updatetype_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FavorabilityCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FavorabilityCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!infos_.Equals(other.infos_)) return false;
      if (Updatetype != other.Updatetype) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= infos_.GetHashCode();
      if (Updatetype != 0) hash ^= Updatetype.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infos_.WriteTo(output, _repeated_infos_codec);
      if (Updatetype != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Updatetype);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infos_.CalculateSize(_repeated_infos_codec);
      if (Updatetype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Updatetype);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FavorabilityCmd other) {
      if (other == null) {
        return;
      }
      infos_.Add(other.infos_);
      if (other.Updatetype != 0) {
        Updatetype = other.Updatetype;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
          case 16: {
            Updatetype = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WXKJSwitchMaterialCmd : pb::IMessage<WXKJSwitchMaterialCmd> {
    private static readonly pb::MessageParser<WXKJSwitchMaterialCmd> _parser = new pb::MessageParser<WXKJSwitchMaterialCmd>(() => new WXKJSwitchMaterialCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WXKJSwitchMaterialCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WXKJSwitchMaterialCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WXKJSwitchMaterialCmd(WXKJSwitchMaterialCmd other) : this() {
      material_ = other.material_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WXKJSwitchMaterialCmd Clone() {
      return new WXKJSwitchMaterialCmd(this);
    }

    /// <summary>Field number for the "material" field.</summary>
    public const int MaterialFieldNumber = 1;
    private string material_ = "";
    /// <summary>
    /// 妄想空间材质
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Material {
      get { return material_; }
      set {
        material_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WXKJSwitchMaterialCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WXKJSwitchMaterialCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Material != other.Material) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Material.Length != 0) hash ^= Material.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Material.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Material);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Material.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Material);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WXKJSwitchMaterialCmd other) {
      if (other == null) {
        return;
      }
      if (other.Material.Length != 0) {
        Material = other.Material;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Material = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  通知Dynamic Move Effect结束，C->S
  /// </summary>
  public sealed partial class DynamicMoveEffectEndCmd : pb::IMessage<DynamicMoveEffectEndCmd> {
    private static readonly pb::MessageParser<DynamicMoveEffectEndCmd> _parser = new pb::MessageParser<DynamicMoveEffectEndCmd>(() => new DynamicMoveEffectEndCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DynamicMoveEffectEndCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicMoveEffectEndCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicMoveEffectEndCmd(DynamicMoveEffectEndCmd other) : this() {
      charid_ = other.charid_;
      skillid_ = other.skillid_;
      timeAxis_ = other.timeAxis_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicMoveEffectEndCmd Clone() {
      return new DynamicMoveEffectEndCmd(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 1;
    private ulong charid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 2;
    private uint skillid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "time_axis" field.</summary>
    public const int TimeAxisFieldNumber = 3;
    private uint timeAxis_;
    /// <summary>
    ///  effect结束时间轴(毫秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeAxis {
      get { return timeAxis_; }
      set {
        timeAxis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DynamicMoveEffectEndCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DynamicMoveEffectEndCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      if (Skillid != other.Skillid) return false;
      if (TimeAxis != other.TimeAxis) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (TimeAxis != 0) hash ^= TimeAxis.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Charid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Charid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Skillid);
      }
      if (TimeAxis != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TimeAxis);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      if (TimeAxis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeAxis);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DynamicMoveEffectEndCmd other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.TimeAxis != 0) {
        TimeAxis = other.TimeAxis;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Charid = input.ReadUInt64();
            break;
          }
          case 16: {
            Skillid = input.ReadUInt32();
            break;
          }
          case 24: {
            TimeAxis = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendReloginServerReqCmd : pb::IMessage<SendReloginServerReqCmd> {
    private static readonly pb::MessageParser<SendReloginServerReqCmd> _parser = new pb::MessageParser<SendReloginServerReqCmd>(() => new SendReloginServerReqCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendReloginServerReqCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUser2Reflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendReloginServerReqCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendReloginServerReqCmd(SendReloginServerReqCmd other) : this() {
      reconnectreq_ = other.reconnectreq_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendReloginServerReqCmd Clone() {
      return new SendReloginServerReqCmd(this);
    }

    /// <summary>Field number for the "reconnectreq" field.</summary>
    public const int ReconnectreqFieldNumber = 1;
    private uint reconnectreq_;
    /// <summary>
    /// 服务器最后一次收到的序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Reconnectreq {
      get { return reconnectreq_; }
      set {
        reconnectreq_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendReloginServerReqCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendReloginServerReqCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reconnectreq != other.Reconnectreq) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reconnectreq != 0) hash ^= Reconnectreq.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reconnectreq != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Reconnectreq);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reconnectreq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Reconnectreq);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendReloginServerReqCmd other) {
      if (other == null) {
        return;
      }
      if (other.Reconnectreq != 0) {
        Reconnectreq = other.Reconnectreq;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Reconnectreq = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
