// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoCommon.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Cmd {

  /// <summary>Holder for reflection information generated from ProtoCommon.proto</summary>
  public static partial class ProtoCommonReflection {

    #region Descriptor
    /// <summary>File descriptor for ProtoCommon.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtoCommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFQcm90b0NvbW1vbi5wcm90bxIDQ21kGg9Qcm90b0F0dHIucHJvdG8iKwoI",
            "U2NlbmVQb3MSCQoBeBgBIAEoBRIJCgF5GAIgASgFEgkKAXoYAyABKAUiLQoK",
            "U2NlbmVTY2FsZRIJCgF4GAEgASgCEgkKAXkYAiABKAISCQoBehgDIAEoAiKl",
            "AQoOU25hcFNob3REYXRhUEISCgoCaWQYASABKAQSDgoGYmFzZWx2GAIgASgN",
            "EhEKCXBhcnRuZXJpZBgUIAEoDRIQCghwb3J0cmFpdBgVIAEoDRIMCgRuYW1l",
            "GA8gASgJEg4KBmlzb3BlbhgRIAEoDRISCgpkZWxldGV0aW1lGBIgASgNEiAK",
            "AnBkGBMgASgLMhQuQ21kLlBlcnNvbmFsaXR5RGF0YSI+CgVQYXJhbRILCgNr",
            "ZXkYASABKAkSDQoFdmFsdWUYAiABKAkSGQoFaXRlbXMYAyADKAsyCi5DbWQu",
            "UGFyYW0irAYKC1BpbmNoUGVvcGxlEhIKCmJvZHl3ZWlnaHQYASABKA0SEgoK",
            "Ym9keWhlaWdodBgCIAEoDRISCgpib2R5YnJlYXN0GAMgASgNEhEKCWJvZHlj",
            "b2xvchgEIAEoDRIPCgdleWVicm93GAUgASgNEhEKCWJyb3djb2xvchgGIAEo",
            "DRIQCghleWVwdXBpbBgHIAEoDRIWCg5wdXBpbGNvbG9ybGVmdBgIIAEoDRIX",
            "Cg9wdXBpbGNvbG9ycmlnaHQYCSABKA0SEQoJZXllc2hhZG93GAogASgNEhYK",
            "DmV5ZXNoYWRvd2NvbG9yGAsgASgNEhAKCGV5ZXNoYXBlGAwgASgNEhEKCWZh",
            "Y2VzaGFwZRgNIAEoDRILCgNlYXIYDiABKA0SEgoKZmFjZXRhdHRvbxgPIAEo",
            "DRIXCg9mYWNldGF0dG9vY29sb3IYECABKA0SEAoIaGFpcm1haW4YESABKA0S",
            "EAoIaGFpcnNpZGUYEiABKA0SDQoFYWhvZ2UYEyABKA0SEQoJaGFpcmNvbG9y",
            "GBQgASgNEg0KBWNsb3RoGBUgASgJEg8KB3B1cGlsbGEYFyABKA0SDwoHYmx1",
            "c2hlchgYIAEoDRIUCgxibHVzaGVyY29sb3IYGSABKA0SFgoOZGVmYXVsdGZh",
            "c2hpb24YGiABKAkSFAoMYXZhdGFycHJlc2V0GBsgASgNEg0KBXZoYWlyGGUg",
            "ASgNEhcKD3ZoYWlybWFqb3Jjb2xvchhmIAEoDRIYChB2aGFpcnNlY29uZGNv",
            "bG9yGGcgASgNEg4KBnZhaG9nZRhoIAEoDRISCgp2ZmFjZXNoYXBlGGkgASgN",
            "EhAKCHZleWVicm93GGogASgNEhEKCXZleWVzaGFwZRhrIAEoDRIRCgl2ZXll",
            "cHVwaWwYbCABKA0SDgoGdmJsdXNoGG0gASgNEhMKC3Zib2R5d2VpZ2h0GG4g",
            "ASgNEhEKCXZib2R5YnVzdBhvIAEoDRISCgp2c2tpbmNvbG9yGHAgASgNEhIK",
            "CnZwdXBpbHNpemUYcSABKA0SDgoGdnRhdHRvGHIgASgNEhQKDHZkeWVpbmdj",
            "b2xvchhzIAEoDSIqCg5BdmF0YXJPcm5hbWVudBIMCgR0eXBlGAEgASgNEgoK",
            "AmlkGAIgASgNInkKD1BlcnNvbmFsaXR5RGF0YRIfCgVwaW5jaBgBIAEoCzIQ",
            "LkNtZC5QaW5jaFBlb3BsZRIXCg9jaGFyYWN0ZXJpc3RpY3MYAiABKA0SLAoP",
            "YXZhdGFyb3JuYW1lbnRzGAMgAygLMhMuQ21kLkF2YXRhck9ybmFtZW50InEK",
            "DVRlbXBsYXRlVmFsdWUSEAoIdmFsdWVJbnQYASABKAUSEwoLdmFsdWVTdHJp",
            "bmcYAiABKAkSEQoJdmFsdWVCb29sGAMgASgIEiYKCnZhbHVlVGFibGUYBCAD",
            "KAsyEi5DbWQuVGVtcGxhdGVWYWx1ZSKkAQoITWFwQmxvY2sSCgoCaWQYASAB",
            "KAQSHwoEdHlwZRgCIAEoDjIRLkNtZC5NYXBCbG9ja1R5cGUSIQoFc2hhcGUY",
            "AyABKA4yEi5DbWQuTWFwQmxvY2tTaGFwZRIaCgNwb3MYBCABKAsyDS5DbWQu",
            "U2NlbmVQb3MSDQoFcmFuZ2UYBSABKA0SDQoFd2lkdGgYBiABKA0SDgoGbGVu",
            "Z3RoGAcgASgNIm8KCFpvbmVJbmZvEg4KBnpvbmVpZBgBIAEoDRIRCgltYXhi",
            "YXNlbHYYAiABKA0SIAoGc3RhdHVzGAMgASgOMhAuQ21kLkVab25lU3RhdHVz",
            "Eh4KBXN0YXRlGAQgASgOMg8uQ21kLkVab25lU3RhdGUiSQoIVXNlckRhdGES",
            "IAoEdHlwZRgBIAEoDjISLkNtZC5FVXNlckRhdGFUeXBlEg0KBXZhbHVlGAIg",
            "ASgEEgwKBGRhdGEYAyABKAkiPAoJRW50cnlEYXRhEiAKBHR5cGUYASABKA4y",
            "Ei5DbWQuRU5pbmVEYXRhVHlwZRINCgV2YWx1ZRgCIAEoBCJECg1JdGVtRW50",
            "cnlEYXRhEiQKBHR5cGUYASABKA4yFi5DbWQuRUl0ZW1OaW5lRGF0YVR5cGUS",
            "DQoFdmFsdWUYAiABKAMiJwoIVXNlckF0dHISDAoEdHlwZRgBIAEoDRINCgV2",
            "YWx1ZRgCIAEoBSKdAQoRV29ya1Nob3BGdXJuaXR1cmUSEwoLZnVybml0dXJl",
            "aWQYASABKA0SGgoDcG9zGAIgASgLMg0uQ21kLlNjZW5lUG9zEgsKA2RpchgD",
            "IAEoAhIrChBzdWJmdXJuaXR1cmVsaXN0GAQgAygLMhEuQ21kLlN1YkZ1cm5p",
            "dHVyZRIPCgdyb29taWRzGAUgAygNEgwKBGd1aWQYBiABKAQiYAoMU3ViRnVy",
            "bml0dXJlEhMKC2Z1cm5pdHVyZWlkGAEgASgEEhoKA3BvcxgCIAEoCzINLkNt",
            "ZC5TY2VuZVBvcxILCgNkaXIYAyABKAISEgoKcGFyZW50Z3VpZBgEIAEoBCJQ",
            "ChBXb3JrU2hvcE9ybmFtZW50EigKBHR5cGUYASABKA4yGi5DbWQuRVdvcmtT",
            "aG9wT3JuYW1lbnRUeXBlEhIKCm9ybmFtZW50aWQYAiABKA0isQEKFFdvcmtT",
            "aG9wUm9vbU9ybmFtZW50Eg4KBnJvb21pZBgBIAEoDRIrCgxyb29tb3JuYW1l",
            "bnQYAiADKAsyFS5DbWQuV29ya1Nob3BPcm5hbWVudBItCg1mdXJuaXR1cmVs",
            "aXN0GAMgAygLMhYuQ21kLldvcmtTaG9wRnVybml0dXJlEhMKC2JsdWVwcmlu",
            "dGlkGAQgASgNEhgKEGhhc2luaXRibHVlcHJpbnQYBSABKAgiggEKFFdvcmtT",
            "aG9wUm9vbUJhc2VJbmZvEg4KBnJvb21pZBgBIAEoDRITCgtibHVlcHJpbnRp",
            "ZBgCIAEoDRIYChBoYXNpbml0Ymx1ZXByaW50GAMgASgIEisKDHJvb21vcm5h",
            "bWVudBgEIAMoCzIVLkNtZC5Xb3JrU2hvcE9ybmFtZW50Il4KEVdvcmtTaG9w",
            "UHJvdG9UeXBlEgoKAmlkGAEgASgNEi8KDG9ybmFtZW50bGlzdBgCIAMoCzIZ",
            "LkNtZC5Xb3JrU2hvcFJvb21Pcm5hbWVudBIMCgRuYW1lGAMgASgJIlcKEFdv",
            "cmtTaG9wUm9vbURhdGESDgoGcm9vbWlkGAEgASgNEg4KBnJvb21sdhgCIAEo",
            "DRIjCgxyZWZlcmVuY2Vwb3MYAyABKAsyDS5DbWQuU2NlbmVQb3MiPwoQV29y",
            "a1Nob3BXYWxsRWRpdBIrCgh3YWxsTGlzdBgBIAMoCzIZLkNtZC5Xb3JrU2hv",
            "cFJvb21XYWxsRGF0YSJNChZXb3JrU2hvcFJvb21IZWlnaHRFZGl0EjMKDnJv",
            "b21oZWlnaHRsaXN0GAEgAygLMhsuQ21kLldvcmtTaG9wUm9vbUhlaWdodERh",
            "dGEiOAoWV29ya1Nob3BSb29tSGVpZ2h0RGF0YRIOCgZyb29taWQYASABKA0S",
            "DgoGaGVpZ2h0GAIgASgFIm4KFFdvcmtTaG9wUm9vbVdhbGxEYXRhEh4KB3dh",
            "bGxQb3MYAiABKAsyDS5DbWQuU2NlbmVQb3MSIgoFc3RhdGUYAyABKA4yEy5D",
            "bWQuRVdhbGxTdGF0ZVR5cGUSEgoKcm9vbWlkbGlzdBgEIAMoDSJPChVXb3Jr",
            "U2hvcEJsdWVwcmludERhdGESIQoEdHlwZRgBIAEoDjITLkNtZC5FQmx1ZXBy",
            "aW50VHlwZRITCgtibHVlcHJpbnRpZBgCIAEoDSJgChlXb3JrU2hvcFByb2Zp",
            "dFBhcnRuZXJEYXRhEhAKCHByb2ZpdGlkGAEgASgNEjEKD3Byb2ZpdHN0YXRl",
            "bGlzdBgCIAMoCzIYLkNtZC5Xb3JrU2hvcFByb2ZpdFN0YXRlIkIKGFdvcmtT",
            "aG9wUHJvZml0UmVwYWlyRGF0YRIQCghwcm9maXRpZBgBIAEoDRIUCgxsYXN0",
            "Y2FsY3RpbWUYAiABKA0iSwoTV29ya1Nob3BQcm9maXRTdGF0ZRIRCglpc3Jl",
            "Y2VpdmUYASABKAgSEAoIY2FsY3RpbWUYAiABKA0SDwoHcHJvY2VzcxgDIAEo",
            "DSJpCg1Nb3ZlU3RhdGVEYXRhEhAKCGFjdGlvbmlkGAEgASgNEhMKC2FjdGlv",
            "bnNwZWVkGAIgASgFEg0KBXNwZWVkGAMgASgFEiIKBXN0YXRlGAQgASgOMhMu",
            "Q21kLkVNb3ZlU3RhdGVUeXBlIncKC1ZlaGljbGVEYXRhEgwKBGd1aWQYASAB",
            "KAQSKwoFc3RhdGUYAiABKA4yHC5DbWQuRVBsYXllclZlaGljbGVTdGF0ZVR5",
            "cGUSHQoGY3VycG9zGAMgASgLMg0uQ21kLlNjZW5lUG9zEg4KBnJvdGF0ZRgE",
            "IAEoBSJOCghKdW1wRGF0YRIOCgZ6U3BlZWQYASABKAISDQoFaW5kZXgYAiAB",
            "KAUSDwoHc2VnbWVudBgDIAEoBRISCgp0aW1lcGFzc2VkGAQgASgFIkoKCEZh",
            "bGxEYXRhEiAKCXRhcmdldHBvcxgBIAEoCzINLkNtZC5TY2VuZVBvcxIOCgZy",
            "b3RhdGUYAiABKAUSDAoEZmxhZxgDIAEoBSJZCgpNb3ZlVGFyZ2V0Eg4KBmNo",
            "YXJpZBgBIAEoBBIeCgdtb3ZlcG9zGAIgASgLMg0uQ21kLlNjZW5lUG9zEgsK",
            "A2RpchgDIAEoBRIOCgZtb3ZlaWQYBCABKA0iZwoITW92ZURhdGESEAoIZWZm",
            "ZWN0aWQYASABKA0SEQoJdGltZV9heGlzGAIgASgNEiQKC21vdmV0YXJnZXRz",
            "GAMgAygLMg8uQ21kLk1vdmVUYXJnZXQSEAoIaGl0aW5kZXgYBCABKA0iQAoR",
            "U2hhcmVEYW1hZ2VUYXJnZXQSDgoGY2hhcmlkGAEgASgEEg0KBXZhbHVlGAIg",
            "ASgNEgwKBHR5cGUYAyABKAUiqgIKDERhbWFnZVRhcmdldBIOCgZjaGFyaWQY",
            "ASABKAQSDQoFdmFsdWUYAiABKA0SDAoEdHlwZRgDIAEoBRIsCgxzaGFyZXRh",
            "cmdldHMYBCADKAsyFi5DbWQuU2hhcmVEYW1hZ2VUYXJnZXQSHgoHbW92ZXBv",
            "cxgFIAEoCzINLkNtZC5TY2VuZVBvcxILCgNkaXIYBiABKAUSDwoHaGl0dHlw",
            "ZRgHIAEoDRISCgpmb3JjZXBvd2VyGAggASgFEhEKCWRhbWFnZWRpchgJIAEo",
            "DRITCgtlbGVtZW50d2VhaxgKIAEoCBIOCgZpc2NyaXQYCyABKAgSEgoKYnJl",
            "YWtsZXZlbBgMIAEoDRIOCgZtb3ZlaWQYDSABKA0SEQoJaW1iYWxhbmNlGA4g",
            "ASgNIm0KCkRhbWFnZURhdGESEAoIZWZmZWN0aWQYASABKA0SEQoJdGltZV9h",
            "eGlzGAIgASgNEigKDWRhbWFnZXRhcmdldHMYAyADKAsyES5DbWQuRGFtYWdl",
            "VGFyZ2V0EhAKCGhpdGluZGV4GAQgASgNIrwBCg5Nb3ZlRWZmZWN0RGF0YRIg",
            "Cgl0YXJnZXRwb3MYASABKAsyDS5DbWQuU2NlbmVQb3MSDgoGcm90YXRlGAIg",
            "ASgFEg8KB3NraWxsaWQYAyABKA0SEwoLbWFpbnNraWxsaWQYBCABKA0SHwoI",
            "bW92ZWRhdGEYBSABKAsyDS5DbWQuTW92ZURhdGESIwoKZGFtYWdlZGF0YRgG",
            "IAEoCzIPLkNtZC5EYW1hZ2VEYXRhEgwKBGZsYWcYByABKAUiVAoKQ0RUaW1l",
            "SXRlbRIKCgJpZBgBIAEoDRIMCgR0aW1lGAIgASgEEhoKBHR5cGUYAyABKA4y",
            "DC5DbWQuQ0RfVFlQRRIQCghyZWNoYXJnZRgEIAEoDSKjAQoXTWFwTnBjVmlz",
            "aWJsZVN0YXR1c0RhdGESDQoFbnBjaWQYASABKA0SEQoJbnBjc3RhdHVzGAIg",
            "ASgNEhYKDm5wY2xvZ2ljc3RhdHVzGAMgASgNEjAKEG5wY3Zpc2libGVzdGF0",
            "dXMYBCABKA4yFi5DbWQuRU5wY1Zpc2libGVTdGF0dXMSDQoFYWxpYXMYBSAB",
            "KAkSDQoFZ3VpZHMYBiADKAQibAoOTnBjUHJpdmF0ZURhdGESDAoEZGF0YRgB",
            "IAEoDRIQCghkYXRhX3N0chgCIAEoCRIlCgR0eXBlGAMgASgOMhcuQ21kLk5w",
            "Y1ByaXZhdGVEYXRhVHlwZRITCgt0YWxrY29udGVudBgEIAEoCSJjChFNYXBO",
            "cGNQcml2YXRlRGF0YRINCgVucGNpZBgBIAEoDRIhCgRkYXRhGAIgAygLMhMu",
            "Q21kLk5wY1ByaXZhdGVEYXRhEg0KBWFsaWFzGAMgASgJEg0KBWd1aWRzGAQg",
            "AygEIkkKD0NvbGxlZ2VHaWZ0RGF0YRIOCgZnaWZ0aWQYASABKA0SJgoMY29s",
            "bGVnZWdpZnRzGAIgAygLMhAuQ21kLkNvbGxlZ2VHaWZ0IkUKC0NvbGxlZ2VH",
            "aWZ0EhAKCGdhaW50aW1lGAEgASgEEhIKCmlzcmVjZWl2ZWQYAiABKAgSEAoI",
            "aXNhY3RpdmUYAyABKAgqqggKDUVVc2VyRGF0YVR5cGUSFQoRRVVTRVJEQVRB",
            "VFlQRV9NSU4QABIXChNFVVNFUkRBVEFUWVBFX01BUElEEAESGwoXRVVTRVJE",
            "QVRBVFlQRV9ST0xFTEVWRUwQBhIZChVFVVNFUkRBVEFUWVBFX1JPTEVFWFAQ",
            "CBIcChhFVVNFUkRBVEFUWVBFX09OTElORVRJTUUQDxIdChlFVVNFUkRBVEFU",
            "WVBFX09GRkxJTkVUSU1FEBASGAoURVVTRVJEQVRBVFlQRV9BRERJQ1QQERIc",
            "ChhFVVNFUkRBVEFUWVBFX0FVVE9DT01CQVQQEhIYChRFVVNFUkRBVEFUWVBF",
            "X1NUQVRVUxAqEhoKFkVVU0VSREFUQVRZUEVfUE9SVFJBSVQQLRIXChNFVVNF",
            "UkRBVEFUWVBFX0ZSQU1FEC4SGAoURVVTRVJEQVRBVFlQRV9SQUlESUQQMBIc",
            "ChhFVVNFUkRBVEFUWVBFX0NSRUFURVRJTUUQMxIaChZFVVNFUkRBVEFUWVBF",
            "X0ZPTExPV0lEEDUSGAoURVVTRVJEQVRBVFlQRV9IQU5ESUQQNhIcChhFVVNF",
            "UkRBVEFUWVBFX0ZSSUVORFNISVAQOBIdChlFVVNFUkRBVEFUWVBFX01VU0lD",
            "X0NVUklEEDkSHQoZRVVTRVJEQVRBVFlQRV9NVVNJQ19TVEFSVBA6Eh4KGkVV",
            "U0VSREFUQVRZUEVfTVVTSUNfREVNQU5EEDsSHwobRVVTRVJEQVRBVFlQRV9N",
            "VVNJQ19ERU1BTkQxEDwSGQoVRVVTRVJEQVRBVFlQRV9HQUdUSU1FED0SHQoZ",
            "RVVTRVJEQVRBVFlQRV9OT0xPR0lOVElNRRA+EhYKEkVVU0VSREFUQVRZUEVf",
            "TkFNRRBAEhsKF0VVU0VSREFUQVRZUEVfQ1VSX1RJVExFEEQSIAocRVVTRVJE",
            "QVRBVFlQRV9BRERJQ1RUSVBTVElNRRBJEiEKHUVVU0VSREFUQVRZUEVfTlBD",
            "X0lOVEVSQUNUSU9OEFASIAocRVVTRVJEQVRBVFlQRV9FUVVJUEVEX1dFQVBP",
            "ThB9Eh4KGUVVU0VSREFUQVRZUEVfRklHSFRTVEFUVVMQgQESHQoYRVVTRVJE",
            "QVRBVFlQRV9DVVJfTE9DS0lEEIIBEhwKF0VVU0VSREFUQVRZUEVfRVFVSVBf",
            "SURTEIMBEhoKFUVVU0VSREFUQVRZUEVfQ0FNUF9JRBCEARIcChdFVVNFUkRB",
            "VEFUWVBFX0NPTUJBVF9JRBCFARIsCidFVVNFUkRBVEFUWVBFX1RPREFZX0FD",
            "VElWRV9EQVRJTkdfQ09VTlQQiQESLwoqRVVTRVJEQVRBVFlQRV9BQ1RJVkVf",
            "REFUSU5HX0NIT09TRV9QQVJUTkVSEIoBEhYKEUVVU0VSREFUQVRZUEVfTUFY",
            "EIACKlEKB0VHZW5kZXISDwoLRUdFTkRFUl9NSU4QABIQCgxFR0VOREVSX01B",
            "TEUQARISCg5FR0VOREVSX0ZFTUFMRRACEg8KC0VHRU5ERVJfTUFYEAMqiQIK",
            "CkVNb25leVR5cGUSEgoORU1PTkVZVFlQRV9NSU4QABIWCg9FTU9ORVlUWVBF",
            "X0dPTEQQgbSJExIZChJFTU9ORVlUWVBFX0RJQU1PTkQQgrSJExIcChVFTU9O",
            "RVlUWVBFX0NPUFlfTU9ORVkQg7SJExIbChRFTU9ORVlUWVBFX0VRVUlQX0VY",
            "UBDptIkTEiIKG0VNT05FWVRZUEVfRklHSFRFUl9FWFBfUE9PTBDqtIkTEhoK",
            "E0VNT05FWVRZUEVfTUFYX1NFTkQQwLjGExIYChFFTU9ORVlUWVBFX0NIQVJH",
            "RRDBuMYTEh8KGEVNT05FWVRZUEVfREFJTFlBQ1RJVklUWRChwY8TKswBCg9F",
            "Q3JlYXR1cmVTdGF0dXMSFwoTRUNSRUFUVVJFU1RBVFVTX01JThAAEhgKFEVD",
            "UkVBVFVSRVNUQVRVU19MSVZFEAESGAoURUNSRUFUVVJFU1RBVFVTX0RFQUQQ",
            "AxIZChVFQ1JFQVRVUkVTVEFUVVNfQ0xFQVIQBhIaChZFQ1JFQVRVUkVTVEFU",
            "VVNfUkVMSVZFEAcSHAoYRUNSRUFUVVJFU1RBVFVTX0lOUkVMSVZFEAkSFwoT",
            "RUNSRUFUVVJFU1RBVFVTX01BWBAKKoAFChNFRmVhdHVyZXNTdGF0dXNUeXBl",
            "EhcKE0VGRUFUVVJFU1NUQVRVU19NSU4QABIcChhFRkVBVFVSRVNTVEFUVVNf",
            "Tk9TRUxFQ1QQARIfChtFRkVBVFVSRVNTVEFUVVNfU0VMRUNUTElHSFQQBxIe",
            "ChpFRkVBVFVSRVNTVEFUVVNfVU5TSE9XTkFNRRAIEhwKGEVGRUFUVVJFU1NU",
            "QVRVU19VTlNIT1dIUBAJEh8KG0VGRUFUVVJFU1NUQVRVU19VTlNIT1dMRVZF",
            "TBAKEh0KGUVGRUFUVVJFU1NUQVRVU19VTlNIT1dNU0cQCxIgChxFRkVBVFVS",
            "RVNTVEFUVVNfVU5TSE9XQVZBVEFSEA4SJQohRUZFQVRVUkVTU1RBVFVTX0NM",
            "T1NFVE9ESVNQTEFZTlBDEBESIAocRUZFQVRVUkVTU1RBVFVTX0JMT0NLTUlT",
            "U0lMRRASEh4KGkVGRUFUVVJFU1NUQVRVU19OUENOT1RUVVJOEBMSHgoaRUZF",
            "QVRVUkVTU1RBVFVTX05QQ05PVFdBVkUQFBIeChpFRkVBVFVSRVNTVEFUVVNf",
            "TlBDTk9UVEFMSxAVEiIKHkVGRUFUVVJFU1NUQVRVU19OUENOT1RUVVJOSEVB",
            "RBAWEiUKIUVGRUFUVVJFU1NUQVRVU19OUENOT1RQTEFZQlVCQkxFUxAXEigK",
            "JEVGRUFUVVJFU1NUQVRVU19DTE9TRVRPU1BFQ0lBTEFDVElPThAZEhkKFUVG",
            "RUFUVVJFU1NUQVRVU19WSVNJVBAeEh0KGUVGRUFUVVJFU1NUQVRVU19PTkNP",
            "TlRST0wQHxIZChVFRkVBVFVSRVNTVEFUVVNfTk9SVU4QICqhAgoORU1vdmVT",
            "dGF0ZVR5cGUSEgoORU1PVkVTVEFURV9NSU4QABITCg9FTU9WRVNUQVRFX1dB",
            "TEsQARISCg5FTU9WRVNUQVRFX1JVThACEhUKEUVNT1ZFU1RBVEVfU1BSSU5U",
            "EAMSFgoSRU1PVkVTVEFURV9CVVJST1dTEAQSEwoPRU1PVkVTVEFURV9KVU1Q",
            "EAUSGQoVRU1PVkVTVEFURV9NT1ZFRUZGRUNUEAYSEgoORU1PVkVTVEFURV9G",
            "TFkQBxIbChdFTU9WRVNUQVRFX01PVklOR19TS0lMTBAIEhgKFEVNT1ZFU1RB",
            "VEVfTElOS19KVU1QEAkSFAoQRU1PVkVTVEFURV9DTElNQhAKEhIKDkVNT1ZF",
            "U1RBVEVfTUFYEAsqaQoXRVBsYXllclZlaGljbGVTdGF0ZVR5cGUSGQoVRVBM",
            "QVlFUl9WRUhJQ0xFX0VOVEVSEAASGQoVRVBMQVlFUl9WRUhJQ0xFX0xFQVZF",
            "EAESGAoURVBMQVlFUl9WRUhJQ0xFX1NUQVkQAiqaAQoRRU1vdmVTdWJTdGF0",
            "ZVR5cGUSGAoURU1PVkVTVUJTVEFURV9OT1JNQUwQABIaChZFTU9WRVNVQlNU",
            "QVRFX0JBQ0tXQVJEEAESHAoYRU1PVkVTVUJTVEFURV9MT0NLVEFSR0VUEAIS",
            "GgoWRU1PVkVTVUJTVEFURV9DVVJWRUVORBADEhUKEUVNT1ZFU1VCU1RBVEVf",
            "TUFYEAQqpQUKEkVTY2VuZUVudHJ5Q2ZnVHlwZRIYChRFU0NFTkVfRU5UUllU",
            "WVBFX01JThAAEhwKGEVTQ0VORV9FTlRSWVRZUEVfUEFSVE5FUhABEhgKFEVT",
            "Q0VORV9FTlRSWVRZUEVfTlBDEAoSIAocRVNDRU5FX0VOVFJZVFlQRV9SRVBB",
            "SVJfSVRFTRAUEiAKHEVTQ0VORV9FTlRSWVRZUEVfTk9STUFMX0lURU0QHhIh",
            "Ch1FU0NFTkVfRU5UUllUWVBFX0NPTExFQ1RfSVRFTRAoEh0KGUVTQ0VORV9F",
            "TlRSWVRZUEVfQk9YX0lURU0QMhIjCh9FU0NFTkVfRU5UUllUWVBFX05PUk1B",
            "TF9NT05TVEVSEDwSJAogRVNDRU5FX0VOVFJZVFlQRV9QQVJUTkVSX01PTlNU",
            "RVIQPRIjCh9FU0NFTkVfRU5UUllUWVBFX0VMSVRFU19NT05TVEVSEEYSIQod",
            "RVNDRU5FX0VOVFJZVFlQRV9CT1NTX01PTlNURVIQUBIhCh1FU0NFTkVfRU5U",
            "UllUWVBFX0JPU1NfQU5DSUVOVBBREiMKH0VTQ0VORV9FTlRSWVRZUEVfRlVS",
            "TklUVVJFX0lURU0QWhIgChxFU0NFTkVfRU5UUllUWVBFX0JBVFRMRV9JVEVN",
            "EGQSHQoZRVNDRU5FX0VOVFJZVFlQRV9UT1lfSVRFTRBuEhkKFEVTQ0VORV9F",
            "TlRSWVRZUEVfTUFYEMgBEh0KGEVTQ0VORV9FTlRSWVRZUEVfVkVISUNMRRDg",
            "CBIeChlFU0NFTkVfRU5UUllUWVBFX01BUEFDVE9SEOoIEh4KGUVTQ0VORV9F",
            "TlRSWVRZUEVfRFJPUElURU0Q9AgSIQocRVNDRU5FX0VOVFJZVFlQRV9JTlRF",
            "UkFDVElPThD+CCpFCgpCb3hOcGNUeXBlEhEKDUJPWE5QQ19VTkxPQ0sQABIR",
            "Cg1CT1hOUENfTE9DS18xEAESEQoNQk9YTlBDX0xPQ0tfMhACKogBChBFRmln",
            "aHRTdGF0dXNUeXBlEhQKEEVGSUdIVFNUQVRVU19NSU4QABIWChJFRklHSFRT",
            "VEFUVVNfRklHSFQQARIVChFFRklHSFRTVEFUVVNfRlJFRRACEhkKFUVGSUdI",
            "VFNUQVRVU19GSUdIVEFDVBADEhQKEEVGSUdIVFNUQVRVU19NQVgQBCpkCg9F",
            "RmlnaHRTd29yZFR5cGUSEwoPRUZJR0hUU1dPUkRfTUlOEAASEwoPRUZJR0hU",
            "U1dPUkRfT0ZGEAESEgoORUZJR0hUU1dPUkRfT04QAhITCg9FRklHSFRTV09S",
            "RF9NQVgQAypvChVFQXV0b0NvbWJhdFN0YXR1c1R5cGUSGQoVRUFVVE9DT01C",
            "QVRTVEFUVVNfTUlOEAASHwobRUFVVE9DT01CQVRTVEFUVVNfU0VNSV9BVVRP",
            "EAESGgoWRUFVVE9DT01CQVRTVEFUVVNfQVVUTxACKpgBChJFSWRsZVN1YlN0",
            "YXR1c1R5cGUSFgoSRUlETEVTVUJTVEFUVVNfTUlOEAASFwoTRUlETEVTVUJT",
            "VEFUVVNfSURMRRABEhYKEkVJRExFU1VCU1RBVFVTX1NJVBACEhYKEkVJRExF",
            "U1VCU1RBVFVTX0xBWRADEiEKHUVJRExFU1VCU1RBVFVTX1dFQVBPTl9FUVVJ",
            "UEVEEAQqhQEKEEVBbmdlclN0YXR1c1R5cGUSFAoQRUFOR0VSU1RBVFVTX01J",
            "ThAAEhcKE0VBTkdFUlNUQVRVU19OT1JNQUwQARIVChFFQU5HRVJTVEFUVVNf",
            "RlVSWRACEhUKEUVBTkdFUlNUQVRVU19XRUFLEAMSFAoQRUFOR0VSU1RBVFVT",
            "X01BWBAEKrIBChNFV2VhcG9uSW50ZXJhY3RUeXBlEhcKE0VXRUFQT05JTlRF",
            "UkFDVF9NSU4QABIYChRFV0VBUE9OSU5URVJBQ1RfUElDSxABEhcKE0VXRUFQ",
            "T05JTlRFUkFDVF9VU0UQAhIaChZFV0VBUE9OSU5URVJBQ1RfQkVQSUNLEGUS",
            "GQoVRVdFQVBPTklOVEVSQUNUX0JFVVNFEGYSGAoTRVdFQVBPTklOVEVSQUNU",
            "X01BWBDIASpzChJFQmFycmllclN0YXR1c1R5cGUSFgoSRUJBUlJJRVJTVEFU",
            "VVNfTUlOEAASFQoRRUJBUlJJRVJTVEFUVVNfT04QARIWChJFQkFSUklFUlNU",
            "QVRVU19PRkYQAhIWChJFQkFSUklFUlNUQVRVU19NQVgQAyqSAwoJR29NYXBU",
            "eXBlEg4KCkdPTUFQX05VTEwQABITCg9HT01BUF9FWElUUE9JTlQQAhISCg5H",
            "T01BUF9LSUNLVVNFUhADEg8KC0dPTUFQX1FVRVNUEAUSEAoMR09NQVBfR09D",
            "SVRZEAcSEAoMR09NQVBfUkVMSVZFEAgSDAoIR09NQVBfR00QChIPCgtHT01B",
            "UF9XT1JMRBAQEhEKDUdPTUFQX01BUExJU1QQERIPCgtHT01BUF9MT0dJThAS",
            "EhAKDEdPTUFQX1JFUEFJUhATEhcKE0dPTUFQX0RBSUxZQUNUSVZJVFkQFBIW",
            "ChJHT01BUF9BQ1RJVkVEQVRJTkcQFRIVChFHT01BUF9JTlRFUkFDVElPThAW",
            "Eg4KCkdPTUFQX1dYS0oQFxITCg9HT01BUF9DT1BZU0NFTkUQGBIbChdHT01B",
            "UF9GSUdIVE1PVkVUT01BU1RFUhAZEhMKD0dPTUFQX05QQ0ZPTExPVxAaEhIK",
            "DkdPTUFQX0VESVRURUFNEBsSDwoLR09NQVBfTUFUQ0gQHCpaCgxNYXBCbG9j",
            "a1R5cGUSFgoSTUFQX0JMT0NLX1RZUEVfTUlOEAASGAoUTUFQX0JMT0NLX1RZ",
            "UEVfUVVFU1QQARIYChRNQVBfQkxPQ0tfVFlQRV9TVEFHRRACKpYBCg1NYXBC",
            "bG9ja1NoYXBlEhkKFU1BUF9CTE9DS19TSEFQRV9ST1VORBAAEhoKFk1BUF9C",
            "TE9DS19TSEFQRV9TUVVBUkUQARIbChdNQVBfQkxPQ0tfU0hBUEVfUE9MWUdP",
            "ThACEhgKFE1BUF9CTE9DS19TSEFQRV9BUkVBEAMSFwoTTUFQX0JMT0NLX1NI",
            "QVBFX01BWBAEKpADChJOcGNQcml2YXRlRGF0YVR5cGUSHQoZTlBDX1BSSVZB",
            "VEVfREFUQV9UWVBFX01JThAAEiQKIE5QQ19QUklWQVRFX0RBVEFfVFlQRV9J",
            "RExFQUNUSU9OEAESKAokTlBDX1BSSVZBVEVfREFUQV9UWVBFX0lETEVFWFBS",
            "RVNTSU9OEAISJAogTlBDX1BSSVZBVEVfREFUQV9UWVBFX1RBTEtBQ1RJT04Q",
            "AxIoCiROUENfUFJJVkFURV9EQVRBX1RZUEVfVEFMS0VYUFJFU1NJT04QBBIp",
            "CiVOUENfUFJJVkFURV9EQVRBX1RZUEVfREVGQVVMVFRBTEtURVhUEAUSKAok",
            "TlBDX1BSSVZBVEVfREFUQV9UWVBFX0hFQURCVUJCTEVURVhUEAYSIQodTlBD",
            "X1BSSVZBVEVfREFUQV9UWVBFX05QQ05BTUUQBxIkCiBOUENfUFJJVkFURV9E",
            "QVRBX1RZUEVfUkVQQUlSU1RBUhAIEh0KGU5QQ19QUklWQVRFX0RBVEFfVFlQ",
            "RV9NQVgQCSqBAQoLRUZvbGxvd1R5cGUSEwoPRUZPTExPV1RZUEVfTUlOEAAS",
            "FAoQRUZPTExPV1RZUEVfSEFORBABEhUKEUVGT0xMT1dUWVBFX0JSRUFLEAUS",
            "GwoXRUZPTExPV1RZUEVfVFdJTlNBQ1RJT04QBhITCg9FRk9MTE9XVFlQRV9N",
            "QVgQByp9CgtFWm9uZVN0YXR1cxITCg9FWk9ORVNUQVRVU19NSU4QABIUChBF",
            "Wk9ORVNUQVRVU19GUkVFEAESFAoQRVpPTkVTVEFUVVNfQlVTWRACEhgKFEVa",
            "T05FU1RBVFVTX1ZFUllCVVNZEAMSEwoPRVpPTkVTVEFUVVNfTUFYEAQqYAoK",
            "RVpvbmVTdGF0ZRISCg5FWk9ORVNUQVRFX01JThAAEhMKD0VaT05FU1RBVEVf",
            "RlVMTBABEhUKEUVaT05FU1RBVEVfTk9GVUxMEAISEgoORVpPTkVTVEFURV9N",
            "QVgQAyqiAQoVRVdvcmtTaG9wT3JuYW1lbnRUeXBlEh8KG0VXT1JLU0hPUF9P",
            "Uk5BTUVOVF9UWVBFX01JThAAEiAKHEVXT1JLU0hPUF9PUk5BTUVOVF9UWVBF",
            "X1dBTEwQARIhCh1FV09SS1NIT1BfT1JOQU1FTlRfVFlQRV9GTE9PUhACEiMK",
            "H0VXT1JLU0hPUF9PUk5BTUVOVF9UWVBFX0NFSUxJTkcQAyo/Cg5FV2FsbFN0",
            "YXRlVHlwZRIVChFFV0FMTFNUQVRFX05PUk1BTBAAEhYKEkVXQUxMU1RBVEVf",
            "REVTVFJPWRABKkQKDkVCbHVlcHJpbnRUeXBlEhkKFUVCTFVFUFJJTlRUWVBF",
            "X1NZU1RFTRAAEhcKE0VCTFVFUFJJTlRUWVBFX1VTRVIQASpfChJFUHJvZml0",
            "UmVjZWl2ZVR5cGUSFwoTRVBST0ZJVF9SRUNFSVZFX0FMTBAAEhYKEkVQUk9G",
            "SVRfUkVDRUlWRV9JRBABEhgKFEVQUk9GSVRfUkVDRUlWRV9USU1FEAIqxQEK",
            "CVNjZW5lVHlwZRISCg5TQ0VORV9UWVBFX01JThAAEhUKEVNDRU5FX1RZUEVf",
            "UFVCTElDEAESFQoRU0NFTkVfVFlQRV9EU0NFTkUQAhIYChRTQ0VORV9UWVBF",
            "X0xPQkJZUkFJRBAFEhcKE1NDRU5FX1RZUEVfV1hLSlJBSUQQBhISCg5TQ0VO",
            "RV9UWVBFX01BWBAKEhUKD1NDRU5FX1RZUEVfQ09QWRCgjQYSGAoSU0NFTkVf",
            "VFlQRV9NSVNTSU9OEKGNBiqBAQoPRVJlcGFpck9ialN0YXRlEhMKD1NUQVRF",
            "X0RJU0FQUEVBUhAAEh4KGlNUQVRFX0FQUEVBUkVEX05PX1JFU0VBUkNIEAES",
            "FQoRU1RBVEVfSVRFTV9FTk9VR0gQAhISCg5TVEFURV9SRVBBSVJFRBADEg4K",
            "ClNUQVRFX0RPTkUQBCquAQoKRVF1ZXN0RmxhZxISCg5RVUVTVF9GTEFHX01J",
            "ThAAEhMKD1FVRVNUX0ZMQUdfR1JBWRABEhUKEVFVRVNUX0ZMQUdfWUVMTE9X",
            "EAISFQoRUVVFU1RfRkxBR19FTkVSR1kQAxIaChZRVUVTVF9GTEFHX05PUk1B",
            "TF9TVEFSEAQSGQoVUVVFU1RfRkxBR19TSElORV9TVEFSEAUSEgoOUVVFU1Rf",
            "RkxBR19NQVgQBipVCg5BY3Rpb25Qcmlvcml0eRIVChFBQ1RJT05fUFJJT1JJ",
            "VFlfMRAAEhUKEUFDVElPTl9QUklPUklUWV8yEAESFQoRQUNUSU9OX1BSSU9S",
            "SVRZXzMQAiqUAQoRRVJhaWRDb3B5U2NoZWR1bGUSFgoSRUNPUFlfU0NIRURV",
            "TEVfTUlOEAASGAoURUNPUFlfU0NIRURVTEVfUVVFU1QQARIXChNFQ09QWV9T",
            "Q0hFRFVMRV9CT1NTEAISGwoXRUNPUFlfU0NIRURVTEVfQ09NUExFVEUQAxIX",
            "ChNFQ09QWV9TQ0hFRFVMRV9NQVhOEAQqWgoIRUJveFR5cGUSEAoMRUJPWFRZ",
            "UEVfTUlOEAASEwoPRUJveFR5cGVfTk9STUFMEAESEQoNRUJPWFRZUEVfQlVG",
            "RhACEhQKEEVCT1hUWVBFX01PTlNURVIQAypeCgdDRF9UWVBFEhEKDUNEX1RZ",
            "UEVfU0tJTEwQABIQCgxDRF9UWVBFX0lURU0QARIWChJDRF9UWVBFX1NLSUxM",
            "REVMQVkQAhIWChJDRF9UWVBFX0RPREdFU0tJTEwQBCqnAQoRRU5wY1Zpc2li",
            "bGVTdGF0dXMSGgoWTlBDX1ZJU0lCTEVfU1RBVFVTX01JThAAEh0KGU5QQ19W",
            "SVNJQkxFX1NUQVRVU19QVUJMSUMQARIbChdOUENfVklTSUJMRV9TVEFUVVNf",
            "VEVBTRACEh4KGk5QQ19WSVNJQkxFX1NUQVRVU19QUklWQVRFEAMSGgoWTlBD",
            "X1ZJU0lCTEVfU1RBVFVTX01BWBAEKosBChJFV1hLSlN0YWdlU2NoZWR1bGUS",
            "GwoXRVdYS0pTVEFHRVNDSEVEVUxFX0lOSVQQABIbChdFV1hLSlNUQUdFU0NI",
            "RURVTEVfT1BFThABEh8KG0VXWEtKU1RBR0VTQ0hFRFVMRV9DT01QTEVURRAD",
            "EhoKFkVXWEtKU1RBR0VTQ0hFRFVMRV9FTkQQBCrHAQoQRVVzZXJDb3VudGVy",
            "VHlwZRIiCh5FVVNFUkNPVU5URVJUWVBFX0xPVFRFUllfTk9TU1IQABIgChxF",
            "VVNFUkNPVU5URVJUWVBFX0xPVFRFUllfQUxMEAESIwoeRVVTRVJDT1VOVEVS",
            "VFlQRV9FUVVJUF9QT1NfTUlOEJBOEiQKHkVVU0VSQ09VTlRFUlRZUEVfRVFV",
            "SVBfUE9TX01BWBCfnAESIgocRVVTRVJDT1VOVEVSVFlQRV9TS0lMTF9MRVZF",
            "TBCgnAEqugcKC0VDb25maWdUeXBlEhMKD0NPTkZJR1RZUEVfTk9ORRAAEhUK",
            "EUNPTkZJR1RZUEVfQUlMRUFGEAESFwoTQ09ORklHVFlQRV9ST0xFREFUQRAC",
            "EhkKFUNPTkZJR1RZUEVfT0JKRUNUQVRUUhADEhsKF0NPTkZJR1RZUEVfRklH",
            "SFRBVFRSQ0ZHEAQSGAoUQ09ORklHVFlQRV9CQVRUTEVDRkcQBRITCg9DT05G",
            "SUdUWVBFX01JU0MQBhITCg9DT05GSUdUWVBFX0lURU0QBxIUChBDT05GSUdU",
            "WVBFX1NLSUxMEAgSFQoRQ09ORklHVFlQRV9CVUZGRVIQCRISCg5DT05GSUdU",
            "WVBFX05QQxAKEhYKEkNPTkZJR1RZUEVfUEFSVE5FUhALEhgKFENPTkZJR1RZ",
            "UEVfVVNFUkxFVkVMEAwSFAoQQ09ORklHVFlQRV9TQ0VORRANEhQKEENPTkZJ",
            "R1RZUEVfUVVFU1QQDhIVChFDT05GSUdUWVBFX1JFV0FSRBAPEhgKFENPTkZJ",
            "R1RZUEVfQU5JTUFUSU9OEBASEwoPQ09ORklHVFlQRV9NRU5VEBESGQoVQ09O",
            "RklHVFlQRV9TS0lMTExFVkVMEBMSGQoVQ09ORklHVFlQRV9NT1ZFQUNUSU9O",
            "EBUSFgoSQ09ORklHVFlQRV9MT1RURVJZEBcSGAoUQ09ORklHVFlQRV9TQ0VO",
            "RUlURU0QGBIfChtDT05GSUdUWVBFX0lURU1FUVVJT1VQR1JBREUQGRIeChpD",
            "T05GSUdUWVBFX1dYS0pTQ0VORUNPTkZJRxAaEhYKEkNPTkZJR1RZUEVfQ09M",
            "TEVHRRAbEhwKGENPTkZJR1RZUEVfREFJTFlBQ1RJVklUWRAcEhwKGENPTkZJ",
            "R1RZUEVfQ0xVQkNIQUxMRU5HRRAdEhkKFUNPTkZJR1RZUEVfRU5UUllFVkVO",
            "VBAeEhUKEUNPTkZJR1RZUEVfU1lTTVNHEB8SGQoVQ09ORklHVFlQRV9GQVZP",
            "UklMSVRZECASGQoVQ09ORklHVFlQRV9BQ0NFU1NJVEVNECESGwoXQ09ORklH",
            "VFlQRV9BQ1RJVkVEQVRJTkcQIhIfChtDT05GSUdUWVBFX0VOVFJZUEVSRk9S",
            "TUFOQ0UQIxIaChZDT05GSUdUWVBFX1NDRU5FQ09ORklHECQSGQoVQ09ORklH",
            "VFlQRV9PQkpFQ1REQVRBECUSFgoSQ09ORklHVFlQRV9OQVZNRVNIECYSEwoO",
            "Q09ORklHVFlQRV9NQVgQgAgqqgEKEUVPYmplY3REZWZpbmVUeXBlEh4KGkVP",
            "QkpFQ1RERUZJTkVfVFlQRV9VTktOT1dOEAASHQoZRU9CSkVDVERFRklORV9U",
            "WVBFX09CSkVDVBABEhoKFkVPQkpFQ1RERUZJTkVfVFlQRV9OUEMQAhIdChlF",
            "T0JKRUNUREVGSU5FX1RZUEVfU1RBVElDEAMSGwoXRU9CSkVDVERFRklORV9U",
            "WVBFX1VTRVIQBCpgCgpFTW9kZWxUeXBlEhIKDkVNT0RFTFRZUEVfTUlOEAAS",
            "FgoSRU1PREVMVFlQRV9DQVBTVUxFEAESEgoORU1PREVMVFlQRV9CT1gQAhIS",
            "Cg5FTU9ERUxUWVBFX01BWBADQgdaBS47Q21kYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Cmd.ProtoAttrReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Cmd.EUserDataType), typeof(global::Cmd.EGender), typeof(global::Cmd.EMoneyType), typeof(global::Cmd.ECreatureStatus), typeof(global::Cmd.EFeaturesStatusType), typeof(global::Cmd.EMoveStateType), typeof(global::Cmd.EPlayerVehicleStateType), typeof(global::Cmd.EMoveSubStateType), typeof(global::Cmd.ESceneEntryCfgType), typeof(global::Cmd.BoxNpcType), typeof(global::Cmd.EFightStatusType), typeof(global::Cmd.EFightSwordType), typeof(global::Cmd.EAutoCombatStatusType), typeof(global::Cmd.EIdleSubStatusType), typeof(global::Cmd.EAngerStatusType), typeof(global::Cmd.EWeaponInteractType), typeof(global::Cmd.EBarrierStatusType), typeof(global::Cmd.GoMapType), typeof(global::Cmd.MapBlockType), typeof(global::Cmd.MapBlockShape), typeof(global::Cmd.NpcPrivateDataType), typeof(global::Cmd.EFollowType), typeof(global::Cmd.EZoneStatus), typeof(global::Cmd.EZoneState), typeof(global::Cmd.EWorkShopOrnamentType), typeof(global::Cmd.EWallStateType), typeof(global::Cmd.EBlueprintType), typeof(global::Cmd.EProfitReceiveType), typeof(global::Cmd.SceneType), typeof(global::Cmd.ERepairObjState), typeof(global::Cmd.EQuestFlag), typeof(global::Cmd.ActionPriority), typeof(global::Cmd.ERaidCopySchedule), typeof(global::Cmd.EBoxType), typeof(global::Cmd.CD_TYPE), typeof(global::Cmd.ENpcVisibleStatus), typeof(global::Cmd.EWXKJStageSchedule), typeof(global::Cmd.EUserCounterType), typeof(global::Cmd.EConfigType), typeof(global::Cmd.EObjectDefineType), typeof(global::Cmd.EModelType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ScenePos), global::Cmd.ScenePos.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SceneScale), global::Cmd.SceneScale.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SnapShotDataPB), global::Cmd.SnapShotDataPB.Parser, new[]{ "Id", "Baselv", "Partnerid", "Portrait", "Name", "Isopen", "Deletetime", "Pd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.Param), global::Cmd.Param.Parser, new[]{ "Key", "Value", "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.PinchPeople), global::Cmd.PinchPeople.Parser, new[]{ "Bodyweight", "Bodyheight", "Bodybreast", "Bodycolor", "Eyebrow", "Browcolor", "Eyepupil", "Pupilcolorleft", "Pupilcolorright", "Eyeshadow", "Eyeshadowcolor", "Eyeshape", "Faceshape", "Ear", "Facetattoo", "Facetattoocolor", "Hairmain", "Hairside", "Ahoge", "Haircolor", "Cloth", "Pupilla", "Blusher", "Blushercolor", "Defaultfashion", "Avatarpreset", "Vhair", "Vhairmajorcolor", "Vhairsecondcolor", "Vahoge", "Vfaceshape", "Veyebrow", "Veyeshape", "Veyepupil", "Vblush", "Vbodyweight", "Vbodybust", "Vskincolor", "Vpupilsize", "Vtatto", "Vdyeingcolor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.AvatarOrnament), global::Cmd.AvatarOrnament.Parser, new[]{ "Type", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.PersonalityData), global::Cmd.PersonalityData.Parser, new[]{ "Pinch", "Characteristics", "Avatarornaments" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.TemplateValue), global::Cmd.TemplateValue.Parser, new[]{ "ValueInt", "ValueString", "ValueBool", "ValueTable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MapBlock), global::Cmd.MapBlock.Parser, new[]{ "Id", "Type", "Shape", "Pos", "Range", "Width", "Length" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ZoneInfo), global::Cmd.ZoneInfo.Parser, new[]{ "Zoneid", "Maxbaselv", "Status", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UserData), global::Cmd.UserData.Parser, new[]{ "Type", "Value", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.EntryData), global::Cmd.EntryData.Parser, new[]{ "Type", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ItemEntryData), global::Cmd.ItemEntryData.Parser, new[]{ "Type", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UserAttr), global::Cmd.UserAttr.Parser, new[]{ "Type", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.WorkShopFurniture), global::Cmd.WorkShopFurniture.Parser, new[]{ "Furnitureid", "Pos", "Dir", "Subfurniturelist", "Roomids", "Guid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SubFurniture), global::Cmd.SubFurniture.Parser, new[]{ "Furnitureid", "Pos", "Dir", "Parentguid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.WorkShopOrnament), global::Cmd.WorkShopOrnament.Parser, new[]{ "Type", "Ornamentid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.WorkShopRoomOrnament), global::Cmd.WorkShopRoomOrnament.Parser, new[]{ "Roomid", "Roomornament", "Furniturelist", "Blueprintid", "Hasinitblueprint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.WorkShopRoomBaseInfo), global::Cmd.WorkShopRoomBaseInfo.Parser, new[]{ "Roomid", "Blueprintid", "Hasinitblueprint", "Roomornament" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.WorkShopProtoType), global::Cmd.WorkShopProtoType.Parser, new[]{ "Id", "Ornamentlist", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.WorkShopRoomData), global::Cmd.WorkShopRoomData.Parser, new[]{ "Roomid", "Roomlv", "Referencepos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.WorkShopWallEdit), global::Cmd.WorkShopWallEdit.Parser, new[]{ "WallList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.WorkShopRoomHeightEdit), global::Cmd.WorkShopRoomHeightEdit.Parser, new[]{ "Roomheightlist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.WorkShopRoomHeightData), global::Cmd.WorkShopRoomHeightData.Parser, new[]{ "Roomid", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.WorkShopRoomWallData), global::Cmd.WorkShopRoomWallData.Parser, new[]{ "WallPos", "State", "Roomidlist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.WorkShopBlueprintData), global::Cmd.WorkShopBlueprintData.Parser, new[]{ "Type", "Blueprintid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.WorkShopProfitPartnerData), global::Cmd.WorkShopProfitPartnerData.Parser, new[]{ "Profitid", "Profitstatelist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.WorkShopProfitRepairData), global::Cmd.WorkShopProfitRepairData.Parser, new[]{ "Profitid", "Lastcalctime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.WorkShopProfitState), global::Cmd.WorkShopProfitState.Parser, new[]{ "Isreceive", "Calctime", "Process" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MoveStateData), global::Cmd.MoveStateData.Parser, new[]{ "Actionid", "Actionspeed", "Speed", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.VehicleData), global::Cmd.VehicleData.Parser, new[]{ "Guid", "State", "Curpos", "Rotate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.JumpData), global::Cmd.JumpData.Parser, new[]{ "ZSpeed", "Index", "Segment", "Timepassed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.FallData), global::Cmd.FallData.Parser, new[]{ "Targetpos", "Rotate", "Flag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MoveTarget), global::Cmd.MoveTarget.Parser, new[]{ "Charid", "Movepos", "Dir", "Moveid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MoveData), global::Cmd.MoveData.Parser, new[]{ "Effectid", "TimeAxis", "Movetargets", "Hitindex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ShareDamageTarget), global::Cmd.ShareDamageTarget.Parser, new[]{ "Charid", "Value", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.DamageTarget), global::Cmd.DamageTarget.Parser, new[]{ "Charid", "Value", "Type", "Sharetargets", "Movepos", "Dir", "Hittype", "Forcepower", "Damagedir", "Elementweak", "Iscrit", "Breaklevel", "Moveid", "Imbalance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.DamageData), global::Cmd.DamageData.Parser, new[]{ "Effectid", "TimeAxis", "Damagetargets", "Hitindex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MoveEffectData), global::Cmd.MoveEffectData.Parser, new[]{ "Targetpos", "Rotate", "Skillid", "Mainskillid", "Movedata", "Damagedata", "Flag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.CDTimeItem), global::Cmd.CDTimeItem.Parser, new[]{ "Id", "Time", "Type", "Recharge" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MapNpcVisibleStatusData), global::Cmd.MapNpcVisibleStatusData.Parser, new[]{ "Npcid", "Npcstatus", "Npclogicstatus", "Npcvisiblestatus", "Alias", "Guids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.NpcPrivateData), global::Cmd.NpcPrivateData.Parser, new[]{ "Data", "DataStr", "Type", "Talkcontent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MapNpcPrivateData), global::Cmd.MapNpcPrivateData.Parser, new[]{ "Npcid", "Data", "Alias", "Guids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.CollegeGiftData), global::Cmd.CollegeGiftData.Parser, new[]{ "Giftid", "Collegegifts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.CollegeGift), global::Cmd.CollegeGift.Parser, new[]{ "Gaintime", "Isreceived", "Isactive" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  用户数据类型
  /// </summary>
  public enum EUserDataType {
    [pbr::OriginalName("EUSERDATATYPE_MIN")] Min = 0,
    /// <summary>
    ///  地图id,表Map.xlsx列ID
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_MAPID")] Mapid = 1,
    /// <summary>
    ///  等级,表UserLevel.xlsx列Level
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_ROLELEVEL")] Rolelevel = 6,
    /// <summary>
    ///  经验
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_ROLEEXP")] Roleexp = 8,
    /// <summary>
    ///  上线时间
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_ONLINETIME")] Onlinetime = 15,
    /// <summary>
    ///  下线时间
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_OFFLINETIME")] Offlinetime = 16,
    /// <summary>
    ///  防沉迷时间
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_ADDICT")] Addict = 17,
    /// <summary>
    ///  自动战斗状态（0:手动，1:半自动，2:自动）
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_AUTOCOMBAT")] Autocombat = 18,
    /// <summary>
    ///  状态
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_STATUS")] Status = 42,
    /// <summary>
    ///  头像
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_PORTRAIT")] Portrait = 45,
    /// <summary>
    ///  帧率,unused
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_FRAME")] Frame = 46,
    /// <summary>
    ///  副本id
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_RAIDID")] Raidid = 48,
    /// <summary>
    ///  创建时间
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_CREATETIME")] Createtime = 51,
    /// <summary>
    ///  跟随角色id
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_FOLLOWID")] Followid = 53,
    /// <summary>
    ///  unused
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_HANDID")] Handid = 54,
    /// <summary>
    ///  unused
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_FRIENDSHIP")] Friendship = 56,
    /// <summary>
    ///  unused
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_MUSIC_CURID")] MusicCurid = 57,
    /// <summary>
    ///  unused
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_MUSIC_START")] MusicStart = 58,
    /// <summary>
    ///  unused
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_MUSIC_DEMAND")] MusicDemand = 59,
    /// <summary>
    ///  unused
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_MUSIC_DEMAND1")] MusicDemand1 = 60,
    /// <summary>
    ///  禁言时间
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_GAGTIME")] Gagtime = 61,
    /// <summary>
    ///  封号时间
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_NOLOGINTIME")] Nologintime = 62,
    /// <summary>
    ///  玩家昵称
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_NAME")] Name = 64,
    /// <summary>
    ///  unused
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_CUR_TITLE")] CurTitle = 68,
    /// <summary>
    ///  防沉迷时间
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_ADDICTTIPSTIME")] Addicttipstime = 73,
    /// <summary>
    ///  npc交互数据
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_NPC_INTERACTION")] NpcInteraction = 80,
    /// <summary>
    /// 装备的武器id
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_EQUIPED_WEAPON")] EquipedWeapon = 125,
    /// <summary>
    /// 战斗状态
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_FIGHTSTATUS")] Fightstatus = 129,
    /// <summary>
    /// 当前战斗锁定ID
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_CUR_LOCKID")] CurLockid = 130,
    /// <summary>
    /// 装备ID列表-仅仅npc或者怪物用到
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_EQUIP_IDS")] EquipIds = 131,
    /// <summary>
    /// 阵营ID
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_CAMP_ID")] CampId = 132,
    /// <summary>
    /// 战斗ID
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_COMBAT_ID")] CombatId = 133,
    /// <summary>
    /// 今日约会次数
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_TODAY_ACTIVE_DATING_COUNT")] TodayActiveDatingCount = 137,
    /// <summary>
    ///  约会选中同伴
    /// </summary>
    [pbr::OriginalName("EUSERDATATYPE_ACTIVE_DATING_CHOOSE_PARTNER")] ActiveDatingChoosePartner = 138,
    [pbr::OriginalName("EUSERDATATYPE_MAX")] Max = 256,
  }

  /// <summary>
  ///  性别
  /// </summary>
  public enum EGender {
    [pbr::OriginalName("EGENDER_MIN")] Min = 0,
    /// <summary>
    ///  男性
    /// </summary>
    [pbr::OriginalName("EGENDER_MALE")] Male = 1,
    /// <summary>
    ///  女性
    /// </summary>
    [pbr::OriginalName("EGENDER_FEMALE")] Female = 2,
    [pbr::OriginalName("EGENDER_MAX")] Max = 3,
  }

  /// <summary>
  ///  货币类型，仅包含部分特殊货币类型的定义
  /// </summary>
  public enum EMoneyType {
    [pbr::OriginalName("EMONEYTYPE_MIN")] Min = 0,
    /// <summary>
    ///  金币
    /// </summary>
    [pbr::OriginalName("EMONEYTYPE_GOLD")] Gold = 40000001,
    /// <summary>
    ///  钻石
    /// </summary>
    [pbr::OriginalName("EMONEYTYPE_DIAMOND")] Diamond = 40000002,
    /// <summary>
    ///  副本学分
    /// </summary>
    [pbr::OriginalName("EMONEYTYPE_COPY_MONEY")] CopyMoney = 40000003,
    /// <summary>
    ///  装备经验池
    /// </summary>
    [pbr::OriginalName("EMONEYTYPE_EQUIP_EXP")] EquipExp = 40000105,
    /// <summary>
    /// 玩家经验池
    /// </summary>
    [pbr::OriginalName("EMONEYTYPE_FIGHTER_EXP_POOL")] FighterExpPool = 40000106,
    /// <summary>
    ///  高于此id的货币不同步给前端,仅后端使用   
    /// </summary>
    [pbr::OriginalName("EMONEYTYPE_MAX_SEND")] MaxSend = 41000000,
    /// <summary>
    ///  充值人民币额
    /// </summary>
    [pbr::OriginalName("EMONEYTYPE_CHARGE")] Charge = 41000001,
    /// <summary>
    ///  活跃度
    /// </summary>
    [pbr::OriginalName("EMONEYTYPE_DAILYACTIVITY")] Dailyactivity = 40100001,
  }

  /// <summary>
  ///  NPC状态
  /// </summary>
  public enum ECreatureStatus {
    [pbr::OriginalName("ECREATURESTATUS_MIN")] Min = 0,
    /// <summary>
    /// 活着
    /// </summary>
    [pbr::OriginalName("ECREATURESTATUS_LIVE")] Live = 1,
    /// <summary>
    /// 死亡
    /// </summary>
    [pbr::OriginalName("ECREATURESTATUS_DEAD")] Dead = 3,
    /// <summary>
    /// ECREATURESTATUS_REMOVE    = 4;  //abandoned
    /// </summary>
    [pbr::OriginalName("ECREATURESTATUS_CLEAR")] Clear = 6,
    /// <summary>
    /// 复活
    /// </summary>
    [pbr::OriginalName("ECREATURESTATUS_RELIVE")] Relive = 7,
    /// <summary>
    /// ECREATURESTATUS_LEAVE     = 8;  //abandoned
    /// </summary>
    [pbr::OriginalName("ECREATURESTATUS_INRELIVE")] Inrelive = 9,
    [pbr::OriginalName("ECREATURESTATUS_MAX")] Max = 10,
  }

  /// <summary>
  ///  特性状态
  /// </summary>
  public enum EFeaturesStatusType {
    [pbr::OriginalName("EFEATURESSTATUS_MIN")] EfeaturesstatusMin = 0,
    /// <summary>
    ///  不可选中 0:可选中，1:不可选中
    /// </summary>
    [pbr::OriginalName("EFEATURESSTATUS_NOSELECT")] EfeaturesstatusNoselect = 1,
    /// <summary>
    ///  选中时高亮 0:选中默认效果，1:选中高亮
    /// </summary>
    [pbr::OriginalName("EFEATURESSTATUS_SELECTLIGHT")] EfeaturesstatusSelectlight = 7,
    /// <summary>
    ///  被选中和受到攻击时，不显示名称 0:显示，1:不显示
    /// </summary>
    [pbr::OriginalName("EFEATURESSTATUS_UNSHOWNAME")] EfeaturesstatusUnshowname = 8,
    /// <summary>
    ///  被选中和受到攻击时，不显示血条 0:显示，1:不显示
    /// </summary>
    [pbr::OriginalName("EFEATURESSTATUS_UNSHOWHP")] EfeaturesstatusUnshowhp = 9,
    /// <summary>
    ///  被选中和受到攻击时，不显示等级 0:显示，1:不显示
    /// </summary>
    [pbr::OriginalName("EFEATURESSTATUS_UNSHOWLEVEL")] EfeaturesstatusUnshowlevel = 10,
    /// <summary>
    ///  被选中和受到攻击时，不播放伤害飘字 0:显示，1:不显示
    /// </summary>
    [pbr::OriginalName("EFEATURESSTATUS_UNSHOWMSG")] EfeaturesstatusUnshowmsg = 11,
    /// <summary>
    ///  被选中时不显示头像 0:显示，1:不显示
    /// </summary>
    [pbr::OriginalName("EFEATURESSTATUS_UNSHOWAVATAR")] EfeaturesstatusUnshowavatar = 14,
    /// <summary>
    ///  靠近显示NPC
    /// </summary>
    [pbr::OriginalName("EFEATURESSTATUS_CLOSETODISPLAYNPC")] EfeaturesstatusClosetodisplaynpc = 17,
    /// <summary>
    ///  是否挡弹道 0:不挡弹道，1:挡弹道
    /// </summary>
    [pbr::OriginalName("EFEATURESSTATUS_BLOCKMISSILE")] EfeaturesstatusBlockmissile = 18,
    /// <summary>
    ///  访问时不转向 0:转向，1:不转向
    /// </summary>
    [pbr::OriginalName("EFEATURESSTATUS_NPCNOTTURN")] EfeaturesstatusNpcnotturn = 19,
    /// <summary>
    ///  访问时不播放保底招手动作 0:播放，1:不播放
    /// </summary>
    [pbr::OriginalName("EFEATURESSTATUS_NPCNOTWAVE")] EfeaturesstatusNpcnotwave = 20,
    /// <summary>
    ///  任务对话中不播放默认说话动作 0:播放，1:不播放
    /// </summary>
    [pbr::OriginalName("EFEATURESSTATUS_NPCNOTTALK")] EfeaturesstatusNpcnottalk = 21,
    /// <summary>
    ///  NPC不转头 0:转头，1:不转头
    /// </summary>
    [pbr::OriginalName("EFEATURESSTATUS_NPCNOTTURNHEAD")] EfeaturesstatusNpcnotturnhead = 22,
    /// <summary>
    ///  NPC不播放头顶气泡文字 0:播放，1:不播放
    /// </summary>
    [pbr::OriginalName("EFEATURESSTATUS_NPCNOTPLAYBUBBLES")] EfeaturesstatusNpcnotplaybubbles = 23,
    /// <summary>
    ///  靠近后触发特殊行为
    /// </summary>
    [pbr::OriginalName("EFEATURESSTATUS_CLOSETOSPECIALACTION")] EfeaturesstatusClosetospecialaction = 25,
    /// <summary>
    /// 可访问特性  0：不可访问，1：可访问
    /// </summary>
    [pbr::OriginalName("EFEATURESSTATUS_VISIT")] EfeaturesstatusVisit = 30,
    /// <summary>
    /// 只受大招的控制动作0：no，1：yes
    /// </summary>
    [pbr::OriginalName("EFEATURESSTATUS_ONCONTROL")] EfeaturesstatusOncontrol = 31,
    /// <summary>
    /// 不可跑步特性  0：可跑步，1：不可跑步
    /// </summary>
    [pbr::OriginalName("EFEATURESSTATUS_NORUN")] EfeaturesstatusNorun = 32,
  }

  /// <summary>
  ///  移动方式
  /// </summary>
  public enum EMoveStateType {
    [pbr::OriginalName("EMOVESTATE_MIN")] EmovestateMin = 0,
    /// <summary>
    /// 走
    /// </summary>
    [pbr::OriginalName("EMOVESTATE_WALK")] EmovestateWalk = 1,
    /// <summary>
    /// 跑
    /// </summary>
    [pbr::OriginalName("EMOVESTATE_RUN")] EmovestateRun = 2,
    /// <summary>
    /// 冲刺
    /// </summary>
    [pbr::OriginalName("EMOVESTATE_SPRINT")] EmovestateSprint = 3,
    /// <summary>
    /// 钻地
    /// </summary>
    [pbr::OriginalName("EMOVESTATE_BURROWS")] EmovestateBurrows = 4,
    /// <summary>
    /// 跳
    /// </summary>
    [pbr::OriginalName("EMOVESTATE_JUMP")] EmovestateJump = 5,
    /// <summary>
    /// 技能位移
    /// </summary>
    [pbr::OriginalName("EMOVESTATE_MOVEEFFECT")] EmovestateMoveeffect = 6,
    /// <summary>
    /// 飞行
    /// </summary>
    [pbr::OriginalName("EMOVESTATE_FLY")] EmovestateFly = 7,
    /// <summary>
    /// 移动施法
    /// </summary>
    [pbr::OriginalName("EMOVESTATE_MOVING_SKILL")] EmovestateMovingSkill = 8,
    /// <summary>
    /// offmesh link跳转点
    /// </summary>
    [pbr::OriginalName("EMOVESTATE_LINK_JUMP")] EmovestateLinkJump = 9,
    /// <summary>
    ///  攀爬
    /// </summary>
    [pbr::OriginalName("EMOVESTATE_CLIMB")] EmovestateClimb = 10,
    [pbr::OriginalName("EMOVESTATE_MAX")] EmovestateMax = 11,
  }

  public enum EPlayerVehicleStateType {
    /// <summary>
    /// 玩家进入载具
    /// </summary>
    [pbr::OriginalName("EPLAYER_VEHICLE_ENTER")] EplayerVehicleEnter = 0,
    /// <summary>
    /// 玩家了离开载具
    /// </summary>
    [pbr::OriginalName("EPLAYER_VEHICLE_LEAVE")] EplayerVehicleLeave = 1,
    /// <summary>
    /// 玩家保持在载具上
    /// </summary>
    [pbr::OriginalName("EPLAYER_VEHICLE_STAY")] EplayerVehicleStay = 2,
  }

  /// <summary>
  ///  移动方式子类型
  /// </summary>
  public enum EMoveSubStateType {
    [pbr::OriginalName("EMOVESUBSTATE_NORMAL")] EmovesubstateNormal = 0,
    /// <summary>
    ///  倒退 
    /// </summary>
    [pbr::OriginalName("EMOVESUBSTATE_BACKWARD")] EmovesubstateBackward = 1,
    /// <summary>
    ///  朝向锁定目标移动
    /// </summary>
    [pbr::OriginalName("EMOVESUBSTATE_LOCKTARGET")] EmovesubstateLocktarget = 2,
    /// <summary>
    /// 动画曲线移动停止位置修改
    /// </summary>
    [pbr::OriginalName("EMOVESUBSTATE_CURVEEND")] EmovesubstateCurveend = 3,
    [pbr::OriginalName("EMOVESUBSTATE_MAX")] EmovesubstateMax = 4,
  }

  /// <summary>
  /// 场景对象的配置类型 关联NpcType表
  /// </summary>
  public enum ESceneEntryCfgType {
    [pbr::OriginalName("ESCENE_ENTRYTYPE_MIN")] EsceneEntrytypeMin = 0,
    /// <summary>
    ///  NPC_伙伴
    /// </summary>
    [pbr::OriginalName("ESCENE_ENTRYTYPE_PARTNER")] EsceneEntrytypePartner = 1,
    /// <summary>
    ///  NPC_普通
    /// </summary>
    [pbr::OriginalName("ESCENE_ENTRYTYPE_NPC")] EsceneEntrytypeNpc = 10,
    /// <summary>
    ///  STATUE_修复物
    /// </summary>
    [pbr::OriginalName("ESCENE_ENTRYTYPE_REPAIR_ITEM")] EsceneEntrytypeRepairItem = 20,
    /// <summary>
    ///  STATUE_场景物件
    /// </summary>
    [pbr::OriginalName("ESCENE_ENTRYTYPE_NORMAL_ITEM")] EsceneEntrytypeNormalItem = 30,
    /// <summary>
    ///  STATUE_采集物
    /// </summary>
    [pbr::OriginalName("ESCENE_ENTRYTYPE_COLLECT_ITEM")] EsceneEntrytypeCollectItem = 40,
    /// <summary>
    ///  STATUE_宝箱
    /// </summary>
    [pbr::OriginalName("ESCENE_ENTRYTYPE_BOX_ITEM")] EsceneEntrytypeBoxItem = 50,
    /// <summary>
    ///  NPC_普通魔物
    /// </summary>
    [pbr::OriginalName("ESCENE_ENTRYTYPE_NORMAL_MONSTER")] EsceneEntrytypeNormalMonster = 60,
    /// <summary>
    ///  NPC_伙伴魔物
    /// </summary>
    [pbr::OriginalName("ESCENE_ENTRYTYPE_PARTNER_MONSTER")] EsceneEntrytypePartnerMonster = 61,
    /// <summary>
    ///  NPC_魔物精英
    /// </summary>
    [pbr::OriginalName("ESCENE_ENTRYTYPE_ELITES_MONSTER")] EsceneEntrytypeElitesMonster = 70,
    /// <summary>
    ///  NPC_魔物boss
    /// </summary>
    [pbr::OriginalName("ESCENE_ENTRYTYPE_BOSS_MONSTER")] EsceneEntrytypeBossMonster = 80,
    /// <summary>
    ///  NPC_古神boss
    /// </summary>
    [pbr::OriginalName("ESCENE_ENTRYTYPE_BOSS_ANCIENT")] EsceneEntrytypeBossAncient = 81,
    /// <summary>
    ///  STATUE_家具
    /// </summary>
    [pbr::OriginalName("ESCENE_ENTRYTYPE_FURNITURE_ITEM")] EsceneEntrytypeFurnitureItem = 90,
    /// <summary>
    ///  STATUE_战斗道具
    /// </summary>
    [pbr::OriginalName("ESCENE_ENTRYTYPE_BATTLE_ITEM")] EsceneEntrytypeBattleItem = 100,
    /// <summary>
    ///  STATUE_玩具
    /// </summary>
    [pbr::OriginalName("ESCENE_ENTRYTYPE_TOY_ITEM")] EsceneEntrytypeToyItem = 110,
    /// <summary>
    ///  以下都是服务器自定义的类型
    /// </summary>
    [pbr::OriginalName("ESCENE_ENTRYTYPE_MAX")] EsceneEntrytypeMax = 200,
    /// <summary>
    ///  载具
    /// </summary>
    [pbr::OriginalName("ESCENE_ENTRYTYPE_VEHICLE")] EsceneEntrytypeVehicle = 1120,
    /// <summary>
    ///  地图烘焙对象
    /// </summary>
    [pbr::OriginalName("ESCENE_ENTRYTYPE_MAPACTOR")] EsceneEntrytypeMapactor = 1130,
    /// <summary>
    ///  掉落道具
    /// </summary>
    [pbr::OriginalName("ESCENE_ENTRYTYPE_DROPITEM")] EsceneEntrytypeDropitem = 1140,
    /// <summary>
    ///  交互道具
    /// </summary>
    [pbr::OriginalName("ESCENE_ENTRYTYPE_INTERACTION")] EsceneEntrytypeInteraction = 1150,
  }

  /// <summary>
  /// 宝箱类型,对应表Box.xlsx的BoxType字段
  /// </summary>
  public enum BoxNpcType {
    [pbr::OriginalName("BOXNPC_UNLOCK")] BoxnpcUnlock = 0,
    [pbr::OriginalName("BOXNPC_LOCK_1")] BoxnpcLock1 = 1,
    [pbr::OriginalName("BOXNPC_LOCK_2")] BoxnpcLock2 = 2,
  }

  /// <summary>
  ///  战斗状态
  /// </summary>
  public enum EFightStatusType {
    [pbr::OriginalName("EFIGHTSTATUS_MIN")] EfightstatusMin = 0,
    /// <summary>
    /// 战斗状态
    /// </summary>
    [pbr::OriginalName("EFIGHTSTATUS_FIGHT")] EfightstatusFight = 1,
    /// <summary>
    /// 非战斗状态
    /// </summary>
    [pbr::OriginalName("EFIGHTSTATUS_FREE")] EfightstatusFree = 2,
    /// <summary>
    /// 拔刀状态 已废弃
    /// </summary>
    [pbr::OriginalName("EFIGHTSTATUS_FIGHTACT")] EfightstatusFightact = 3,
    [pbr::OriginalName("EFIGHTSTATUS_MAX")] EfightstatusMax = 4,
  }

  /// <summary>
  /// 拔刀状态
  /// </summary>
  public enum EFightSwordType {
    [pbr::OriginalName("EFIGHTSWORD_MIN")] EfightswordMin = 0,
    /// <summary>
    /// 收刀状态
    /// </summary>
    [pbr::OriginalName("EFIGHTSWORD_OFF")] EfightswordOff = 1,
    /// <summary>
    /// 拔刀状态
    /// </summary>
    [pbr::OriginalName("EFIGHTSWORD_ON")] EfightswordOn = 2,
    [pbr::OriginalName("EFIGHTSWORD_MAX")] EfightswordMax = 3,
  }

  /// <summary>
  ///  自动战斗状态
  /// </summary>
  public enum EAutoCombatStatusType {
    /// <summary>
    ///  手动
    /// </summary>
    [pbr::OriginalName("EAUTOCOMBATSTATUS_MIN")] EautocombatstatusMin = 0,
    /// <summary>
    ///  半自动
    /// </summary>
    [pbr::OriginalName("EAUTOCOMBATSTATUS_SEMI_AUTO")] EautocombatstatusSemiAuto = 1,
    /// <summary>
    ///  自动
    /// </summary>
    [pbr::OriginalName("EAUTOCOMBATSTATUS_AUTO")] EautocombatstatusAuto = 2,
  }

  /// <summary>
  ///  非战斗状态的子状态
  /// </summary>
  public enum EIdleSubStatusType {
    [pbr::OriginalName("EIDLESUBSTATUS_MIN")] EidlesubstatusMin = 0,
    /// <summary>
    ///  Idle状态
    /// </summary>
    [pbr::OriginalName("EIDLESUBSTATUS_IDLE")] EidlesubstatusIdle = 1,
    /// <summary>
    ///  坐下状态
    /// </summary>
    [pbr::OriginalName("EIDLESUBSTATUS_SIT")] EidlesubstatusSit = 2,
    /// <summary>
    ///  躺下状态
    /// </summary>
    [pbr::OriginalName("EIDLESUBSTATUS_LAY")] EidlesubstatusLay = 3,
    /// <summary>
    ///  持武器状态
    /// </summary>
    [pbr::OriginalName("EIDLESUBSTATUS_WEAPON_EQUIPED")] EidlesubstatusWeaponEquiped = 4,
  }

  /// <summary>
  ///  怒气状态
  /// </summary>
  public enum EAngerStatusType {
    [pbr::OriginalName("EANGERSTATUS_MIN")] EangerstatusMin = 0,
    /// <summary>
    /// 普通状态
    /// </summary>
    [pbr::OriginalName("EANGERSTATUS_NORMAL")] EangerstatusNormal = 1,
    /// <summary>
    /// 狂暴状态
    /// </summary>
    [pbr::OriginalName("EANGERSTATUS_FURY")] EangerstatusFury = 2,
    /// <summary>
    /// 虚弱状态
    /// </summary>
    [pbr::OriginalName("EANGERSTATUS_WEAK")] EangerstatusWeak = 3,
    [pbr::OriginalName("EANGERSTATUS_MAX")] EangerstatusMax = 4,
  }

  /// <summary>
  /// 武器交互状态
  /// </summary>
  public enum EWeaponInteractType {
    [pbr::OriginalName("EWEAPONINTERACT_MIN")] EweaponinteractMin = 0,
    /// <summary>
    /// 抱起
    /// </summary>
    [pbr::OriginalName("EWEAPONINTERACT_PICK")] EweaponinteractPick = 1,
    /// <summary>
    /// 使用(例如使用盾)
    /// </summary>
    [pbr::OriginalName("EWEAPONINTERACT_USE")] EweaponinteractUse = 2,
    /// <summary>
    /// 被抱起
    /// </summary>
    [pbr::OriginalName("EWEAPONINTERACT_BEPICK")] EweaponinteractBepick = 101,
    /// <summary>
    /// 被使用(例如盾被使用)
    /// </summary>
    [pbr::OriginalName("EWEAPONINTERACT_BEUSE")] EweaponinteractBeuse = 102,
    [pbr::OriginalName("EWEAPONINTERACT_MAX")] EweaponinteractMax = 200,
  }

  /// <summary>
  /// 护盾状态
  /// </summary>
  public enum EBarrierStatusType {
    [pbr::OriginalName("EBARRIERSTATUS_MIN")] EbarrierstatusMin = 0,
    /// <summary>
    /// 有盾状态
    /// </summary>
    [pbr::OriginalName("EBARRIERSTATUS_ON")] EbarrierstatusOn = 1,
    /// <summary>
    /// 无盾状态
    /// </summary>
    [pbr::OriginalName("EBARRIERSTATUS_OFF")] EbarrierstatusOff = 2,
    [pbr::OriginalName("EBARRIERSTATUS_MAX")] EbarrierstatusMax = 3,
  }

  /// <summary>
  ///  传送类型
  /// </summary>
  public enum GoMapType {
    [pbr::OriginalName("GOMAP_NULL")] GomapNull = 0,
    /// <summary>
    ///  场景传送点
    /// </summary>
    [pbr::OriginalName("GOMAP_EXITPOINT")] GomapExitpoint = 2,
    /// <summary>
    ///  踢除传送
    /// </summary>
    [pbr::OriginalName("GOMAP_KICKUSER")] GomapKickuser = 3,
    /// <summary>
    ///  任务传送
    /// </summary>
    [pbr::OriginalName("GOMAP_QUEST")] GomapQuest = 5,
    /// <summary>
    ///  切换地图
    /// </summary>
    [pbr::OriginalName("GOMAP_GOCITY")] GomapGocity = 7,
    /// <summary>
    ///  复活传送
    /// </summary>
    [pbr::OriginalName("GOMAP_RELIVE")] GomapRelive = 8,
    /// <summary>
    ///  GM指令传送
    /// </summary>
    [pbr::OriginalName("GOMAP_GM")] GomapGm = 10,
    /// <summary>
    ///  世界地图传送
    /// </summary>
    [pbr::OriginalName("GOMAP_WORLD")] GomapWorld = 16,
    /// <summary>
    ///  地图列表传送
    /// </summary>
    [pbr::OriginalName("GOMAP_MAPLIST")] GomapMaplist = 17,
    /// <summary>
    ///  登录
    /// </summary>
    [pbr::OriginalName("GOMAP_LOGIN")] GomapLogin = 18,
    /// <summary>
    ///  修复物传送
    /// </summary>
    [pbr::OriginalName("GOMAP_REPAIR")] GomapRepair = 19,
    /// <summary>
    ///  日常传送
    /// </summary>
    [pbr::OriginalName("GOMAP_DAILYACTIVITY")] GomapDailyactivity = 20,
    /// <summary>
    ///  主动约会
    /// </summary>
    [pbr::OriginalName("GOMAP_ACTIVEDATING")] GomapActivedating = 21,
    /// <summary>
    ///  交互物传送
    /// </summary>
    [pbr::OriginalName("GOMAP_INTERACTION")] GomapInteraction = 22,
    /// <summary>
    ///  妄想空间
    /// </summary>
    [pbr::OriginalName("GOMAP_WXKJ")] GomapWxkj = 23,
    /// <summary>
    ///  原地副本
    /// </summary>
    [pbr::OriginalName("GOMAP_COPYSCENE")] GomapCopyscene = 24,
    /// <summary>
    ///  战斗中跟随
    /// </summary>
    [pbr::OriginalName("GOMAP_FIGHTMOVETOMASTER")] GomapFightmovetomaster = 25,
    /// <summary>
    ///  非战斗npc跟随
    /// </summary>
    [pbr::OriginalName("GOMAP_NPCFOLLOW")] GomapNpcfollow = 26,
    /// <summary>
    ///  编队调整
    /// </summary>
    [pbr::OriginalName("GOMAP_EDITTEAM")] GomapEditteam = 27,
    /// <summary>
    ///  匹配传送
    /// </summary>
    [pbr::OriginalName("GOMAP_MATCH")] GomapMatch = 28,
  }

  /// <summary>
  ///  地图块类型
  /// </summary>
  public enum MapBlockType {
    [pbr::OriginalName("MAP_BLOCK_TYPE_MIN")] Min = 0,
    /// <summary>
    ///  任务地图块
    /// </summary>
    [pbr::OriginalName("MAP_BLOCK_TYPE_QUEST")] Quest = 1,
    /// <summary>
    ///  关卡地图块
    /// </summary>
    [pbr::OriginalName("MAP_BLOCK_TYPE_STAGE")] Stage = 2,
  }

  /// <summary>
  ///  地图块形状
  /// </summary>
  public enum MapBlockShape {
    /// <summary>
    ///  矩形
    /// </summary>
    [pbr::OriginalName("MAP_BLOCK_SHAPE_ROUND")] Round = 0,
    /// <summary>
    ///  圆形
    /// </summary>
    [pbr::OriginalName("MAP_BLOCK_SHAPE_SQUARE")] Square = 1,
    /// <summary>
    ///  多边形
    /// </summary>
    [pbr::OriginalName("MAP_BLOCK_SHAPE_POLYGON")] Polygon = 2,
    /// <summary>
    ///  navgition区域
    /// </summary>
    [pbr::OriginalName("MAP_BLOCK_SHAPE_AREA")] Area = 3,
    [pbr::OriginalName("MAP_BLOCK_SHAPE_MAX")] Max = 4,
  }

  /// <summary>
  ///  npc个人数据类型
  /// </summary>
  public enum NpcPrivateDataType {
    [pbr::OriginalName("NPC_PRIVATE_DATA_TYPE_MIN")] Min = 0,
    /// <summary>
    ///  待机动作
    /// </summary>
    [pbr::OriginalName("NPC_PRIVATE_DATA_TYPE_IDLEACTION")] Idleaction = 1,
    /// <summary>
    ///  待机表情
    /// </summary>
    [pbr::OriginalName("NPC_PRIVATE_DATA_TYPE_IDLEEXPRESSION")] Idleexpression = 2,
    /// <summary>
    ///  任务中默认谈话动作
    /// </summary>
    [pbr::OriginalName("NPC_PRIVATE_DATA_TYPE_TALKACTION")] Talkaction = 3,
    /// <summary>
    ///  任务中默认谈话表情
    /// </summary>
    [pbr::OriginalName("NPC_PRIVATE_DATA_TYPE_TALKEXPRESSION")] Talkexpression = 4,
    /// <summary>
    ///  默认对话文字
    /// </summary>
    [pbr::OriginalName("NPC_PRIVATE_DATA_TYPE_DEFAULTTALKTEXT")] Defaulttalktext = 5,
    /// <summary>
    ///  默认头顶气泡文字
    /// </summary>
    [pbr::OriginalName("NPC_PRIVATE_DATA_TYPE_HEADBUBBLETEXT")] Headbubbletext = 6,
    /// <summary>
    ///  Npc名称
    /// </summary>
    [pbr::OriginalName("NPC_PRIVATE_DATA_TYPE_NPCNAME")] Npcname = 7,
    /// <summary>
    ///  修复物星星数量
    /// </summary>
    [pbr::OriginalName("NPC_PRIVATE_DATA_TYPE_REPAIRSTAR")] Repairstar = 8,
    [pbr::OriginalName("NPC_PRIVATE_DATA_TYPE_MAX")] Max = 9,
  }

  /// <summary>
  ///  unused
  /// </summary>
  public enum EFollowType {
    [pbr::OriginalName("EFOLLOWTYPE_MIN")] Min = 0,
    [pbr::OriginalName("EFOLLOWTYPE_HAND")] Hand = 1,
    [pbr::OriginalName("EFOLLOWTYPE_BREAK")] Break = 5,
    [pbr::OriginalName("EFOLLOWTYPE_TWINSACTION")] Twinsaction = 6,
    [pbr::OriginalName("EFOLLOWTYPE_MAX")] Max = 7,
  }

  /// <summary>
  ///  unused
  /// </summary>
  public enum EZoneStatus {
    [pbr::OriginalName("EZONESTATUS_MIN")] Min = 0,
    [pbr::OriginalName("EZONESTATUS_FREE")] Free = 1,
    [pbr::OriginalName("EZONESTATUS_BUSY")] Busy = 2,
    [pbr::OriginalName("EZONESTATUS_VERYBUSY")] Verybusy = 3,
    [pbr::OriginalName("EZONESTATUS_MAX")] Max = 4,
  }

  /// <summary>
  ///  unused
  /// </summary>
  public enum EZoneState {
    [pbr::OriginalName("EZONESTATE_MIN")] Min = 0,
    [pbr::OriginalName("EZONESTATE_FULL")] Full = 1,
    [pbr::OriginalName("EZONESTATE_NOFULL")] Nofull = 2,
    [pbr::OriginalName("EZONESTATE_MAX")] Max = 3,
  }

  public enum EWorkShopOrnamentType {
    [pbr::OriginalName("EWORKSHOP_ORNAMENT_TYPE_MIN")] Min = 0,
    /// <summary>
    ///  墙纸
    /// </summary>
    [pbr::OriginalName("EWORKSHOP_ORNAMENT_TYPE_WALL")] Wall = 1,
    /// <summary>
    ///  地砖
    /// </summary>
    [pbr::OriginalName("EWORKSHOP_ORNAMENT_TYPE_FLOOR")] Floor = 2,
    /// <summary>
    ///  天花板
    /// </summary>
    [pbr::OriginalName("EWORKSHOP_ORNAMENT_TYPE_CEILING")] Ceiling = 3,
  }

  /// <summary>
  ///  工坊墙状态
  /// </summary>
  public enum EWallStateType {
    /// <summary>
    ///  普通
    /// </summary>
    [pbr::OriginalName("EWALLSTATE_NORMAL")] EwallstateNormal = 0,
    /// <summary>
    ///  拆除
    /// </summary>
    [pbr::OriginalName("EWALLSTATE_DESTROY")] EwallstateDestroy = 1,
  }

  public enum EBlueprintType {
    /// <summary>
    ///  系统蓝图
    /// </summary>
    [pbr::OriginalName("EBLUEPRINTTYPE_SYSTEM")] System = 0,
    /// <summary>
    ///  用户蓝图
    /// </summary>
    [pbr::OriginalName("EBLUEPRINTTYPE_USER")] User = 1,
  }

  /// <summary>
  ///  工房奖励领取
  /// </summary>
  public enum EProfitReceiveType {
    /// <summary>
    ///  全部领取
    /// </summary>
    [pbr::OriginalName("EPROFIT_RECEIVE_ALL")] EprofitReceiveAll = 0,
    /// <summary>
    ///  领取某个id的全部
    /// </summary>
    [pbr::OriginalName("EPROFIT_RECEIVE_ID")] EprofitReceiveId = 1,
    /// <summary>
    ///  领取某个id的某个时间点
    /// </summary>
    [pbr::OriginalName("EPROFIT_RECEIVE_TIME")] EprofitReceiveTime = 2,
  }

  /// <summary>
  /// ---------------------------------------workshop-------------------
  /// 场景类型
  /// </summary>
  public enum SceneType {
    [pbr::OriginalName("SCENE_TYPE_MIN")] Min = 0,
    /// <summary>
    /// 公共场景
    /// </summary>
    [pbr::OriginalName("SCENE_TYPE_PUBLIC")] Public = 1,
    /// <summary>
    /// 副本
    /// </summary>
    [pbr::OriginalName("SCENE_TYPE_DSCENE")] Dscene = 2,
    /// <summary>
    ///  休息室
    /// </summary>
    [pbr::OriginalName("SCENE_TYPE_LOBBYRAID")] Lobbyraid = 5,
    /// <summary>
    ///  妄想空间 
    /// </summary>
    [pbr::OriginalName("SCENE_TYPE_WXKJRAID")] Wxkjraid = 6,
    [pbr::OriginalName("SCENE_TYPE_MAX")] Max = 10,
    /// <summary>
    /// 原地副本
    /// </summary>
    [pbr::OriginalName("SCENE_TYPE_COPY")] Copy = 100000,
    /// <summary>
    ///  主线任务场景, 只能进一个人, 出场景即销毁
    /// </summary>
    [pbr::OriginalName("SCENE_TYPE_MISSION")] Mission = 100001,
  }

  /// <summary>
  ///  修复物状态
  /// </summary>
  public enum ERepairObjState {
    /// <summary>
    ///  未出现
    /// </summary>
    [pbr::OriginalName("STATE_DISAPPEAR")] StateDisappear = 0,
    /// <summary>
    /// 已出现未调查
    /// </summary>
    [pbr::OriginalName("STATE_APPEARED_NO_RESEARCH")] StateAppearedNoResearch = 1,
    /// <summary>
    /// 修复道具满足条件
    /// </summary>
    [pbr::OriginalName("STATE_ITEM_ENOUGH")] StateItemEnough = 2,
    /// <summary>
    /// 已修复
    /// </summary>
    [pbr::OriginalName("STATE_REPAIRED")] StateRepaired = 3,
    /// <summary>
    /// 完成
    /// </summary>
    [pbr::OriginalName("STATE_DONE")] StateDone = 4,
  }

  /// <summary>
  /// 任务头顶状态
  /// </summary>
  public enum EQuestFlag {
    [pbr::OriginalName("QUEST_FLAG_MIN")] QuestFlagMin = 0,
    /// <summary>
    /// 灰色任务
    /// </summary>
    [pbr::OriginalName("QUEST_FLAG_GRAY")] QuestFlagGray = 1,
    /// <summary>
    /// 黄色任务
    /// </summary>
    [pbr::OriginalName("QUEST_FLAG_YELLOW")] QuestFlagYellow = 2,
    /// <summary>
    /// 能量任务
    /// </summary>
    [pbr::OriginalName("QUEST_FLAG_ENERGY")] QuestFlagEnergy = 3,
    /// <summary>
    /// 普通星星
    /// </summary>
    [pbr::OriginalName("QUEST_FLAG_NORMAL_STAR")] QuestFlagNormalStar = 4,
    /// <summary>
    /// 发光星星
    /// </summary>
    [pbr::OriginalName("QUEST_FLAG_SHINE_STAR")] QuestFlagShineStar = 5,
    [pbr::OriginalName("QUEST_FLAG_MAX")] QuestFlagMax = 6,
  }

  /// <summary>
  /// 行为优先级
  /// </summary>
  public enum ActionPriority {
    /// <summary>
    /// move
    /// </summary>
    [pbr::OriginalName("ACTION_PRIORITY_1")] _1 = 0,
    /// <summary>
    /// skill
    /// </summary>
    [pbr::OriginalName("ACTION_PRIORITY_2")] _2 = 1,
    /// <summary>
    /// move effect
    /// </summary>
    [pbr::OriginalName("ACTION_PRIORITY_3")] _3 = 2,
  }

  /// <summary>
  /// 公开课副本进度
  /// </summary>
  public enum ERaidCopySchedule {
    [pbr::OriginalName("ECOPY_SCHEDULE_MIN")] EcopyScheduleMin = 0,
    /// <summary>
    /// 做副本任务
    /// </summary>
    [pbr::OriginalName("ECOPY_SCHEDULE_QUEST")] EcopyScheduleQuest = 1,
    /// <summary>
    /// 副本任务结束 打boss
    /// </summary>
    [pbr::OriginalName("ECOPY_SCHEDULE_BOSS")] EcopyScheduleBoss = 2,
    /// <summary>
    /// 打完boss 准备传送
    /// </summary>
    [pbr::OriginalName("ECOPY_SCHEDULE_COMPLETE")] EcopyScheduleComplete = 3,
    [pbr::OriginalName("ECOPY_SCHEDULE_MAXN")] EcopyScheduleMaxn = 4,
  }

  public enum EBoxType {
    [pbr::OriginalName("EBOXTYPE_MIN")] Min = 0,
    [pbr::OriginalName("EBoxType_NORMAL")] Normal = 1,
    [pbr::OriginalName("EBOXTYPE_BUFF")] Buff = 2,
    [pbr::OriginalName("EBOXTYPE_MONSTER")] Monster = 3,
  }

  /// <summary>
  ///  CD类型
  /// </summary>
  public enum CD_TYPE {
    /// <summary>
    ///  技能cd
    /// </summary>
    [pbr::OriginalName("CD_TYPE_SKILL")] Skill = 0,
    /// <summary>
    ///  物品cd
    /// </summary>
    [pbr::OriginalName("CD_TYPE_ITEM")] Item = 1,
    /// <summary>
    ///  技能延时cd
    /// </summary>
    [pbr::OriginalName("CD_TYPE_SKILLDELAY")] Skilldelay = 2,
    /// <summary>
    /// CD_TYPE_MANA = 3;         // 玛娜cd
    /// </summary>
    [pbr::OriginalName("CD_TYPE_DODGESKILL")] Dodgeskill = 4,
  }

  /// <summary>
  ///  可见性状态
  /// </summary>
  public enum ENpcVisibleStatus {
    [pbr::OriginalName("NPC_VISIBLE_STATUS_MIN")] NpcVisibleStatusMin = 0,
    /// <summary>
    ///  公共可见
    /// </summary>
    [pbr::OriginalName("NPC_VISIBLE_STATUS_PUBLIC")] NpcVisibleStatusPublic = 1,
    /// <summary>
    ///  unused
    /// </summary>
    [pbr::OriginalName("NPC_VISIBLE_STATUS_TEAM")] NpcVisibleStatusTeam = 2,
    /// <summary>
    ///  私人可见
    /// </summary>
    [pbr::OriginalName("NPC_VISIBLE_STATUS_PRIVATE")] NpcVisibleStatusPrivate = 3,
    [pbr::OriginalName("NPC_VISIBLE_STATUS_MAX")] NpcVisibleStatusMax = 4,
  }

  /// <summary>
  ///  妄想空间关卡进度
  /// </summary>
  public enum EWXKJStageSchedule {
    /// <summary>
    ///  关卡默认状态
    /// </summary>
    [pbr::OriginalName("EWXKJSTAGESCHEDULE_INIT")] Init = 0,
    /// <summary>
    ///  妄想空间可以进入
    /// </summary>
    [pbr::OriginalName("EWXKJSTAGESCHEDULE_OPEN")] Open = 1,
    /// <summary>
    ///  任务已完成，开放 
    /// </summary>
    [pbr::OriginalName("EWXKJSTAGESCHEDULE_COMPLETE")] Complete = 3,
    [pbr::OriginalName("EWXKJSTAGESCHEDULE_END")] End = 4,
  }

  /// <summary>
  ///  用户计数器类型
  /// </summary>
  public enum EUserCounterType {
    /// <summary>
    ///  没抽到SSR的次数
    /// </summary>
    [pbr::OriginalName("EUSERCOUNTERTYPE_LOTTERY_NOSSR")] LotteryNossr = 0,
    /// <summary>
    ///  总抽卡次数
    /// </summary>
    [pbr::OriginalName("EUSERCOUNTERTYPE_LOTTERY_ALL")] LotteryAll = 1,
    /// <summary>
    ///  装备部件min
    /// </summary>
    [pbr::OriginalName("EUSERCOUNTERTYPE_EQUIP_POS_MIN")] EquipPosMin = 10000,
    /// <summary>
    ///  装备部件max
    /// </summary>
    [pbr::OriginalName("EUSERCOUNTERTYPE_EQUIP_POS_MAX")] EquipPosMax = 19999,
    /// <summary>
    ///  技能升级
    /// </summary>
    [pbr::OriginalName("EUSERCOUNTERTYPE_SKILL_LEVEL")] SkillLevel = 20000,
  }

  /// <summary>
  ///  配置枚举
  /// </summary>
  public enum EConfigType {
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_NONE")] ConfigtypeNone = 0,
    /// <summary>
    ///  AILeaf
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_AILEAF")] ConfigtypeAileaf = 1,
    /// <summary>
    ///  角色属性
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_ROLEDATA")] ConfigtypeRoledata = 2,
    /// <summary>
    ///  角色属性
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_OBJECTATTR")] ConfigtypeObjectattr = 3,
    /// <summary>
    ///  战斗数值
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_FIGHTATTRCFG")] ConfigtypeFightattrcfg = 4,
    /// <summary>
    ///  战斗表
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_BATTLECFG")] ConfigtypeBattlecfg = 5,
    /// <summary>
    ///  常用配置
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_MISC")] ConfigtypeMisc = 6,
    /// <summary>
    ///  道具配置
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_ITEM")] ConfigtypeItem = 7,
    /// <summary>
    ///  技能配置
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_SKILL")] ConfigtypeSkill = 8,
    /// <summary>
    ///  BUFF配置
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_BUFFER")] ConfigtypeBuffer = 9,
    /// <summary>
    ///  NPC
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_NPC")] ConfigtypeNpc = 10,
    /// <summary>
    ///  同伴
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_PARTNER")] ConfigtypePartner = 11,
    /// <summary>
    ///  玩家等级
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_USERLEVEL")] ConfigtypeUserlevel = 12,
    /// <summary>
    ///  场景
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_SCENE")] ConfigtypeScene = 13,
    /// <summary>
    ///  任务
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_QUEST")] ConfigtypeQuest = 14,
    /// <summary>
    ///  奖励
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_REWARD")] ConfigtypeReward = 15,
    /// <summary>
    ///  动作配置
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_ANIMATION")] ConfigtypeAnimation = 16,
    /// <summary>
    ///  解锁配置
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_MENU")] ConfigtypeMenu = 17,
    /// <summary>
    ///  技能升级
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_SKILLLEVEL")] ConfigtypeSkilllevel = 19,
    /// <summary>
    ///  移动
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_MOVEACTION")] ConfigtypeMoveaction = 21,
    /// <summary>
    ///  抽卡
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_LOTTERY")] ConfigtypeLottery = 23,
    /// <summary>
    ///  场景物件
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_SCENEITEM")] ConfigtypeSceneitem = 24,
    /// <summary>
    ///  装备升级升星
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_ITEMEQUIOUPGRADE")] ConfigtypeItemequioupgrade = 25,
    /// <summary>
    ///  妄想空间
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_WXKJSCENECONFIG")] ConfigtypeWxkjsceneconfig = 26,
    /// <summary>
    ///  学院
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_COLLEGE")] ConfigtypeCollege = 27,
    /// <summary>
    ///  日常活动
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_DAILYACTIVITY")] ConfigtypeDailyactivity = 28,
    /// <summary>
    ///  天团挑战
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_CLUBCHALLENGE")] ConfigtypeClubchallenge = 29,
    /// <summary>
    ///  EntryEvent
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_ENTRYEVENT")] ConfigtypeEntryevent = 30,
    /// <summary>
    ///  系统消息
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_SYSMSG")] ConfigtypeSysmsg = 31,
    /// <summary>
    ///  好感度favorility
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_FAVORILITY")] ConfigtypeFavorility = 32,
    /// <summary>
    ///  获取途径
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_ACCESSITEM")] ConfigtypeAccessitem = 33,
    /// <summary>
    ///  主动约会
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_ACTIVEDATING")] ConfigtypeActivedating = 34,
    /// <summary>
    ///  场景对象演出
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_ENTRYPERFORMANCE")] ConfigtypeEntryperformance = 35,
    /// <summary>
    ///  场景配置
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_SCENECONFIG")] ConfigtypeSceneconfig = 36,
    /// <summary>
    ///  对象属性
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_OBJECTDATA")] ConfigtypeObjectdata = 37,
    /// <summary>
    ///  navmesh
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_NAVMESH")] ConfigtypeNavmesh = 38,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("CONFIGTYPE_MAX")] ConfigtypeMax = 1024,
  }

  /// <summary>
  ///  ObjectType
  /// </summary>
  public enum EObjectDefineType {
    /// <summary>
    ///  未知
    /// </summary>
    [pbr::OriginalName("EOBJECTDEFINE_TYPE_UNKNOWN")] Unknown = 0,
    /// <summary>
    ///  object基类
    /// </summary>
    [pbr::OriginalName("EOBJECTDEFINE_TYPE_OBJECT")] Object = 1,
    /// <summary>
    ///  npc
    /// </summary>
    [pbr::OriginalName("EOBJECTDEFINE_TYPE_NPC")] Npc = 2,
    /// <summary>
    ///  静态物件
    /// </summary>
    [pbr::OriginalName("EOBJECTDEFINE_TYPE_STATIC")] Static = 3,
    /// <summary>
    ///  user
    /// </summary>
    [pbr::OriginalName("EOBJECTDEFINE_TYPE_USER")] User = 4,
  }

  public enum EModelType {
    [pbr::OriginalName("EMODELTYPE_MIN")] Min = 0,
    /// <summary>
    ///  胶囊体
    /// </summary>
    [pbr::OriginalName("EMODELTYPE_CAPSULE")] Capsule = 1,
    /// <summary>
    ///  立方体
    /// </summary>
    [pbr::OriginalName("EMODELTYPE_BOX")] Box = 2,
    [pbr::OriginalName("EMODELTYPE_MAX")] Max = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  场景坐标
  /// </summary>
  public sealed partial class ScenePos : pb::IMessage<ScenePos> {
    private static readonly pb::MessageParser<ScenePos> _parser = new pb::MessageParser<ScenePos>(() => new ScenePos());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScenePos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePos() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePos(ScenePos other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePos Clone() {
      return new ScenePos(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private int z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScenePos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScenePos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Z != 0) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Z != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Z != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScenePos other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Z != 0) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Z = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  缩放
  /// </summary>
  public sealed partial class SceneScale : pb::IMessage<SceneScale> {
    private static readonly pb::MessageParser<SceneScale> _parser = new pb::MessageParser<SceneScale>(() => new SceneScale());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneScale> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneScale() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneScale(SceneScale other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneScale Clone() {
      return new SceneScale(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneScale);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneScale other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneScale other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  快照信息,S->C
  /// </summary>
  public sealed partial class SnapShotDataPB : pb::IMessage<SnapShotDataPB> {
    private static readonly pb::MessageParser<SnapShotDataPB> _parser = new pb::MessageParser<SnapShotDataPB>(() => new SnapShotDataPB());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SnapShotDataPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapShotDataPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapShotDataPB(SnapShotDataPB other) : this() {
      id_ = other.id_;
      baselv_ = other.baselv_;
      partnerid_ = other.partnerid_;
      portrait_ = other.portrait_;
      name_ = other.name_;
      isopen_ = other.isopen_;
      deletetime_ = other.deletetime_;
      Pd = other.pd_ != null ? other.Pd.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapShotDataPB Clone() {
      return new SnapShotDataPB(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    /// <summary>
    ///  角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "baselv" field.</summary>
    public const int BaselvFieldNumber = 2;
    private uint baselv_;
    /// <summary>
    ///  角色等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Baselv {
      get { return baselv_; }
      set {
        baselv_ = value;
      }
    }

    /// <summary>Field number for the "partnerid" field.</summary>
    public const int PartneridFieldNumber = 20;
    private uint partnerid_;
    /// <summary>
    ///  伙伴id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Partnerid {
      get { return partnerid_; }
      set {
        partnerid_ = value;
      }
    }

    /// <summary>Field number for the "portrait" field.</summary>
    public const int PortraitFieldNumber = 21;
    private uint portrait_;
    /// <summary>
    ///  头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Portrait {
      get { return portrait_; }
      set {
        portrait_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 15;
    private string name_ = "";
    /// <summary>
    ///  角色名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isopen" field.</summary>
    public const int IsopenFieldNumber = 17;
    private uint isopen_;
    /// <summary>
    /// uint32 sequence = 16;         // 索引id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Isopen {
      get { return isopen_; }
      set {
        isopen_ = value;
      }
    }

    /// <summary>Field number for the "deletetime" field.</summary>
    public const int DeletetimeFieldNumber = 18;
    private uint deletetime_;
    /// <summary>
    ///  删除时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Deletetime {
      get { return deletetime_; }
      set {
        deletetime_ = value;
      }
    }

    /// <summary>Field number for the "pd" field.</summary>
    public const int PdFieldNumber = 19;
    private global::Cmd.PersonalityData pd_;
    /// <summary>
    ///  捏人数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.PersonalityData Pd {
      get { return pd_; }
      set {
        pd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SnapShotDataPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SnapShotDataPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Baselv != other.Baselv) return false;
      if (Partnerid != other.Partnerid) return false;
      if (Portrait != other.Portrait) return false;
      if (Name != other.Name) return false;
      if (Isopen != other.Isopen) return false;
      if (Deletetime != other.Deletetime) return false;
      if (!object.Equals(Pd, other.Pd)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Baselv != 0) hash ^= Baselv.GetHashCode();
      if (Partnerid != 0) hash ^= Partnerid.GetHashCode();
      if (Portrait != 0) hash ^= Portrait.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Isopen != 0) hash ^= Isopen.GetHashCode();
      if (Deletetime != 0) hash ^= Deletetime.GetHashCode();
      if (pd_ != null) hash ^= Pd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Baselv != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Baselv);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Isopen != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(Isopen);
      }
      if (Deletetime != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(Deletetime);
      }
      if (pd_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Pd);
      }
      if (Partnerid != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Partnerid);
      }
      if (Portrait != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(Portrait);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Baselv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Baselv);
      }
      if (Partnerid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Partnerid);
      }
      if (Portrait != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Portrait);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Isopen != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Isopen);
      }
      if (Deletetime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Deletetime);
      }
      if (pd_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Pd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SnapShotDataPB other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Baselv != 0) {
        Baselv = other.Baselv;
      }
      if (other.Partnerid != 0) {
        Partnerid = other.Partnerid;
      }
      if (other.Portrait != 0) {
        Portrait = other.Portrait;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Isopen != 0) {
        Isopen = other.Isopen;
      }
      if (other.Deletetime != 0) {
        Deletetime = other.Deletetime;
      }
      if (other.pd_ != null) {
        if (pd_ == null) {
          pd_ = new global::Cmd.PersonalityData();
        }
        Pd.MergeFrom(other.Pd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            Baselv = input.ReadUInt32();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 136: {
            Isopen = input.ReadUInt32();
            break;
          }
          case 144: {
            Deletetime = input.ReadUInt32();
            break;
          }
          case 154: {
            if (pd_ == null) {
              pd_ = new global::Cmd.PersonalityData();
            }
            input.ReadMessage(pd_);
            break;
          }
          case 160: {
            Partnerid = input.ReadUInt32();
            break;
          }
          case 168: {
            Portrait = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  lua参数协议,C->S
  /// </summary>
  public sealed partial class Param : pb::IMessage<Param> {
    private static readonly pb::MessageParser<Param> _parser = new pb::MessageParser<Param>(() => new Param());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Param> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Param() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Param(Param other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Param Clone() {
      return new Param(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.Param> _repeated_items_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.Param.Parser);
    private readonly pbc::RepeatedField<global::Cmd.Param> items_ = new pbc::RepeatedField<global::Cmd.Param>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.Param> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Param);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Param other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Param other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
          case 26: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PinchPeople : pb::IMessage<PinchPeople> {
    private static readonly pb::MessageParser<PinchPeople> _parser = new pb::MessageParser<PinchPeople>(() => new PinchPeople());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PinchPeople> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PinchPeople() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PinchPeople(PinchPeople other) : this() {
      bodyweight_ = other.bodyweight_;
      bodyheight_ = other.bodyheight_;
      bodybreast_ = other.bodybreast_;
      bodycolor_ = other.bodycolor_;
      eyebrow_ = other.eyebrow_;
      browcolor_ = other.browcolor_;
      eyepupil_ = other.eyepupil_;
      pupilcolorleft_ = other.pupilcolorleft_;
      pupilcolorright_ = other.pupilcolorright_;
      eyeshadow_ = other.eyeshadow_;
      eyeshadowcolor_ = other.eyeshadowcolor_;
      eyeshape_ = other.eyeshape_;
      faceshape_ = other.faceshape_;
      ear_ = other.ear_;
      facetattoo_ = other.facetattoo_;
      facetattoocolor_ = other.facetattoocolor_;
      hairmain_ = other.hairmain_;
      hairside_ = other.hairside_;
      ahoge_ = other.ahoge_;
      haircolor_ = other.haircolor_;
      cloth_ = other.cloth_;
      pupilla_ = other.pupilla_;
      blusher_ = other.blusher_;
      blushercolor_ = other.blushercolor_;
      defaultfashion_ = other.defaultfashion_;
      avatarpreset_ = other.avatarpreset_;
      vhair_ = other.vhair_;
      vhairmajorcolor_ = other.vhairmajorcolor_;
      vhairsecondcolor_ = other.vhairsecondcolor_;
      vahoge_ = other.vahoge_;
      vfaceshape_ = other.vfaceshape_;
      veyebrow_ = other.veyebrow_;
      veyeshape_ = other.veyeshape_;
      veyepupil_ = other.veyepupil_;
      vblush_ = other.vblush_;
      vbodyweight_ = other.vbodyweight_;
      vbodybust_ = other.vbodybust_;
      vskincolor_ = other.vskincolor_;
      vpupilsize_ = other.vpupilsize_;
      vtatto_ = other.vtatto_;
      vdyeingcolor_ = other.vdyeingcolor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PinchPeople Clone() {
      return new PinchPeople(this);
    }

    /// <summary>Field number for the "bodyweight" field.</summary>
    public const int BodyweightFieldNumber = 1;
    private uint bodyweight_;
    /// <summary>
    ///  旧版捏人数据 弃用 兼容老账号暂不删除
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Bodyweight {
      get { return bodyweight_; }
      set {
        bodyweight_ = value;
      }
    }

    /// <summary>Field number for the "bodyheight" field.</summary>
    public const int BodyheightFieldNumber = 2;
    private uint bodyheight_;
    /// <summary>
    /// 身高,表BodyHeight.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Bodyheight {
      get { return bodyheight_; }
      set {
        bodyheight_ = value;
      }
    }

    /// <summary>Field number for the "bodybreast" field.</summary>
    public const int BodybreastFieldNumber = 3;
    private uint bodybreast_;
    /// <summary>
    /// 胸部大小,表BodyBreast.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Bodybreast {
      get { return bodybreast_; }
      set {
        bodybreast_ = value;
      }
    }

    /// <summary>Field number for the "bodycolor" field.</summary>
    public const int BodycolorFieldNumber = 4;
    private uint bodycolor_;
    /// <summary>
    /// 身体颜色,表Color.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Bodycolor {
      get { return bodycolor_; }
      set {
        bodycolor_ = value;
      }
    }

    /// <summary>Field number for the "eyebrow" field.</summary>
    public const int EyebrowFieldNumber = 5;
    private uint eyebrow_;
    /// <summary>
    /// 眉毛,表EyeBrow.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Eyebrow {
      get { return eyebrow_; }
      set {
        eyebrow_ = value;
      }
    }

    /// <summary>Field number for the "browcolor" field.</summary>
    public const int BrowcolorFieldNumber = 6;
    private uint browcolor_;
    /// <summary>
    /// 眉毛颜色,表Color.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Browcolor {
      get { return browcolor_; }
      set {
        browcolor_ = value;
      }
    }

    /// <summary>Field number for the "eyepupil" field.</summary>
    public const int EyepupilFieldNumber = 7;
    private uint eyepupil_;
    /// <summary>
    /// 瞳孔,表EyePupil.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Eyepupil {
      get { return eyepupil_; }
      set {
        eyepupil_ = value;
      }
    }

    /// <summary>Field number for the "pupilcolorleft" field.</summary>
    public const int PupilcolorleftFieldNumber = 8;
    private uint pupilcolorleft_;
    /// <summary>
    /// 左瞳孔颜色,表Color.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pupilcolorleft {
      get { return pupilcolorleft_; }
      set {
        pupilcolorleft_ = value;
      }
    }

    /// <summary>Field number for the "pupilcolorright" field.</summary>
    public const int PupilcolorrightFieldNumber = 9;
    private uint pupilcolorright_;
    /// <summary>
    /// 右瞳孔颜色,表Color.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pupilcolorright {
      get { return pupilcolorright_; }
      set {
        pupilcolorright_ = value;
      }
    }

    /// <summary>Field number for the "eyeshadow" field.</summary>
    public const int EyeshadowFieldNumber = 10;
    private uint eyeshadow_;
    /// <summary>
    /// 眼影,表EyePupil.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Eyeshadow {
      get { return eyeshadow_; }
      set {
        eyeshadow_ = value;
      }
    }

    /// <summary>Field number for the "eyeshadowcolor" field.</summary>
    public const int EyeshadowcolorFieldNumber = 11;
    private uint eyeshadowcolor_;
    /// <summary>
    /// 眼影颜色,表Color.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Eyeshadowcolor {
      get { return eyeshadowcolor_; }
      set {
        eyeshadowcolor_ = value;
      }
    }

    /// <summary>Field number for the "eyeshape" field.</summary>
    public const int EyeshapeFieldNumber = 12;
    private uint eyeshape_;
    /// <summary>
    /// 眼型,表EyeShape.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Eyeshape {
      get { return eyeshape_; }
      set {
        eyeshape_ = value;
      }
    }

    /// <summary>Field number for the "faceshape" field.</summary>
    public const int FaceshapeFieldNumber = 13;
    private uint faceshape_;
    /// <summary>
    /// 脸型,表FaceShape.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Faceshape {
      get { return faceshape_; }
      set {
        faceshape_ = value;
      }
    }

    /// <summary>Field number for the "ear" field.</summary>
    public const int EarFieldNumber = 14;
    private uint ear_;
    /// <summary>
    /// unused耳朵,表Ear.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ear {
      get { return ear_; }
      set {
        ear_ = value;
      }
    }

    /// <summary>Field number for the "facetattoo" field.</summary>
    public const int FacetattooFieldNumber = 15;
    private uint facetattoo_;
    /// <summary>
    /// 脸纹,表FaceTattoo.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Facetattoo {
      get { return facetattoo_; }
      set {
        facetattoo_ = value;
      }
    }

    /// <summary>Field number for the "facetattoocolor" field.</summary>
    public const int FacetattoocolorFieldNumber = 16;
    private uint facetattoocolor_;
    /// <summary>
    /// unused脸纹颜色,表Color.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Facetattoocolor {
      get { return facetattoocolor_; }
      set {
        facetattoocolor_ = value;
      }
    }

    /// <summary>Field number for the "hairmain" field.</summary>
    public const int HairmainFieldNumber = 17;
    private uint hairmain_;
    /// <summary>
    /// 发型,表HairMain.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hairmain {
      get { return hairmain_; }
      set {
        hairmain_ = value;
      }
    }

    /// <summary>Field number for the "hairside" field.</summary>
    public const int HairsideFieldNumber = 18;
    private uint hairside_;
    /// <summary>
    /// 侧发,表HairSide.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hairside {
      get { return hairside_; }
      set {
        hairside_ = value;
      }
    }

    /// <summary>Field number for the "ahoge" field.</summary>
    public const int AhogeFieldNumber = 19;
    private uint ahoge_;
    /// <summary>
    /// 呆毛,表HairAhoge.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ahoge {
      get { return ahoge_; }
      set {
        ahoge_ = value;
      }
    }

    /// <summary>Field number for the "haircolor" field.</summary>
    public const int HaircolorFieldNumber = 20;
    private uint haircolor_;
    /// <summary>
    /// 头发颜色,表Color.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Haircolor {
      get { return haircolor_; }
      set {
        haircolor_ = value;
      }
    }

    /// <summary>Field number for the "cloth" field.</summary>
    public const int ClothFieldNumber = 21;
    private string cloth_ = "";
    /// <summary>
    /// 衣服
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cloth {
      get { return cloth_; }
      set {
        cloth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pupilla" field.</summary>
    public const int PupillaFieldNumber = 23;
    private uint pupilla_;
    /// <summary>
    ///   uint32 eyelash = 22;         //睫毛,表EyeLash.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pupilla {
      get { return pupilla_; }
      set {
        pupilla_ = value;
      }
    }

    /// <summary>Field number for the "blusher" field.</summary>
    public const int BlusherFieldNumber = 24;
    private uint blusher_;
    /// <summary>
    /// 腮红,表Blush.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Blusher {
      get { return blusher_; }
      set {
        blusher_ = value;
      }
    }

    /// <summary>Field number for the "blushercolor" field.</summary>
    public const int BlushercolorFieldNumber = 25;
    private uint blushercolor_;
    /// <summary>
    /// 腮红颜色,表Color.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Blushercolor {
      get { return blushercolor_; }
      set {
        blushercolor_ = value;
      }
    }

    /// <summary>Field number for the "defaultfashion" field.</summary>
    public const int DefaultfashionFieldNumber = 26;
    private string defaultfashion_ = "";
    /// <summary>
    /// 默认时装,表Color.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Defaultfashion {
      get { return defaultfashion_; }
      set {
        defaultfashion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatarpreset" field.</summary>
    public const int AvatarpresetFieldNumber = 27;
    private uint avatarpreset_;
    /// <summary>
    /// 捏人数据组id(为CJ版本使用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Avatarpreset {
      get { return avatarpreset_; }
      set {
        avatarpreset_ = value;
      }
    }

    /// <summary>Field number for the "vhair" field.</summary>
    public const int VhairFieldNumber = 101;
    private uint vhair_;
    /// <summary>
    ///  新版捏人数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Vhair {
      get { return vhair_; }
      set {
        vhair_ = value;
      }
    }

    /// <summary>Field number for the "vhairmajorcolor" field.</summary>
    public const int VhairmajorcolorFieldNumber = 102;
    private uint vhairmajorcolor_;
    /// <summary>
    /// 主发色,表CharacterPreset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Vhairmajorcolor {
      get { return vhairmajorcolor_; }
      set {
        vhairmajorcolor_ = value;
      }
    }

    /// <summary>Field number for the "vhairsecondcolor" field.</summary>
    public const int VhairsecondcolorFieldNumber = 103;
    private uint vhairsecondcolor_;
    /// <summary>
    /// 第二发色,表CharacterPreset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Vhairsecondcolor {
      get { return vhairsecondcolor_; }
      set {
        vhairsecondcolor_ = value;
      }
    }

    /// <summary>Field number for the "vahoge" field.</summary>
    public const int VahogeFieldNumber = 104;
    private uint vahoge_;
    /// <summary>
    /// 呆毛,表CharacterPreset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Vahoge {
      get { return vahoge_; }
      set {
        vahoge_ = value;
      }
    }

    /// <summary>Field number for the "vfaceshape" field.</summary>
    public const int VfaceshapeFieldNumber = 105;
    private uint vfaceshape_;
    /// <summary>
    /// 脸型,表CharacterPreset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Vfaceshape {
      get { return vfaceshape_; }
      set {
        vfaceshape_ = value;
      }
    }

    /// <summary>Field number for the "veyebrow" field.</summary>
    public const int VeyebrowFieldNumber = 106;
    private uint veyebrow_;
    /// <summary>
    /// 眉,表CharacterPreset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Veyebrow {
      get { return veyebrow_; }
      set {
        veyebrow_ = value;
      }
    }

    /// <summary>Field number for the "veyeshape" field.</summary>
    public const int VeyeshapeFieldNumber = 107;
    private uint veyeshape_;
    /// <summary>
    /// 眼型,表CharacterPreset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Veyeshape {
      get { return veyeshape_; }
      set {
        veyeshape_ = value;
      }
    }

    /// <summary>Field number for the "veyepupil" field.</summary>
    public const int VeyepupilFieldNumber = 108;
    private uint veyepupil_;
    /// <summary>
    /// 瞳孔,表CharacterPreset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Veyepupil {
      get { return veyepupil_; }
      set {
        veyepupil_ = value;
      }
    }

    /// <summary>Field number for the "vblush" field.</summary>
    public const int VblushFieldNumber = 109;
    private uint vblush_;
    /// <summary>
    /// 腮红,表CharacterPreset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Vblush {
      get { return vblush_; }
      set {
        vblush_ = value;
      }
    }

    /// <summary>Field number for the "vbodyweight" field.</summary>
    public const int VbodyweightFieldNumber = 110;
    private uint vbodyweight_;
    /// <summary>
    /// 身材,表CharacterPreset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Vbodyweight {
      get { return vbodyweight_; }
      set {
        vbodyweight_ = value;
      }
    }

    /// <summary>Field number for the "vbodybust" field.</summary>
    public const int VbodybustFieldNumber = 111;
    private uint vbodybust_;
    /// <summary>
    /// 胸围,表CharacterPreset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Vbodybust {
      get { return vbodybust_; }
      set {
        vbodybust_ = value;
      }
    }

    /// <summary>Field number for the "vskincolor" field.</summary>
    public const int VskincolorFieldNumber = 112;
    private uint vskincolor_;
    /// <summary>
    /// 肤色,表CharacterPreset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Vskincolor {
      get { return vskincolor_; }
      set {
        vskincolor_ = value;
      }
    }

    /// <summary>Field number for the "vpupilsize" field.</summary>
    public const int VpupilsizeFieldNumber = 113;
    private uint vpupilsize_;
    /// <summary>
    /// 眼瞳尺寸,表CharacterPreset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Vpupilsize {
      get { return vpupilsize_; }
      set {
        vpupilsize_ = value;
      }
    }

    /// <summary>Field number for the "vtatto" field.</summary>
    public const int VtattoFieldNumber = 114;
    private uint vtatto_;
    /// <summary>
    /// 面纹,表CharacterPreset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Vtatto {
      get { return vtatto_; }
      set {
        vtatto_ = value;
      }
    }

    /// <summary>Field number for the "vdyeingcolor" field.</summary>
    public const int VdyeingcolorFieldNumber = 115;
    private uint vdyeingcolor_;
    /// <summary>
    /// 染色,表CharacterPreset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Vdyeingcolor {
      get { return vdyeingcolor_; }
      set {
        vdyeingcolor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PinchPeople);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PinchPeople other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Bodyweight != other.Bodyweight) return false;
      if (Bodyheight != other.Bodyheight) return false;
      if (Bodybreast != other.Bodybreast) return false;
      if (Bodycolor != other.Bodycolor) return false;
      if (Eyebrow != other.Eyebrow) return false;
      if (Browcolor != other.Browcolor) return false;
      if (Eyepupil != other.Eyepupil) return false;
      if (Pupilcolorleft != other.Pupilcolorleft) return false;
      if (Pupilcolorright != other.Pupilcolorright) return false;
      if (Eyeshadow != other.Eyeshadow) return false;
      if (Eyeshadowcolor != other.Eyeshadowcolor) return false;
      if (Eyeshape != other.Eyeshape) return false;
      if (Faceshape != other.Faceshape) return false;
      if (Ear != other.Ear) return false;
      if (Facetattoo != other.Facetattoo) return false;
      if (Facetattoocolor != other.Facetattoocolor) return false;
      if (Hairmain != other.Hairmain) return false;
      if (Hairside != other.Hairside) return false;
      if (Ahoge != other.Ahoge) return false;
      if (Haircolor != other.Haircolor) return false;
      if (Cloth != other.Cloth) return false;
      if (Pupilla != other.Pupilla) return false;
      if (Blusher != other.Blusher) return false;
      if (Blushercolor != other.Blushercolor) return false;
      if (Defaultfashion != other.Defaultfashion) return false;
      if (Avatarpreset != other.Avatarpreset) return false;
      if (Vhair != other.Vhair) return false;
      if (Vhairmajorcolor != other.Vhairmajorcolor) return false;
      if (Vhairsecondcolor != other.Vhairsecondcolor) return false;
      if (Vahoge != other.Vahoge) return false;
      if (Vfaceshape != other.Vfaceshape) return false;
      if (Veyebrow != other.Veyebrow) return false;
      if (Veyeshape != other.Veyeshape) return false;
      if (Veyepupil != other.Veyepupil) return false;
      if (Vblush != other.Vblush) return false;
      if (Vbodyweight != other.Vbodyweight) return false;
      if (Vbodybust != other.Vbodybust) return false;
      if (Vskincolor != other.Vskincolor) return false;
      if (Vpupilsize != other.Vpupilsize) return false;
      if (Vtatto != other.Vtatto) return false;
      if (Vdyeingcolor != other.Vdyeingcolor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Bodyweight != 0) hash ^= Bodyweight.GetHashCode();
      if (Bodyheight != 0) hash ^= Bodyheight.GetHashCode();
      if (Bodybreast != 0) hash ^= Bodybreast.GetHashCode();
      if (Bodycolor != 0) hash ^= Bodycolor.GetHashCode();
      if (Eyebrow != 0) hash ^= Eyebrow.GetHashCode();
      if (Browcolor != 0) hash ^= Browcolor.GetHashCode();
      if (Eyepupil != 0) hash ^= Eyepupil.GetHashCode();
      if (Pupilcolorleft != 0) hash ^= Pupilcolorleft.GetHashCode();
      if (Pupilcolorright != 0) hash ^= Pupilcolorright.GetHashCode();
      if (Eyeshadow != 0) hash ^= Eyeshadow.GetHashCode();
      if (Eyeshadowcolor != 0) hash ^= Eyeshadowcolor.GetHashCode();
      if (Eyeshape != 0) hash ^= Eyeshape.GetHashCode();
      if (Faceshape != 0) hash ^= Faceshape.GetHashCode();
      if (Ear != 0) hash ^= Ear.GetHashCode();
      if (Facetattoo != 0) hash ^= Facetattoo.GetHashCode();
      if (Facetattoocolor != 0) hash ^= Facetattoocolor.GetHashCode();
      if (Hairmain != 0) hash ^= Hairmain.GetHashCode();
      if (Hairside != 0) hash ^= Hairside.GetHashCode();
      if (Ahoge != 0) hash ^= Ahoge.GetHashCode();
      if (Haircolor != 0) hash ^= Haircolor.GetHashCode();
      if (Cloth.Length != 0) hash ^= Cloth.GetHashCode();
      if (Pupilla != 0) hash ^= Pupilla.GetHashCode();
      if (Blusher != 0) hash ^= Blusher.GetHashCode();
      if (Blushercolor != 0) hash ^= Blushercolor.GetHashCode();
      if (Defaultfashion.Length != 0) hash ^= Defaultfashion.GetHashCode();
      if (Avatarpreset != 0) hash ^= Avatarpreset.GetHashCode();
      if (Vhair != 0) hash ^= Vhair.GetHashCode();
      if (Vhairmajorcolor != 0) hash ^= Vhairmajorcolor.GetHashCode();
      if (Vhairsecondcolor != 0) hash ^= Vhairsecondcolor.GetHashCode();
      if (Vahoge != 0) hash ^= Vahoge.GetHashCode();
      if (Vfaceshape != 0) hash ^= Vfaceshape.GetHashCode();
      if (Veyebrow != 0) hash ^= Veyebrow.GetHashCode();
      if (Veyeshape != 0) hash ^= Veyeshape.GetHashCode();
      if (Veyepupil != 0) hash ^= Veyepupil.GetHashCode();
      if (Vblush != 0) hash ^= Vblush.GetHashCode();
      if (Vbodyweight != 0) hash ^= Vbodyweight.GetHashCode();
      if (Vbodybust != 0) hash ^= Vbodybust.GetHashCode();
      if (Vskincolor != 0) hash ^= Vskincolor.GetHashCode();
      if (Vpupilsize != 0) hash ^= Vpupilsize.GetHashCode();
      if (Vtatto != 0) hash ^= Vtatto.GetHashCode();
      if (Vdyeingcolor != 0) hash ^= Vdyeingcolor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Bodyweight != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Bodyweight);
      }
      if (Bodyheight != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Bodyheight);
      }
      if (Bodybreast != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Bodybreast);
      }
      if (Bodycolor != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Bodycolor);
      }
      if (Eyebrow != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Eyebrow);
      }
      if (Browcolor != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Browcolor);
      }
      if (Eyepupil != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Eyepupil);
      }
      if (Pupilcolorleft != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Pupilcolorleft);
      }
      if (Pupilcolorright != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Pupilcolorright);
      }
      if (Eyeshadow != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Eyeshadow);
      }
      if (Eyeshadowcolor != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Eyeshadowcolor);
      }
      if (Eyeshape != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Eyeshape);
      }
      if (Faceshape != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Faceshape);
      }
      if (Ear != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(Ear);
      }
      if (Facetattoo != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(Facetattoo);
      }
      if (Facetattoocolor != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(Facetattoocolor);
      }
      if (Hairmain != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(Hairmain);
      }
      if (Hairside != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(Hairside);
      }
      if (Ahoge != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(Ahoge);
      }
      if (Haircolor != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Haircolor);
      }
      if (Cloth.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(Cloth);
      }
      if (Pupilla != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(Pupilla);
      }
      if (Blusher != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(Blusher);
      }
      if (Blushercolor != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(Blushercolor);
      }
      if (Defaultfashion.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(Defaultfashion);
      }
      if (Avatarpreset != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(Avatarpreset);
      }
      if (Vhair != 0) {
        output.WriteRawTag(168, 6);
        output.WriteUInt32(Vhair);
      }
      if (Vhairmajorcolor != 0) {
        output.WriteRawTag(176, 6);
        output.WriteUInt32(Vhairmajorcolor);
      }
      if (Vhairsecondcolor != 0) {
        output.WriteRawTag(184, 6);
        output.WriteUInt32(Vhairsecondcolor);
      }
      if (Vahoge != 0) {
        output.WriteRawTag(192, 6);
        output.WriteUInt32(Vahoge);
      }
      if (Vfaceshape != 0) {
        output.WriteRawTag(200, 6);
        output.WriteUInt32(Vfaceshape);
      }
      if (Veyebrow != 0) {
        output.WriteRawTag(208, 6);
        output.WriteUInt32(Veyebrow);
      }
      if (Veyeshape != 0) {
        output.WriteRawTag(216, 6);
        output.WriteUInt32(Veyeshape);
      }
      if (Veyepupil != 0) {
        output.WriteRawTag(224, 6);
        output.WriteUInt32(Veyepupil);
      }
      if (Vblush != 0) {
        output.WriteRawTag(232, 6);
        output.WriteUInt32(Vblush);
      }
      if (Vbodyweight != 0) {
        output.WriteRawTag(240, 6);
        output.WriteUInt32(Vbodyweight);
      }
      if (Vbodybust != 0) {
        output.WriteRawTag(248, 6);
        output.WriteUInt32(Vbodybust);
      }
      if (Vskincolor != 0) {
        output.WriteRawTag(128, 7);
        output.WriteUInt32(Vskincolor);
      }
      if (Vpupilsize != 0) {
        output.WriteRawTag(136, 7);
        output.WriteUInt32(Vpupilsize);
      }
      if (Vtatto != 0) {
        output.WriteRawTag(144, 7);
        output.WriteUInt32(Vtatto);
      }
      if (Vdyeingcolor != 0) {
        output.WriteRawTag(152, 7);
        output.WriteUInt32(Vdyeingcolor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Bodyweight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Bodyweight);
      }
      if (Bodyheight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Bodyheight);
      }
      if (Bodybreast != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Bodybreast);
      }
      if (Bodycolor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Bodycolor);
      }
      if (Eyebrow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Eyebrow);
      }
      if (Browcolor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Browcolor);
      }
      if (Eyepupil != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Eyepupil);
      }
      if (Pupilcolorleft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pupilcolorleft);
      }
      if (Pupilcolorright != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pupilcolorright);
      }
      if (Eyeshadow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Eyeshadow);
      }
      if (Eyeshadowcolor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Eyeshadowcolor);
      }
      if (Eyeshape != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Eyeshape);
      }
      if (Faceshape != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Faceshape);
      }
      if (Ear != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ear);
      }
      if (Facetattoo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Facetattoo);
      }
      if (Facetattoocolor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Facetattoocolor);
      }
      if (Hairmain != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Hairmain);
      }
      if (Hairside != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Hairside);
      }
      if (Ahoge != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ahoge);
      }
      if (Haircolor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Haircolor);
      }
      if (Cloth.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Cloth);
      }
      if (Pupilla != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Pupilla);
      }
      if (Blusher != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Blusher);
      }
      if (Blushercolor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Blushercolor);
      }
      if (Defaultfashion.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Defaultfashion);
      }
      if (Avatarpreset != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Avatarpreset);
      }
      if (Vhair != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Vhair);
      }
      if (Vhairmajorcolor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Vhairmajorcolor);
      }
      if (Vhairsecondcolor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Vhairsecondcolor);
      }
      if (Vahoge != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Vahoge);
      }
      if (Vfaceshape != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Vfaceshape);
      }
      if (Veyebrow != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Veyebrow);
      }
      if (Veyeshape != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Veyeshape);
      }
      if (Veyepupil != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Veyepupil);
      }
      if (Vblush != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Vblush);
      }
      if (Vbodyweight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Vbodyweight);
      }
      if (Vbodybust != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Vbodybust);
      }
      if (Vskincolor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Vskincolor);
      }
      if (Vpupilsize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Vpupilsize);
      }
      if (Vtatto != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Vtatto);
      }
      if (Vdyeingcolor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Vdyeingcolor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PinchPeople other) {
      if (other == null) {
        return;
      }
      if (other.Bodyweight != 0) {
        Bodyweight = other.Bodyweight;
      }
      if (other.Bodyheight != 0) {
        Bodyheight = other.Bodyheight;
      }
      if (other.Bodybreast != 0) {
        Bodybreast = other.Bodybreast;
      }
      if (other.Bodycolor != 0) {
        Bodycolor = other.Bodycolor;
      }
      if (other.Eyebrow != 0) {
        Eyebrow = other.Eyebrow;
      }
      if (other.Browcolor != 0) {
        Browcolor = other.Browcolor;
      }
      if (other.Eyepupil != 0) {
        Eyepupil = other.Eyepupil;
      }
      if (other.Pupilcolorleft != 0) {
        Pupilcolorleft = other.Pupilcolorleft;
      }
      if (other.Pupilcolorright != 0) {
        Pupilcolorright = other.Pupilcolorright;
      }
      if (other.Eyeshadow != 0) {
        Eyeshadow = other.Eyeshadow;
      }
      if (other.Eyeshadowcolor != 0) {
        Eyeshadowcolor = other.Eyeshadowcolor;
      }
      if (other.Eyeshape != 0) {
        Eyeshape = other.Eyeshape;
      }
      if (other.Faceshape != 0) {
        Faceshape = other.Faceshape;
      }
      if (other.Ear != 0) {
        Ear = other.Ear;
      }
      if (other.Facetattoo != 0) {
        Facetattoo = other.Facetattoo;
      }
      if (other.Facetattoocolor != 0) {
        Facetattoocolor = other.Facetattoocolor;
      }
      if (other.Hairmain != 0) {
        Hairmain = other.Hairmain;
      }
      if (other.Hairside != 0) {
        Hairside = other.Hairside;
      }
      if (other.Ahoge != 0) {
        Ahoge = other.Ahoge;
      }
      if (other.Haircolor != 0) {
        Haircolor = other.Haircolor;
      }
      if (other.Cloth.Length != 0) {
        Cloth = other.Cloth;
      }
      if (other.Pupilla != 0) {
        Pupilla = other.Pupilla;
      }
      if (other.Blusher != 0) {
        Blusher = other.Blusher;
      }
      if (other.Blushercolor != 0) {
        Blushercolor = other.Blushercolor;
      }
      if (other.Defaultfashion.Length != 0) {
        Defaultfashion = other.Defaultfashion;
      }
      if (other.Avatarpreset != 0) {
        Avatarpreset = other.Avatarpreset;
      }
      if (other.Vhair != 0) {
        Vhair = other.Vhair;
      }
      if (other.Vhairmajorcolor != 0) {
        Vhairmajorcolor = other.Vhairmajorcolor;
      }
      if (other.Vhairsecondcolor != 0) {
        Vhairsecondcolor = other.Vhairsecondcolor;
      }
      if (other.Vahoge != 0) {
        Vahoge = other.Vahoge;
      }
      if (other.Vfaceshape != 0) {
        Vfaceshape = other.Vfaceshape;
      }
      if (other.Veyebrow != 0) {
        Veyebrow = other.Veyebrow;
      }
      if (other.Veyeshape != 0) {
        Veyeshape = other.Veyeshape;
      }
      if (other.Veyepupil != 0) {
        Veyepupil = other.Veyepupil;
      }
      if (other.Vblush != 0) {
        Vblush = other.Vblush;
      }
      if (other.Vbodyweight != 0) {
        Vbodyweight = other.Vbodyweight;
      }
      if (other.Vbodybust != 0) {
        Vbodybust = other.Vbodybust;
      }
      if (other.Vskincolor != 0) {
        Vskincolor = other.Vskincolor;
      }
      if (other.Vpupilsize != 0) {
        Vpupilsize = other.Vpupilsize;
      }
      if (other.Vtatto != 0) {
        Vtatto = other.Vtatto;
      }
      if (other.Vdyeingcolor != 0) {
        Vdyeingcolor = other.Vdyeingcolor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Bodyweight = input.ReadUInt32();
            break;
          }
          case 16: {
            Bodyheight = input.ReadUInt32();
            break;
          }
          case 24: {
            Bodybreast = input.ReadUInt32();
            break;
          }
          case 32: {
            Bodycolor = input.ReadUInt32();
            break;
          }
          case 40: {
            Eyebrow = input.ReadUInt32();
            break;
          }
          case 48: {
            Browcolor = input.ReadUInt32();
            break;
          }
          case 56: {
            Eyepupil = input.ReadUInt32();
            break;
          }
          case 64: {
            Pupilcolorleft = input.ReadUInt32();
            break;
          }
          case 72: {
            Pupilcolorright = input.ReadUInt32();
            break;
          }
          case 80: {
            Eyeshadow = input.ReadUInt32();
            break;
          }
          case 88: {
            Eyeshadowcolor = input.ReadUInt32();
            break;
          }
          case 96: {
            Eyeshape = input.ReadUInt32();
            break;
          }
          case 104: {
            Faceshape = input.ReadUInt32();
            break;
          }
          case 112: {
            Ear = input.ReadUInt32();
            break;
          }
          case 120: {
            Facetattoo = input.ReadUInt32();
            break;
          }
          case 128: {
            Facetattoocolor = input.ReadUInt32();
            break;
          }
          case 136: {
            Hairmain = input.ReadUInt32();
            break;
          }
          case 144: {
            Hairside = input.ReadUInt32();
            break;
          }
          case 152: {
            Ahoge = input.ReadUInt32();
            break;
          }
          case 160: {
            Haircolor = input.ReadUInt32();
            break;
          }
          case 170: {
            Cloth = input.ReadString();
            break;
          }
          case 184: {
            Pupilla = input.ReadUInt32();
            break;
          }
          case 192: {
            Blusher = input.ReadUInt32();
            break;
          }
          case 200: {
            Blushercolor = input.ReadUInt32();
            break;
          }
          case 210: {
            Defaultfashion = input.ReadString();
            break;
          }
          case 216: {
            Avatarpreset = input.ReadUInt32();
            break;
          }
          case 808: {
            Vhair = input.ReadUInt32();
            break;
          }
          case 816: {
            Vhairmajorcolor = input.ReadUInt32();
            break;
          }
          case 824: {
            Vhairsecondcolor = input.ReadUInt32();
            break;
          }
          case 832: {
            Vahoge = input.ReadUInt32();
            break;
          }
          case 840: {
            Vfaceshape = input.ReadUInt32();
            break;
          }
          case 848: {
            Veyebrow = input.ReadUInt32();
            break;
          }
          case 856: {
            Veyeshape = input.ReadUInt32();
            break;
          }
          case 864: {
            Veyepupil = input.ReadUInt32();
            break;
          }
          case 872: {
            Vblush = input.ReadUInt32();
            break;
          }
          case 880: {
            Vbodyweight = input.ReadUInt32();
            break;
          }
          case 888: {
            Vbodybust = input.ReadUInt32();
            break;
          }
          case 896: {
            Vskincolor = input.ReadUInt32();
            break;
          }
          case 904: {
            Vpupilsize = input.ReadUInt32();
            break;
          }
          case 912: {
            Vtatto = input.ReadUInt32();
            break;
          }
          case 920: {
            Vdyeingcolor = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AvatarOrnament : pb::IMessage<AvatarOrnament> {
    private static readonly pb::MessageParser<AvatarOrnament> _parser = new pb::MessageParser<AvatarOrnament>(() => new AvatarOrnament());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AvatarOrnament> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AvatarOrnament() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AvatarOrnament(AvatarOrnament other) : this() {
      type_ = other.type_;
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AvatarOrnament Clone() {
      return new AvatarOrnament(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///  枚举类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    /// <summary>
    ///  id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AvatarOrnament);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AvatarOrnament other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AvatarOrnament other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  个性数据
  /// </summary>
  public sealed partial class PersonalityData : pb::IMessage<PersonalityData> {
    private static readonly pb::MessageParser<PersonalityData> _parser = new pb::MessageParser<PersonalityData>(() => new PersonalityData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PersonalityData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonalityData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonalityData(PersonalityData other) : this() {
      Pinch = other.pinch_ != null ? other.Pinch.Clone() : null;
      characteristics_ = other.characteristics_;
      avatarornaments_ = other.avatarornaments_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonalityData Clone() {
      return new PersonalityData(this);
    }

    /// <summary>Field number for the "pinch" field.</summary>
    public const int PinchFieldNumber = 1;
    private global::Cmd.PinchPeople pinch_;
    /// <summary>
    ///  捏人数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.PinchPeople Pinch {
      get { return pinch_; }
      set {
        pinch_ = value;
      }
    }

    /// <summary>Field number for the "characteristics" field.</summary>
    public const int CharacteristicsFieldNumber = 2;
    private uint characteristics_;
    /// <summary>
    ///  性格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Characteristics {
      get { return characteristics_; }
      set {
        characteristics_ = value;
      }
    }

    /// <summary>Field number for the "avatarornaments" field.</summary>
    public const int AvatarornamentsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.AvatarOrnament> _repeated_avatarornaments_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.AvatarOrnament.Parser);
    private readonly pbc::RepeatedField<global::Cmd.AvatarOrnament> avatarornaments_ = new pbc::RepeatedField<global::Cmd.AvatarOrnament>();
    /// <summary>
    ///  装扮集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.AvatarOrnament> Avatarornaments {
      get { return avatarornaments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PersonalityData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PersonalityData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pinch, other.Pinch)) return false;
      if (Characteristics != other.Characteristics) return false;
      if(!avatarornaments_.Equals(other.avatarornaments_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pinch_ != null) hash ^= Pinch.GetHashCode();
      if (Characteristics != 0) hash ^= Characteristics.GetHashCode();
      hash ^= avatarornaments_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pinch_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pinch);
      }
      if (Characteristics != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Characteristics);
      }
      avatarornaments_.WriteTo(output, _repeated_avatarornaments_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pinch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pinch);
      }
      if (Characteristics != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Characteristics);
      }
      size += avatarornaments_.CalculateSize(_repeated_avatarornaments_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PersonalityData other) {
      if (other == null) {
        return;
      }
      if (other.pinch_ != null) {
        if (pinch_ == null) {
          pinch_ = new global::Cmd.PinchPeople();
        }
        Pinch.MergeFrom(other.Pinch);
      }
      if (other.Characteristics != 0) {
        Characteristics = other.Characteristics;
      }
      avatarornaments_.Add(other.avatarornaments_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pinch_ == null) {
              pinch_ = new global::Cmd.PinchPeople();
            }
            input.ReadMessage(pinch_);
            break;
          }
          case 16: {
            Characteristics = input.ReadUInt32();
            break;
          }
          case 26: {
            avatarornaments_.AddEntriesFrom(input, _repeated_avatarornaments_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  lua类型模板,S->S
  /// </summary>
  public sealed partial class TemplateValue : pb::IMessage<TemplateValue> {
    private static readonly pb::MessageParser<TemplateValue> _parser = new pb::MessageParser<TemplateValue>(() => new TemplateValue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TemplateValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TemplateValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TemplateValue(TemplateValue other) : this() {
      valueInt_ = other.valueInt_;
      valueString_ = other.valueString_;
      valueBool_ = other.valueBool_;
      valueTable_ = other.valueTable_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TemplateValue Clone() {
      return new TemplateValue(this);
    }

    /// <summary>Field number for the "valueInt" field.</summary>
    public const int ValueIntFieldNumber = 1;
    private int valueInt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ValueInt {
      get { return valueInt_; }
      set {
        valueInt_ = value;
      }
    }

    /// <summary>Field number for the "valueString" field.</summary>
    public const int ValueStringFieldNumber = 2;
    private string valueString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ValueString {
      get { return valueString_; }
      set {
        valueString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "valueBool" field.</summary>
    public const int ValueBoolFieldNumber = 3;
    private bool valueBool_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ValueBool {
      get { return valueBool_; }
      set {
        valueBool_ = value;
      }
    }

    /// <summary>Field number for the "valueTable" field.</summary>
    public const int ValueTableFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Cmd.TemplateValue> _repeated_valueTable_codec
        = pb::FieldCodec.ForMessage(34, global::Cmd.TemplateValue.Parser);
    private readonly pbc::RepeatedField<global::Cmd.TemplateValue> valueTable_ = new pbc::RepeatedField<global::Cmd.TemplateValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.TemplateValue> ValueTable {
      get { return valueTable_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TemplateValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TemplateValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ValueInt != other.ValueInt) return false;
      if (ValueString != other.ValueString) return false;
      if (ValueBool != other.ValueBool) return false;
      if(!valueTable_.Equals(other.valueTable_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ValueInt != 0) hash ^= ValueInt.GetHashCode();
      if (ValueString.Length != 0) hash ^= ValueString.GetHashCode();
      if (ValueBool != false) hash ^= ValueBool.GetHashCode();
      hash ^= valueTable_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ValueInt != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ValueInt);
      }
      if (ValueString.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ValueString);
      }
      if (ValueBool != false) {
        output.WriteRawTag(24);
        output.WriteBool(ValueBool);
      }
      valueTable_.WriteTo(output, _repeated_valueTable_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ValueInt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValueInt);
      }
      if (ValueString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ValueString);
      }
      if (ValueBool != false) {
        size += 1 + 1;
      }
      size += valueTable_.CalculateSize(_repeated_valueTable_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TemplateValue other) {
      if (other == null) {
        return;
      }
      if (other.ValueInt != 0) {
        ValueInt = other.ValueInt;
      }
      if (other.ValueString.Length != 0) {
        ValueString = other.ValueString;
      }
      if (other.ValueBool != false) {
        ValueBool = other.ValueBool;
      }
      valueTable_.Add(other.valueTable_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ValueInt = input.ReadInt32();
            break;
          }
          case 18: {
            ValueString = input.ReadString();
            break;
          }
          case 24: {
            ValueBool = input.ReadBool();
            break;
          }
          case 34: {
            valueTable_.AddEntriesFrom(input, _repeated_valueTable_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  地图块,S->C
  /// </summary>
  public sealed partial class MapBlock : pb::IMessage<MapBlock> {
    private static readonly pb::MessageParser<MapBlock> _parser = new pb::MessageParser<MapBlock>(() => new MapBlock());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapBlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapBlock(MapBlock other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      shape_ = other.shape_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      range_ = other.range_;
      width_ = other.width_;
      length_ = other.length_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapBlock Clone() {
      return new MapBlock(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    /// <summary>
    ///  id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Cmd.MapBlockType type_ = 0;
    /// <summary>
    ///  类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.MapBlockType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 3;
    private global::Cmd.MapBlockShape shape_ = 0;
    /// <summary>
    ///  形状
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.MapBlockShape Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 4;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  中心坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 5;
    private uint range_;
    /// <summary>
    ///  半径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 6;
    private uint width_;
    /// <summary>
    ///  宽度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 7;
    private uint length_;
    /// <summary>
    ///  长度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapBlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (Shape != other.Shape) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Range != other.Range) return false;
      if (Width != other.Width) return false;
      if (Length != other.Length) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Shape != 0) hash ^= Shape.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Range != 0) hash ^= Range.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Length != 0) hash ^= Length.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Shape != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Shape);
      }
      if (pos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pos);
      }
      if (Range != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Range);
      }
      if (Width != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Width);
      }
      if (Length != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Length);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Shape != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Shape);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Range != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Range);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Length);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapBlock other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Shape != 0) {
        Shape = other.Shape;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Range != 0) {
        Range = other.Range;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Length != 0) {
        Length = other.Length;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            type_ = (global::Cmd.MapBlockType) input.ReadEnum();
            break;
          }
          case 24: {
            shape_ = (global::Cmd.MapBlockShape) input.ReadEnum();
            break;
          }
          case 34: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 40: {
            Range = input.ReadUInt32();
            break;
          }
          case 48: {
            Width = input.ReadUInt32();
            break;
          }
          case 56: {
            Length = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  unused
  /// </summary>
  public sealed partial class ZoneInfo : pb::IMessage<ZoneInfo> {
    private static readonly pb::MessageParser<ZoneInfo> _parser = new pb::MessageParser<ZoneInfo>(() => new ZoneInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZoneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZoneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZoneInfo(ZoneInfo other) : this() {
      zoneid_ = other.zoneid_;
      maxbaselv_ = other.maxbaselv_;
      status_ = other.status_;
      state_ = other.state_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZoneInfo Clone() {
      return new ZoneInfo(this);
    }

    /// <summary>Field number for the "zoneid" field.</summary>
    public const int ZoneidFieldNumber = 1;
    private uint zoneid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Zoneid {
      get { return zoneid_; }
      set {
        zoneid_ = value;
      }
    }

    /// <summary>Field number for the "maxbaselv" field.</summary>
    public const int MaxbaselvFieldNumber = 2;
    private uint maxbaselv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Maxbaselv {
      get { return maxbaselv_; }
      set {
        maxbaselv_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Cmd.EZoneStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EZoneStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 4;
    private global::Cmd.EZoneState state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EZoneState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZoneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZoneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Zoneid != other.Zoneid) return false;
      if (Maxbaselv != other.Maxbaselv) return false;
      if (Status != other.Status) return false;
      if (State != other.State) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Zoneid != 0) hash ^= Zoneid.GetHashCode();
      if (Maxbaselv != 0) hash ^= Maxbaselv.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Zoneid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Zoneid);
      }
      if (Maxbaselv != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Maxbaselv);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (State != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Zoneid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Zoneid);
      }
      if (Maxbaselv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Maxbaselv);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZoneInfo other) {
      if (other == null) {
        return;
      }
      if (other.Zoneid != 0) {
        Zoneid = other.Zoneid;
      }
      if (other.Maxbaselv != 0) {
        Maxbaselv = other.Maxbaselv;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.State != 0) {
        State = other.State;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Zoneid = input.ReadUInt32();
            break;
          }
          case 16: {
            Maxbaselv = input.ReadUInt32();
            break;
          }
          case 24: {
            status_ = (global::Cmd.EZoneStatus) input.ReadEnum();
            break;
          }
          case 32: {
            state_ = (global::Cmd.EZoneState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  用户数据,S->C
  /// </summary>
  public sealed partial class UserData : pb::IMessage<UserData> {
    private static readonly pb::MessageParser<UserData> _parser = new pb::MessageParser<UserData>(() => new UserData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserData(UserData other) : this() {
      type_ = other.type_;
      value_ = other.value_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserData Clone() {
      return new UserData(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Cmd.EUserDataType type_ = 0;
    /// <summary>
    ///  数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EUserDataType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private ulong value_;
    /// <summary>
    ///  值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private string data_ = "";
    /// <summary>
    ///  值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Value != 0UL) hash ^= Value.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Value != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Value);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Value != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Value);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserData other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Value != 0UL) {
        Value = other.Value;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Cmd.EUserDataType) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadUInt64();
            break;
          }
          case 26: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  NPC单位的九屏数据,S->C
  /// </summary>
  public sealed partial class EntryData : pb::IMessage<EntryData> {
    private static readonly pb::MessageParser<EntryData> _parser = new pb::MessageParser<EntryData>(() => new EntryData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntryData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntryData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntryData(EntryData other) : this() {
      type_ = other.type_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntryData Clone() {
      return new EntryData(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Cmd.ENineDataType type_ = 0;
    /// <summary>
    ///  数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ENineDataType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private ulong value_;
    /// <summary>
    ///  值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntryData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntryData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Value != 0UL) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Value != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Value != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntryData other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Value != 0UL) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Cmd.ENineDataType) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  ITEM单位的九屏数据,S->C
  /// </summary>
  public sealed partial class ItemEntryData : pb::IMessage<ItemEntryData> {
    private static readonly pb::MessageParser<ItemEntryData> _parser = new pb::MessageParser<ItemEntryData>(() => new ItemEntryData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemEntryData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemEntryData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemEntryData(ItemEntryData other) : this() {
      type_ = other.type_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemEntryData Clone() {
      return new ItemEntryData(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Cmd.EItemNineDataType type_ = 0;
    /// <summary>
    /// 数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EItemNineDataType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private long value_;
    /// <summary>
    ///  值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemEntryData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemEntryData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Value != 0L) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Value != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemEntryData other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Cmd.EItemNineDataType) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  角色属性,S->C
  /// </summary>
  public sealed partial class UserAttr : pb::IMessage<UserAttr> {
    private static readonly pb::MessageParser<UserAttr> _parser = new pb::MessageParser<UserAttr>(() => new UserAttr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserAttr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAttr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAttr(UserAttr other) : this() {
      type_ = other.type_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAttr Clone() {
      return new UserAttr(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///  属性类型 枚举EAttrType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    /// <summary>
    ///  属性值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserAttr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserAttr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserAttr other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  工房家具
  /// </summary>
  public sealed partial class WorkShopFurniture : pb::IMessage<WorkShopFurniture> {
    private static readonly pb::MessageParser<WorkShopFurniture> _parser = new pb::MessageParser<WorkShopFurniture>(() => new WorkShopFurniture());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkShopFurniture> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopFurniture() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopFurniture(WorkShopFurniture other) : this() {
      furnitureid_ = other.furnitureid_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      dir_ = other.dir_;
      subfurniturelist_ = other.subfurniturelist_.Clone();
      roomids_ = other.roomids_.Clone();
      guid_ = other.guid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopFurniture Clone() {
      return new WorkShopFurniture(this);
    }

    /// <summary>Field number for the "furnitureid" field.</summary>
    public const int FurnitureidFieldNumber = 1;
    private uint furnitureid_;
    /// <summary>
    ///  家具id,表Item_Furniture.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Furnitureid {
      get { return furnitureid_; }
      set {
        furnitureid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  家具位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 3;
    private float dir_;
    /// <summary>
    ///  方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "subfurniturelist" field.</summary>
    public const int SubfurniturelistFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Cmd.SubFurniture> _repeated_subfurniturelist_codec
        = pb::FieldCodec.ForMessage(34, global::Cmd.SubFurniture.Parser);
    private readonly pbc::RepeatedField<global::Cmd.SubFurniture> subfurniturelist_ = new pbc::RepeatedField<global::Cmd.SubFurniture>();
    /// <summary>
    ///  家具上的所有摆放物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.SubFurniture> Subfurniturelist {
      get { return subfurniturelist_; }
    }

    /// <summary>Field number for the "roomids" field.</summary>
    public const int RoomidsFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_roomids_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> roomids_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  家具占据的房间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Roomids {
      get { return roomids_; }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 6;
    private ulong guid_;
    /// <summary>
    ///  家具的唯一id,删除场景中家具需要  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkShopFurniture);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkShopFurniture other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Furnitureid != other.Furnitureid) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Dir != other.Dir) return false;
      if(!subfurniturelist_.Equals(other.subfurniturelist_)) return false;
      if(!roomids_.Equals(other.roomids_)) return false;
      if (Guid != other.Guid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Furnitureid != 0) hash ^= Furnitureid.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Dir != 0F) hash ^= Dir.GetHashCode();
      hash ^= subfurniturelist_.GetHashCode();
      hash ^= roomids_.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Furnitureid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Furnitureid);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (Dir != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Dir);
      }
      subfurniturelist_.WriteTo(output, _repeated_subfurniturelist_codec);
      roomids_.WriteTo(output, _repeated_roomids_codec);
      if (Guid != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Guid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Furnitureid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Furnitureid);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Dir != 0F) {
        size += 1 + 4;
      }
      size += subfurniturelist_.CalculateSize(_repeated_subfurniturelist_codec);
      size += roomids_.CalculateSize(_repeated_roomids_codec);
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkShopFurniture other) {
      if (other == null) {
        return;
      }
      if (other.Furnitureid != 0) {
        Furnitureid = other.Furnitureid;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Dir != 0F) {
        Dir = other.Dir;
      }
      subfurniturelist_.Add(other.subfurniturelist_);
      roomids_.Add(other.roomids_);
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Furnitureid = input.ReadUInt32();
            break;
          }
          case 18: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 29: {
            Dir = input.ReadFloat();
            break;
          }
          case 34: {
            subfurniturelist_.AddEntriesFrom(input, _repeated_subfurniturelist_codec);
            break;
          }
          case 42:
          case 40: {
            roomids_.AddEntriesFrom(input, _repeated_roomids_codec);
            break;
          }
          case 48: {
            Guid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  家具上的摆放物
  /// </summary>
  public sealed partial class SubFurniture : pb::IMessage<SubFurniture> {
    private static readonly pb::MessageParser<SubFurniture> _parser = new pb::MessageParser<SubFurniture>(() => new SubFurniture());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubFurniture> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubFurniture() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubFurniture(SubFurniture other) : this() {
      furnitureid_ = other.furnitureid_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      dir_ = other.dir_;
      parentguid_ = other.parentguid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubFurniture Clone() {
      return new SubFurniture(this);
    }

    /// <summary>Field number for the "furnitureid" field.</summary>
    public const int FurnitureidFieldNumber = 1;
    private ulong furnitureid_;
    /// <summary>
    ///  家具id,表Item_Furnture.xlsx列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Furnitureid {
      get { return furnitureid_; }
      set {
        furnitureid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  摆放物相对于家具网格上的位置位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 3;
    private float dir_;
    /// <summary>
    ///  摆放物朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "parentguid" field.</summary>
    public const int ParentguidFieldNumber = 4;
    private ulong parentguid_;
    /// <summary>
    ///  唯一id(在场景内直接创建子家具时需要确定父家具的唯一)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Parentguid {
      get { return parentguid_; }
      set {
        parentguid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubFurniture);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubFurniture other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Furnitureid != other.Furnitureid) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Dir != other.Dir) return false;
      if (Parentguid != other.Parentguid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Furnitureid != 0UL) hash ^= Furnitureid.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Dir != 0F) hash ^= Dir.GetHashCode();
      if (Parentguid != 0UL) hash ^= Parentguid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Furnitureid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Furnitureid);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (Dir != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Dir);
      }
      if (Parentguid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Parentguid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Furnitureid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Furnitureid);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Dir != 0F) {
        size += 1 + 4;
      }
      if (Parentguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Parentguid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubFurniture other) {
      if (other == null) {
        return;
      }
      if (other.Furnitureid != 0UL) {
        Furnitureid = other.Furnitureid;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Dir != 0F) {
        Dir = other.Dir;
      }
      if (other.Parentguid != 0UL) {
        Parentguid = other.Parentguid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Furnitureid = input.ReadUInt64();
            break;
          }
          case 18: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 29: {
            Dir = input.ReadFloat();
            break;
          }
          case 32: {
            Parentguid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  工房装饰物（地砖，墙纸等）
  /// </summary>
  public sealed partial class WorkShopOrnament : pb::IMessage<WorkShopOrnament> {
    private static readonly pb::MessageParser<WorkShopOrnament> _parser = new pb::MessageParser<WorkShopOrnament>(() => new WorkShopOrnament());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkShopOrnament> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopOrnament() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopOrnament(WorkShopOrnament other) : this() {
      type_ = other.type_;
      ornamentid_ = other.ornamentid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopOrnament Clone() {
      return new WorkShopOrnament(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Cmd.EWorkShopOrnamentType type_ = 0;
    /// <summary>
    ///  装饰物类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EWorkShopOrnamentType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "ornamentid" field.</summary>
    public const int OrnamentidFieldNumber = 2;
    private uint ornamentid_;
    /// <summary>
    ///  装饰编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ornamentid {
      get { return ornamentid_; }
      set {
        ornamentid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkShopOrnament);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkShopOrnament other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Ornamentid != other.Ornamentid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Ornamentid != 0) hash ^= Ornamentid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Ornamentid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Ornamentid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Ornamentid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ornamentid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkShopOrnament other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Ornamentid != 0) {
        Ornamentid = other.Ornamentid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Cmd.EWorkShopOrnamentType) input.ReadEnum();
            break;
          }
          case 16: {
            Ornamentid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  一个房间的装饰
  /// </summary>
  public sealed partial class WorkShopRoomOrnament : pb::IMessage<WorkShopRoomOrnament> {
    private static readonly pb::MessageParser<WorkShopRoomOrnament> _parser = new pb::MessageParser<WorkShopRoomOrnament>(() => new WorkShopRoomOrnament());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkShopRoomOrnament> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopRoomOrnament() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopRoomOrnament(WorkShopRoomOrnament other) : this() {
      roomid_ = other.roomid_;
      roomornament_ = other.roomornament_.Clone();
      furniturelist_ = other.furniturelist_.Clone();
      blueprintid_ = other.blueprintid_;
      hasinitblueprint_ = other.hasinitblueprint_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopRoomOrnament Clone() {
      return new WorkShopRoomOrnament(this);
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 1;
    private uint roomid_;
    /// <summary>
    ///  房间id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roomid {
      get { return roomid_; }
      set {
        roomid_ = value;
      }
    }

    /// <summary>Field number for the "roomornament" field.</summary>
    public const int RoomornamentFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cmd.WorkShopOrnament> _repeated_roomornament_codec
        = pb::FieldCodec.ForMessage(18, global::Cmd.WorkShopOrnament.Parser);
    private readonly pbc::RepeatedField<global::Cmd.WorkShopOrnament> roomornament_ = new pbc::RepeatedField<global::Cmd.WorkShopOrnament>();
    /// <summary>
    ///  装饰物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.WorkShopOrnament> Roomornament {
      get { return roomornament_; }
    }

    /// <summary>Field number for the "furniturelist" field.</summary>
    public const int FurniturelistFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.WorkShopFurniture> _repeated_furniturelist_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.WorkShopFurniture.Parser);
    private readonly pbc::RepeatedField<global::Cmd.WorkShopFurniture> furniturelist_ = new pbc::RepeatedField<global::Cmd.WorkShopFurniture>();
    /// <summary>
    ///  家具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.WorkShopFurniture> Furniturelist {
      get { return furniturelist_; }
    }

    /// <summary>Field number for the "blueprintid" field.</summary>
    public const int BlueprintidFieldNumber = 4;
    private uint blueprintid_;
    /// <summary>
    ///  正在使用的蓝图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Blueprintid {
      get { return blueprintid_; }
      set {
        blueprintid_ = value;
      }
    }

    /// <summary>Field number for the "hasinitblueprint" field.</summary>
    public const int HasinitblueprintFieldNumber = 5;
    private bool hasinitblueprint_;
    /// <summary>
    ///  蓝图应用时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Hasinitblueprint {
      get { return hasinitblueprint_; }
      set {
        hasinitblueprint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkShopRoomOrnament);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkShopRoomOrnament other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roomid != other.Roomid) return false;
      if(!roomornament_.Equals(other.roomornament_)) return false;
      if(!furniturelist_.Equals(other.furniturelist_)) return false;
      if (Blueprintid != other.Blueprintid) return false;
      if (Hasinitblueprint != other.Hasinitblueprint) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roomid != 0) hash ^= Roomid.GetHashCode();
      hash ^= roomornament_.GetHashCode();
      hash ^= furniturelist_.GetHashCode();
      if (Blueprintid != 0) hash ^= Blueprintid.GetHashCode();
      if (Hasinitblueprint != false) hash ^= Hasinitblueprint.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roomid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roomid);
      }
      roomornament_.WriteTo(output, _repeated_roomornament_codec);
      furniturelist_.WriteTo(output, _repeated_furniturelist_codec);
      if (Blueprintid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Blueprintid);
      }
      if (Hasinitblueprint != false) {
        output.WriteRawTag(40);
        output.WriteBool(Hasinitblueprint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roomid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roomid);
      }
      size += roomornament_.CalculateSize(_repeated_roomornament_codec);
      size += furniturelist_.CalculateSize(_repeated_furniturelist_codec);
      if (Blueprintid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Blueprintid);
      }
      if (Hasinitblueprint != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkShopRoomOrnament other) {
      if (other == null) {
        return;
      }
      if (other.Roomid != 0) {
        Roomid = other.Roomid;
      }
      roomornament_.Add(other.roomornament_);
      furniturelist_.Add(other.furniturelist_);
      if (other.Blueprintid != 0) {
        Blueprintid = other.Blueprintid;
      }
      if (other.Hasinitblueprint != false) {
        Hasinitblueprint = other.Hasinitblueprint;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roomid = input.ReadUInt32();
            break;
          }
          case 18: {
            roomornament_.AddEntriesFrom(input, _repeated_roomornament_codec);
            break;
          }
          case 26: {
            furniturelist_.AddEntriesFrom(input, _repeated_furniturelist_codec);
            break;
          }
          case 32: {
            Blueprintid = input.ReadUInt32();
            break;
          }
          case 40: {
            Hasinitblueprint = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  一个房间的基础类型(增量更新房间属性)
  /// </summary>
  public sealed partial class WorkShopRoomBaseInfo : pb::IMessage<WorkShopRoomBaseInfo> {
    private static readonly pb::MessageParser<WorkShopRoomBaseInfo> _parser = new pb::MessageParser<WorkShopRoomBaseInfo>(() => new WorkShopRoomBaseInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkShopRoomBaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopRoomBaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopRoomBaseInfo(WorkShopRoomBaseInfo other) : this() {
      roomid_ = other.roomid_;
      blueprintid_ = other.blueprintid_;
      hasinitblueprint_ = other.hasinitblueprint_;
      roomornament_ = other.roomornament_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopRoomBaseInfo Clone() {
      return new WorkShopRoomBaseInfo(this);
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 1;
    private uint roomid_;
    /// <summary>
    ///  房间id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roomid {
      get { return roomid_; }
      set {
        roomid_ = value;
      }
    }

    /// <summary>Field number for the "blueprintid" field.</summary>
    public const int BlueprintidFieldNumber = 2;
    private uint blueprintid_;
    /// <summary>
    ///  正在使用的蓝图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Blueprintid {
      get { return blueprintid_; }
      set {
        blueprintid_ = value;
      }
    }

    /// <summary>Field number for the "hasinitblueprint" field.</summary>
    public const int HasinitblueprintFieldNumber = 3;
    private bool hasinitblueprint_;
    /// <summary>
    ///  蓝图是否被初始化过
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Hasinitblueprint {
      get { return hasinitblueprint_; }
      set {
        hasinitblueprint_ = value;
      }
    }

    /// <summary>Field number for the "roomornament" field.</summary>
    public const int RoomornamentFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Cmd.WorkShopOrnament> _repeated_roomornament_codec
        = pb::FieldCodec.ForMessage(34, global::Cmd.WorkShopOrnament.Parser);
    private readonly pbc::RepeatedField<global::Cmd.WorkShopOrnament> roomornament_ = new pbc::RepeatedField<global::Cmd.WorkShopOrnament>();
    /// <summary>
    ///  装饰物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.WorkShopOrnament> Roomornament {
      get { return roomornament_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkShopRoomBaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkShopRoomBaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roomid != other.Roomid) return false;
      if (Blueprintid != other.Blueprintid) return false;
      if (Hasinitblueprint != other.Hasinitblueprint) return false;
      if(!roomornament_.Equals(other.roomornament_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roomid != 0) hash ^= Roomid.GetHashCode();
      if (Blueprintid != 0) hash ^= Blueprintid.GetHashCode();
      if (Hasinitblueprint != false) hash ^= Hasinitblueprint.GetHashCode();
      hash ^= roomornament_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roomid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roomid);
      }
      if (Blueprintid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Blueprintid);
      }
      if (Hasinitblueprint != false) {
        output.WriteRawTag(24);
        output.WriteBool(Hasinitblueprint);
      }
      roomornament_.WriteTo(output, _repeated_roomornament_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roomid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roomid);
      }
      if (Blueprintid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Blueprintid);
      }
      if (Hasinitblueprint != false) {
        size += 1 + 1;
      }
      size += roomornament_.CalculateSize(_repeated_roomornament_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkShopRoomBaseInfo other) {
      if (other == null) {
        return;
      }
      if (other.Roomid != 0) {
        Roomid = other.Roomid;
      }
      if (other.Blueprintid != 0) {
        Blueprintid = other.Blueprintid;
      }
      if (other.Hasinitblueprint != false) {
        Hasinitblueprint = other.Hasinitblueprint;
      }
      roomornament_.Add(other.roomornament_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roomid = input.ReadUInt32();
            break;
          }
          case 16: {
            Blueprintid = input.ReadUInt32();
            break;
          }
          case 24: {
            Hasinitblueprint = input.ReadBool();
            break;
          }
          case 34: {
            roomornament_.AddEntriesFrom(input, _repeated_roomornament_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  工房预设方案,S->C
  /// </summary>
  public sealed partial class WorkShopProtoType : pb::IMessage<WorkShopProtoType> {
    private static readonly pb::MessageParser<WorkShopProtoType> _parser = new pb::MessageParser<WorkShopProtoType>(() => new WorkShopProtoType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkShopProtoType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopProtoType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopProtoType(WorkShopProtoType other) : this() {
      id_ = other.id_;
      ornamentlist_ = other.ornamentlist_.Clone();
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopProtoType Clone() {
      return new WorkShopProtoType(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///  方案ID,程序生成的唯一索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ornamentlist" field.</summary>
    public const int OrnamentlistFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cmd.WorkShopRoomOrnament> _repeated_ornamentlist_codec
        = pb::FieldCodec.ForMessage(18, global::Cmd.WorkShopRoomOrnament.Parser);
    private readonly pbc::RepeatedField<global::Cmd.WorkShopRoomOrnament> ornamentlist_ = new pbc::RepeatedField<global::Cmd.WorkShopRoomOrnament>();
    /// <summary>
    ///  房间装潢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.WorkShopRoomOrnament> Ornamentlist {
      get { return ornamentlist_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///  预设方案名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkShopProtoType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkShopProtoType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!ornamentlist_.Equals(other.ornamentlist_)) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= ornamentlist_.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      ornamentlist_.WriteTo(output, _repeated_ornamentlist_codec);
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      size += ornamentlist_.CalculateSize(_repeated_ornamentlist_codec);
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkShopProtoType other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      ornamentlist_.Add(other.ornamentlist_);
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            ornamentlist_.AddEntriesFrom(input, _repeated_ornamentlist_codec);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  工房当前解锁的房间和等级
  /// </summary>
  public sealed partial class WorkShopRoomData : pb::IMessage<WorkShopRoomData> {
    private static readonly pb::MessageParser<WorkShopRoomData> _parser = new pb::MessageParser<WorkShopRoomData>(() => new WorkShopRoomData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkShopRoomData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopRoomData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopRoomData(WorkShopRoomData other) : this() {
      roomid_ = other.roomid_;
      roomlv_ = other.roomlv_;
      Referencepos = other.referencepos_ != null ? other.Referencepos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopRoomData Clone() {
      return new WorkShopRoomData(this);
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 1;
    private uint roomid_;
    /// <summary>
    ///  房间id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roomid {
      get { return roomid_; }
      set {
        roomid_ = value;
      }
    }

    /// <summary>Field number for the "roomlv" field.</summary>
    public const int RoomlvFieldNumber = 2;
    private uint roomlv_;
    /// <summary>
    ///  房间等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roomlv {
      get { return roomlv_; }
      set {
        roomlv_ = value;
      }
    }

    /// <summary>Field number for the "referencepos" field.</summary>
    public const int ReferenceposFieldNumber = 3;
    private global::Cmd.ScenePos referencepos_;
    /// <summary>
    ///  房间参照坐标点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Referencepos {
      get { return referencepos_; }
      set {
        referencepos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkShopRoomData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkShopRoomData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roomid != other.Roomid) return false;
      if (Roomlv != other.Roomlv) return false;
      if (!object.Equals(Referencepos, other.Referencepos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roomid != 0) hash ^= Roomid.GetHashCode();
      if (Roomlv != 0) hash ^= Roomlv.GetHashCode();
      if (referencepos_ != null) hash ^= Referencepos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roomid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roomid);
      }
      if (Roomlv != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Roomlv);
      }
      if (referencepos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Referencepos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roomid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roomid);
      }
      if (Roomlv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roomlv);
      }
      if (referencepos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Referencepos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkShopRoomData other) {
      if (other == null) {
        return;
      }
      if (other.Roomid != 0) {
        Roomid = other.Roomid;
      }
      if (other.Roomlv != 0) {
        Roomlv = other.Roomlv;
      }
      if (other.referencepos_ != null) {
        if (referencepos_ == null) {
          referencepos_ = new global::Cmd.ScenePos();
        }
        Referencepos.MergeFrom(other.Referencepos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roomid = input.ReadUInt32();
            break;
          }
          case 16: {
            Roomlv = input.ReadUInt32();
            break;
          }
          case 26: {
            if (referencepos_ == null) {
              referencepos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(referencepos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  工房墙体中心点编辑,c -> s
  /// </summary>
  public sealed partial class WorkShopWallEdit : pb::IMessage<WorkShopWallEdit> {
    private static readonly pb::MessageParser<WorkShopWallEdit> _parser = new pb::MessageParser<WorkShopWallEdit>(() => new WorkShopWallEdit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkShopWallEdit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopWallEdit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopWallEdit(WorkShopWallEdit other) : this() {
      wallList_ = other.wallList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopWallEdit Clone() {
      return new WorkShopWallEdit(this);
    }

    /// <summary>Field number for the "wallList" field.</summary>
    public const int WallListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cmd.WorkShopRoomWallData> _repeated_wallList_codec
        = pb::FieldCodec.ForMessage(10, global::Cmd.WorkShopRoomWallData.Parser);
    private readonly pbc::RepeatedField<global::Cmd.WorkShopRoomWallData> wallList_ = new pbc::RepeatedField<global::Cmd.WorkShopRoomWallData>();
    /// <summary>
    ///  墙
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.WorkShopRoomWallData> WallList {
      get { return wallList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkShopWallEdit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkShopWallEdit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!wallList_.Equals(other.wallList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= wallList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      wallList_.WriteTo(output, _repeated_wallList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += wallList_.CalculateSize(_repeated_wallList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkShopWallEdit other) {
      if (other == null) {
        return;
      }
      wallList_.Add(other.wallList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            wallList_.AddEntriesFrom(input, _repeated_wallList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  工房高度编辑, c -> s
  /// </summary>
  public sealed partial class WorkShopRoomHeightEdit : pb::IMessage<WorkShopRoomHeightEdit> {
    private static readonly pb::MessageParser<WorkShopRoomHeightEdit> _parser = new pb::MessageParser<WorkShopRoomHeightEdit>(() => new WorkShopRoomHeightEdit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkShopRoomHeightEdit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopRoomHeightEdit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopRoomHeightEdit(WorkShopRoomHeightEdit other) : this() {
      roomheightlist_ = other.roomheightlist_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopRoomHeightEdit Clone() {
      return new WorkShopRoomHeightEdit(this);
    }

    /// <summary>Field number for the "roomheightlist" field.</summary>
    public const int RoomheightlistFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cmd.WorkShopRoomHeightData> _repeated_roomheightlist_codec
        = pb::FieldCodec.ForMessage(10, global::Cmd.WorkShopRoomHeightData.Parser);
    private readonly pbc::RepeatedField<global::Cmd.WorkShopRoomHeightData> roomheightlist_ = new pbc::RepeatedField<global::Cmd.WorkShopRoomHeightData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.WorkShopRoomHeightData> Roomheightlist {
      get { return roomheightlist_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkShopRoomHeightEdit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkShopRoomHeightEdit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roomheightlist_.Equals(other.roomheightlist_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roomheightlist_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roomheightlist_.WriteTo(output, _repeated_roomheightlist_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roomheightlist_.CalculateSize(_repeated_roomheightlist_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkShopRoomHeightEdit other) {
      if (other == null) {
        return;
      }
      roomheightlist_.Add(other.roomheightlist_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roomheightlist_.AddEntriesFrom(input, _repeated_roomheightlist_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  工房高度编辑, c -> s
  /// </summary>
  public sealed partial class WorkShopRoomHeightData : pb::IMessage<WorkShopRoomHeightData> {
    private static readonly pb::MessageParser<WorkShopRoomHeightData> _parser = new pb::MessageParser<WorkShopRoomHeightData>(() => new WorkShopRoomHeightData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkShopRoomHeightData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopRoomHeightData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopRoomHeightData(WorkShopRoomHeightData other) : this() {
      roomid_ = other.roomid_;
      height_ = other.height_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopRoomHeightData Clone() {
      return new WorkShopRoomHeightData(this);
    }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 1;
    private uint roomid_;
    /// <summary>
    ///  房间id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Roomid {
      get { return roomid_; }
      set {
        roomid_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private int height_;
    /// <summary>
    ///  高度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkShopRoomHeightData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkShopRoomHeightData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roomid != other.Roomid) return false;
      if (Height != other.Height) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roomid != 0) hash ^= Roomid.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roomid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Roomid);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roomid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Roomid);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkShopRoomHeightData other) {
      if (other == null) {
        return;
      }
      if (other.Roomid != 0) {
        Roomid = other.Roomid;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roomid = input.ReadUInt32();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WorkShopRoomWallData : pb::IMessage<WorkShopRoomWallData> {
    private static readonly pb::MessageParser<WorkShopRoomWallData> _parser = new pb::MessageParser<WorkShopRoomWallData>(() => new WorkShopRoomWallData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkShopRoomWallData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopRoomWallData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopRoomWallData(WorkShopRoomWallData other) : this() {
      WallPos = other.wallPos_ != null ? other.WallPos.Clone() : null;
      state_ = other.state_;
      roomidlist_ = other.roomidlist_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopRoomWallData Clone() {
      return new WorkShopRoomWallData(this);
    }

    /// <summary>Field number for the "wallPos" field.</summary>
    public const int WallPosFieldNumber = 2;
    private global::Cmd.ScenePos wallPos_;
    /// <summary>
    ///  墙面中心点坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos WallPos {
      get { return wallPos_; }
      set {
        wallPos_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private global::Cmd.EWallStateType state_ = 0;
    /// <summary>
    ///  墙状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EWallStateType State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "roomidlist" field.</summary>
    public const int RoomidlistFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_roomidlist_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> roomidlist_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  该中心跨越的房间id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Roomidlist {
      get { return roomidlist_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkShopRoomWallData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkShopRoomWallData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(WallPos, other.WallPos)) return false;
      if (State != other.State) return false;
      if(!roomidlist_.Equals(other.roomidlist_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (wallPos_ != null) hash ^= WallPos.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      hash ^= roomidlist_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (wallPos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(WallPos);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      roomidlist_.WriteTo(output, _repeated_roomidlist_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (wallPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WallPos);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      size += roomidlist_.CalculateSize(_repeated_roomidlist_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkShopRoomWallData other) {
      if (other == null) {
        return;
      }
      if (other.wallPos_ != null) {
        if (wallPos_ == null) {
          wallPos_ = new global::Cmd.ScenePos();
        }
        WallPos.MergeFrom(other.WallPos);
      }
      if (other.State != 0) {
        State = other.State;
      }
      roomidlist_.Add(other.roomidlist_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (wallPos_ == null) {
              wallPos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(wallPos_);
            break;
          }
          case 24: {
            state_ = (global::Cmd.EWallStateType) input.ReadEnum();
            break;
          }
          case 34:
          case 32: {
            roomidlist_.AddEntriesFrom(input, _repeated_roomidlist_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  蓝图数据
  /// </summary>
  public sealed partial class WorkShopBlueprintData : pb::IMessage<WorkShopBlueprintData> {
    private static readonly pb::MessageParser<WorkShopBlueprintData> _parser = new pb::MessageParser<WorkShopBlueprintData>(() => new WorkShopBlueprintData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkShopBlueprintData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopBlueprintData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopBlueprintData(WorkShopBlueprintData other) : this() {
      type_ = other.type_;
      blueprintid_ = other.blueprintid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopBlueprintData Clone() {
      return new WorkShopBlueprintData(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Cmd.EBlueprintType type_ = 0;
    /// <summary>
    ///  蓝图类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EBlueprintType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "blueprintid" field.</summary>
    public const int BlueprintidFieldNumber = 2;
    private uint blueprintid_;
    /// <summary>
    ///  蓝图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Blueprintid {
      get { return blueprintid_; }
      set {
        blueprintid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkShopBlueprintData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkShopBlueprintData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Blueprintid != other.Blueprintid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Blueprintid != 0) hash ^= Blueprintid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Blueprintid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Blueprintid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Blueprintid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Blueprintid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkShopBlueprintData other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Blueprintid != 0) {
        Blueprintid = other.Blueprintid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Cmd.EBlueprintType) input.ReadEnum();
            break;
          }
          case 16: {
            Blueprintid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  工房挂机收益记录
  /// </summary>
  public sealed partial class WorkShopProfitPartnerData : pb::IMessage<WorkShopProfitPartnerData> {
    private static readonly pb::MessageParser<WorkShopProfitPartnerData> _parser = new pb::MessageParser<WorkShopProfitPartnerData>(() => new WorkShopProfitPartnerData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkShopProfitPartnerData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopProfitPartnerData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopProfitPartnerData(WorkShopProfitPartnerData other) : this() {
      profitid_ = other.profitid_;
      profitstatelist_ = other.profitstatelist_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopProfitPartnerData Clone() {
      return new WorkShopProfitPartnerData(this);
    }

    /// <summary>Field number for the "profitid" field.</summary>
    public const int ProfitidFieldNumber = 1;
    private uint profitid_;
    /// <summary>
    ///  收益id(对应WorkshopProfitPartner的id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Profitid {
      get { return profitid_; }
      set {
        profitid_ = value;
      }
    }

    /// <summary>Field number for the "profitstatelist" field.</summary>
    public const int ProfitstatelistFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cmd.WorkShopProfitState> _repeated_profitstatelist_codec
        = pb::FieldCodec.ForMessage(18, global::Cmd.WorkShopProfitState.Parser);
    private readonly pbc::RepeatedField<global::Cmd.WorkShopProfitState> profitstatelist_ = new pbc::RepeatedField<global::Cmd.WorkShopProfitState>();
    /// <summary>
    ///  收益状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.WorkShopProfitState> Profitstatelist {
      get { return profitstatelist_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkShopProfitPartnerData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkShopProfitPartnerData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Profitid != other.Profitid) return false;
      if(!profitstatelist_.Equals(other.profitstatelist_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Profitid != 0) hash ^= Profitid.GetHashCode();
      hash ^= profitstatelist_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Profitid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Profitid);
      }
      profitstatelist_.WriteTo(output, _repeated_profitstatelist_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Profitid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Profitid);
      }
      size += profitstatelist_.CalculateSize(_repeated_profitstatelist_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkShopProfitPartnerData other) {
      if (other == null) {
        return;
      }
      if (other.Profitid != 0) {
        Profitid = other.Profitid;
      }
      profitstatelist_.Add(other.profitstatelist_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Profitid = input.ReadUInt32();
            break;
          }
          case 18: {
            profitstatelist_.AddEntriesFrom(input, _repeated_profitstatelist_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WorkShopProfitRepairData : pb::IMessage<WorkShopProfitRepairData> {
    private static readonly pb::MessageParser<WorkShopProfitRepairData> _parser = new pb::MessageParser<WorkShopProfitRepairData>(() => new WorkShopProfitRepairData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkShopProfitRepairData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopProfitRepairData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopProfitRepairData(WorkShopProfitRepairData other) : this() {
      profitid_ = other.profitid_;
      lastcalctime_ = other.lastcalctime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopProfitRepairData Clone() {
      return new WorkShopProfitRepairData(this);
    }

    /// <summary>Field number for the "profitid" field.</summary>
    public const int ProfitidFieldNumber = 1;
    private uint profitid_;
    /// <summary>
    ///  收益id(对应WorkshopProfitRepair的id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Profitid {
      get { return profitid_; }
      set {
        profitid_ = value;
      }
    }

    /// <summary>Field number for the "lastcalctime" field.</summary>
    public const int LastcalctimeFieldNumber = 2;
    private uint lastcalctime_;
    /// <summary>
    ///  最后一次收益领取时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lastcalctime {
      get { return lastcalctime_; }
      set {
        lastcalctime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkShopProfitRepairData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkShopProfitRepairData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Profitid != other.Profitid) return false;
      if (Lastcalctime != other.Lastcalctime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Profitid != 0) hash ^= Profitid.GetHashCode();
      if (Lastcalctime != 0) hash ^= Lastcalctime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Profitid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Profitid);
      }
      if (Lastcalctime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Lastcalctime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Profitid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Profitid);
      }
      if (Lastcalctime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lastcalctime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkShopProfitRepairData other) {
      if (other == null) {
        return;
      }
      if (other.Profitid != 0) {
        Profitid = other.Profitid;
      }
      if (other.Lastcalctime != 0) {
        Lastcalctime = other.Lastcalctime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Profitid = input.ReadUInt32();
            break;
          }
          case 16: {
            Lastcalctime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WorkShopProfitState : pb::IMessage<WorkShopProfitState> {
    private static readonly pb::MessageParser<WorkShopProfitState> _parser = new pb::MessageParser<WorkShopProfitState>(() => new WorkShopProfitState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkShopProfitState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopProfitState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopProfitState(WorkShopProfitState other) : this() {
      isreceive_ = other.isreceive_;
      calctime_ = other.calctime_;
      process_ = other.process_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkShopProfitState Clone() {
      return new WorkShopProfitState(this);
    }

    /// <summary>Field number for the "isreceive" field.</summary>
    public const int IsreceiveFieldNumber = 1;
    private bool isreceive_;
    /// <summary>
    ///  是否已经被领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isreceive {
      get { return isreceive_; }
      set {
        isreceive_ = value;
      }
    }

    /// <summary>Field number for the "calctime" field.</summary>
    public const int CalctimeFieldNumber = 2;
    private uint calctime_;
    /// <summary>
    ///  收益产生时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Calctime {
      get { return calctime_; }
      set {
        calctime_ = value;
      }
    }

    /// <summary>Field number for the "process" field.</summary>
    public const int ProcessFieldNumber = 3;
    private uint process_;
    /// <summary>
    ///  进度参数(例如妄想空间的层数)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Process {
      get { return process_; }
      set {
        process_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkShopProfitState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkShopProfitState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Isreceive != other.Isreceive) return false;
      if (Calctime != other.Calctime) return false;
      if (Process != other.Process) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Isreceive != false) hash ^= Isreceive.GetHashCode();
      if (Calctime != 0) hash ^= Calctime.GetHashCode();
      if (Process != 0) hash ^= Process.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Isreceive != false) {
        output.WriteRawTag(8);
        output.WriteBool(Isreceive);
      }
      if (Calctime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Calctime);
      }
      if (Process != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Process);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Isreceive != false) {
        size += 1 + 1;
      }
      if (Calctime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Calctime);
      }
      if (Process != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Process);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkShopProfitState other) {
      if (other == null) {
        return;
      }
      if (other.Isreceive != false) {
        Isreceive = other.Isreceive;
      }
      if (other.Calctime != 0) {
        Calctime = other.Calctime;
      }
      if (other.Process != 0) {
        Process = other.Process;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Isreceive = input.ReadBool();
            break;
          }
          case 16: {
            Calctime = input.ReadUInt32();
            break;
          }
          case 24: {
            Process = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveStateData : pb::IMessage<MoveStateData> {
    private static readonly pb::MessageParser<MoveStateData> _parser = new pb::MessageParser<MoveStateData>(() => new MoveStateData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveStateData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveStateData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveStateData(MoveStateData other) : this() {
      actionid_ = other.actionid_;
      actionspeed_ = other.actionspeed_;
      speed_ = other.speed_;
      state_ = other.state_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveStateData Clone() {
      return new MoveStateData(this);
    }

    /// <summary>Field number for the "actionid" field.</summary>
    public const int ActionidFieldNumber = 1;
    private uint actionid_;
    /// <summary>
    /// 移动动作id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Actionid {
      get { return actionid_; }
      set {
        actionid_ = value;
      }
    }

    /// <summary>Field number for the "actionspeed" field.</summary>
    public const int ActionspeedFieldNumber = 2;
    private int actionspeed_;
    /// <summary>
    /// 移动动作基准速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Actionspeed {
      get { return actionspeed_; }
      set {
        actionspeed_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 3;
    private int speed_;
    /// <summary>
    /// 最终移动速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 4;
    private global::Cmd.EMoveStateType state_ = 0;
    /// <summary>
    /// 移动状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EMoveStateType State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveStateData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveStateData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Actionid != other.Actionid) return false;
      if (Actionspeed != other.Actionspeed) return false;
      if (Speed != other.Speed) return false;
      if (State != other.State) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Actionid != 0) hash ^= Actionid.GetHashCode();
      if (Actionspeed != 0) hash ^= Actionspeed.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Actionid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Actionid);
      }
      if (Actionspeed != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Actionspeed);
      }
      if (Speed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Speed);
      }
      if (State != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Actionid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Actionid);
      }
      if (Actionspeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Actionspeed);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveStateData other) {
      if (other == null) {
        return;
      }
      if (other.Actionid != 0) {
        Actionid = other.Actionid;
      }
      if (other.Actionspeed != 0) {
        Actionspeed = other.Actionspeed;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.State != 0) {
        State = other.State;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Actionid = input.ReadUInt32();
            break;
          }
          case 16: {
            Actionspeed = input.ReadInt32();
            break;
          }
          case 24: {
            Speed = input.ReadInt32();
            break;
          }
          case 32: {
            state_ = (global::Cmd.EMoveStateType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VehicleData : pb::IMessage<VehicleData> {
    private static readonly pb::MessageParser<VehicleData> _parser = new pb::MessageParser<VehicleData>(() => new VehicleData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VehicleData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleData(VehicleData other) : this() {
      guid_ = other.guid_;
      state_ = other.state_;
      Curpos = other.curpos_ != null ? other.Curpos.Clone() : null;
      rotate_ = other.rotate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VehicleData Clone() {
      return new VehicleData(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    /// <summary>
    /// 载具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private global::Cmd.EPlayerVehicleStateType state_ = 0;
    /// <summary>
    /// 玩家在载具的状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EPlayerVehicleStateType State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "curpos" field.</summary>
    public const int CurposFieldNumber = 3;
    private global::Cmd.ScenePos curpos_;
    /// <summary>
    /// 玩家相对于载具的坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Curpos {
      get { return curpos_; }
      set {
        curpos_ = value;
      }
    }

    /// <summary>Field number for the "rotate" field.</summary>
    public const int RotateFieldNumber = 4;
    private int rotate_;
    /// <summary>
    /// 玩家相对朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rotate {
      get { return rotate_; }
      set {
        rotate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VehicleData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VehicleData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (State != other.State) return false;
      if (!object.Equals(Curpos, other.Curpos)) return false;
      if (Rotate != other.Rotate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (curpos_ != null) hash ^= Curpos.GetHashCode();
      if (Rotate != 0) hash ^= Rotate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      if (curpos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Curpos);
      }
      if (Rotate != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Rotate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (curpos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Curpos);
      }
      if (Rotate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rotate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VehicleData other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.curpos_ != null) {
        if (curpos_ == null) {
          curpos_ = new global::Cmd.ScenePos();
        }
        Curpos.MergeFrom(other.Curpos);
      }
      if (other.Rotate != 0) {
        Rotate = other.Rotate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 16: {
            state_ = (global::Cmd.EPlayerVehicleStateType) input.ReadEnum();
            break;
          }
          case 26: {
            if (curpos_ == null) {
              curpos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(curpos_);
            break;
          }
          case 32: {
            Rotate = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JumpData : pb::IMessage<JumpData> {
    private static readonly pb::MessageParser<JumpData> _parser = new pb::MessageParser<JumpData>(() => new JumpData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JumpData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JumpData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JumpData(JumpData other) : this() {
      zSpeed_ = other.zSpeed_;
      index_ = other.index_;
      segment_ = other.segment_;
      timepassed_ = other.timepassed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JumpData Clone() {
      return new JumpData(this);
    }

    /// <summary>Field number for the "zSpeed" field.</summary>
    public const int ZSpeedFieldNumber = 1;
    private float zSpeed_;
    /// <summary>
    /// 向上速度，小于等于0表示下落了。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ZSpeed {
      get { return zSpeed_; }
      set {
        zSpeed_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    /// <summary>
    /// 第几段跳跃,0表示同步跳跃目标点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "segment" field.</summary>
    public const int SegmentFieldNumber = 3;
    private int segment_;
    /// <summary>
    /// 仅前端转发，跳跃状态， 0是无速度直接掉落的时间段，1是起跳后z速度>0的时间段， 2是z速度为0在空中滑行的时间段，3是2阶段之后的时间段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Segment {
      get { return segment_; }
      set {
        segment_ = value;
      }
    }

    /// <summary>Field number for the "timepassed" field.</summary>
    public const int TimepassedFieldNumber = 4;
    private int timepassed_;
    /// <summary>
    /// 仅前 端转发，毫秒，当前segment经过的时间点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timepassed {
      get { return timepassed_; }
      set {
        timepassed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JumpData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JumpData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ZSpeed != other.ZSpeed) return false;
      if (Index != other.Index) return false;
      if (Segment != other.Segment) return false;
      if (Timepassed != other.Timepassed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ZSpeed != 0F) hash ^= ZSpeed.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Segment != 0) hash ^= Segment.GetHashCode();
      if (Timepassed != 0) hash ^= Timepassed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ZSpeed != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(ZSpeed);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (Segment != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Segment);
      }
      if (Timepassed != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Timepassed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ZSpeed != 0F) {
        size += 1 + 4;
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Segment != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Segment);
      }
      if (Timepassed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timepassed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JumpData other) {
      if (other == null) {
        return;
      }
      if (other.ZSpeed != 0F) {
        ZSpeed = other.ZSpeed;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Segment != 0) {
        Segment = other.Segment;
      }
      if (other.Timepassed != 0) {
        Timepassed = other.Timepassed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            ZSpeed = input.ReadFloat();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
          case 24: {
            Segment = input.ReadInt32();
            break;
          }
          case 32: {
            Timepassed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FallData : pb::IMessage<FallData> {
    private static readonly pb::MessageParser<FallData> _parser = new pb::MessageParser<FallData>(() => new FallData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FallData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FallData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FallData(FallData other) : this() {
      Targetpos = other.targetpos_ != null ? other.Targetpos.Clone() : null;
      rotate_ = other.rotate_;
      flag_ = other.flag_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FallData Clone() {
      return new FallData(this);
    }

    /// <summary>Field number for the "targetpos" field.</summary>
    public const int TargetposFieldNumber = 1;
    private global::Cmd.ScenePos targetpos_;
    /// <summary>
    /// 目标点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Targetpos {
      get { return targetpos_; }
      set {
        targetpos_ = value;
      }
    }

    /// <summary>Field number for the "rotate" field.</summary>
    public const int RotateFieldNumber = 2;
    private int rotate_;
    /// <summary>
    /// 方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rotate {
      get { return rotate_; }
      set {
        rotate_ = value;
      }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 3;
    private int flag_;
    /// <summary>
    /// 0开始，1结束,3 进行中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FallData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FallData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Targetpos, other.Targetpos)) return false;
      if (Rotate != other.Rotate) return false;
      if (Flag != other.Flag) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (targetpos_ != null) hash ^= Targetpos.GetHashCode();
      if (Rotate != 0) hash ^= Rotate.GetHashCode();
      if (Flag != 0) hash ^= Flag.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (targetpos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Targetpos);
      }
      if (Rotate != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Rotate);
      }
      if (Flag != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Flag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (targetpos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Targetpos);
      }
      if (Rotate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rotate);
      }
      if (Flag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flag);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FallData other) {
      if (other == null) {
        return;
      }
      if (other.targetpos_ != null) {
        if (targetpos_ == null) {
          targetpos_ = new global::Cmd.ScenePos();
        }
        Targetpos.MergeFrom(other.Targetpos);
      }
      if (other.Rotate != 0) {
        Rotate = other.Rotate;
      }
      if (other.Flag != 0) {
        Flag = other.Flag;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (targetpos_ == null) {
              targetpos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(targetpos_);
            break;
          }
          case 16: {
            Rotate = input.ReadInt32();
            break;
          }
          case 24: {
            Flag = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  移动坐标点,S->C
  /// </summary>
  public sealed partial class MoveTarget : pb::IMessage<MoveTarget> {
    private static readonly pb::MessageParser<MoveTarget> _parser = new pb::MessageParser<MoveTarget>(() => new MoveTarget());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveTarget(MoveTarget other) : this() {
      charid_ = other.charid_;
      Movepos = other.movepos_ != null ? other.Movepos.Clone() : null;
      dir_ = other.dir_;
      moveid_ = other.moveid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveTarget Clone() {
      return new MoveTarget(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 1;
    private ulong charid_;
    /// <summary>
    ///  唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "movepos" field.</summary>
    public const int MoveposFieldNumber = 2;
    private global::Cmd.ScenePos movepos_;
    /// <summary>
    ///  位移目标点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Movepos {
      get { return movepos_; }
      set {
        movepos_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 3;
    private int dir_;
    /// <summary>
    ///  位移开始到结束的朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "moveid" field.</summary>
    public const int MoveidFieldNumber = 4;
    private uint moveid_;
    /// <summary>
    ///  前端用于同步结束时位置的id标记
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Moveid {
      get { return moveid_; }
      set {
        moveid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      if (!object.Equals(Movepos, other.Movepos)) return false;
      if (Dir != other.Dir) return false;
      if (Moveid != other.Moveid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      if (movepos_ != null) hash ^= Movepos.GetHashCode();
      if (Dir != 0) hash ^= Dir.GetHashCode();
      if (Moveid != 0) hash ^= Moveid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Charid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Charid);
      }
      if (movepos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Movepos);
      }
      if (Dir != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Dir);
      }
      if (Moveid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Moveid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      if (movepos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Movepos);
      }
      if (Dir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dir);
      }
      if (Moveid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Moveid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveTarget other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      if (other.movepos_ != null) {
        if (movepos_ == null) {
          movepos_ = new global::Cmd.ScenePos();
        }
        Movepos.MergeFrom(other.Movepos);
      }
      if (other.Dir != 0) {
        Dir = other.Dir;
      }
      if (other.Moveid != 0) {
        Moveid = other.Moveid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Charid = input.ReadUInt64();
            break;
          }
          case 18: {
            if (movepos_ == null) {
              movepos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(movepos_);
            break;
          }
          case 24: {
            Dir = input.ReadInt32();
            break;
          }
          case 32: {
            Moveid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  位移数据,S&lt;->C
  /// </summary>
  public sealed partial class MoveData : pb::IMessage<MoveData> {
    private static readonly pb::MessageParser<MoveData> _parser = new pb::MessageParser<MoveData>(() => new MoveData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveData(MoveData other) : this() {
      effectid_ = other.effectid_;
      timeAxis_ = other.timeAxis_;
      movetargets_ = other.movetargets_.Clone();
      hitindex_ = other.hitindex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveData Clone() {
      return new MoveData(this);
    }

    /// <summary>Field number for the "effectid" field.</summary>
    public const int EffectidFieldNumber = 1;
    private uint effectid_;
    /// <summary>
    ///  配置表id,表MoveEffect.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Effectid {
      get { return effectid_; }
      set {
        effectid_ = value;
      }
    }

    /// <summary>Field number for the "time_axis" field.</summary>
    public const int TimeAxisFieldNumber = 2;
    private uint timeAxis_;
    /// <summary>
    ///  时间轴(毫秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeAxis {
      get { return timeAxis_; }
      set {
        timeAxis_ = value;
      }
    }

    /// <summary>Field number for the "movetargets" field.</summary>
    public const int MovetargetsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.MoveTarget> _repeated_movetargets_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.MoveTarget.Parser);
    private readonly pbc::RepeatedField<global::Cmd.MoveTarget> movetargets_ = new pbc::RepeatedField<global::Cmd.MoveTarget>();
    /// <summary>
    ///  产生位移的目标列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.MoveTarget> Movetargets {
      get { return movetargets_; }
    }

    /// <summary>Field number for the "hitindex" field.</summary>
    public const int HitindexFieldNumber = 4;
    private uint hitindex_;
    /// <summary>
    ///  前端的索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hitindex {
      get { return hitindex_; }
      set {
        hitindex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Effectid != other.Effectid) return false;
      if (TimeAxis != other.TimeAxis) return false;
      if(!movetargets_.Equals(other.movetargets_)) return false;
      if (Hitindex != other.Hitindex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Effectid != 0) hash ^= Effectid.GetHashCode();
      if (TimeAxis != 0) hash ^= TimeAxis.GetHashCode();
      hash ^= movetargets_.GetHashCode();
      if (Hitindex != 0) hash ^= Hitindex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Effectid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Effectid);
      }
      if (TimeAxis != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TimeAxis);
      }
      movetargets_.WriteTo(output, _repeated_movetargets_codec);
      if (Hitindex != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Hitindex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Effectid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Effectid);
      }
      if (TimeAxis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeAxis);
      }
      size += movetargets_.CalculateSize(_repeated_movetargets_codec);
      if (Hitindex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hitindex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveData other) {
      if (other == null) {
        return;
      }
      if (other.Effectid != 0) {
        Effectid = other.Effectid;
      }
      if (other.TimeAxis != 0) {
        TimeAxis = other.TimeAxis;
      }
      movetargets_.Add(other.movetargets_);
      if (other.Hitindex != 0) {
        Hitindex = other.Hitindex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Effectid = input.ReadUInt32();
            break;
          }
          case 16: {
            TimeAxis = input.ReadUInt32();
            break;
          }
          case 26: {
            movetargets_.AddEntriesFrom(input, _repeated_movetargets_codec);
            break;
          }
          case 32: {
            Hitindex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  分担伤害目标,S->C
  /// </summary>
  public sealed partial class ShareDamageTarget : pb::IMessage<ShareDamageTarget> {
    private static readonly pb::MessageParser<ShareDamageTarget> _parser = new pb::MessageParser<ShareDamageTarget>(() => new ShareDamageTarget());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShareDamageTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareDamageTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareDamageTarget(ShareDamageTarget other) : this() {
      charid_ = other.charid_;
      value_ = other.value_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareDamageTarget Clone() {
      return new ShareDamageTarget(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 1;
    private ulong charid_;
    /// <summary>
    ///  目标唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private uint value_;
    /// <summary>
    ///  伤害数值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    ///  伤害类型 对应DamageType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShareDamageTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShareDamageTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      if (Value != other.Value) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Charid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Charid);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Value);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShareDamageTarget other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Charid = input.ReadUInt64();
            break;
          }
          case 16: {
            Value = input.ReadUInt32();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  伤害目标,S&lt;->C
  /// </summary>
  public sealed partial class DamageTarget : pb::IMessage<DamageTarget> {
    private static readonly pb::MessageParser<DamageTarget> _parser = new pb::MessageParser<DamageTarget>(() => new DamageTarget());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DamageTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DamageTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DamageTarget(DamageTarget other) : this() {
      charid_ = other.charid_;
      value_ = other.value_;
      type_ = other.type_;
      sharetargets_ = other.sharetargets_.Clone();
      Movepos = other.movepos_ != null ? other.Movepos.Clone() : null;
      dir_ = other.dir_;
      hittype_ = other.hittype_;
      forcepower_ = other.forcepower_;
      damagedir_ = other.damagedir_;
      elementweak_ = other.elementweak_;
      iscrit_ = other.iscrit_;
      breaklevel_ = other.breaklevel_;
      moveid_ = other.moveid_;
      imbalance_ = other.imbalance_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DamageTarget Clone() {
      return new DamageTarget(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 1;
    private ulong charid_;
    /// <summary>
    ///  目标唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private uint value_;
    /// <summary>
    ///  伤害数值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    ///  伤害类型 对应DamageType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "sharetargets" field.</summary>
    public const int SharetargetsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Cmd.ShareDamageTarget> _repeated_sharetargets_codec
        = pb::FieldCodec.ForMessage(34, global::Cmd.ShareDamageTarget.Parser);
    private readonly pbc::RepeatedField<global::Cmd.ShareDamageTarget> sharetargets_ = new pbc::RepeatedField<global::Cmd.ShareDamageTarget>();
    /// <summary>
    ///  分担伤害目标列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.ShareDamageTarget> Sharetargets {
      get { return sharetargets_; }
    }

    /// <summary>Field number for the "movepos" field.</summary>
    public const int MoveposFieldNumber = 5;
    private global::Cmd.ScenePos movepos_;
    /// <summary>
    ///  击退目标点,为空表示没有击退
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Movepos {
      get { return movepos_; }
      set {
        movepos_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 6;
    private int dir_;
    /// <summary>
    ///  击退开始到结束的朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "hittype" field.</summary>
    public const int HittypeFieldNumber = 7;
    private uint hittype_;
    /// <summary>
    ///  受击类型 对应配置里的受击类型ID GameConfig.HitPowerType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hittype {
      get { return hittype_; }
      set {
        hittype_ = value;
      }
    }

    /// <summary>Field number for the "forcepower" field.</summary>
    public const int ForcepowerFieldNumber = 8;
    private int forcepower_;
    /// <summary>
    ///  击退力度 可以为负
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Forcepower {
      get { return forcepower_; }
      set {
        forcepower_ = value;
      }
    }

    /// <summary>Field number for the "damagedir" field.</summary>
    public const int DamagedirFieldNumber = 9;
    private uint damagedir_;
    /// <summary>
    ///  伤害来源方位 [1-前 2-后 3-左 4-右 5-上 6-下] 的二进制位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Damagedir {
      get { return damagedir_; }
      set {
        damagedir_ = value;
      }
    }

    /// <summary>Field number for the "elementweak" field.</summary>
    public const int ElementweakFieldNumber = 10;
    private bool elementweak_;
    /// <summary>
    ///  是否元素弱点伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Elementweak {
      get { return elementweak_; }
      set {
        elementweak_ = value;
      }
    }

    /// <summary>Field number for the "iscrit" field.</summary>
    public const int IscritFieldNumber = 11;
    private bool iscrit_;
    /// <summary>
    ///  是否暴击伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Iscrit {
      get { return iscrit_; }
      set {
        iscrit_ = value;
      }
    }

    /// <summary>Field number for the "breaklevel" field.</summary>
    public const int BreaklevelFieldNumber = 12;
    private uint breaklevel_;
    /// <summary>
    ///  打断等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Breaklevel {
      get { return breaklevel_; }
      set {
        breaklevel_ = value;
      }
    }

    /// <summary>Field number for the "moveid" field.</summary>
    public const int MoveidFieldNumber = 13;
    private uint moveid_;
    /// <summary>
    ///  前端用于同步结束时位置的id标记
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Moveid {
      get { return moveid_; }
      set {
        moveid_ = value;
      }
    }

    /// <summary>Field number for the "imbalance" field.</summary>
    public const int ImbalanceFieldNumber = 14;
    private uint imbalance_;
    /// <summary>
    ///  前端同步给后端时，是否触发失衡，[0-不触发，1-普通失衡，2-counter失衡]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Imbalance {
      get { return imbalance_; }
      set {
        imbalance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DamageTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DamageTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      if (Value != other.Value) return false;
      if (Type != other.Type) return false;
      if(!sharetargets_.Equals(other.sharetargets_)) return false;
      if (!object.Equals(Movepos, other.Movepos)) return false;
      if (Dir != other.Dir) return false;
      if (Hittype != other.Hittype) return false;
      if (Forcepower != other.Forcepower) return false;
      if (Damagedir != other.Damagedir) return false;
      if (Elementweak != other.Elementweak) return false;
      if (Iscrit != other.Iscrit) return false;
      if (Breaklevel != other.Breaklevel) return false;
      if (Moveid != other.Moveid) return false;
      if (Imbalance != other.Imbalance) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= sharetargets_.GetHashCode();
      if (movepos_ != null) hash ^= Movepos.GetHashCode();
      if (Dir != 0) hash ^= Dir.GetHashCode();
      if (Hittype != 0) hash ^= Hittype.GetHashCode();
      if (Forcepower != 0) hash ^= Forcepower.GetHashCode();
      if (Damagedir != 0) hash ^= Damagedir.GetHashCode();
      if (Elementweak != false) hash ^= Elementweak.GetHashCode();
      if (Iscrit != false) hash ^= Iscrit.GetHashCode();
      if (Breaklevel != 0) hash ^= Breaklevel.GetHashCode();
      if (Moveid != 0) hash ^= Moveid.GetHashCode();
      if (Imbalance != 0) hash ^= Imbalance.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Charid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Charid);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Value);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      sharetargets_.WriteTo(output, _repeated_sharetargets_codec);
      if (movepos_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Movepos);
      }
      if (Dir != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Dir);
      }
      if (Hittype != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Hittype);
      }
      if (Forcepower != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Forcepower);
      }
      if (Damagedir != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Damagedir);
      }
      if (Elementweak != false) {
        output.WriteRawTag(80);
        output.WriteBool(Elementweak);
      }
      if (Iscrit != false) {
        output.WriteRawTag(88);
        output.WriteBool(Iscrit);
      }
      if (Breaklevel != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Breaklevel);
      }
      if (Moveid != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Moveid);
      }
      if (Imbalance != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(Imbalance);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      size += sharetargets_.CalculateSize(_repeated_sharetargets_codec);
      if (movepos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Movepos);
      }
      if (Dir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dir);
      }
      if (Hittype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hittype);
      }
      if (Forcepower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Forcepower);
      }
      if (Damagedir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Damagedir);
      }
      if (Elementweak != false) {
        size += 1 + 1;
      }
      if (Iscrit != false) {
        size += 1 + 1;
      }
      if (Breaklevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Breaklevel);
      }
      if (Moveid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Moveid);
      }
      if (Imbalance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Imbalance);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DamageTarget other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      sharetargets_.Add(other.sharetargets_);
      if (other.movepos_ != null) {
        if (movepos_ == null) {
          movepos_ = new global::Cmd.ScenePos();
        }
        Movepos.MergeFrom(other.Movepos);
      }
      if (other.Dir != 0) {
        Dir = other.Dir;
      }
      if (other.Hittype != 0) {
        Hittype = other.Hittype;
      }
      if (other.Forcepower != 0) {
        Forcepower = other.Forcepower;
      }
      if (other.Damagedir != 0) {
        Damagedir = other.Damagedir;
      }
      if (other.Elementweak != false) {
        Elementweak = other.Elementweak;
      }
      if (other.Iscrit != false) {
        Iscrit = other.Iscrit;
      }
      if (other.Breaklevel != 0) {
        Breaklevel = other.Breaklevel;
      }
      if (other.Moveid != 0) {
        Moveid = other.Moveid;
      }
      if (other.Imbalance != 0) {
        Imbalance = other.Imbalance;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Charid = input.ReadUInt64();
            break;
          }
          case 16: {
            Value = input.ReadUInt32();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 34: {
            sharetargets_.AddEntriesFrom(input, _repeated_sharetargets_codec);
            break;
          }
          case 42: {
            if (movepos_ == null) {
              movepos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(movepos_);
            break;
          }
          case 48: {
            Dir = input.ReadInt32();
            break;
          }
          case 56: {
            Hittype = input.ReadUInt32();
            break;
          }
          case 64: {
            Forcepower = input.ReadInt32();
            break;
          }
          case 72: {
            Damagedir = input.ReadUInt32();
            break;
          }
          case 80: {
            Elementweak = input.ReadBool();
            break;
          }
          case 88: {
            Iscrit = input.ReadBool();
            break;
          }
          case 96: {
            Breaklevel = input.ReadUInt32();
            break;
          }
          case 104: {
            Moveid = input.ReadUInt32();
            break;
          }
          case 112: {
            Imbalance = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  伤害数据,S&lt;->C
  /// </summary>
  public sealed partial class DamageData : pb::IMessage<DamageData> {
    private static readonly pb::MessageParser<DamageData> _parser = new pb::MessageParser<DamageData>(() => new DamageData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DamageData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DamageData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DamageData(DamageData other) : this() {
      effectid_ = other.effectid_;
      timeAxis_ = other.timeAxis_;
      damagetargets_ = other.damagetargets_.Clone();
      hitindex_ = other.hitindex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DamageData Clone() {
      return new DamageData(this);
    }

    /// <summary>Field number for the "effectid" field.</summary>
    public const int EffectidFieldNumber = 1;
    private uint effectid_;
    /// <summary>
    ///  配置表id,表DamageEffect.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Effectid {
      get { return effectid_; }
      set {
        effectid_ = value;
      }
    }

    /// <summary>Field number for the "time_axis" field.</summary>
    public const int TimeAxisFieldNumber = 2;
    private uint timeAxis_;
    /// <summary>
    ///  时间轴(毫秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeAxis {
      get { return timeAxis_; }
      set {
        timeAxis_ = value;
      }
    }

    /// <summary>Field number for the "damagetargets" field.</summary>
    public const int DamagetargetsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.DamageTarget> _repeated_damagetargets_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.DamageTarget.Parser);
    private readonly pbc::RepeatedField<global::Cmd.DamageTarget> damagetargets_ = new pbc::RepeatedField<global::Cmd.DamageTarget>();
    /// <summary>
    ///  伤害目标列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.DamageTarget> Damagetargets {
      get { return damagetargets_; }
    }

    /// <summary>Field number for the "hitindex" field.</summary>
    public const int HitindexFieldNumber = 4;
    private uint hitindex_;
    /// <summary>
    ///  前端索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hitindex {
      get { return hitindex_; }
      set {
        hitindex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DamageData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DamageData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Effectid != other.Effectid) return false;
      if (TimeAxis != other.TimeAxis) return false;
      if(!damagetargets_.Equals(other.damagetargets_)) return false;
      if (Hitindex != other.Hitindex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Effectid != 0) hash ^= Effectid.GetHashCode();
      if (TimeAxis != 0) hash ^= TimeAxis.GetHashCode();
      hash ^= damagetargets_.GetHashCode();
      if (Hitindex != 0) hash ^= Hitindex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Effectid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Effectid);
      }
      if (TimeAxis != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TimeAxis);
      }
      damagetargets_.WriteTo(output, _repeated_damagetargets_codec);
      if (Hitindex != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Hitindex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Effectid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Effectid);
      }
      if (TimeAxis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeAxis);
      }
      size += damagetargets_.CalculateSize(_repeated_damagetargets_codec);
      if (Hitindex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hitindex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DamageData other) {
      if (other == null) {
        return;
      }
      if (other.Effectid != 0) {
        Effectid = other.Effectid;
      }
      if (other.TimeAxis != 0) {
        TimeAxis = other.TimeAxis;
      }
      damagetargets_.Add(other.damagetargets_);
      if (other.Hitindex != 0) {
        Hitindex = other.Hitindex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Effectid = input.ReadUInt32();
            break;
          }
          case 16: {
            TimeAxis = input.ReadUInt32();
            break;
          }
          case 26: {
            damagetargets_.AddEntriesFrom(input, _repeated_damagetargets_codec);
            break;
          }
          case 32: {
            Hitindex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveEffectData : pb::IMessage<MoveEffectData> {
    private static readonly pb::MessageParser<MoveEffectData> _parser = new pb::MessageParser<MoveEffectData>(() => new MoveEffectData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveEffectData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveEffectData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveEffectData(MoveEffectData other) : this() {
      Targetpos = other.targetpos_ != null ? other.Targetpos.Clone() : null;
      rotate_ = other.rotate_;
      skillid_ = other.skillid_;
      mainskillid_ = other.mainskillid_;
      Movedata = other.movedata_ != null ? other.Movedata.Clone() : null;
      Damagedata = other.damagedata_ != null ? other.Damagedata.Clone() : null;
      flag_ = other.flag_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveEffectData Clone() {
      return new MoveEffectData(this);
    }

    /// <summary>Field number for the "targetpos" field.</summary>
    public const int TargetposFieldNumber = 1;
    private global::Cmd.ScenePos targetpos_;
    /// <summary>
    /// 目标点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Targetpos {
      get { return targetpos_; }
      set {
        targetpos_ = value;
      }
    }

    /// <summary>Field number for the "rotate" field.</summary>
    public const int RotateFieldNumber = 2;
    private int rotate_;
    /// <summary>
    /// 目标方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rotate {
      get { return rotate_; }
      set {
        rotate_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 3;
    private uint skillid_;
    /// <summary>
    /// 触发技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "mainskillid" field.</summary>
    public const int MainskillidFieldNumber = 4;
    private uint mainskillid_;
    /// <summary>
    /// 主技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mainskillid {
      get { return mainskillid_; }
      set {
        mainskillid_ = value;
      }
    }

    /// <summary>Field number for the "movedata" field.</summary>
    public const int MovedataFieldNumber = 5;
    private global::Cmd.MoveData movedata_;
    /// <summary>
    /// 位移数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.MoveData Movedata {
      get { return movedata_; }
      set {
        movedata_ = value;
      }
    }

    /// <summary>Field number for the "damagedata" field.</summary>
    public const int DamagedataFieldNumber = 6;
    private global::Cmd.DamageData damagedata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.DamageData Damagedata {
      get { return damagedata_; }
      set {
        damagedata_ = value;
      }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 7;
    private int flag_;
    /// <summary>
    /// 0 move effect,1 hit back
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveEffectData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveEffectData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Targetpos, other.Targetpos)) return false;
      if (Rotate != other.Rotate) return false;
      if (Skillid != other.Skillid) return false;
      if (Mainskillid != other.Mainskillid) return false;
      if (!object.Equals(Movedata, other.Movedata)) return false;
      if (!object.Equals(Damagedata, other.Damagedata)) return false;
      if (Flag != other.Flag) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (targetpos_ != null) hash ^= Targetpos.GetHashCode();
      if (Rotate != 0) hash ^= Rotate.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (Mainskillid != 0) hash ^= Mainskillid.GetHashCode();
      if (movedata_ != null) hash ^= Movedata.GetHashCode();
      if (damagedata_ != null) hash ^= Damagedata.GetHashCode();
      if (Flag != 0) hash ^= Flag.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (targetpos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Targetpos);
      }
      if (Rotate != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Rotate);
      }
      if (Skillid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Skillid);
      }
      if (Mainskillid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Mainskillid);
      }
      if (movedata_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Movedata);
      }
      if (damagedata_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Damagedata);
      }
      if (Flag != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Flag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (targetpos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Targetpos);
      }
      if (Rotate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rotate);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      if (Mainskillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mainskillid);
      }
      if (movedata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Movedata);
      }
      if (damagedata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Damagedata);
      }
      if (Flag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flag);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveEffectData other) {
      if (other == null) {
        return;
      }
      if (other.targetpos_ != null) {
        if (targetpos_ == null) {
          targetpos_ = new global::Cmd.ScenePos();
        }
        Targetpos.MergeFrom(other.Targetpos);
      }
      if (other.Rotate != 0) {
        Rotate = other.Rotate;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.Mainskillid != 0) {
        Mainskillid = other.Mainskillid;
      }
      if (other.movedata_ != null) {
        if (movedata_ == null) {
          movedata_ = new global::Cmd.MoveData();
        }
        Movedata.MergeFrom(other.Movedata);
      }
      if (other.damagedata_ != null) {
        if (damagedata_ == null) {
          damagedata_ = new global::Cmd.DamageData();
        }
        Damagedata.MergeFrom(other.Damagedata);
      }
      if (other.Flag != 0) {
        Flag = other.Flag;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (targetpos_ == null) {
              targetpos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(targetpos_);
            break;
          }
          case 16: {
            Rotate = input.ReadInt32();
            break;
          }
          case 24: {
            Skillid = input.ReadUInt32();
            break;
          }
          case 32: {
            Mainskillid = input.ReadUInt32();
            break;
          }
          case 42: {
            if (movedata_ == null) {
              movedata_ = new global::Cmd.MoveData();
            }
            input.ReadMessage(movedata_);
            break;
          }
          case 50: {
            if (damagedata_ == null) {
              damagedata_ = new global::Cmd.DamageData();
            }
            input.ReadMessage(damagedata_);
            break;
          }
          case 56: {
            Flag = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  CD数据,S->C
  /// </summary>
  public sealed partial class CDTimeItem : pb::IMessage<CDTimeItem> {
    private static readonly pb::MessageParser<CDTimeItem> _parser = new pb::MessageParser<CDTimeItem>(() => new CDTimeItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDTimeItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDTimeItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDTimeItem(CDTimeItem other) : this() {
      id_ = other.id_;
      time_ = other.time_;
      type_ = other.type_;
      recharge_ = other.recharge_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDTimeItem Clone() {
      return new CDTimeItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///  道具id或者技能id,表Item.xlsx或表Skill.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private ulong time_;
    /// <summary>
    ///  结束时间戳(毫秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Cmd.CD_TYPE type_ = 0;
    /// <summary>
    ///  CD类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.CD_TYPE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "recharge" field.</summary>
    public const int RechargeFieldNumber = 4;
    private uint recharge_;
    /// <summary>
    ///  剩余充能次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Recharge {
      get { return recharge_; }
      set {
        recharge_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDTimeItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDTimeItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Time != other.Time) return false;
      if (Type != other.Type) return false;
      if (Recharge != other.Recharge) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Time != 0UL) hash ^= Time.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Recharge != 0) hash ^= Recharge.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Time != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Time);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (Recharge != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Recharge);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Time != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Time);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Recharge != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Recharge);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDTimeItem other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Time != 0UL) {
        Time = other.Time;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Recharge != 0) {
        Recharge = other.Recharge;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Time = input.ReadUInt64();
            break;
          }
          case 24: {
            type_ = (global::Cmd.CD_TYPE) input.ReadEnum();
            break;
          }
          case 32: {
            Recharge = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  可见性状态数据
  /// </summary>
  public sealed partial class MapNpcVisibleStatusData : pb::IMessage<MapNpcVisibleStatusData> {
    private static readonly pb::MessageParser<MapNpcVisibleStatusData> _parser = new pb::MessageParser<MapNpcVisibleStatusData>(() => new MapNpcVisibleStatusData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapNpcVisibleStatusData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapNpcVisibleStatusData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapNpcVisibleStatusData(MapNpcVisibleStatusData other) : this() {
      npcid_ = other.npcid_;
      npcstatus_ = other.npcstatus_;
      npclogicstatus_ = other.npclogicstatus_;
      npcvisiblestatus_ = other.npcvisiblestatus_;
      alias_ = other.alias_;
      guids_ = other.guids_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapNpcVisibleStatusData Clone() {
      return new MapNpcVisibleStatusData(this);
    }

    /// <summary>Field number for the "npcid" field.</summary>
    public const int NpcidFieldNumber = 1;
    private uint npcid_;
    /// <summary>
    ///  配置表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Npcid {
      get { return npcid_; }
      set {
        npcid_ = value;
      }
    }

    /// <summary>Field number for the "npcstatus" field.</summary>
    public const int NpcstatusFieldNumber = 2;
    private uint npcstatus_;
    /// <summary>
    ///  npc纯表现状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Npcstatus {
      get { return npcstatus_; }
      set {
        npcstatus_ = value;
      }
    }

    /// <summary>Field number for the "npclogicstatus" field.</summary>
    public const int NpclogicstatusFieldNumber = 3;
    private uint npclogicstatus_;
    /// <summary>
    ///  npc逻辑状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Npclogicstatus {
      get { return npclogicstatus_; }
      set {
        npclogicstatus_ = value;
      }
    }

    /// <summary>Field number for the "npcvisiblestatus" field.</summary>
    public const int NpcvisiblestatusFieldNumber = 4;
    private global::Cmd.ENpcVisibleStatus npcvisiblestatus_ = 0;
    /// <summary>
    ///  可见性状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ENpcVisibleStatus Npcvisiblestatus {
      get { return npcvisiblestatus_; }
      set {
        npcvisiblestatus_ = value;
      }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 5;
    private string alias_ = "";
    /// <summary>
    ///  别名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guids" field.</summary>
    public const int GuidsFieldNumber = 6;
    private static readonly pb::FieldCodec<ulong> _repeated_guids_codec
        = pb::FieldCodec.ForUInt64(50);
    private readonly pbc::RepeatedField<ulong> guids_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///  对象列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Guids {
      get { return guids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapNpcVisibleStatusData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapNpcVisibleStatusData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Npcid != other.Npcid) return false;
      if (Npcstatus != other.Npcstatus) return false;
      if (Npclogicstatus != other.Npclogicstatus) return false;
      if (Npcvisiblestatus != other.Npcvisiblestatus) return false;
      if (Alias != other.Alias) return false;
      if(!guids_.Equals(other.guids_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Npcid != 0) hash ^= Npcid.GetHashCode();
      if (Npcstatus != 0) hash ^= Npcstatus.GetHashCode();
      if (Npclogicstatus != 0) hash ^= Npclogicstatus.GetHashCode();
      if (Npcvisiblestatus != 0) hash ^= Npcvisiblestatus.GetHashCode();
      if (Alias.Length != 0) hash ^= Alias.GetHashCode();
      hash ^= guids_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Npcid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Npcid);
      }
      if (Npcstatus != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Npcstatus);
      }
      if (Npclogicstatus != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Npclogicstatus);
      }
      if (Npcvisiblestatus != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Npcvisiblestatus);
      }
      if (Alias.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Alias);
      }
      guids_.WriteTo(output, _repeated_guids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Npcid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Npcid);
      }
      if (Npcstatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Npcstatus);
      }
      if (Npclogicstatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Npclogicstatus);
      }
      if (Npcvisiblestatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Npcvisiblestatus);
      }
      if (Alias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      size += guids_.CalculateSize(_repeated_guids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapNpcVisibleStatusData other) {
      if (other == null) {
        return;
      }
      if (other.Npcid != 0) {
        Npcid = other.Npcid;
      }
      if (other.Npcstatus != 0) {
        Npcstatus = other.Npcstatus;
      }
      if (other.Npclogicstatus != 0) {
        Npclogicstatus = other.Npclogicstatus;
      }
      if (other.Npcvisiblestatus != 0) {
        Npcvisiblestatus = other.Npcvisiblestatus;
      }
      if (other.Alias.Length != 0) {
        Alias = other.Alias;
      }
      guids_.Add(other.guids_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Npcid = input.ReadUInt32();
            break;
          }
          case 16: {
            Npcstatus = input.ReadUInt32();
            break;
          }
          case 24: {
            Npclogicstatus = input.ReadUInt32();
            break;
          }
          case 32: {
            npcvisiblestatus_ = (global::Cmd.ENpcVisibleStatus) input.ReadEnum();
            break;
          }
          case 42: {
            Alias = input.ReadString();
            break;
          }
          case 50:
          case 48: {
            guids_.AddEntriesFrom(input, _repeated_guids_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  npc个人数据
  /// </summary>
  public sealed partial class NpcPrivateData : pb::IMessage<NpcPrivateData> {
    private static readonly pb::MessageParser<NpcPrivateData> _parser = new pb::MessageParser<NpcPrivateData>(() => new NpcPrivateData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcPrivateData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcPrivateData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcPrivateData(NpcPrivateData other) : this() {
      data_ = other.data_;
      dataStr_ = other.dataStr_;
      type_ = other.type_;
      talkcontent_ = other.talkcontent_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcPrivateData Clone() {
      return new NpcPrivateData(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private uint data_;
    /// <summary>
    ///  值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "data_str" field.</summary>
    public const int DataStrFieldNumber = 2;
    private string dataStr_ = "";
    /// <summary>
    ///  值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataStr {
      get { return dataStr_; }
      set {
        dataStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Cmd.NpcPrivateDataType type_ = 0;
    /// <summary>
    ///  数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.NpcPrivateDataType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "talkcontent" field.</summary>
    public const int TalkcontentFieldNumber = 4;
    private string talkcontent_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Talkcontent {
      get { return talkcontent_; }
      set {
        talkcontent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NpcPrivateData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NpcPrivateData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      if (DataStr != other.DataStr) return false;
      if (Type != other.Type) return false;
      if (Talkcontent != other.Talkcontent) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data != 0) hash ^= Data.GetHashCode();
      if (DataStr.Length != 0) hash ^= DataStr.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Talkcontent.Length != 0) hash ^= Talkcontent.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Data);
      }
      if (DataStr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DataStr);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (Talkcontent.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Talkcontent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Data);
      }
      if (DataStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataStr);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Talkcontent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Talkcontent);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NpcPrivateData other) {
      if (other == null) {
        return;
      }
      if (other.Data != 0) {
        Data = other.Data;
      }
      if (other.DataStr.Length != 0) {
        DataStr = other.DataStr;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Talkcontent.Length != 0) {
        Talkcontent = other.Talkcontent;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Data = input.ReadUInt32();
            break;
          }
          case 18: {
            DataStr = input.ReadString();
            break;
          }
          case 24: {
            type_ = (global::Cmd.NpcPrivateDataType) input.ReadEnum();
            break;
          }
          case 34: {
            Talkcontent = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  npc私人数据
  /// </summary>
  public sealed partial class MapNpcPrivateData : pb::IMessage<MapNpcPrivateData> {
    private static readonly pb::MessageParser<MapNpcPrivateData> _parser = new pb::MessageParser<MapNpcPrivateData>(() => new MapNpcPrivateData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapNpcPrivateData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapNpcPrivateData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapNpcPrivateData(MapNpcPrivateData other) : this() {
      npcid_ = other.npcid_;
      data_ = other.data_.Clone();
      alias_ = other.alias_;
      guids_ = other.guids_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapNpcPrivateData Clone() {
      return new MapNpcPrivateData(this);
    }

    /// <summary>Field number for the "npcid" field.</summary>
    public const int NpcidFieldNumber = 1;
    private uint npcid_;
    /// <summary>
    ///  npc表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Npcid {
      get { return npcid_; }
      set {
        npcid_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cmd.NpcPrivateData> _repeated_data_codec
        = pb::FieldCodec.ForMessage(18, global::Cmd.NpcPrivateData.Parser);
    private readonly pbc::RepeatedField<global::Cmd.NpcPrivateData> data_ = new pbc::RepeatedField<global::Cmd.NpcPrivateData>();
    /// <summary>
    ///  npc数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.NpcPrivateData> Data {
      get { return data_; }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 3;
    private string alias_ = "";
    /// <summary>
    ///  别名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guids" field.</summary>
    public const int GuidsFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_guids_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> guids_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///  对象列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Guids {
      get { return guids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapNpcPrivateData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapNpcPrivateData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Npcid != other.Npcid) return false;
      if(!data_.Equals(other.data_)) return false;
      if (Alias != other.Alias) return false;
      if(!guids_.Equals(other.guids_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Npcid != 0) hash ^= Npcid.GetHashCode();
      hash ^= data_.GetHashCode();
      if (Alias.Length != 0) hash ^= Alias.GetHashCode();
      hash ^= guids_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Npcid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Npcid);
      }
      data_.WriteTo(output, _repeated_data_codec);
      if (Alias.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Alias);
      }
      guids_.WriteTo(output, _repeated_guids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Npcid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Npcid);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      if (Alias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      size += guids_.CalculateSize(_repeated_guids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapNpcPrivateData other) {
      if (other == null) {
        return;
      }
      if (other.Npcid != 0) {
        Npcid = other.Npcid;
      }
      data_.Add(other.data_);
      if (other.Alias.Length != 0) {
        Alias = other.Alias;
      }
      guids_.Add(other.guids_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Npcid = input.ReadUInt32();
            break;
          }
          case 18: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
          case 26: {
            Alias = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            guids_.AddEntriesFrom(input, _repeated_guids_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  学院赠礼
  /// </summary>
  public sealed partial class CollegeGiftData : pb::IMessage<CollegeGiftData> {
    private static readonly pb::MessageParser<CollegeGiftData> _parser = new pb::MessageParser<CollegeGiftData>(() => new CollegeGiftData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CollegeGiftData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollegeGiftData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollegeGiftData(CollegeGiftData other) : this() {
      giftid_ = other.giftid_;
      collegegifts_ = other.collegegifts_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollegeGiftData Clone() {
      return new CollegeGiftData(this);
    }

    /// <summary>Field number for the "giftid" field.</summary>
    public const int GiftidFieldNumber = 1;
    private uint giftid_;
    /// <summary>
    ///  礼物id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Giftid {
      get { return giftid_; }
      set {
        giftid_ = value;
      }
    }

    /// <summary>Field number for the "collegegifts" field.</summary>
    public const int CollegegiftsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cmd.CollegeGift> _repeated_collegegifts_codec
        = pb::FieldCodec.ForMessage(18, global::Cmd.CollegeGift.Parser);
    private readonly pbc::RepeatedField<global::Cmd.CollegeGift> collegegifts_ = new pbc::RepeatedField<global::Cmd.CollegeGift>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.CollegeGift> Collegegifts {
      get { return collegegifts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CollegeGiftData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CollegeGiftData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Giftid != other.Giftid) return false;
      if(!collegegifts_.Equals(other.collegegifts_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Giftid != 0) hash ^= Giftid.GetHashCode();
      hash ^= collegegifts_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Giftid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Giftid);
      }
      collegegifts_.WriteTo(output, _repeated_collegegifts_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Giftid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Giftid);
      }
      size += collegegifts_.CalculateSize(_repeated_collegegifts_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CollegeGiftData other) {
      if (other == null) {
        return;
      }
      if (other.Giftid != 0) {
        Giftid = other.Giftid;
      }
      collegegifts_.Add(other.collegegifts_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Giftid = input.ReadUInt32();
            break;
          }
          case 18: {
            collegegifts_.AddEntriesFrom(input, _repeated_collegegifts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CollegeGift : pb::IMessage<CollegeGift> {
    private static readonly pb::MessageParser<CollegeGift> _parser = new pb::MessageParser<CollegeGift>(() => new CollegeGift());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CollegeGift> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.ProtoCommonReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollegeGift() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollegeGift(CollegeGift other) : this() {
      gaintime_ = other.gaintime_;
      isreceived_ = other.isreceived_;
      isactive_ = other.isactive_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollegeGift Clone() {
      return new CollegeGift(this);
    }

    /// <summary>Field number for the "gaintime" field.</summary>
    public const int GaintimeFieldNumber = 1;
    private ulong gaintime_;
    /// <summary>
    ///  获得时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Gaintime {
      get { return gaintime_; }
      set {
        gaintime_ = value;
      }
    }

    /// <summary>Field number for the "isreceived" field.</summary>
    public const int IsreceivedFieldNumber = 2;
    private bool isreceived_;
    /// <summary>
    ///  是否已经领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isreceived {
      get { return isreceived_; }
      set {
        isreceived_ = value;
      }
    }

    /// <summary>Field number for the "isactive" field.</summary>
    public const int IsactiveFieldNumber = 3;
    private bool isactive_;
    /// <summary>
    ///  是否活跃 (进阶高等级礼包时需要将低阶礼包修改为非活跃状态停止收益计算但是需要保持已生成的礼包继续有效)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isactive {
      get { return isactive_; }
      set {
        isactive_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CollegeGift);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CollegeGift other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Gaintime != other.Gaintime) return false;
      if (Isreceived != other.Isreceived) return false;
      if (Isactive != other.Isactive) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Gaintime != 0UL) hash ^= Gaintime.GetHashCode();
      if (Isreceived != false) hash ^= Isreceived.GetHashCode();
      if (Isactive != false) hash ^= Isactive.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Gaintime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Gaintime);
      }
      if (Isreceived != false) {
        output.WriteRawTag(16);
        output.WriteBool(Isreceived);
      }
      if (Isactive != false) {
        output.WriteRawTag(24);
        output.WriteBool(Isactive);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Gaintime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Gaintime);
      }
      if (Isreceived != false) {
        size += 1 + 1;
      }
      if (Isactive != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CollegeGift other) {
      if (other == null) {
        return;
      }
      if (other.Gaintime != 0UL) {
        Gaintime = other.Gaintime;
      }
      if (other.Isreceived != false) {
        Isreceived = other.Isreceived;
      }
      if (other.Isactive != false) {
        Isactive = other.Isactive;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Gaintime = input.ReadUInt64();
            break;
          }
          case 16: {
            Isreceived = input.ReadBool();
            break;
          }
          case 24: {
            Isactive = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
