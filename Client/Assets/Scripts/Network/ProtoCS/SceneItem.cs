// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneItem.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Cmd {

  /// <summary>Holder for reflection information generated from SceneItem.proto</summary>
  public static partial class SceneItemReflection {

    #region Descriptor
    /// <summary>File descriptor for SceneItem.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SceneItemReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9TY2VuZUl0ZW0ucHJvdG8SA0NtZBoVUHJvdG9JdGVtQ29tbW9uLnByb3Rv",
            "ImwKC1BhY2thZ2VJdGVtEhwKBHR5cGUYASABKA4yDi5DbWQuRVBhY2tUeXBl",
            "EhEKCWZpZ2h0ZXJpZBgCIAEoDRIPCgdtYXhzbG90GAMgASgNEhsKBGRhdGEY",
            "BCADKAsyDS5DbWQuSXRlbURhdGEiNQoSU2VuZFBhY2thZ2VMaXN0Q21kEh8K",
            "BXBhY2tzGAEgAygLMhAuQ21kLlBhY2thZ2VJdGVtInYKDVBhY2thZ2VVcGRh",
            "dGUSHAoEdHlwZRgBIAEoDjIOLkNtZC5FUGFja1R5cGUSEQoJZmlnaHRlcmlk",
            "GAIgASgNEiIKC3VwZGF0ZUl0ZW1zGAMgAygLMg0uQ21kLkl0ZW1EYXRhEhAK",
            "CGRlbEl0ZW1zGAQgAygJIjsKB0l0ZW1Vc2USEAoIaXRlbWd1aWQYAyABKAkS",
            "DwoHdGFyZ2V0cxgEIAMoBBINCgVjb3VudBgFIAEoDSKNAQoTRXF1aXBQYWNr",
            "YWdlT3BlckNtZBIRCglmaWdodGVyaWQYAyABKA0SHQoEb3BlchgEIAEoDjIP",
            "LkNtZC5FRXF1aXBPcGVyEhsKA3BvcxgFIAEoDjIOLkNtZC5FRXF1aXBQb3MS",
            "EgoKZXF1aXBfZ3VpZBgGIAEoCRITCgtzcmNfZmlnaHRlchgHIAEoDSKeAQoW",
            "UmV0RXF1aXBQYWNrYWdlT3BlckNtZBIRCglmaWdodGVyaWQYASABKA0SHQoE",
            "b3BlchgCIAEoDjIPLkNtZC5FRXF1aXBPcGVyEhsKA3BvcxgDIAEoDjIOLkNt",
            "ZC5FRXF1aXBQb3MSEQoJZXF1aXBndWlkGAQgASgJEhIKCnNyY2ZpZ2h0ZXIY",
            "BSABKA0SDgoGcmVzdWx0GAYgASgIIiQKBVNJdGVtEgwKBGd1aWQYASABKAkS",
            "DQoFY291bnQYAiABKA0iLQoNQnJvd3NlUGFja2FnZRIcCgR0eXBlGAMgASgO",
            "Mg4uQ21kLkVQYWNrVHlwZSJ1CgtJdGVtU2hvd0NtZBIcCgVpdGVtcxgBIAMo",
            "CzINLkNtZC5JdGVtSW5mbxIjCgxyZWR1Y2VfaXRlbXMYAiADKAsyDS5DbWQu",
            "SXRlbUluZm8SIwoMcmV3YXJkX2l0ZW1zGAMgAygLMg0uQ21kLkl0ZW1JbmZv",
            "ItECChFUcmFkZUl0ZW1CYXNlSW5mbxIOCgZpdGVtaWQYASABKA0SDQoFcHJp",
            "Y2UYAiABKA0SDQoFY291bnQYAyABKA0SDAoEZ3VpZBgEIAEoCRIQCghvcmRl",
            "cl9pZBgFIAEoBBIRCglyZWZpbmVfbHYYBiABKA0SDwoHb3ZlcmxhcBgIIAEo",
            "CBISCgppc19leHBpcmVkGAkgASgIEiAKCWl0ZW1fZGF0YRgKIAEoCzINLkNt",
            "ZC5JdGVtRGF0YRIUCgxwdWJsaWNpdHlfaWQYCyABKA0SEAoIZW5kX3RpbWUY",
            "DCABKA0SCwoDa2V5GA0gASgJEg4KBmNoYXJpZBgOIAEoBBIMCgRuYW1lGA8g",
            "ASgJEh0KBHR5cGUYECABKA4yDy5DbWQuRVRyYWRlVHlwZRIPCgd1cF9yYXRl",
            "GBEgASgNEhEKCWRvd25fcmF0ZRgSIAEoDSImCglNb25leURhdGESCgoCaWQY",
            "ASABKA0SDQoFY291bnQYAiABKAQiLgoITW9uZXlDbWQSIgoKbW9uZXlkYXRh",
            "cxgBIAMoCzIOLkNtZC5Nb25leURhdGEiMwoOTW9uZXlVcGRhdGVDbWQSIQoJ",
            "bW9uZXlkYXRhGAEgASgLMg4uQ21kLk1vbmV5RGF0YSJwChBFcXVpcFN0cmVu",
            "Z3RoQ21kEhIKCmVxdWlwX2d1aWQYASABKAkSEQoJZmlnaHRlcmlkGAIgASgN",
            "Eg0KBW5ld2x2GAQgASgNEiYKA3JldBgFIAEoDjIZLkNtZC5FRXF1aXBTdHJl",
            "bmd0aFJlc3VsdCKLAQoTRXF1aXBVcGdyYWRlU3RhckNtZBISCgplcXVpcF9n",
            "dWlkGAEgASgJEhEKCWZpZ2h0ZXJpZBgCIAEoDRIWCg5tYXRlcmlhbF9lcXVp",
            "cBgDIAMoCRINCgVuZXdsdhgEIAEoDRImCgNyZXQYBSABKA4yGS5DbWQuRUVx",
            "dWlwU3RyZW5ndGhSZXN1bHQiLwoPUmV3YXJkQ29tbW9uQ21kEhwKBWl0ZW1z",
            "GAMgAygLMg0uQ21kLkl0ZW1EYXRhKlsKCkVFcXVpcE9wZXISEgoORUVRVUlQ",
            "T1BFUl9NSU4QABIRCg1FRVFVSVBPUEVSX09OEAESEgoORUVRVUlQT1BFUl9P",
            "RkYQAhISCg5FRVFVSVBPUEVSX01BWBADKjgKCkVUcmFkZVR5cGUSFAoQRVRS",
            "QURFVFlQRV9UUkFERRAAEhQKEEVUUkFERVRZUEVfQk9PVEgQASqHAQoURUVx",
            "dWlwU3RyZW5ndGhSZXN1bHQSFwoTRVNUUkVOR1RIUkVTVUxUX01JThAAEhsK",
            "F0VTVFJFTkdUSFJFU1VMVF9TVUNDRVNTEAESHgoaRVNUUkVOR1RIUkVTVUxU",
            "X05PTUFURVJJQUwQAhIZChVFU1RSRU5HVEhSRVNVTFRfTUFYTFYQA0IHWgUu",
            "O0NtZGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Cmd.ProtoItemCommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Cmd.EEquipOper), typeof(global::Cmd.ETradeType), typeof(global::Cmd.EEquipStrengthResult), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.PackageItem), global::Cmd.PackageItem.Parser, new[]{ "Type", "Fighterid", "Maxslot", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SendPackageListCmd), global::Cmd.SendPackageListCmd.Parser, new[]{ "Packs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.PackageUpdate), global::Cmd.PackageUpdate.Parser, new[]{ "Type", "Fighterid", "UpdateItems", "DelItems" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ItemUse), global::Cmd.ItemUse.Parser, new[]{ "Itemguid", "Targets", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.EquipPackageOperCmd), global::Cmd.EquipPackageOperCmd.Parser, new[]{ "Fighterid", "Oper", "Pos", "EquipGuid", "SrcFighter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.RetEquipPackageOperCmd), global::Cmd.RetEquipPackageOperCmd.Parser, new[]{ "Fighterid", "Oper", "Pos", "Equipguid", "Srcfighter", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SItem), global::Cmd.SItem.Parser, new[]{ "Guid", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.BrowsePackage), global::Cmd.BrowsePackage.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ItemShowCmd), global::Cmd.ItemShowCmd.Parser, new[]{ "Items", "ReduceItems", "RewardItems" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.TradeItemBaseInfo), global::Cmd.TradeItemBaseInfo.Parser, new[]{ "Itemid", "Price", "Count", "Guid", "OrderId", "RefineLv", "Overlap", "IsExpired", "ItemData", "PublicityId", "EndTime", "Key", "Charid", "Name", "Type", "UpRate", "DownRate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MoneyData), global::Cmd.MoneyData.Parser, new[]{ "Id", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MoneyCmd), global::Cmd.MoneyCmd.Parser, new[]{ "Moneydatas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MoneyUpdateCmd), global::Cmd.MoneyUpdateCmd.Parser, new[]{ "Moneydata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.EquipStrengthCmd), global::Cmd.EquipStrengthCmd.Parser, new[]{ "EquipGuid", "Fighterid", "Newlv", "Ret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.EquipUpgradeStarCmd), global::Cmd.EquipUpgradeStarCmd.Parser, new[]{ "EquipGuid", "Fighterid", "MaterialEquip", "Newlv", "Ret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.RewardCommonCmd), global::Cmd.RewardCommonCmd.Parser, new[]{ "Items" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  装备操作
  /// </summary>
  public enum EEquipOper {
    [pbr::OriginalName("EEQUIPOPER_MIN")] Min = 0,
    /// <summary>
    ///  穿起装备
    /// </summary>
    [pbr::OriginalName("EEQUIPOPER_ON")] On = 1,
    /// <summary>
    ///  脱下装备
    /// </summary>
    [pbr::OriginalName("EEQUIPOPER_OFF")] Off = 2,
    /// <summary>
    ///  EEQUIPOPER_OFFPOS     = 3;    // 脱下对应部位装备
    /// </summary>
    [pbr::OriginalName("EEQUIPOPER_MAX")] Max = 3,
  }

  /// <summary>
  ///  unused
  /// </summary>
  public enum ETradeType {
    [pbr::OriginalName("ETRADETYPE_TRADE")] Trade = 0,
    [pbr::OriginalName("ETRADETYPE_BOOTH")] Booth = 1,
  }

  public enum EEquipStrengthResult {
    [pbr::OriginalName("ESTRENGTHRESULT_MIN")] EstrengthresultMin = 0,
    /// <summary>
    /// 成功
    /// </summary>
    [pbr::OriginalName("ESTRENGTHRESULT_SUCCESS")] EstrengthresultSuccess = 1,
    /// <summary>
    /// 材料不足
    /// </summary>
    [pbr::OriginalName("ESTRENGTHRESULT_NOMATERIAL")] EstrengthresultNomaterial = 2,
    /// <summary>
    /// 已经到达最大等级
    /// </summary>
    [pbr::OriginalName("ESTRENGTHRESULT_MAXLV")] EstrengthresultMaxlv = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  包裹数据
  /// </summary>
  public sealed partial class PackageItem : pb::IMessage<PackageItem> {
    private static readonly pb::MessageParser<PackageItem> _parser = new pb::MessageParser<PackageItem>(() => new PackageItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PackageItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneItemReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageItem(PackageItem other) : this() {
      type_ = other.type_;
      fighterid_ = other.fighterid_;
      maxslot_ = other.maxslot_;
      data_ = other.data_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageItem Clone() {
      return new PackageItem(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Cmd.EPackType type_ = 0;
    /// <summary>
    ///  类型 枚举EPackType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EPackType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "fighterid" field.</summary>
    public const int FighteridFieldNumber = 2;
    private uint fighterid_;
    /// <summary>
    ///  伙伴ID 当EPackType是装备栏时该字段有效，表:Partner.xlsx列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fighterid {
      get { return fighterid_; }
      set {
        fighterid_ = value;
      }
    }

    /// <summary>Field number for the "maxslot" field.</summary>
    public const int MaxslotFieldNumber = 3;
    private uint maxslot_;
    /// <summary>
    ///  最大栏数,可容纳物品数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Maxslot {
      get { return maxslot_; }
      set {
        maxslot_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Cmd.ItemData> _repeated_data_codec
        = pb::FieldCodec.ForMessage(34, global::Cmd.ItemData.Parser);
    private readonly pbc::RepeatedField<global::Cmd.ItemData> data_ = new pbc::RepeatedField<global::Cmd.ItemData>();
    /// <summary>
    ///  道具数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.ItemData> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PackageItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PackageItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Fighterid != other.Fighterid) return false;
      if (Maxslot != other.Maxslot) return false;
      if(!data_.Equals(other.data_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Fighterid != 0) hash ^= Fighterid.GetHashCode();
      if (Maxslot != 0) hash ^= Maxslot.GetHashCode();
      hash ^= data_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Fighterid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Fighterid);
      }
      if (Maxslot != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Maxslot);
      }
      data_.WriteTo(output, _repeated_data_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Fighterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fighterid);
      }
      if (Maxslot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Maxslot);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PackageItem other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Fighterid != 0) {
        Fighterid = other.Fighterid;
      }
      if (other.Maxslot != 0) {
        Maxslot = other.Maxslot;
      }
      data_.Add(other.data_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Cmd.EPackType) input.ReadEnum();
            break;
          }
          case 16: {
            Fighterid = input.ReadUInt32();
            break;
          }
          case 24: {
            Maxslot = input.ReadUInt32();
            break;
          }
          case 34: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  正在使用的
  ///  包裹数据,S&lt;->C
  /// </summary>
  public sealed partial class SendPackageListCmd : pb::IMessage<SendPackageListCmd> {
    private static readonly pb::MessageParser<SendPackageListCmd> _parser = new pb::MessageParser<SendPackageListCmd>(() => new SendPackageListCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendPackageListCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneItemReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendPackageListCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendPackageListCmd(SendPackageListCmd other) : this() {
      packs_ = other.packs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendPackageListCmd Clone() {
      return new SendPackageListCmd(this);
    }

    /// <summary>Field number for the "packs" field.</summary>
    public const int PacksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cmd.PackageItem> _repeated_packs_codec
        = pb::FieldCodec.ForMessage(10, global::Cmd.PackageItem.Parser);
    private readonly pbc::RepeatedField<global::Cmd.PackageItem> packs_ = new pbc::RepeatedField<global::Cmd.PackageItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.PackageItem> Packs {
      get { return packs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendPackageListCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendPackageListCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!packs_.Equals(other.packs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= packs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      packs_.WriteTo(output, _repeated_packs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += packs_.CalculateSize(_repeated_packs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendPackageListCmd other) {
      if (other == null) {
        return;
      }
      packs_.Add(other.packs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            packs_.AddEntriesFrom(input, _repeated_packs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  正在使用的
  ///  更新装备栏,S->C
  /// </summary>
  public sealed partial class PackageUpdate : pb::IMessage<PackageUpdate> {
    private static readonly pb::MessageParser<PackageUpdate> _parser = new pb::MessageParser<PackageUpdate>(() => new PackageUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PackageUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneItemReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageUpdate(PackageUpdate other) : this() {
      type_ = other.type_;
      fighterid_ = other.fighterid_;
      updateItems_ = other.updateItems_.Clone();
      delItems_ = other.delItems_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageUpdate Clone() {
      return new PackageUpdate(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Cmd.EPackType type_ = 0;
    /// <summary>
    ///  类型 枚举EPackType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EPackType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "fighterid" field.</summary>
    public const int FighteridFieldNumber = 2;
    private uint fighterid_;
    /// <summary>
    ///  伙伴id 当EPackType是装备栏时该字段有效，表:Partner.xlsx列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fighterid {
      get { return fighterid_; }
      set {
        fighterid_ = value;
      }
    }

    /// <summary>Field number for the "updateItems" field.</summary>
    public const int UpdateItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.ItemData> _repeated_updateItems_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.ItemData.Parser);
    private readonly pbc::RepeatedField<global::Cmd.ItemData> updateItems_ = new pbc::RepeatedField<global::Cmd.ItemData>();
    /// <summary>
    ///  更新道具/装备数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.ItemData> UpdateItems {
      get { return updateItems_; }
    }

    /// <summary>Field number for the "delItems" field.</summary>
    public const int DelItemsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_delItems_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> delItems_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  删除道具/装备装备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DelItems {
      get { return delItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PackageUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PackageUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Fighterid != other.Fighterid) return false;
      if(!updateItems_.Equals(other.updateItems_)) return false;
      if(!delItems_.Equals(other.delItems_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Fighterid != 0) hash ^= Fighterid.GetHashCode();
      hash ^= updateItems_.GetHashCode();
      hash ^= delItems_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Fighterid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Fighterid);
      }
      updateItems_.WriteTo(output, _repeated_updateItems_codec);
      delItems_.WriteTo(output, _repeated_delItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Fighterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fighterid);
      }
      size += updateItems_.CalculateSize(_repeated_updateItems_codec);
      size += delItems_.CalculateSize(_repeated_delItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PackageUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Fighterid != 0) {
        Fighterid = other.Fighterid;
      }
      updateItems_.Add(other.updateItems_);
      delItems_.Add(other.delItems_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Cmd.EPackType) input.ReadEnum();
            break;
          }
          case 16: {
            Fighterid = input.ReadUInt32();
            break;
          }
          case 26: {
            updateItems_.AddEntriesFrom(input, _repeated_updateItems_codec);
            break;
          }
          case 34: {
            delItems_.AddEntriesFrom(input, _repeated_delItems_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  正在使用的
  ///  使用道具协议,C->S
  /// </summary>
  public sealed partial class ItemUse : pb::IMessage<ItemUse> {
    private static readonly pb::MessageParser<ItemUse> _parser = new pb::MessageParser<ItemUse>(() => new ItemUse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemUse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneItemReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemUse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemUse(ItemUse other) : this() {
      itemguid_ = other.itemguid_;
      targets_ = other.targets_.Clone();
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemUse Clone() {
      return new ItemUse(this);
    }

    /// <summary>Field number for the "itemguid" field.</summary>
    public const int ItemguidFieldNumber = 3;
    private string itemguid_ = "";
    /// <summary>
    ///  道具guid,唯一iD
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Itemguid {
      get { return itemguid_; }
      set {
        itemguid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "targets" field.</summary>
    public const int TargetsFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_targets_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> targets_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///  使用目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Targets {
      get { return targets_; }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 5;
    private uint count_;
    /// <summary>
    ///  使用数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemUse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemUse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Itemguid != other.Itemguid) return false;
      if(!targets_.Equals(other.targets_)) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Itemguid.Length != 0) hash ^= Itemguid.GetHashCode();
      hash ^= targets_.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Itemguid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Itemguid);
      }
      targets_.WriteTo(output, _repeated_targets_codec);
      if (Count != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Itemguid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Itemguid);
      }
      size += targets_.CalculateSize(_repeated_targets_codec);
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemUse other) {
      if (other == null) {
        return;
      }
      if (other.Itemguid.Length != 0) {
        Itemguid = other.Itemguid;
      }
      targets_.Add(other.targets_);
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            Itemguid = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
          case 40: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 现在正在使用的
  ///  装备操作,C->S
  /// </summary>
  public sealed partial class EquipPackageOperCmd : pb::IMessage<EquipPackageOperCmd> {
    private static readonly pb::MessageParser<EquipPackageOperCmd> _parser = new pb::MessageParser<EquipPackageOperCmd>(() => new EquipPackageOperCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquipPackageOperCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneItemReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipPackageOperCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipPackageOperCmd(EquipPackageOperCmd other) : this() {
      fighterid_ = other.fighterid_;
      oper_ = other.oper_;
      pos_ = other.pos_;
      equipGuid_ = other.equipGuid_;
      srcFighter_ = other.srcFighter_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipPackageOperCmd Clone() {
      return new EquipPackageOperCmd(this);
    }

    /// <summary>Field number for the "fighterid" field.</summary>
    public const int FighteridFieldNumber = 3;
    private uint fighterid_;
    /// <summary>
    ///  伙伴id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fighterid {
      get { return fighterid_; }
      set {
        fighterid_ = value;
      }
    }

    /// <summary>Field number for the "oper" field.</summary>
    public const int OperFieldNumber = 4;
    private global::Cmd.EEquipOper oper_ = 0;
    /// <summary>
    ///  装备操作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EEquipOper Oper {
      get { return oper_; }
      set {
        oper_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 5;
    private global::Cmd.EEquipPos pos_ = 0;
    /// <summary>
    ///  装备部位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EEquipPos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "equip_guid" field.</summary>
    public const int EquipGuidFieldNumber = 6;
    private string equipGuid_ = "";
    /// <summary>
    ///  要穿的装备 guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EquipGuid {
      get { return equipGuid_; }
      set {
        equipGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "src_fighter" field.</summary>
    public const int SrcFighterFieldNumber = 7;
    private uint srcFighter_;
    /// <summary>
    ///  要穿的装备 所在的流派身上
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SrcFighter {
      get { return srcFighter_; }
      set {
        srcFighter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EquipPackageOperCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EquipPackageOperCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fighterid != other.Fighterid) return false;
      if (Oper != other.Oper) return false;
      if (Pos != other.Pos) return false;
      if (EquipGuid != other.EquipGuid) return false;
      if (SrcFighter != other.SrcFighter) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fighterid != 0) hash ^= Fighterid.GetHashCode();
      if (Oper != 0) hash ^= Oper.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (EquipGuid.Length != 0) hash ^= EquipGuid.GetHashCode();
      if (SrcFighter != 0) hash ^= SrcFighter.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fighterid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Fighterid);
      }
      if (Oper != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Oper);
      }
      if (Pos != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Pos);
      }
      if (EquipGuid.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(EquipGuid);
      }
      if (SrcFighter != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(SrcFighter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fighterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fighterid);
      }
      if (Oper != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Oper);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Pos);
      }
      if (EquipGuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EquipGuid);
      }
      if (SrcFighter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SrcFighter);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EquipPackageOperCmd other) {
      if (other == null) {
        return;
      }
      if (other.Fighterid != 0) {
        Fighterid = other.Fighterid;
      }
      if (other.Oper != 0) {
        Oper = other.Oper;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.EquipGuid.Length != 0) {
        EquipGuid = other.EquipGuid;
      }
      if (other.SrcFighter != 0) {
        SrcFighter = other.SrcFighter;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Fighterid = input.ReadUInt32();
            break;
          }
          case 32: {
            oper_ = (global::Cmd.EEquipOper) input.ReadEnum();
            break;
          }
          case 40: {
            pos_ = (global::Cmd.EEquipPos) input.ReadEnum();
            break;
          }
          case 50: {
            EquipGuid = input.ReadString();
            break;
          }
          case 56: {
            SrcFighter = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 现在正在使用的
  /// 装备穿戴结果,S->C
  /// </summary>
  public sealed partial class RetEquipPackageOperCmd : pb::IMessage<RetEquipPackageOperCmd> {
    private static readonly pb::MessageParser<RetEquipPackageOperCmd> _parser = new pb::MessageParser<RetEquipPackageOperCmd>(() => new RetEquipPackageOperCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RetEquipPackageOperCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneItemReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetEquipPackageOperCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetEquipPackageOperCmd(RetEquipPackageOperCmd other) : this() {
      fighterid_ = other.fighterid_;
      oper_ = other.oper_;
      pos_ = other.pos_;
      equipguid_ = other.equipguid_;
      srcfighter_ = other.srcfighter_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetEquipPackageOperCmd Clone() {
      return new RetEquipPackageOperCmd(this);
    }

    /// <summary>Field number for the "fighterid" field.</summary>
    public const int FighteridFieldNumber = 1;
    private uint fighterid_;
    /// <summary>
    ///  伙伴id 表:Partner.xlsx列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fighterid {
      get { return fighterid_; }
      set {
        fighterid_ = value;
      }
    }

    /// <summary>Field number for the "oper" field.</summary>
    public const int OperFieldNumber = 2;
    private global::Cmd.EEquipOper oper_ = 0;
    /// <summary>
    ///  装备操作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EEquipOper Oper {
      get { return oper_; }
      set {
        oper_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private global::Cmd.EEquipPos pos_ = 0;
    /// <summary>
    ///  装备部位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EEquipPos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "equipguid" field.</summary>
    public const int EquipguidFieldNumber = 4;
    private string equipguid_ = "";
    /// <summary>
    ///  要穿的装备 guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Equipguid {
      get { return equipguid_; }
      set {
        equipguid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "srcfighter" field.</summary>
    public const int SrcfighterFieldNumber = 5;
    private uint srcfighter_;
    /// <summary>
    ///  要穿的装备 所在的流派身上
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Srcfighter {
      get { return srcfighter_; }
      set {
        srcfighter_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 6;
    private bool result_;
    /// <summary>
    ///  穿戴结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RetEquipPackageOperCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RetEquipPackageOperCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fighterid != other.Fighterid) return false;
      if (Oper != other.Oper) return false;
      if (Pos != other.Pos) return false;
      if (Equipguid != other.Equipguid) return false;
      if (Srcfighter != other.Srcfighter) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fighterid != 0) hash ^= Fighterid.GetHashCode();
      if (Oper != 0) hash ^= Oper.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Equipguid.Length != 0) hash ^= Equipguid.GetHashCode();
      if (Srcfighter != 0) hash ^= Srcfighter.GetHashCode();
      if (Result != false) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fighterid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Fighterid);
      }
      if (Oper != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Oper);
      }
      if (Pos != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Pos);
      }
      if (Equipguid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Equipguid);
      }
      if (Srcfighter != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Srcfighter);
      }
      if (Result != false) {
        output.WriteRawTag(48);
        output.WriteBool(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fighterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fighterid);
      }
      if (Oper != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Oper);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Pos);
      }
      if (Equipguid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Equipguid);
      }
      if (Srcfighter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Srcfighter);
      }
      if (Result != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RetEquipPackageOperCmd other) {
      if (other == null) {
        return;
      }
      if (other.Fighterid != 0) {
        Fighterid = other.Fighterid;
      }
      if (other.Oper != 0) {
        Oper = other.Oper;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Equipguid.Length != 0) {
        Equipguid = other.Equipguid;
      }
      if (other.Srcfighter != 0) {
        Srcfighter = other.Srcfighter;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Fighterid = input.ReadUInt32();
            break;
          }
          case 16: {
            oper_ = (global::Cmd.EEquipOper) input.ReadEnum();
            break;
          }
          case 24: {
            pos_ = (global::Cmd.EEquipPos) input.ReadEnum();
            break;
          }
          case 34: {
            Equipguid = input.ReadString();
            break;
          }
          case 40: {
            Srcfighter = input.ReadUInt32();
            break;
          }
          case 48: {
            Result = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// unused
  ///  client -> scene : sell item
  /// </summary>
  public sealed partial class SItem : pb::IMessage<SItem> {
    private static readonly pb::MessageParser<SItem> _parser = new pb::MessageParser<SItem>(() => new SItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneItemReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SItem(SItem other) : this() {
      guid_ = other.guid_;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SItem Clone() {
      return new SItem(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private string guid_ = "";
    /// <summary>
    ///  unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Guid {
      get { return guid_; }
      set {
        guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    /// <summary>
    ///  unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid.Length != 0) hash ^= Guid.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Guid);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SItem other) {
      if (other == null) {
        return;
      }
      if (other.Guid.Length != 0) {
        Guid = other.Guid;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Guid = input.ReadString();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  unused
  ///  C&lt;->S : browse package
  /// </summary>
  public sealed partial class BrowsePackage : pb::IMessage<BrowsePackage> {
    private static readonly pb::MessageParser<BrowsePackage> _parser = new pb::MessageParser<BrowsePackage>(() => new BrowsePackage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BrowsePackage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneItemReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrowsePackage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrowsePackage(BrowsePackage other) : this() {
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrowsePackage Clone() {
      return new BrowsePackage(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Cmd.EPackType type_ = 0;
    /// <summary>
    ///  unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EPackType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BrowsePackage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BrowsePackage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BrowsePackage other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            type_ = (global::Cmd.EPackType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  现在正在使用的
  ///  S->C : item show
  /// </summary>
  public sealed partial class ItemShowCmd : pb::IMessage<ItemShowCmd> {
    private static readonly pb::MessageParser<ItemShowCmd> _parser = new pb::MessageParser<ItemShowCmd>(() => new ItemShowCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemShowCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneItemReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemShowCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemShowCmd(ItemShowCmd other) : this() {
      items_ = other.items_.Clone();
      reduceItems_ = other.reduceItems_.Clone();
      rewardItems_ = other.rewardItems_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemShowCmd Clone() {
      return new ItemShowCmd(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cmd.ItemInfo> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Cmd.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Cmd.ItemInfo> items_ = new pbc::RepeatedField<global::Cmd.ItemInfo>();
    /// <summary>
    /// 获得
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.ItemInfo> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "reduce_items" field.</summary>
    public const int ReduceItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cmd.ItemInfo> _repeated_reduceItems_codec
        = pb::FieldCodec.ForMessage(18, global::Cmd.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Cmd.ItemInfo> reduceItems_ = new pbc::RepeatedField<global::Cmd.ItemInfo>();
    /// <summary>
    /// 消耗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.ItemInfo> ReduceItems {
      get { return reduceItems_; }
    }

    /// <summary>Field number for the "reward_items" field.</summary>
    public const int RewardItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.ItemInfo> _repeated_rewardItems_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Cmd.ItemInfo> rewardItems_ = new pbc::RepeatedField<global::Cmd.ItemInfo>();
    /// <summary>
    /// 奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.ItemInfo> RewardItems {
      get { return rewardItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemShowCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemShowCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      if(!reduceItems_.Equals(other.reduceItems_)) return false;
      if(!rewardItems_.Equals(other.rewardItems_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      hash ^= reduceItems_.GetHashCode();
      hash ^= rewardItems_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      reduceItems_.WriteTo(output, _repeated_reduceItems_codec);
      rewardItems_.WriteTo(output, _repeated_rewardItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      size += reduceItems_.CalculateSize(_repeated_reduceItems_codec);
      size += rewardItems_.CalculateSize(_repeated_rewardItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemShowCmd other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      reduceItems_.Add(other.reduceItems_);
      rewardItems_.Add(other.rewardItems_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 18: {
            reduceItems_.AddEntriesFrom(input, _repeated_reduceItems_codec);
            break;
          }
          case 26: {
            rewardItems_.AddEntriesFrom(input, _repeated_rewardItems_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  unused
  /// </summary>
  public sealed partial class TradeItemBaseInfo : pb::IMessage<TradeItemBaseInfo> {
    private static readonly pb::MessageParser<TradeItemBaseInfo> _parser = new pb::MessageParser<TradeItemBaseInfo>(() => new TradeItemBaseInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradeItemBaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneItemReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeItemBaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeItemBaseInfo(TradeItemBaseInfo other) : this() {
      itemid_ = other.itemid_;
      price_ = other.price_;
      count_ = other.count_;
      guid_ = other.guid_;
      orderId_ = other.orderId_;
      refineLv_ = other.refineLv_;
      overlap_ = other.overlap_;
      isExpired_ = other.isExpired_;
      ItemData = other.itemData_ != null ? other.ItemData.Clone() : null;
      publicityId_ = other.publicityId_;
      endTime_ = other.endTime_;
      key_ = other.key_;
      charid_ = other.charid_;
      name_ = other.name_;
      type_ = other.type_;
      upRate_ = other.upRate_;
      downRate_ = other.downRate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeItemBaseInfo Clone() {
      return new TradeItemBaseInfo(this);
    }

    /// <summary>Field number for the "itemid" field.</summary>
    public const int ItemidFieldNumber = 1;
    private uint itemid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Itemid {
      get { return itemid_; }
      set {
        itemid_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 2;
    private uint price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 4;
    private string guid_ = "";
    /// <summary>
    /// 出售的时候需要
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Guid {
      get { return guid_; }
      set {
        guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_id" field.</summary>
    public const int OrderIdFieldNumber = 5;
    private ulong orderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OrderId {
      get { return orderId_; }
      set {
        orderId_ = value;
      }
    }

    /// <summary>Field number for the "refine_lv" field.</summary>
    public const int RefineLvFieldNumber = 6;
    private uint refineLv_;
    /// <summary>
    /// 精炼等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RefineLv {
      get { return refineLv_; }
      set {
        refineLv_ = value;
      }
    }

    /// <summary>Field number for the "overlap" field.</summary>
    public const int OverlapFieldNumber = 8;
    private bool overlap_;
    /// <summary>
    /// 是否可堆叠
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Overlap {
      get { return overlap_; }
      set {
        overlap_ = value;
      }
    }

    /// <summary>Field number for the "is_expired" field.</summary>
    public const int IsExpiredFieldNumber = 9;
    private bool isExpired_;
    /// <summary>
    /// 是否过期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsExpired {
      get { return isExpired_; }
      set {
        isExpired_ = value;
      }
    }

    /// <summary>Field number for the "item_data" field.</summary>
    public const int ItemDataFieldNumber = 10;
    private global::Cmd.ItemData itemData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ItemData ItemData {
      get { return itemData_; }
      set {
        itemData_ = value;
      }
    }

    /// <summary>Field number for the "publicity_id" field.</summary>
    public const int PublicityIdFieldNumber = 11;
    private uint publicityId_;
    /// <summary>
    /// 公示期id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PublicityId {
      get { return publicityId_; }
      set {
        publicityId_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 12;
    private uint endTime_;
    /// <summary>
    /// 公示期结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 13;
    private string key_ = "";
    /// <summary>
    /// 公示期的key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 14;
    private ulong charid_;
    /// <summary>
    ///  摆摊玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 15;
    private string name_ = "";
    /// <summary>
    ///  摆摊玩家名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 16;
    private global::Cmd.ETradeType type_ = 0;
    /// <summary>
    /// 交易类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ETradeType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "up_rate" field.</summary>
    public const int UpRateFieldNumber = 17;
    private uint upRate_;
    /// <summary>
    ///  上调价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UpRate {
      get { return upRate_; }
      set {
        upRate_ = value;
      }
    }

    /// <summary>Field number for the "down_rate" field.</summary>
    public const int DownRateFieldNumber = 18;
    private uint downRate_;
    /// <summary>
    ///  下调价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DownRate {
      get { return downRate_; }
      set {
        downRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TradeItemBaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TradeItemBaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Itemid != other.Itemid) return false;
      if (Price != other.Price) return false;
      if (Count != other.Count) return false;
      if (Guid != other.Guid) return false;
      if (OrderId != other.OrderId) return false;
      if (RefineLv != other.RefineLv) return false;
      if (Overlap != other.Overlap) return false;
      if (IsExpired != other.IsExpired) return false;
      if (!object.Equals(ItemData, other.ItemData)) return false;
      if (PublicityId != other.PublicityId) return false;
      if (EndTime != other.EndTime) return false;
      if (Key != other.Key) return false;
      if (Charid != other.Charid) return false;
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (UpRate != other.UpRate) return false;
      if (DownRate != other.DownRate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Itemid != 0) hash ^= Itemid.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Guid.Length != 0) hash ^= Guid.GetHashCode();
      if (OrderId != 0UL) hash ^= OrderId.GetHashCode();
      if (RefineLv != 0) hash ^= RefineLv.GetHashCode();
      if (Overlap != false) hash ^= Overlap.GetHashCode();
      if (IsExpired != false) hash ^= IsExpired.GetHashCode();
      if (itemData_ != null) hash ^= ItemData.GetHashCode();
      if (PublicityId != 0) hash ^= PublicityId.GetHashCode();
      if (EndTime != 0) hash ^= EndTime.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (UpRate != 0) hash ^= UpRate.GetHashCode();
      if (DownRate != 0) hash ^= DownRate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Itemid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Itemid);
      }
      if (Price != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Price);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Count);
      }
      if (Guid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Guid);
      }
      if (OrderId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(OrderId);
      }
      if (RefineLv != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(RefineLv);
      }
      if (Overlap != false) {
        output.WriteRawTag(64);
        output.WriteBool(Overlap);
      }
      if (IsExpired != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsExpired);
      }
      if (itemData_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ItemData);
      }
      if (PublicityId != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(PublicityId);
      }
      if (EndTime != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(EndTime);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Key);
      }
      if (Charid != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(Charid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) Type);
      }
      if (UpRate != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(UpRate);
      }
      if (DownRate != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(DownRate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Itemid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Itemid);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Price);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (Guid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
      }
      if (OrderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OrderId);
      }
      if (RefineLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RefineLv);
      }
      if (Overlap != false) {
        size += 1 + 1;
      }
      if (IsExpired != false) {
        size += 1 + 1;
      }
      if (itemData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ItemData);
      }
      if (PublicityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PublicityId);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (UpRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UpRate);
      }
      if (DownRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DownRate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TradeItemBaseInfo other) {
      if (other == null) {
        return;
      }
      if (other.Itemid != 0) {
        Itemid = other.Itemid;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Guid.Length != 0) {
        Guid = other.Guid;
      }
      if (other.OrderId != 0UL) {
        OrderId = other.OrderId;
      }
      if (other.RefineLv != 0) {
        RefineLv = other.RefineLv;
      }
      if (other.Overlap != false) {
        Overlap = other.Overlap;
      }
      if (other.IsExpired != false) {
        IsExpired = other.IsExpired;
      }
      if (other.itemData_ != null) {
        if (itemData_ == null) {
          itemData_ = new global::Cmd.ItemData();
        }
        ItemData.MergeFrom(other.ItemData);
      }
      if (other.PublicityId != 0) {
        PublicityId = other.PublicityId;
      }
      if (other.EndTime != 0) {
        EndTime = other.EndTime;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.UpRate != 0) {
        UpRate = other.UpRate;
      }
      if (other.DownRate != 0) {
        DownRate = other.DownRate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Itemid = input.ReadUInt32();
            break;
          }
          case 16: {
            Price = input.ReadUInt32();
            break;
          }
          case 24: {
            Count = input.ReadUInt32();
            break;
          }
          case 34: {
            Guid = input.ReadString();
            break;
          }
          case 40: {
            OrderId = input.ReadUInt64();
            break;
          }
          case 48: {
            RefineLv = input.ReadUInt32();
            break;
          }
          case 64: {
            Overlap = input.ReadBool();
            break;
          }
          case 72: {
            IsExpired = input.ReadBool();
            break;
          }
          case 82: {
            if (itemData_ == null) {
              itemData_ = new global::Cmd.ItemData();
            }
            input.ReadMessage(itemData_);
            break;
          }
          case 88: {
            PublicityId = input.ReadUInt32();
            break;
          }
          case 96: {
            EndTime = input.ReadUInt32();
            break;
          }
          case 106: {
            Key = input.ReadString();
            break;
          }
          case 112: {
            Charid = input.ReadUInt64();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 128: {
            type_ = (global::Cmd.ETradeType) input.ReadEnum();
            break;
          }
          case 136: {
            UpRate = input.ReadUInt32();
            break;
          }
          case 144: {
            DownRate = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoneyData : pb::IMessage<MoneyData> {
    private static readonly pb::MessageParser<MoneyData> _parser = new pb::MessageParser<MoneyData>(() => new MoneyData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoneyData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneItemReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoneyData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoneyData(MoneyData other) : this() {
      id_ = other.id_;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoneyData Clone() {
      return new MoneyData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///  道具id，对应道具表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private ulong count_;
    /// <summary>
    ///  道具数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoneyData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoneyData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Count != 0UL) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Count != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Count != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoneyData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Count != 0UL) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Count = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  S -> C, 上线或进入场景时初始化货币数据
  /// </summary>
  public sealed partial class MoneyCmd : pb::IMessage<MoneyCmd> {
    private static readonly pb::MessageParser<MoneyCmd> _parser = new pb::MessageParser<MoneyCmd>(() => new MoneyCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoneyCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneItemReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoneyCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoneyCmd(MoneyCmd other) : this() {
      moneydatas_ = other.moneydatas_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoneyCmd Clone() {
      return new MoneyCmd(this);
    }

    /// <summary>Field number for the "moneydatas" field.</summary>
    public const int MoneydatasFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cmd.MoneyData> _repeated_moneydatas_codec
        = pb::FieldCodec.ForMessage(10, global::Cmd.MoneyData.Parser);
    private readonly pbc::RepeatedField<global::Cmd.MoneyData> moneydatas_ = new pbc::RepeatedField<global::Cmd.MoneyData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.MoneyData> Moneydatas {
      get { return moneydatas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoneyCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoneyCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!moneydatas_.Equals(other.moneydatas_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= moneydatas_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      moneydatas_.WriteTo(output, _repeated_moneydatas_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += moneydatas_.CalculateSize(_repeated_moneydatas_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoneyCmd other) {
      if (other == null) {
        return;
      }
      moneydatas_.Add(other.moneydatas_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            moneydatas_.AddEntriesFrom(input, _repeated_moneydatas_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  S -> C, 更新货币数据
  /// </summary>
  public sealed partial class MoneyUpdateCmd : pb::IMessage<MoneyUpdateCmd> {
    private static readonly pb::MessageParser<MoneyUpdateCmd> _parser = new pb::MessageParser<MoneyUpdateCmd>(() => new MoneyUpdateCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoneyUpdateCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneItemReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoneyUpdateCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoneyUpdateCmd(MoneyUpdateCmd other) : this() {
      Moneydata = other.moneydata_ != null ? other.Moneydata.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoneyUpdateCmd Clone() {
      return new MoneyUpdateCmd(this);
    }

    /// <summary>Field number for the "moneydata" field.</summary>
    public const int MoneydataFieldNumber = 1;
    private global::Cmd.MoneyData moneydata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.MoneyData Moneydata {
      get { return moneydata_; }
      set {
        moneydata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoneyUpdateCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoneyUpdateCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Moneydata, other.Moneydata)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (moneydata_ != null) hash ^= Moneydata.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (moneydata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Moneydata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (moneydata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Moneydata);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoneyUpdateCmd other) {
      if (other == null) {
        return;
      }
      if (other.moneydata_ != null) {
        if (moneydata_ == null) {
          moneydata_ = new global::Cmd.MoneyData();
        }
        Moneydata.MergeFrom(other.Moneydata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (moneydata_ == null) {
              moneydata_ = new global::Cmd.MoneyData();
            }
            input.ReadMessage(moneydata_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  S&lt;->C 装备强化
  /// </summary>
  public sealed partial class EquipStrengthCmd : pb::IMessage<EquipStrengthCmd> {
    private static readonly pb::MessageParser<EquipStrengthCmd> _parser = new pb::MessageParser<EquipStrengthCmd>(() => new EquipStrengthCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquipStrengthCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneItemReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipStrengthCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipStrengthCmd(EquipStrengthCmd other) : this() {
      equipGuid_ = other.equipGuid_;
      fighterid_ = other.fighterid_;
      newlv_ = other.newlv_;
      ret_ = other.ret_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipStrengthCmd Clone() {
      return new EquipStrengthCmd(this);
    }

    /// <summary>Field number for the "equip_guid" field.</summary>
    public const int EquipGuidFieldNumber = 1;
    private string equipGuid_ = "";
    /// <summary>
    ///  要强化的装备 guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EquipGuid {
      get { return equipGuid_; }
      set {
        equipGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fighterid" field.</summary>
    public const int FighteridFieldNumber = 2;
    private uint fighterid_;
    /// <summary>
    ///  装备所在的伙伴id  如果没有被伙伴穿戴，该字段填0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fighterid {
      get { return fighterid_; }
      set {
        fighterid_ = value;
      }
    }

    /// <summary>Field number for the "newlv" field.</summary>
    public const int NewlvFieldNumber = 4;
    private uint newlv_;
    /// <summary>
    /// 以下是返回数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Newlv {
      get { return newlv_; }
      set {
        newlv_ = value;
      }
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 5;
    private global::Cmd.EEquipStrengthResult ret_ = 0;
    /// <summary>
    /// 强化结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EEquipStrengthResult Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EquipStrengthCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EquipStrengthCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EquipGuid != other.EquipGuid) return false;
      if (Fighterid != other.Fighterid) return false;
      if (Newlv != other.Newlv) return false;
      if (Ret != other.Ret) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EquipGuid.Length != 0) hash ^= EquipGuid.GetHashCode();
      if (Fighterid != 0) hash ^= Fighterid.GetHashCode();
      if (Newlv != 0) hash ^= Newlv.GetHashCode();
      if (Ret != 0) hash ^= Ret.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipGuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EquipGuid);
      }
      if (Fighterid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Fighterid);
      }
      if (Newlv != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Newlv);
      }
      if (Ret != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EquipGuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EquipGuid);
      }
      if (Fighterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fighterid);
      }
      if (Newlv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Newlv);
      }
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EquipStrengthCmd other) {
      if (other == null) {
        return;
      }
      if (other.EquipGuid.Length != 0) {
        EquipGuid = other.EquipGuid;
      }
      if (other.Fighterid != 0) {
        Fighterid = other.Fighterid;
      }
      if (other.Newlv != 0) {
        Newlv = other.Newlv;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EquipGuid = input.ReadString();
            break;
          }
          case 16: {
            Fighterid = input.ReadUInt32();
            break;
          }
          case 32: {
            Newlv = input.ReadUInt32();
            break;
          }
          case 40: {
            ret_ = (global::Cmd.EEquipStrengthResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  S&lt;->C 装备升星
  /// </summary>
  public sealed partial class EquipUpgradeStarCmd : pb::IMessage<EquipUpgradeStarCmd> {
    private static readonly pb::MessageParser<EquipUpgradeStarCmd> _parser = new pb::MessageParser<EquipUpgradeStarCmd>(() => new EquipUpgradeStarCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquipUpgradeStarCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneItemReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipUpgradeStarCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipUpgradeStarCmd(EquipUpgradeStarCmd other) : this() {
      equipGuid_ = other.equipGuid_;
      fighterid_ = other.fighterid_;
      materialEquip_ = other.materialEquip_.Clone();
      newlv_ = other.newlv_;
      ret_ = other.ret_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipUpgradeStarCmd Clone() {
      return new EquipUpgradeStarCmd(this);
    }

    /// <summary>Field number for the "equip_guid" field.</summary>
    public const int EquipGuidFieldNumber = 1;
    private string equipGuid_ = "";
    /// <summary>
    ///  要升星的装备 guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EquipGuid {
      get { return equipGuid_; }
      set {
        equipGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fighterid" field.</summary>
    public const int FighteridFieldNumber = 2;
    private uint fighterid_;
    /// <summary>
    ///  装备所在的伙伴id  如果没有被伙伴穿戴，该字段填0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fighterid {
      get { return fighterid_; }
      set {
        fighterid_ = value;
      }
    }

    /// <summary>Field number for the "material_equip" field.</summary>
    public const int MaterialEquipFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_materialEquip_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> materialEquip_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  消耗的equip guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MaterialEquip {
      get { return materialEquip_; }
    }

    /// <summary>Field number for the "newlv" field.</summary>
    public const int NewlvFieldNumber = 4;
    private uint newlv_;
    /// <summary>
    /// 以下是返回数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Newlv {
      get { return newlv_; }
      set {
        newlv_ = value;
      }
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 5;
    private global::Cmd.EEquipStrengthResult ret_ = 0;
    /// <summary>
    /// 升星结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EEquipStrengthResult Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EquipUpgradeStarCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EquipUpgradeStarCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EquipGuid != other.EquipGuid) return false;
      if (Fighterid != other.Fighterid) return false;
      if(!materialEquip_.Equals(other.materialEquip_)) return false;
      if (Newlv != other.Newlv) return false;
      if (Ret != other.Ret) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EquipGuid.Length != 0) hash ^= EquipGuid.GetHashCode();
      if (Fighterid != 0) hash ^= Fighterid.GetHashCode();
      hash ^= materialEquip_.GetHashCode();
      if (Newlv != 0) hash ^= Newlv.GetHashCode();
      if (Ret != 0) hash ^= Ret.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipGuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EquipGuid);
      }
      if (Fighterid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Fighterid);
      }
      materialEquip_.WriteTo(output, _repeated_materialEquip_codec);
      if (Newlv != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Newlv);
      }
      if (Ret != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Ret);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EquipGuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EquipGuid);
      }
      if (Fighterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fighterid);
      }
      size += materialEquip_.CalculateSize(_repeated_materialEquip_codec);
      if (Newlv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Newlv);
      }
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ret);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EquipUpgradeStarCmd other) {
      if (other == null) {
        return;
      }
      if (other.EquipGuid.Length != 0) {
        EquipGuid = other.EquipGuid;
      }
      if (other.Fighterid != 0) {
        Fighterid = other.Fighterid;
      }
      materialEquip_.Add(other.materialEquip_);
      if (other.Newlv != 0) {
        Newlv = other.Newlv;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EquipGuid = input.ReadString();
            break;
          }
          case 16: {
            Fighterid = input.ReadUInt32();
            break;
          }
          case 26: {
            materialEquip_.AddEntriesFrom(input, _repeated_materialEquip_codec);
            break;
          }
          case 32: {
            Newlv = input.ReadUInt32();
            break;
          }
          case 40: {
            ret_ = (global::Cmd.EEquipStrengthResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  获得奖励通用显示,S->C
  /// </summary>
  public sealed partial class RewardCommonCmd : pb::IMessage<RewardCommonCmd> {
    private static readonly pb::MessageParser<RewardCommonCmd> _parser = new pb::MessageParser<RewardCommonCmd>(() => new RewardCommonCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RewardCommonCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneItemReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardCommonCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardCommonCmd(RewardCommonCmd other) : this() {
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardCommonCmd Clone() {
      return new RewardCommonCmd(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.ItemData> _repeated_items_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.ItemData.Parser);
    private readonly pbc::RepeatedField<global::Cmd.ItemData> items_ = new pbc::RepeatedField<global::Cmd.ItemData>();
    /// <summary>
    ///  物品信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.ItemData> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RewardCommonCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RewardCommonCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RewardCommonCmd other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
