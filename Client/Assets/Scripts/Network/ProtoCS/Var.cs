// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Var.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Cmd {

  /// <summary>Holder for reflection information generated from Var.proto</summary>
  public static partial class VarReflection {

    #region Descriptor
    /// <summary>File descriptor for Var.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VarReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglWYXIucHJvdG8SA0NtZCJSCgNWYXISGwoEdHlwZRgBIAEoDjINLkNtZC5F",
            "VmFyVHlwZRINCgV2YWx1ZRgCIAEoDRIRCgl2YWx1ZV9zdHIYAyABKAkSDAoE",
            "dGltZRgEIAEoDSIzCgdTdGF0VmFyEgsKA2tleRgBIAEoCRINCgV2YWx1ZRgC",
            "IAEoDRIMCgR0aW1lGAMgASgNKrgCCghFVmFyVHlwZRIQCgxFVkFSVFlQRV9N",
            "SU4QABISCg5FVkFSVFlQRV9BQ0NJRBABEhMKD0VWQVJUWVBFX0NIQVJJRBAC",
            "EhEKDUVWQVJUWVBFX05BTUUQAxIYChRFVkFSVFlQRV9NQVRDSFNUQVRVUxAE",
            "EhoKFkVWQVJUWVBFX01BVENIU0VSVkVSSUQQBRIaChZFVkFSVFlQRV9TQ0VO",
            "RVNFUlZFUklEEAYSFwoTRVZBUlRZUEVfU0NFTkVNQVBJRBAHEhQKEEVWQVJU",
            "WVBFX1JPT01LRVkQCBIWChJFVkFSVFlQRV9ST09NTUFQSUQQCRIZChVFVkFS",
            "VFlQRV9TQ0VORU1BUFRZUEUQChIYChRFVkFSVFlQRV9LSUxMRVJfTkFNRRAe",
            "EhAKDEVWQVJUWVBFX01BWBA1KpgBCgxFVmFyVGltZVR5cGUSFAoQRVZBUlRJ",
            "TUVUWVBFX01JThAAEhQKEEVWQVJUSU1FVFlQRV9EQVkQARIVChFFVkFSVElN",
            "RVRZUEVfV0VFSxACEhYKEkVWQVJUSU1FVFlQRV9NT05USBADEhcKE0VWQVJU",
            "SU1FVFlQRV9BTFdBWVMQBBIUChBFVkFSVElNRVRZUEVfTUFYEAVCB1oFLjtD",
            "bWRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Cmd.EVarType), typeof(global::Cmd.EVarTimeType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.Var), global::Cmd.Var.Parser, new[]{ "Type", "Value", "ValueStr", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.StatVar), global::Cmd.StatVar.Parser, new[]{ "Key", "Value", "Time" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EVarType {
    [pbr::OriginalName("EVARTYPE_MIN")] Min = 0,
    /// <summary>
    /// 账号id 
    /// </summary>
    [pbr::OriginalName("EVARTYPE_ACCID")] Accid = 1,
    /// <summary>
    /// 角色id
    /// </summary>
    [pbr::OriginalName("EVARTYPE_CHARID")] Charid = 2,
    /// <summary>
    /// 角色名
    /// </summary>
    [pbr::OriginalName("EVARTYPE_NAME")] Name = 3,
    /// <summary>
    /// 匹配状态
    /// </summary>
    [pbr::OriginalName("EVARTYPE_MATCHSTATUS")] Matchstatus = 4,
    /// <summary>
    /// 匹配服id
    /// </summary>
    [pbr::OriginalName("EVARTYPE_MATCHSERVERID")] Matchserverid = 5,
    /// <summary>
    /// 场景服id
    /// </summary>
    [pbr::OriginalName("EVARTYPE_SCENESERVERID")] Sceneserverid = 6,
    /// <summary>
    /// 所在场景id(从room返回场景用)
    /// </summary>
    [pbr::OriginalName("EVARTYPE_SCENEMAPID")] Scenemapid = 7,
    /// <summary>
    /// 房间key
    /// </summary>
    [pbr::OriginalName("EVARTYPE_ROOMKEY")] Roomkey = 8,
    /// <summary>
    /// 所在RoomMapid
    /// </summary>
    [pbr::OriginalName("EVARTYPE_ROOMMAPID")] Roommapid = 9,
    /// <summary>
    /// 所在场景类型
    /// </summary>
    [pbr::OriginalName("EVARTYPE_SCENEMAPTYPE")] Scenemaptype = 10,
    /// <summary>
    /// 击杀者名字
    /// </summary>
    [pbr::OriginalName("EVARTYPE_KILLER_NAME")] KillerName = 30,
    [pbr::OriginalName("EVARTYPE_MAX")] Max = 53,
  }

  public enum EVarTimeType {
    [pbr::OriginalName("EVARTIMETYPE_MIN")] Min = 0,
    [pbr::OriginalName("EVARTIMETYPE_DAY")] Day = 1,
    [pbr::OriginalName("EVARTIMETYPE_WEEK")] Week = 2,
    [pbr::OriginalName("EVARTIMETYPE_MONTH")] Month = 3,
    [pbr::OriginalName("EVARTIMETYPE_ALWAYS")] Always = 4,
    [pbr::OriginalName("EVARTIMETYPE_MAX")] Max = 5,
  }

  #endregion

  #region Messages
  public sealed partial class Var : pb::IMessage<Var> {
    private static readonly pb::MessageParser<Var> _parser = new pb::MessageParser<Var>(() => new Var());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Var> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.VarReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Var() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Var(Var other) : this() {
      type_ = other.type_;
      value_ = other.value_;
      valueStr_ = other.valueStr_;
      time_ = other.time_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Var Clone() {
      return new Var(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Cmd.EVarType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EVarType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "value_str" field.</summary>
    public const int ValueStrFieldNumber = 3;
    private string valueStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ValueStr {
      get { return valueStr_; }
      set {
        valueStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private uint time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Var);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Var other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      if (ValueStr != other.ValueStr) return false;
      if (Time != other.Time) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (ValueStr.Length != 0) hash ^= ValueStr.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Value);
      }
      if (ValueStr.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ValueStr);
      }
      if (Time != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (ValueStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ValueStr);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Var other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.ValueStr.Length != 0) {
        ValueStr = other.ValueStr;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Cmd.EVarType) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadUInt32();
            break;
          }
          case 26: {
            ValueStr = input.ReadString();
            break;
          }
          case 32: {
            Time = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatVar : pb::IMessage<StatVar> {
    private static readonly pb::MessageParser<StatVar> _parser = new pb::MessageParser<StatVar>(() => new StatVar());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatVar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.VarReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatVar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatVar(StatVar other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      time_ = other.time_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatVar Clone() {
      return new StatVar(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private uint time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatVar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatVar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      if (Time != other.Time) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Value);
      }
      if (Time != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatVar other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 16: {
            Value = input.ReadUInt32();
            break;
          }
          case 24: {
            Time = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
