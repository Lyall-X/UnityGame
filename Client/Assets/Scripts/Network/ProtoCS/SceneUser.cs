// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneUser.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Cmd {

  /// <summary>Holder for reflection information generated from SceneUser.proto</summary>
  public static partial class SceneUserReflection {

    #region Descriptor
    /// <summary>File descriptor for SceneUser.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SceneUserReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9TY2VuZVVzZXIucHJvdG8SA0NtZBoRUHJvdG9Db21tb24ucHJvdG8iKgoL",
            "VXNlckF0dHJTdnISDAoEdHlwZRgBIAEoDRINCgV2YWx1ZRgCIAEoAiIuCg5T",
            "ZXRVc2VyRGF0YUNtZBIcCgVkYXRhcxgDIAMoCzINLkNtZC5Vc2VyRGF0YSI0",
            "Cg5TZXROaW5lRGF0YUNtZBIiCgplbnRyeWRhdGFzGAEgAygLMg4uQ21kLkVu",
            "dHJ5RGF0YSIgCg1Vc2VyR01Db21tYW5kEg8KB2NvbW1hbmQYAyABKAkiTwoS",
            "VXNlckxldmVsVXBTeW5jQ21kEgwKBGd1aWQYAyABKAQSDQoFbmV3bHYYBCAB",
            "KA0SHAoFYXR0cnMYBSADKAsyDS5DbWQuVXNlckF0dHIiUQoSQXR0cnNDaGFu",
            "Z2VTeW5jQ21kEg0KBW5wY2lkGAEgASgNEg4KBnNvdXJjZRgCIAEoDRIcCgVh",
            "dHRycxgDIAMoCzINLkNtZC5Vc2VyQXR0ciJtChVVc2VyQXR0ckNoYW5nZVNo",
            "b3dDbWQSDAoEZ3VpZBgDIAEoBBIoCgpjaGFuZ2V0eXBlGAQgASgOMhQuQ21k",
            "LkVBdHRyQ2hhbmdlVHlwZRIcCgVhdHRycxgFIAMoCzINLkNtZC5Vc2VyQXR0",
            "ciKGAQoMQ21kRXhpdFBvaW50EgoKAmlkGAEgASgNEhoKA3BvcxgCIAEoCzIN",
            "LkNtZC5TY2VuZVBvcxIcCgVyYW5nZRgDIAEoCzINLkNtZC5TY2VuZVBvcxIf",
            "Cghyb3RhdGlvbhgEIAEoCzINLkNtZC5TY2VuZVBvcxIPCgd0b21hcGlkGAUg",
            "ASgNIkEKB05wY0ljb24SDQoFbnBjaWQYASABKA0SGgoDcG9zGAIgASgLMg0u",
            "Q21kLlNjZW5lUG9zEgsKA2RpchgDIAEoDSKTBAoSQ2hhbmdlU2NlbmVVc2Vy",
            "Q21kEg0KBW1hcElEGAMgASgNEg8KB21hcE5hbWUYBCABKAkSGgoDcG9zGAUg",
            "ASgLMg0uQ21kLlNjZW5lUG9zEg4KBmRtYXBJRBgGIAEoDRIPCgdwcmV2aWV3",
            "GAcgASgNEhAKCHJlc291cmNlGAogASgJEg8KB21pbmltYXAYCyABKAkSHgoD",
            "ZXBzGAwgAygLMhEuQ21kLkNtZEV4aXRQb2ludBIiCgxtb25zdGVyaWNvbnMY",
            "DiADKAsyDC5DbWQuTnBjSWNvbhILCgNkaXIYDyABKA0SIQoJZ29tYXB0eXBl",
            "GBAgASgOMg4uQ21kLkdvTWFwVHlwZRIRCglzY2VuZXR5cGUYEiABKA0SJgoP",
            "bG9jYWxEdW5nZW9uUG9zGBQgASgLMg0uQ21kLlNjZW5lUG9zEhoKEmxvY2Fs",
            "RHVuZ2VvblJhZGl1cxgVIAEoDRIWCg5sb2NhbER1bmdlb25JRBgWIAEoDRIY",
            "ChBsb2NhbER1bmdlb25OYW1lGBcgASgJEhgKEGxvY2FsRHVuZ2VvblR5cGUY",
            "GCABKA0SEwoLYXJ0cmVzb3VyY2UYGSABKAkSFQoNbG9naWNyZXNvdXJjZRga",
            "IAEoCRIXCg9jbGllbnRsb2FkZXJyb3IYGyABKAgSDwoHcmVsb2dpbhgcIAEo",
            "CBIQCghpc25ld21hcBgdIAEoCCINCgtSYWlkQmFja0NtZCI8CgpSYWlkV2lu",
            "Q21kEhIKCm5leHRyYWlkaWQYASABKA0SGgoDcG9zGAIgASgLMg0uQ21kLlNj",
            "ZW5lUG9zIj4KDlNoYXJlRGFtVGFyZ2V0Eg4KBmNoYXJpZBgBIAEoBBIOCgZk",
            "YW1hZ2UYAiABKAUSDAoEdHlwZRgDIAEoBSLvAQoJUGhhc2VEYXRhEg4KBm51",
            "bWJlchgBIAEoBRIaCgNwb3MYAiABKAsyDS5DbWQuU2NlbmVQb3MSFAoMaGl0",
            "ZWRUYXJnZXRzGAMgAygEEh4KB21vdmVwb3MYBCABKAsyDS5DbWQuU2NlbmVQ",
            "b3MSCwoDZGlyGAUgASgFEhAKCHNraWxsZGlyGAYgASgFEhMKC2JsYWNrc2Fu",
            "ZW5kGAcgASgIEhAKCHBpY2tpdGVtGAggASgEEhsKE2FjY3VtdWxhdGVfZW5k",
            "X3RpbWUYCSABKA0SHQoGY3VycG9zGAogASgLMg0uQ21kLlNjZW5lUG9zIrcC",
            "ChVTa2lsbEJyb2FkY2FzdFVzZXJDbWQSDgoGY2hhcmlkGAMgASgEEg8KB3Nr",
            "aWxsSUQYBCABKA0SDwoHc2tpbGxsdhgCIAEoDRIRCglyZWluZm9yY2UYBSAB",
            "KA0SHAoEZGF0YRgGIAEoCzIOLkNtZC5QaGFzZURhdGESEAoIcmFuZHNlZWQY",
            "ByABKAQSEQoJY2hhbnR0aW1lGAggASgNEiMKCmRhbWFnZWRhdGEYCSADKAsy",
            "Dy5DbWQuRGFtYWdlRGF0YRIfCghtb3ZlZGF0YRgKIAMoCzINLkNtZC5Nb3Zl",
            "RGF0YRITCgttYWluc2tpbGxpZBgLIAEoDRIWCg5wYXNzaXZldHJpZ2dlchgM",
            "IAEoCBIRCgl0aW1lc3RhbXAYDSABKAQSEAoIdW5pcXVlaWQYDiABKAQi0wEK",
            "EUJyZWFrU2tpbGxVc2VyQ21kEg4KBmNoYXJpZBgBIAEoBBIPCgdza2lsbGlk",
            "GAIgASgNEiIKBHR5cGUYAyABKA4yFC5DbWQuRVNraWxsQnJlYWtUeXBlEg4K",
            "BmRhbWFnZRgEIAEoDRIQCghhY3Rpb25pZBgFIAEoDRIRCgl0aW1lX2F4aXMY",
            "BiABKA0SEQoJYnJlYWtlcmlkGAcgASgEEhUKDWJyZWFrc3RyZW5ndGgYCCAB",
            "KA0SGgoDcG9zGAkgASgLMg0uQ21kLlNjZW5lUG9zInsKEU1vdmVFZmZlY3RV",
            "c2VyQ21kEg4KBmNoYXJpZBgDIAEoBBIPCgdza2lsbGlkGAQgASgNEg8KB3Nr",
            "aWxsbHYYAiABKA0SHwoIbW92ZWRhdGEYBSABKAsyDS5DbWQuTW92ZURhdGES",
            "EwoLbWFpbnNraWxsaWQYBiABKA0iZAoQQmF0dGxlT2JqZWN0RGF0YRIQCghl",
            "ZmZlY3RpZBgBIAEoDRIRCgl0aW1lX2F4aXMYAiABKA0SFgoOZUNvbmRpdGlv",
            "blR5cGUYAyABKA0SEwoLZVJlc3VsdFR5cGUYBCABKA0ifgoZQmF0dGxlT2Jq",
            "ZWN0RWZmZWN0VXNlckNtZBIOCgZjaGFyaWQYAyABKAQSDwoHc2tpbGxpZBgE",
            "IAEoDRIPCgdza2lsbGx2GAIgASgNEi8KEGJhdHRsZU9iamVjdGRhdGEYBSAB",
            "KAsyFS5DbWQuQmF0dGxlT2JqZWN0RGF0YSKmAQoTRGFtYWdlRWZmZWN0VXNl",
            "ckNtZBIOCgZjaGFyaWQYAyABKAQSDwoHc2tpbGxpZBgEIAEoDRIPCgdza2ls",
            "bGx2GAIgASgNEhEKCXRpbWVzdGFtcBgBIAEoBBIjCgpkYW1hZ2VkYXRhGAUg",
            "ASgLMg8uQ21kLkRhbWFnZURhdGESEwoLbWFpbnNraWxsaWQYBiABKA0SEAoI",
            "dW5pcXVlaWQYByABKAQiQQoNTWlzc2lsZVRhcmdldBIOCgZjaGFyaWQYASAB",
            "KAQSIAoJdGFyZ2V0cG9zGAIgASgLMg0uQ21kLlNjZW5lUG9zIl4KC01pc3Np",
            "bGVEYXRhEhAKCGVmZmVjdGlkGAEgASgNEhEKCXRpbWVfYXhpcxgCIAEoDRIq",
            "Cg5taXNzaWxldGFyZ2V0cxgDIAMoCzISLkNtZC5NaXNzaWxlVGFyZ2V0Im8K",
            "FE1pc3NpbGVFZmZlY3RVc2VyQ21kEg4KBmNoYXJpZBgDIAEoBBIPCgdza2ls",
            "bGlkGAQgASgNEg8KB3NraWxsbHYYAiABKA0SJQoLbWlzc2lsZWRhdGEYBSAB",
            "KAsyEC5DbWQuTWlzc2lsZURhdGEiSwoXU3BlY2lhbFJhbmRBY3RvclBvc0Rh",
            "dGESIAoJdGFyZ2V0cG9zGAEgAygLMg0uQ21kLlNjZW5lUG9zEg4KBnJvdGF0",
            "ZRgCIAMoBSIqChdTcGVjaWFsU2VsZWN0QnlBdHRyRGF0YRIPCgd0YXJnZXRz",
            "GAEgAygEIoMBChJTcGVjaWFsVGh1bmRlckRhdGESNwoIdGh1bmRlcnMYASAD",
            "KAsyJS5DbWQuU3BlY2lhbFRodW5kZXJEYXRhLlRodW5kZXJUYXJnZXQaNAoN",
            "VGh1bmRlclRhcmdldBIRCgl0aHVuZGVyaWQYASABKAQSEAoIdGFyZ2V0aWQY",
            "AiABKAQi5AEKC1NwZWNpYWxEYXRhEhAKCGVmZmVjdGlkGAEgASgNEhEKCXRp",
            "bWVfYXhpcxgCIAEoDRINCgVkYXRhcxgDIAEoDBIuCghyYW5kZGF0YRgEIAEo",
            "CzIcLkNtZC5TcGVjaWFsUmFuZEFjdG9yUG9zRGF0YRIwCgpzZWxlY3RkYXRh",
            "GAUgASgLMhwuQ21kLlNwZWNpYWxTZWxlY3RCeUF0dHJEYXRhEhEKCXRhcmdl",
            "dGlkcxgGIAMoBBIsCgt0aHVuZGVyZGF0YRgHIAEoCzIXLkNtZC5TcGVjaWFs",
            "VGh1bmRlckRhdGEibwoUU3BlY2lhbEVmZmVjdFVzZXJDbWQSDgoGY2hhcmlk",
            "GAMgASgEEg8KB3NraWxsaWQYBCABKA0SDwoHc2tpbGxsdhgCIAEoDRIlCgtz",
            "cGVjaWFsZGF0YRgFIAEoCzIQLkNtZC5TcGVjaWFsRGF0YSJ+CghCdWZmRGF0",
            "YRIQCghlZmZlY3RpZBgBIAEoDRIRCgl0aW1lX2F4aXMYAiABKA0SDwoHdGFy",
            "Z2V0cxgDIAMoBBIgCgl0YXJnZXRwb3MYBCADKAsyDS5DbWQuU2NlbmVQb3MS",
            "GgoSYnVmZl9lZmZlY3RfbGF5ZXJzGAUgASgNImYKEUJ1ZmZFZmZlY3RVc2Vy",
            "Q21kEg4KBmNoYXJpZBgBIAEoBBIPCgdza2lsbGlkGAIgASgNEg8KB3NraWxs",
            "bHYYAyABKA0SHwoIYnVmZmRhdGEYBCABKAsyDS5DbWQuQnVmZkRhdGEiKgoW",
            "VXBkYXRlU2tpbGxSYW5kU2VlZENtZBIQCghyYW5kc2VlZBgDIAEoBCJJChJT",
            "a2lsbFJlc3VsdFVzZXJDbWQSDgoGY2hhcmlkGAMgASgEEiMKCmRhbWFnZWRh",
            "dGEYBCABKAsyDy5DbWQuRGFtYWdlRGF0YSLCAQoTQW5pbU1vdmVTeW5jUG9z",
            "RGF0YRIOCgZjaGFyaWQYASABKAQSGgoDcG9zGAIgASgLMg0uQ21kLlNjZW5l",
            "UG9zEgsKA2RpchgDIAEoBRIOCgZtb3ZlaWQYBCABKA0SIgoFc3RhdGUYBSAB",
            "KA4yEy5DbWQuRUFuaW1Nb3ZlU3RhdGUSEwoLYWN0aW9uX25hbWUYBiABKAkS",
            "EwoLYWN0aW9uX3RpbWUYByABKA0SFAoMbW90aW9uX3NjYWxlGAggASgFIj0K",
            "EkFuaW1Nb3ZlU3luY1Bvc0NtZBInCgVpbmZvcxgBIAMoCzIYLkNtZC5Bbmlt",
            "TW92ZVN5bmNQb3NEYXRhIjwKDUNEVGltZVVzZXJDbWQSDAoEZ3VpZBgDIAEo",
            "BBIdCgRsaXN0GAQgAygLMg8uQ21kLkNEVGltZUl0ZW0iLwoNUmVsaXZlVXNl",
            "ckNtZBIeCgR0eXBlGAMgASgOMhAuQ21kLkVSZWxpdmVUeXBlIngKC0dvVG9V",
            "c2VyQ21kEhoKA3BvcxgDIAEoCzINLkNtZC5TY2VuZVBvcxIOCgZjaGFyaWQY",
            "BCABKAQSDwoHaXNnb21hcBgFIAEoCBIOCgZyb3RhdGUYBiABKA0SHAoEdHlw",
            "ZRgHIAEoDjIOLkNtZC5Hb01hcFR5cGUiIwoSR29Ub0V4aXRQb3NVc2VyQ21k",
            "Eg0KBW1hcGlkGAMgASgNIiAKEENWaXNpdE5wY1VzZXJDbWQSDAoEZ3VpZBgD",
            "IAEoBCI5ChJSZXRWaXNpdE5wY1VzZXJDbWQSDAoEZ3VpZBgDIAEoBBIVCg1z",
            "aGlwbG9jYWx0YWxrGAQgASgIIiQKFENTdG9wVmlzaXROcGNVc2VyQ21kEgwK",
            "BGd1aWQYAyABKAQiJgoWUmV0U3RvcFZpc2l0TnBjVXNlckNtZBIMCgRndWlk",
            "GAMgASgEIn4KElNTaG93RGlhbG9nVXNlckNtZBIMCgRndWlkGAMgASgEEhAK",
            "CGRpYWxvZ2lkGAQgASgNEgwKBHR5cGUYBSABKA0SDAoEdGV4dBgGIAEoCRIN",
            "CgVlbW9qaRgHIAEoDRIOCgZhY3Rpb24YCCABKAkSDQoFdm9pY2UYCSABKAki",
            "JQoUQ2hvb3NlUGFydG5lclVzZXJDbWQSDQoFaW5kZXgYAyABKA0iPAoOVGVh",
            "bU1lbWJlckRhdGESDQoFaW5kZXgYASABKA0SDQoFY2ZnaWQYAiABKA0SDAoE",
            "Z3VpZBgDIAEoDSJXCgtUZWFtRGF0YUNtZBIOCgZjaGFyaWQYASABKAQSIwoG",
            "bWVtYmVyGAMgAygLMhMuQ21kLlRlYW1NZW1iZXJEYXRhEhMKC2xlYWRlcmlu",
            "ZGV4GAQgASgNImYKDlNldFRlYW1Vc2VyQ21kEioKBm1lbWJlchgDIAMoCzIa",
            "LkNtZC5TZXRUZWFtVXNlckNtZC5NZW1iZXIaKAoGTWVtYmVyEg0KBWluZGV4",
            "GAEgASgNEg8KB2ZpZ2h0ZXIYAiABKA0iUwoJTGF5ZXJEYXRhEgoKAmlkGAEg",
            "ASgNEgwKBHRpbWUYAiABKAQSGgoDcG9zGAMgASgLMg0uQ21kLlNjZW5lUG9z",
            "EhAKCHRhcmdldGlkGAQgASgEIuwBCgpCdWZmZXJEYXRhEgoKAmlkGAEgASgN",
            "Eg0KBWxheWVyGAIgASgNEgwKBHRpbWUYAyABKAQSDgoGYWN0aXZlGAQgASgI",
            "EhAKCGZyb21uYW1lGAUgASgJEg4KBmZyb21pZBgGIAEoBBINCgVsZXZlbBgH",
            "IAEoDRIhCglsYXllcmRhdGEYCCADKAsyDi5DbWQuTGF5ZXJEYXRhEhMKC2Zy",
            "b21za2lsbGlkGAkgASgNEhYKDmZyb21lZmZlY3R0aW1lGAogASgNEhYKDnNo",
            "aWVsZGRlZnZhbHVlGAsgASgNEgwKBGhpZGUYDCABKAgiUwoTVXNlckJ1ZmZO",
            "aW5lU3luY0NtZBIMCgRndWlkGAMgASgEEiAKB3VwZGF0ZXMYBCADKAsyDy5D",
            "bWQuQnVmZmVyRGF0YRIMCgRkZWxzGAUgAygNItcBChVVc2VyQWN0aW9uTmlu",
            "ZVN5bmNDbWQSDAoEZ3VpZBgDIAEoBBIQCghhY3Rpb25pZBgEIAEoDRIQCghs",
            "b29wdGltZRgFIAEoDRIkCgphY3Rpb250eXBlGAYgASgOMhAuQ21kLkVBY3Rp",
            "b25UeXBlEg0KBWZvcmNlGAcgASgIEhEKCWlzcHJpdmF0ZRgIIAEoCBIQCghp",
            "c2xvb2thdBgJIAEoCBIOCgZpc2Jhc2UYCiABKAgSDgoGaXNzdG9wGAsgASgI",
            "EhIKCmFjdGlvbm5hbWUYDCABKAkipQEKGVVzZXJFeHByZXNzaW9uTmluZVN5",
            "bmNDbWQSDAoEZ3VpZBgDIAEoBBIWCg5leHByZXNzaW9ubmFtZRgEIAEoCRIQ",
            "Cghsb29wdGltZRgFIAEoDRIeCgR0eXBlGAggASgOMhAuQ21kLkVBY3Rpb25U",
            "eXBlEg0KBWZvcmNlGAYgASgIEhEKCWlzcHJpdmF0ZRgHIAEoCBIOCgZpc3N0",
            "b3AYCSABKAgiogEKFFVzZXJNb3V0aE5pbmVTeW5jQ21kEgwKBGd1aWQYASAB",
            "KAQSDgoGaWRsZWlkGAIgASgNEhMKC21vdXRoYWN0aW9uGAMgASgJEhYKDm1v",
            "dXRoYWN0aW9uZW5kGAQgASgIEhAKCGxvb3B0aW1lGAUgASgNEh4KBHR5cGUY",
            "BiABKA4yEC5DbWQuRUFjdGlvblR5cGUSDQoFZm9yY2UYByABKAgiUAoRVXNl",
            "clNob3dCdWJibGVDbWQSDAoEZ3VpZBgBIAEoBBIMCgRuYW1lGAIgASgJEhAK",
            "CGxhc3R0aW1lGAMgASgNEg0KBWZvcmNlGAQgASgIIpIBChVVc2VyRWZmZWN0",
            "TmluZVN5bmNDbWQSGgoDcG9zGAMgASgLMg0uQ21kLlNjZW5lUG9zEgwKBGd1",
            "aWQYBCABKAQSDAoEbmFtZRgFIAEoCRISCgphdHRhY2huYW1lGAggASgJEhAK",
            "CGxvb3B0aW1lGAYgASgNEg4KBmlzc3RvcBgHIAEoCBILCgNkaXIYCSABKAUi",
            "cAoUVXNlclNvdW5kTmluZVN5bmNDbWQSGgoDcG9zGAMgASgLMg0uQ21kLlNj",
            "ZW5lUG9zEgwKBGd1aWQYBCABKAQSDAoEbmFtZRgFIAEoCRIQCghsb29wdGlt",
            "ZRgGIAEoDRIOCgZpc3N0b3AYByABKAgiOgoWTm90aWZ5SGlkZUNsb3NlVXNl",
            "ckNtZBIMCgRndWlkGAMgASgEEhIKCmNsb3NlZ3VpZHMYBCADKAQiIgoQVW5s",
            "b2NraW5nTWVudUNtZBIOCgZtZW51SUQYAyABKA0iXwoTVW5sb2NrZWRNZW51",
            "RGF0YUNtZBIdCgR0eXBlGAMgASgOMg8uQ21kLkVNZW51RXZlbnQSEwoLdW5s",
            "b2NrZWRJRHMYBCADKAQSFAoMdW5sb2NrZWRzdHJzGAUgAygJIiYKEVJlcU1h",
            "cExpbmtVc2VyQ21kEhEKCW1hcGxpbmtpZBgDIAEoDSJWChdCcm9hZENhc3RN",
            "YXBMaW5rVXNlckNtZBIRCgltYXBsaW5raWQYAyABKA0SDAoEZ3VpZBgEIAEo",
            "BBIaCgNwb3MYBSABKAsyDS5DbWQuU2NlbmVQb3MiHQoMR29NYXBVc2VyQ21k",
            "Eg0KBW1hcGlkGAMgASgNIp8BCglQbGF5Q0dDbWQSDgoGY2duYW1lGAEgASgJ",
            "EhwKBmNndHlwZRgCIAEoDjIMLkNtZC5FQ2dUeXBlEg4KBnBhcmFtcxgDIAEo",
            "CRImCgpjYW1lcmFtb2RlGAQgASgOMhIuQ21kLkVDZ0NhbWVyYU1vZGUSFgoO",
            "ZmFzaGlvbm5wY2xpc3QYBSABKAkSFAoMYWRhcHRpdmVndWlkGAYgASgEIj0K",
            "FlVzZXJDb2xsZWdlR2lmdEluZm9DbWQSIwoFZ2lmdHMYASADKAsyFC5DbWQu",
            "Q29sbGVnZUdpZnREYXRhIiwKGVVzZXJDb2xsZWdlR2lmdFJlY2VpdmVDbWQS",
            "DwoHZ2lmdGlkcxgBIAMoDSImChVVc2VyVXNlVW5pcXVlU2tpbGxDbWQSDQoF",
            "aW5kZXgYASABKA0iWAoNV2VhdGhlckNoYW5nZRIKCgJpZBgBIAEoDRIRCglk",
            "aXJlY3Rpb24YAiABKA0SFwoPc3RyZW5ndGhjdXJ2ZWlkGAMgASgNEg8KB2lu",
            "cXVlc3QYBCABKAgiJAoUQ0Jvc3NTaG93VXBGaW5pc2hDbWQSDAoEZ3VpZBgB",
            "IAEoBCJUCg5TaGFrZVNjcmVlbkNtZBIRCgljdXJ2ZW5hbWUYASABKAkSDQoF",
            "c2NhbGUYAiABKAISEAoIbGFzdHRpbWUYAyABKA0SDgoGaXNzdG9wGAQgASgI",
            "InoKDU5wY1BsYXlEaWFsb2cSDAoEZ3VpZBgBIAEoBBIKCgJpZBgCIAMoDRIQ",
            "CghsYXN0dGltZRgDIAEoDRISCgpvcGVucmFuZG9tGAQgASgIEhQKDGludGVy",
            "dmFsdGltZRgFIAEoDRITCgt0YWxrQ29udGVudBgGIAEoCSKlAQoXSW50ZXJh",
            "Y3Rpb25XaXRoRW50cnlDbWQSDAoEZ3VpZBgBIAEoBBIOCgZiZWd1aWQYAiAB",
            "KAQSEQoJZW50cnl0eXBlGAMgASgNEisKCG9wZXJ0eXBlGAQgASgOMhkuQ21k",
            "LkVJbnRlcmFjdGl2ZU9wZXJUeXBlEg0KBXRndGlkGAUgASgEEh0KBnRndHBv",
            "cxgGIAEoCzINLkNtZC5TY2VuZVBvcyKAAQoOSW50ZXJhY3Rpb25DbWQSDAoE",
            "Z3VpZBgBIAEoBBIOCgZiZWd1aWQYAiABKAQSEAoIc29ja2V0aWQYAyABKA0S",
            "EAoIb3BlcnR5cGUYBCABKAkSDQoFdGd0aWQYBSABKAQSHQoGdGd0cG9zGAYg",
            "ASgLMg0uQ21kLlNjZW5lUG9zIkQKFEludGVyYWN0aW9uUmVzdWx0Q21kEgwK",
            "BGd1aWQYASABKAQSDgoGYmVndWlkGAIgASgEEg4KBnJlc3VsdBgDIAEoCCIZ",
            "CglQaWNrVXBDbWQSDAoEZ3VpZBgBIAEoBCI/Cg9QaWNrVXBSZXN1bHRDbWQS",
            "DAoEZ3VpZBgBIAEoBBIOCgZiZWd1aWQYAiABKAQSDgoGcmVzdWx0GAMgASgI",
            "IigKClB1dERvd25DbWQSGgoDcG9zGAEgASgLMg0uQ21kLlNjZW5lUG9zIlwK",
            "EFB1dERvd25SZXN1bHRDbWQSDAoEZ3VpZBgBIAEoBBIOCgZiZWd1aWQYAiAB",
            "KAQSDgoGcmVzdWx0GAMgASgIEhoKA3BvcxgEIAEoCzINLkNtZC5TY2VuZVBv",
            "cyImCghUaHJvd0NtZBIaCgNwb3MYASABKAsyDS5DbWQuU2NlbmVQb3MiWgoO",
            "VGhyb3dSZXN1bHRDbWQSDAoEZ3VpZBgBIAEoBBIOCgZiZWd1aWQYAiABKAQS",
            "DgoGcmVzdWx0GAMgASgIEhoKA3BvcxgEIAEoCzINLkNtZC5TY2VuZVBvcyIp",
            "CgtDYXRhcHVsdENtZBIaCgNwb3MYASABKAsyDS5DbWQuU2NlbmVQb3MiQQoR",
            "Q2F0YXB1bHRSZXN1bHRDbWQSDAoEZ3VpZBgBIAEoBBIOCgZiZWd1aWQYAiAB",
            "KAQSDgoGcmVzdWx0GAMgASgIIh4KDE9uVmVoaWNsZUNtZBIOCgZiZWd1aWQY",
            "ASABKAQiQgoST25WZWhpY2xlUmVzdWx0Q21kEgwKBGd1aWQYASABKAQSDgoG",
            "YmVndWlkGAIgASgEEg4KBnJlc3VsdBgDIAEoCCIrCg1PZmZWZWhpY2xlQ21k",
            "EhoKA3BvcxgBIAEoCzINLkNtZC5TY2VuZVBvcyJfChNPZmZWZWhpY2xlUmVz",
            "dWx0Q21kEgwKBGd1aWQYASABKAQSDgoGYmVndWlkGAIgASgEEg4KBnJlc3Vs",
            "dBgDIAEoCBIaCgNwb3MYBCABKAsyDS5DbWQuU2NlbmVQb3MiSgoTSW50ZXJh",
            "Y3Rpb25FdmVudENtZBIOCgZiZWd1aWQYASABKAQSIwoEdHlwZRgCIAEoDjIV",
            "LkNtZC5FSW50ZXJhY3Rpb25UeXBlIikKFkNoYXRNc2dDbGllbnRUb0dhdGVD",
            "bWQSDwoHY29udGVudBgBIAEoDCIpChZDaGF0TXNnR2F0ZVRvQ2xpZW50Q21k",
            "Eg8KB2NvbnRlbnQYASABKAwijAEKD01pbmlNYXBzSW5mb0NtZBI4CgttaW5p",
            "bWFwaW5mbxgBIAMoCzIjLkNtZC5NaW5pTWFwc0luZm9DbWQuT25lTWluaU1h",
            "cEluZm8aPwoOT25lTWluaU1hcEluZm8SDQoFbWFwaWQYASABKA0SHgoIbnBj",
            "aWNvbnMYAiADKAsyDC5DbWQuTnBjSWNvbiI6CgpMb3R0ZXJ5Q21kEgwKBHR5",
            "cGUYASABKA0SDQoFdGltZXMYAiABKA0SDwoHYmF0Y2hpZBgDIAEoDSKrAQoU",
            "U2VuZExvdHRlcnlSZXN1bHRDbWQSPwoObG90dGVyeXJlc3VsdHMYASADKAsy",
            "Jy5DbWQuU2VuZExvdHRlcnlSZXN1bHRDbWQuTG90dGVyeVJlc3VsdBpSCg1M",
            "b3R0ZXJ5UmVzdWx0Eg4KBml0ZW1pZBgBIAEoDRIRCglpdGVtY291bnQYAiAB",
            "KA0SDAoEdHlwZRgDIAEoDRIQCghicmFuZG5ldxgEIAEoDSK/AQoWU2VuZEdN",
            "TG90dGVyeVJlc3VsdENtZBJBCg5sb3R0ZXJ5cmVzdWx0cxgBIAMoCzIpLkNt",
            "ZC5TZW5kR01Mb3R0ZXJ5UmVzdWx0Q21kLkxvdHRlcnlSZXN1bHQaYgoNTG90",
            "dGVyeVJlc3VsdBIOCgZpdGVtaWQYASABKA0SDQoFdGltZXMYAiABKA0SEgoK",
            "Y29udmVydG51bRgDIAEoDRIMCgR0eXBlGAQgASgNEhAKCGJyYW5kbmV3GAUg",
            "ASgNIjYKFFVzZXJTcGVjaWFsQWN0aW9uQ21kEg4KBmJlZ3VpZBgBIAEoDRIO",
            "CgZhY3Rpb24YAiABKA0ibAoMQXNpZGVVc2VyQ21kEg0KBW5wY2lkGAEgASgN",
            "Eg4KBnRleHRpZBgCIAEoDRIQCghzaG93dGltZRgDIAEoDRIrCgtvcmllbnRh",
            "dGlvbhgEIAEoDjIWLkNtZC5FQXNpZGVPcmllbnRhdGlvbiJWChRTZW5kUGFy",
            "dG5lclNvdXJjZUNtZBIRCglwYXJ0bmVyaWQYASABKA0SKwoKc291cmNldHlw",
            "ZRgCIAEoDjIXLkNtZC5FUGFydG5lclNvdXJjZVR5cGUiMgoSU2NlbmVSYWlk",
            "UmVzdWx0Q21kEgwKBHJhbmsYASABKA0SDgoGcmVzdWx0GAIgASgIIlgKDkMy",
            "U0J1ZmZTeW5jQ21kEg4KBmNoYXJpZBgBIAEoBBIOCgZidWZmaWQYAiABKA0S",
            "DgoGYWN0aXZlGAMgASgIEhYKDnNoaWVsZGRlZnZhbHVlGAQgASgNIiEKEEFj",
            "Y2VwdFJlcGFpclRhc2sSDQoFY2ZnaWQYASABKA0ibQobQWRkUGFydG5lckV4",
            "cEZyb21FeHBQb29sQ21kEhEKCWZpZ2h0ZXJpZBgBIAEoDRIQCghleHB2YWx1",
            "ZRgCIAEoBBIpCgZyZXN1bHQYAyABKA4yGS5DbWQuRUFkZFBhcnRuZXJFeHBS",
            "ZXN1bHQiIwoRUGxheUl0ZW1BbmltYXRpb24SDgoGaXRlbWlkGAEgASgNInAK",
            "EFdYS0pBc2lkZVVzZXJDbWQSDQoFbnBjaWQYASABKA0SDgoGdGV4dGlkGAIg",
            "AygNEhAKCHNob3d0aW1lGAMgASgNEisKC29yaWVudGF0aW9uGAQgASgOMhYu",
            "Q21kLkVBc2lkZU9yaWVudGF0aW9uIloKC0JsYWNrU2FuQ21kEgwKBGd1aWQY",
            "ASABKAQSDQoFc3RhcnQYAiABKAgSHQoGaGl0cG9zGAMgASgLMg0uQ21kLlNj",
            "ZW5lUG9zEg8KB3NraWxsaWQYBCABKA0ihwEKEkdvVG9Db21tb25UcmFjZUNt",
            "ZBIKCgJpZBgBIAEoDRIVCg1jbGllbnRyZXF1ZXN0GAIgASgIEhQKDHNlcnZl",
            "cmFuc3dlchgDIAEoDRIaCgNwb3MYBCABKAsyDS5DbWQuU2NlbmVQb3MSDAoE",
            "dHlwZRgFIAEoDRIOCgZzdHJrZXkYBiABKAkilwEKE1N1bW1vbkVmZmVjdFVz",
            "ZXJDbWQSDgoGY2hhcmlkGAEgASgEEg8KB3NraWxsaWQYAiABKA0SDwoHc2tp",
            "bGxsdhgDIAEoDRIQCghlZmZlY3RpZBgEIAEoDRIRCgl0aW1lX2F4aXMYBSAB",
            "KA0SGgoDcG9zGAYgASgLMg0uQ21kLlNjZW5lUG9zEg0KBWluZGV4GAcgAygE",
            "IjEKEUNsdWJDaGFsbGVuZ2VJbmZvEg0KBWxldmVsGAEgASgNEg0KBW5wY2lk",
            "GAIgAygNImIKEURhaWx5QWN0aXZpdHlJbmZvEgoKAmlkGAEgASgNEhMKC2No",
            "YXJhY3RlcmlkGAIgASgNEg8KB2VuZHRpbWUYAyABKAQSDgoGc3RhdHVzGAQg",
            "ASgNEgsKA3VpZBgIIAEoBCKoAQoOTGVhZ3VlQWN0aXZpdHkSCgoCaWQYASAB",
            "KA0SDwoHZW5kdGltZRgCIAEoBBIOCgZzdGF0dXMYAyABKA0SFAoMcmVmcmVz",
            "aGZpZWxkGAQgASgEEg0KBWxldmVsGAUgASgNEigKCGNsdWJJbmZvGAYgASgL",
            "MhYuQ21kLkNsdWJDaGFsbGVuZ2VJbmZvEgsKA3VpZBgHIAEoBBINCgVhbGlh",
            "cxgIIAEoCSKkAQoQQWN0aXZlRGF0aW5nSW5mbxIKCgJpZBgBIAEoDRITCgtj",
            "aGFyYWN0ZXJpZBgCIAEoDRIPCgdlbmR0aW1lGAMgASgEEg4KBnN0YXR1cxgE",
            "IAEoDRIUCgxyZWZyZXNoZmllbGQYBSABKAQSCwoDdWlkGAYgASgEEg4KBmZ2",
            "YWx1ZRgHIAEoDRIMCgR0eXBlGAggASgNEg0KBWFsaWFzGAkgASgJItQBChBE",
            "YWlseUFjdGl2aXR5Q21kEi0KDWRhaWx5YWN0aXZpdHkYASADKAsyFi5DbWQu",
            "RGFpbHlBY3Rpdml0eUluZm8SKwoObGVhZ3VlYWN0aXZpdHkYAiADKAsyEy5D",
            "bWQuTGVhZ3VlQWN0aXZpdHkSHAoUbmV4dFF1ZXN0UmVmcmVzaFRpbWUYAyAB",
            "KAQSKwoMYWN0aXZlZGF0aW5nGAQgAygLMhUuQ21kLkFjdGl2ZURhdGluZ0lu",
            "Zm8SGQoRYWxsY29tcGxldGVzdGF0dXMYBSABKA0iJAoVRGFpbHlBY3Rpdml0",
            "eUF3YXJkQ21kEgsKA3VpZBgBIAEoDSJTChJDbHViQ2hhbGxlbmdlQ0dDbWQS",
            "CgoCY2cYASABKAkSDwoHc2hvd2lkMRgCIAEoDRIPCgdzaG93aWQyGAMgASgN",
            "Eg8KB3Nob3dpZDMYBCABKA0iHwodRGFpbHlBY3Rpdml0eUNvbXBsZXRlQXdh",
            "cmRDbWQiLAoRV2Vha1N5bmNTd2l0Y2hDbWQSFwoPd2Vha3N5bmNfc3dpdGNo",
            "GAEgASgIIjAKE1Jvb3RNb3Rpb25Td2l0Y2hDbWQSGQoRcm9vdG1vdGlvbl9z",
            "d2l0Y2gYASABKAgiNwoVU3RyZXNzVGVzdFJlc3BvbnNlQ21kEgsKA3JldBgB",
            "IAEoDRIRCgl0aW1lc3RhbXAYAiABKAQiMAoLU2V0Um9ib3RDbWQSCwoDc2V0",
            "GAEgASgIEhQKDGlzcGxheWVyd2FsaxgCIAEoCCJHChFTeW5jQWN0aW9uTGlz",
            "dENtZBIMCgRndWlkGAEgASgNEhIKCmFjdGlvbmxpc3QYAiADKA0SEAoIbmVl",
            "ZGxvb3AYAyABKAgiJgoWTnBjQnViYmxlUGVyY2VwdGlvbkNtZBIMCgRndWlk",
            "GAEgASgNKqQBCg9FQXR0ckNoYW5nZVR5cGUSFwoTRUFUVFJDSEFOR0VUWVBF",
            "X01JThAAEhkKFUVBVFRSQ0hBTkdFVFlQRV9FUVVJUBABEiIKHkVBVFRSQ0hB",
            "TkdFVFlQRV9FUVVJUF9TVFJFTkdUSBACEiAKHEVBVFRSQ0hBTkdFVFlQRV9F",
            "UVVJUF9VUFNUQVIQAxIXChNFQVRUUkNIQU5HRVRZUEVfTUFYEAQqdwoRRUxv",
            "Y2FsRHVuZ2VvblR5cGUSHQoZRUxPQ0FMRFVOR0VPTl9UWVBFX05PUk1BTBAA",
            "EiQKIEVMT0NBTERVTkdFT05fVFlQRV9DTFVCQ0hBTExFTkdFEAESHQoZRUxP",
            "Q0FMRFVOR0VPTl9UWVBFX1JFUEFJUhACKr4BCg9FU2tpbGxQaGFzZVR5cGUS",
            "GAoURVNLSUxMUEhBU0VfVFlQRV9NSU4QABIaChZFU0tJTExQSEFTRV9UWVBF",
            "X0NIQU5UEAESGAoURVNLSUxMUEhBU0VfVFlQRV9SVU4QAhIjCh9FU0tJTExQ",
            "SEFTRV9UWVBFX0FDQ1VNVUxBVEVfRU5EEAMSHAoYRVNLSUxMUEhBU0VfVFlQ",
            "RV9DT1JSRUNUEAQSGAoURVNLSUxMUEhBU0VfVFlQRV9FTkQQBSq5AQoPRVNr",
            "aWxsQnJlYWtUeXBlEhgKFEVTS0lMTEJSRUFLX1RZUEVfTUlOEAASHAoYRVNL",
            "SUxMQlJFQUtfVFlQRV9DT1JSRUNUEAESGgoWRVNLSUxMQlJFQUtfVFlQRV9D",
            "SEFOVBACEhgKFEVTS0lMTEJSRUFLX1RZUEVfUlVOEAMSHgoaRVNLSUxMQlJF",
            "QUtfVFlQRV9MRUFEU0tJTEwQBBIYChRFU0tJTExCUkVBS19UWVBFX01BWBAF",
            "KtMDCgpEYW1hZ2VUeXBlEhQKEERBTUFHRV9UWVBFX05PTkUQABIWChJEQU1B",
            "R0VfVFlQRV9OT1JNQUwQARIUChBEQU1BR0VfVFlQRV9NSVNTEAMSFAoQREFN",
            "QUdFX1RZUEVfSEVBTBAEEhYKEkRBTUFHRV9UWVBFX0lNTVVORRAFEhgKFERB",
            "TUFHRV9UWVBFX01VTFRJSElUEAYSFgoSREFNQUdFX1RZUEVfU0hJRUxEEAcS",
            "GgoWREFNQUdFX1RZUEVfSEVBTF9FVEhFUhAIEhwKGERBTUFHRV9UWVBFX1JF",
            "RFVDRV9FVEhFUhAJEhcKE0RBTUFHRV9UWVBFX1JFQk9VTkQQChIUChBEQU1B",
            "R0VfVFlQRV9GSVJFEAsSEwoPREFNQUdFX1RZUEVfSUNFEAwSFwoTREFNQUdF",
            "X1RZUEVfVEhVTkRFUhANEhUKEURBTUFHRV9UWVBFX0VBUlRIEA4SEwoPREFN",
            "QUdFX1RZUEVfQ1VUEA8SFgoSREFNQUdFX1RZUEVfU1RSSUtFEBASFQoRREFN",
            "QUdFX1RZUEVfU1BJS0UQERIaChZEQU1BR0VfVFlQRV9JTlZJTkNJQkxFEBIS",
            "EwoPREFNQUdFX1RZUEVfTUFYEBMqjQEKDkVBbmltTW92ZVN0YXRlEhYKEkVB",
            "TklNTU9WRVNUQVRFX01JThAAEhgKFEVBTklNTU9WRVNUQVRFX1NUQVJUEAES",
            "GQoVRUFOSU1NT1ZFU1RBVEVfTU9WSU5HEAISFgoSRUFOSU1NT1ZFU1RBVEVf",
            "RU5EEAMSFgoSRUFOSU1NT1ZFU1RBVEVfTUFYEAQq2gEKC0VSZWxpdmVUeXBl",
            "EhMKD0VSRUxJVkVUWVBFX01JThAAEhYKEkVSRUxJVkVUWVBFX1JFVFVSThAB",
            "EhIKDkVSRUxJVkVUWVBFX0dNEAISFQoRRVJFTElWRVRZUEVfU0tJTEwQBBIU",
            "ChBFUkVMSVZFVFlQRV9BVVRPEAUSFQoRRVJFTElWRVRZUEVfUVVFU1QQBhIZ",
            "ChVFUkVMSVZFVFlQRV9MRUFWRUNPUFkQBxIWChJFUkVMSVZFVFlQRV9MT0dP",
            "VVQQCBITCg9FUkVMSVZFVFlQRV9NQVgQCSp+CgtFQWN0aW9uVHlwZRITCg9F",
            "QUNUSU9OVFlQRV9NSU4QABIWChJFQUNUSU9OVFlQRV9OT1JNQUwQARIXChNF",
            "QUNUSU9OVFlQRV9TVVNUQUlOEAISFAoQRUFDVElPTlRZUEVfTE9PUBADEhMK",
            "D0VBQ1RJT05UWVBFX01BWBAEKuoDCgpFTWVudUV2ZW50EhIKDkVNRU5VRVZF",
            "TlRfTUlOEAASHQoZRU1FTlVFVkVOVF9VTkxPQ0tGVU5DVElPThABEhoKFkVN",
            "RU5VRVZFTlRfVU5MT0NLU0tJTEwQAhIYChRFTUVOVUVWRU5UX1VOTE9DS01B",
            "UBADEhkKFUVNRU5VRVZFTlRfVU5MT0NLQVJFQRAEEh4KGkVNRU5VRVZFTlRf",
            "VU5MT0NLTlBDU1RBVFVTEAUSFgoSRU1FTlVFVkVOVF9TSE9XTlBDEAYSHQoZ",
            "RU1FTlVFVkVOVF9NT05TVEVSX1VOTE9DSxAJEhMKD0VNRU5VRVZFTlRfV1hL",
            "ShAKEhgKFEVNRU5VRVZFTlRfQk9STlBPSU5UEAsSIQodRU1FTlVFVkVOVF9V",
            "TkxPQ0tfQ0xPU0VBVVRPVVAQDBIbChdFTUVOVUVWRU5UX0NPTExFR0VfR0lG",
            "VBANEiAKHEVNRU5VRVZFTlRfU0tJTExfTEVWRUxfTElNSVQQDhIgChxFTUVO",
            "VUVWRU5UX0VRVUlQX0xFVkVMX0xJTUlUEA8SGwoXRU1FTlVFVkVOVF9FTElU",
            "RV9SRVBBSVIQEBIcChhFTUVOVUVWRU5UX0RBSUxZQUNUSVZJVFkQERITCg5F",
            "TUVOVUVWRU5UX01BWBCPTipTCgdFQ2dUeXBlEg8KC0VDR1RZUEVfTUlOEAAS",
            "EgoORUNHVFlQRV9OT1JNQUwQARISCg5FQ0dUWVBFX1JFUEFJUhACEg8KC0VD",
            "R1RZUEVfTUFYEAQqmAEKDUVDZ0NhbWVyYU1vZGUSFQoRRUNHQ0FNRVJBTU9E",
            "RV9NSU4QABIeChpFQ0dDQU1FUkFNT0RFX0JMQU5LX1NDUkVFThABEhwKGEVD",
            "R0NBTUVSQU1PREVfVFJBTlNJVElPThACEhsKF0VDR0NBTUVSQU1PREVfRE9X",
            "TlNIRUFSEAMSFQoRRUNHQ0FNRVJBTU9ERV9NQVgQBCr9BQoURUludGVyYWN0",
            "aXZlT3BlclR5cGUSGAoURUlOVEVSQUNUSVZFT1BFUl9NSU4QABIZChVFSU5U",
            "RVJBQ1RJVkVPUEVSX1BJQ0sQARIaChZFSU5URVJBQ1RJVkVPUEVSX1RIUk9X",
            "EAISGwoXRUlOVEVSQUNUSVZFT1BFUl9BQ1RJVkUQAxIaChZFSU5URVJBQ1RJ",
            "VkVPUEVSX1ZBTElEEAQSGQoVRUlOVEVSQUNUSVZFT1BFUl9USUNLEAUSGwoX",
            "RUlOVEVSQUNUSVZFT1BFUl9HSVZFVVAQBhIYChRFSU5URVJBQ1RJVkVPUEVS",
            "X1VTRRAHEh8KG0VJTlRFUkFDVElWRU9QRVJfQ0FOQ0VMX1VTRRAIEh8KG0VJ",
            "TlRFUkFDVElWRU9QRVJfT05fVkVISUNMRRAJEiAKHEVJTlRFUkFDVElWRU9Q",
            "RVJfT0ZGX1ZFSElDTEUQChIhCh1FSU5URVJBQ1RJVkVPUEVSX0xPQ0FMRFVO",
            "R0VPThALEhwKGEVJTlRFUkFDVElWRU9QRVJfUkVDRUlWRRAMEiAKHEVJTlRF",
            "UkFDVElWRU9QRVJfVEFTS1RSSUdHRVIQDRIZChVFSU5URVJBQ1RJVkVPUEVS",
            "X09QRU4QDhIaChZFSU5URVJBQ1RJVkVPUEVSX0NMT1NFEA8SGwoXRUlOVEVS",
            "QUNUSVZFT1BFUl9HRVROUEMQEBIbChdFSU5URVJBQ1RJVkVPUEVSX1JFUEFJ",
            "UhAREhwKGEVJTlRFUkFDVElWRU9QRVJfQ09MTEVDVBASEh0KGUVJTlRFUkFD",
            "VElWRU9QRVJfREVMQVlHRVQQExIbChdFSU5URVJBQ1RJVkVPUEVSX1NVQk1J",
            "VBAUEh0KGUVJTlRFUkFDVElWRU9QRVJfU0VBVF9FQVQQFRIZChVFSU5URVJB",
            "Q1RJVkVPUEVSX0lORk8QFhIjCh9FSU5URVJBQ1RJVkVPUEVSX0NPTExFQ1Rf",
            "V0VBUE9OEBcSGAoURUlOVEVSQUNUSVZFT1BFUl9NQVgQGCrHAgoQRUludGVy",
            "YWN0aW9uVHlwZRIZChVFSU5URVJBQ1RJT05fVFlQRV9NSU4QABIcChhFSU5U",
            "RVJBQ1RJT05fVFlQRV9QSUNLVVAQARIdChlFSU5URVJBQ1RJT05fVFlQRV9Q",
            "VVRET1dOEAISGwoXRUlOVEVSQUNUSU9OX1RZUEVfVEhST1cQAxIfChtFSU5U",
            "RVJBQ1RJT05fVFlQRV9PTlZFSElDTEUQBBIgChxFSU5URVJBQ1RJT05fVFlQ",
            "RV9PRkZWRUhJQ0xFEAUSGgoWRUlOVEVSQUNUSU9OX1RZUEVfTUVORBAGEiAK",
            "HEVJTlRFUkFDVElPTl9UWVBFX1NDQU5PQkpFQ1QQBxIbChdFSU5URVJBQ1RJ",
            "T05fVFlQRV9UUkFDRRAIEiAKHEVJTlRFUkFDVElPTl9UWVBFX0NPTk5FQ1RJ",
            "T04QCSrOAQoLTG90dGVyeVR5cGUSFAoQRUxPVFRFUllUWVBFX01JThAAEhgK",
            "FEVMT1RURVJZVFlQRV9QQVJUTkVSEAESFgoSRUxPVFRFUllUWVBFX0VRVUlQ",
            "EAISFAoQRUxPVFRFUllUWVBFX01JWBADEhMKD0VMT1RURVJZVFlQRV9HTRBa",
            "EhsKF0VMT1RURVJZVFlQRV9HTV9QQVJUTkVSEFsSGQoVRUxPVFRFUllUWVBF",
            "X0dNX0VRVUlQEFwSFAoQRUxMT1RFUllUWVBFX01BWBBkKp0BChFFQXNpZGVP",
            "cmllbnRhdGlvbhIZChVFQVNJREVPUklFTlRBVElPTl9NSU4QABIYChRFQVNJ",
            "REVPUklFTlRBVElPTl9VUBABEhwKGEVBU0lERU9SSUVOVEFUSU9OX01JRERM",
            "RRACEhoKFkVBU0lERU9SSUVOVEFUSU9OX0RPV04QAxIZChVFQVNJREVPUklF",
            "TlRBVElPTl9NQVgQBCrhAQoSRVBhcnRuZXJTb3VyY2VUeXBlEhoKFkVQQVJU",
            "TkVSU09VUkNFVFlQRV9NSU4QABIeChpFUEFSVE5FUlNPVVJDRVRZUEVfTE9U",
            "VEVSWRABEhsKF0VQQVJUTkVSU09VUkNFVFlQRV9JVEVNEAISGwoXRVBBUlRO",
            "RVJTT1VSQ0VUWVBFX05PTkUQAxIZChVFUEFSVE5FUlNPVVJDRVRZUEVfR00Q",
            "BBIeChpFUEFSVE5FUlNPVVJDRVRZUEVfTUlTU0lPThAFEhoKFkVQQVJUTkVS",
            "U09VUkNFVFlQRV9NQVgQYyqVAgoURUFkZFBhcnRuZXJFeHBSZXN1bHQSHAoY",
            "RUFERFBBUlRORVJFWFBSRVNVTFRfTUlOEAASKgomRUFERFBBUlRORVJFWFBS",
            "RVNVTFRfSU5WQUxJRF9GSUdIVEVSSUQQARIkCiBFQUREUEFSVE5FUkVYUFJF",
            "U1VMVF9BRERfRkFJTFVSRRACEiMKH0VBRERQQVJUTkVSRVhQUkVTVUxUX05P",
            "VF9FTk9VR0gQAxIoCiRFQUREUEFSVE5FUkVYUFJFU1VMVF9JU19NQUlOX0ZJ",
            "R0hURVIQBBIgChxFQUREUEFSVE5FUkVYUFJFU1VMVF9TVUNDRVNTEAUSHAoY",
            "RUFERFBBUlRORVJFWFBSRVNVTFRfTUFYEAYqoAIKCEdvdG9UeXBlEhIKDkdP",
            "VE9fVFJVRVFVRVNUEAASFQoRR09UT19DT01NT05SRVBBSVIQARIUChBHT1RP",
            "X0VMSVRFUkVQQUlSEAISEwoPR09UT19EQUlMWVFVRVNUEAMSFAoQR09UT19T",
            "T0NJQUxRVUVTVBAEEhIKDkdPVE9fV1hLSlFVRVNUEAUSFQoRR09UT19BQ0NF",
            "U1NPQkpFQ1QQBhIVChFHT1RPX0FDVElWRURBVElORxAHEhYKEkdPVE9fQ0xV",
            "QkNIQUxMRU5HRRAIEhAKDEdPVE9fTUFQTElTVBAJEhMKD0dPVE9fREFUSU5H",
            "Uk9PTRAKEhQKEEdPVE9fREFUSU5HU0NFTkUQCxIRCg1HT1RPX05QQ0FMSUFT",
            "EAwqdwoSRGFpbHlBY3Rpdml0eVN0YXRlEhYKEkRBSUxZQUNUSVZJVFlfSU5J",
            "VBAAEhYKEkRBSUxZQUNUSVZJVFlfT1BFThABEhoKFkRBSUxZQUNUSVZJVFlf",
            "Q09NUExFVEUQAhIVChFEQUlMWUFDVElWSVRZX0VORBADKooCChdEYWlseUFj",
            "dGl2aXR5UmV3YXJkVHlwZRIbChdEQUlMWUFDVElWSVRZX1RZUEVfTk9ORRAA",
            "EhsKF0RBSUxZQUNUSVZJVFlfVFlQRV9QUk9QEAESHAoYREFJTFlBQ1RJVklU",
            "WV9UWVBFX0xFVkVMEAISHAoYREFJTFlBQ1RJVklUWV9UWVBFX1NLSUxMEAMS",
            "HwobREFJTFlBQ1RJVklUWV9UWVBFX0JJR1NLSUxMEAQSHAoYREFJTFlBQ1RJ",
            "VklUWV9UWVBFX0VMSVRFEAYSGwoXREFJTFlBQ1RJVklUWV9UWVBFX0dPTEQQ",
            "BxIdChlEQUlMWUFDVElWSVRZX1RZUEVfREFUSU5HEAUqsgEKG0RhaWx5QWN0",
            "aXZpdHlQcm9wUmV3YXJkVHlwZRIcChhEQUlMWUFDVElWSVRZX1BST1BfTUFY",
            "SFAQABIaChZEQUlMWUFDVElWSVRZX1BST1BfQVRLEAESGgoWREFJTFlBQ1RJ",
            "VklUWV9QUk9QX0RFRhACEhsKF0RBSUxZQUNUSVZJVFlfUFJPUF9NREVGEAMS",
            "IAocREFJTFlBQ1RJVklUWV9QUk9QX0hQUkVDT1ZFUhAEKpoBChFEYWlseUFj",
            "dGl2aXR5VHlwZRIWChJEQUlMWUFDVElWSVRZX1RZUEUQABImCiJMRUFHVUVB",
            "Q1RJVklUWV9UWVBFX0NIQUxMRU5HRV9MRUZUEAESJwojTEVBR1VFQUNUSVZJ",
            "VFlfVFlQRV9DSEFMTEVOR0VfUklHSFQQAhIcChhMRUFHVUVBQ1RJVklUWV9U",
            "WVBFX1dYS0oQAyqhAQoWRGFpbHlBY3Rpdml0eUVycm9yVHlwZRIcChhEQUlM",
            "WUFDVElWSVRZX0VSUk9SX05PTkUQABIhCh1EQUlMWUFDVElWSVRZX0VSUk9S",
            "X05PVF9FWElTVBABEiAKHERBSUxZQUNUSVZJVFlfRVJST1JfTk9UX09QRU4Q",
            "AhIkCiBEQUlMWUFDVElWSVRZX0VSUk9SX05PVF9DT01QTEVURRADQgdaBS47",
            "Q21kYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Cmd.ProtoCommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Cmd.EAttrChangeType), typeof(global::Cmd.ELocalDungeonType), typeof(global::Cmd.ESkillPhaseType), typeof(global::Cmd.ESkillBreakType), typeof(global::Cmd.DamageType), typeof(global::Cmd.EAnimMoveState), typeof(global::Cmd.EReliveType), typeof(global::Cmd.EActionType), typeof(global::Cmd.EMenuEvent), typeof(global::Cmd.ECgType), typeof(global::Cmd.ECgCameraMode), typeof(global::Cmd.EInteractiveOperType), typeof(global::Cmd.EInteractionType), typeof(global::Cmd.LotteryType), typeof(global::Cmd.EAsideOrientation), typeof(global::Cmd.EPartnerSourceType), typeof(global::Cmd.EAddPartnerExpResult), typeof(global::Cmd.GotoType), typeof(global::Cmd.DailyActivityState), typeof(global::Cmd.DailyActivityRewardType), typeof(global::Cmd.DailyActivityPropRewardType), typeof(global::Cmd.DailyActivityType), typeof(global::Cmd.DailyActivityErrorType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UserAttrSvr), global::Cmd.UserAttrSvr.Parser, new[]{ "Type", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SetUserDataCmd), global::Cmd.SetUserDataCmd.Parser, new[]{ "Datas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SetNineDataCmd), global::Cmd.SetNineDataCmd.Parser, new[]{ "Entrydatas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UserGMCommand), global::Cmd.UserGMCommand.Parser, new[]{ "Command" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UserLevelUpSyncCmd), global::Cmd.UserLevelUpSyncCmd.Parser, new[]{ "Guid", "Newlv", "Attrs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.AttrsChangeSyncCmd), global::Cmd.AttrsChangeSyncCmd.Parser, new[]{ "Npcid", "Source", "Attrs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UserAttrChangeShowCmd), global::Cmd.UserAttrChangeShowCmd.Parser, new[]{ "Guid", "Changetype", "Attrs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.CmdExitPoint), global::Cmd.CmdExitPoint.Parser, new[]{ "Id", "Pos", "Range", "Rotation", "Tomapid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.NpcIcon), global::Cmd.NpcIcon.Parser, new[]{ "Npcid", "Pos", "Dir" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ChangeSceneUserCmd), global::Cmd.ChangeSceneUserCmd.Parser, new[]{ "MapID", "MapName", "Pos", "DmapID", "Preview", "Resource", "Minimap", "Eps", "Monstericons", "Dir", "Gomaptype", "Scenetype", "LocalDungeonPos", "LocalDungeonRadius", "LocalDungeonID", "LocalDungeonName", "LocalDungeonType", "Artresource", "Logicresource", "Clientloaderror", "Relogin", "Isnewmap" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.RaidBackCmd), global::Cmd.RaidBackCmd.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.RaidWinCmd), global::Cmd.RaidWinCmd.Parser, new[]{ "Nextraidid", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ShareDamTarget), global::Cmd.ShareDamTarget.Parser, new[]{ "Charid", "Damage", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.PhaseData), global::Cmd.PhaseData.Parser, new[]{ "Number", "Pos", "HitedTargets", "Movepos", "Dir", "Skilldir", "Blacksanend", "Pickitem", "AccumulateEndTime", "Curpos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SkillBroadcastUserCmd), global::Cmd.SkillBroadcastUserCmd.Parser, new[]{ "Charid", "SkillID", "Skilllv", "Reinforce", "Data", "Randseed", "Chanttime", "Damagedata", "Movedata", "Mainskillid", "Passivetrigger", "Timestamp", "Uniqueid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.BreakSkillUserCmd), global::Cmd.BreakSkillUserCmd.Parser, new[]{ "Charid", "Skillid", "Type", "Damage", "Actionid", "TimeAxis", "Breakerid", "Breakstrength", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MoveEffectUserCmd), global::Cmd.MoveEffectUserCmd.Parser, new[]{ "Charid", "Skillid", "Skilllv", "Movedata", "Mainskillid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.BattleObjectData), global::Cmd.BattleObjectData.Parser, new[]{ "Effectid", "TimeAxis", "EConditionType", "EResultType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.BattleObjectEffectUserCmd), global::Cmd.BattleObjectEffectUserCmd.Parser, new[]{ "Charid", "Skillid", "Skilllv", "BattleObjectdata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.DamageEffectUserCmd), global::Cmd.DamageEffectUserCmd.Parser, new[]{ "Charid", "Skillid", "Skilllv", "Timestamp", "Damagedata", "Mainskillid", "Uniqueid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MissileTarget), global::Cmd.MissileTarget.Parser, new[]{ "Charid", "Targetpos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MissileData), global::Cmd.MissileData.Parser, new[]{ "Effectid", "TimeAxis", "Missiletargets" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MissileEffectUserCmd), global::Cmd.MissileEffectUserCmd.Parser, new[]{ "Charid", "Skillid", "Skilllv", "Missiledata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SpecialRandActorPosData), global::Cmd.SpecialRandActorPosData.Parser, new[]{ "Targetpos", "Rotate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SpecialSelectByAttrData), global::Cmd.SpecialSelectByAttrData.Parser, new[]{ "Targets" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SpecialThunderData), global::Cmd.SpecialThunderData.Parser, new[]{ "Thunders" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SpecialThunderData.Types.ThunderTarget), global::Cmd.SpecialThunderData.Types.ThunderTarget.Parser, new[]{ "Thunderid", "Targetid" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SpecialData), global::Cmd.SpecialData.Parser, new[]{ "Effectid", "TimeAxis", "Datas", "Randdata", "Selectdata", "Targetids", "Thunderdata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SpecialEffectUserCmd), global::Cmd.SpecialEffectUserCmd.Parser, new[]{ "Charid", "Skillid", "Skilllv", "Specialdata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.BuffData), global::Cmd.BuffData.Parser, new[]{ "Effectid", "TimeAxis", "Targets", "Targetpos", "BuffEffectLayers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.BuffEffectUserCmd), global::Cmd.BuffEffectUserCmd.Parser, new[]{ "Charid", "Skillid", "Skilllv", "Buffdata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UpdateSkillRandSeedCmd), global::Cmd.UpdateSkillRandSeedCmd.Parser, new[]{ "Randseed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SkillResultUserCmd), global::Cmd.SkillResultUserCmd.Parser, new[]{ "Charid", "Damagedata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.AnimMoveSyncPosData), global::Cmd.AnimMoveSyncPosData.Parser, new[]{ "Charid", "Pos", "Dir", "Moveid", "State", "ActionName", "ActionTime", "MotionScale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.AnimMoveSyncPosCmd), global::Cmd.AnimMoveSyncPosCmd.Parser, new[]{ "Infos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.CDTimeUserCmd), global::Cmd.CDTimeUserCmd.Parser, new[]{ "Guid", "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ReliveUserCmd), global::Cmd.ReliveUserCmd.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.GoToUserCmd), global::Cmd.GoToUserCmd.Parser, new[]{ "Pos", "Charid", "Isgomap", "Rotate", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.GoToExitPosUserCmd), global::Cmd.GoToExitPosUserCmd.Parser, new[]{ "Mapid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.CVisitNpcUserCmd), global::Cmd.CVisitNpcUserCmd.Parser, new[]{ "Guid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.RetVisitNpcUserCmd), global::Cmd.RetVisitNpcUserCmd.Parser, new[]{ "Guid", "Shiplocaltalk" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.CStopVisitNpcUserCmd), global::Cmd.CStopVisitNpcUserCmd.Parser, new[]{ "Guid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.RetStopVisitNpcUserCmd), global::Cmd.RetStopVisitNpcUserCmd.Parser, new[]{ "Guid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SShowDialogUserCmd), global::Cmd.SShowDialogUserCmd.Parser, new[]{ "Guid", "Dialogid", "Type", "Text", "Emoji", "Action", "Voice" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ChoosePartnerUserCmd), global::Cmd.ChoosePartnerUserCmd.Parser, new[]{ "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.TeamMemberData), global::Cmd.TeamMemberData.Parser, new[]{ "Index", "Cfgid", "Guid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.TeamDataCmd), global::Cmd.TeamDataCmd.Parser, new[]{ "Charid", "Member", "Leaderindex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SetTeamUserCmd), global::Cmd.SetTeamUserCmd.Parser, new[]{ "Member" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SetTeamUserCmd.Types.Member), global::Cmd.SetTeamUserCmd.Types.Member.Parser, new[]{ "Index", "Fighter" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.LayerData), global::Cmd.LayerData.Parser, new[]{ "Id", "Time", "Pos", "Targetid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.BufferData), global::Cmd.BufferData.Parser, new[]{ "Id", "Layer", "Time", "Active", "Fromname", "Fromid", "Level", "Layerdata", "Fromskillid", "Fromeffecttime", "Shielddefvalue", "Hide" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UserBuffNineSyncCmd), global::Cmd.UserBuffNineSyncCmd.Parser, new[]{ "Guid", "Updates", "Dels" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UserActionNineSyncCmd), global::Cmd.UserActionNineSyncCmd.Parser, new[]{ "Guid", "Actionid", "Looptime", "Actiontype", "Force", "Isprivate", "Islookat", "Isbase", "Isstop", "Actionname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UserExpressionNineSyncCmd), global::Cmd.UserExpressionNineSyncCmd.Parser, new[]{ "Guid", "Expressionname", "Looptime", "Type", "Force", "Isprivate", "Isstop" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UserMouthNineSyncCmd), global::Cmd.UserMouthNineSyncCmd.Parser, new[]{ "Guid", "Idleid", "Mouthaction", "Mouthactionend", "Looptime", "Type", "Force" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UserShowBubbleCmd), global::Cmd.UserShowBubbleCmd.Parser, new[]{ "Guid", "Name", "Lasttime", "Force" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UserEffectNineSyncCmd), global::Cmd.UserEffectNineSyncCmd.Parser, new[]{ "Pos", "Guid", "Name", "Attachname", "Looptime", "Isstop", "Dir" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UserSoundNineSyncCmd), global::Cmd.UserSoundNineSyncCmd.Parser, new[]{ "Pos", "Guid", "Name", "Looptime", "Isstop" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.NotifyHideCloseUserCmd), global::Cmd.NotifyHideCloseUserCmd.Parser, new[]{ "Guid", "Closeguids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UnlockingMenuCmd), global::Cmd.UnlockingMenuCmd.Parser, new[]{ "MenuID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UnlockedMenuDataCmd), global::Cmd.UnlockedMenuDataCmd.Parser, new[]{ "Type", "UnlockedIDs", "Unlockedstrs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ReqMapLinkUserCmd), global::Cmd.ReqMapLinkUserCmd.Parser, new[]{ "Maplinkid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.BroadCastMapLinkUserCmd), global::Cmd.BroadCastMapLinkUserCmd.Parser, new[]{ "Maplinkid", "Guid", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.GoMapUserCmd), global::Cmd.GoMapUserCmd.Parser, new[]{ "Mapid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.PlayCGCmd), global::Cmd.PlayCGCmd.Parser, new[]{ "Cgname", "Cgtype", "Params", "Cameramode", "Fashionnpclist", "Adaptiveguid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UserCollegeGiftInfoCmd), global::Cmd.UserCollegeGiftInfoCmd.Parser, new[]{ "Gifts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UserCollegeGiftReceiveCmd), global::Cmd.UserCollegeGiftReceiveCmd.Parser, new[]{ "Giftids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UserUseUniqueSkillCmd), global::Cmd.UserUseUniqueSkillCmd.Parser, new[]{ "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.WeatherChange), global::Cmd.WeatherChange.Parser, new[]{ "Id", "Direction", "Strengthcurveid", "Inquest" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.CBossShowUpFinishCmd), global::Cmd.CBossShowUpFinishCmd.Parser, new[]{ "Guid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ShakeScreenCmd), global::Cmd.ShakeScreenCmd.Parser, new[]{ "Curvename", "Scale", "Lasttime", "Isstop" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.NpcPlayDialog), global::Cmd.NpcPlayDialog.Parser, new[]{ "Guid", "Id", "Lasttime", "Openrandom", "Intervaltime", "TalkContent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.InteractionWithEntryCmd), global::Cmd.InteractionWithEntryCmd.Parser, new[]{ "Guid", "Beguid", "Entrytype", "Opertype", "Tgtid", "Tgtpos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.InteractionCmd), global::Cmd.InteractionCmd.Parser, new[]{ "Guid", "Beguid", "Socketid", "Opertype", "Tgtid", "Tgtpos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.InteractionResultCmd), global::Cmd.InteractionResultCmd.Parser, new[]{ "Guid", "Beguid", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.PickUpCmd), global::Cmd.PickUpCmd.Parser, new[]{ "Guid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.PickUpResultCmd), global::Cmd.PickUpResultCmd.Parser, new[]{ "Guid", "Beguid", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.PutDownCmd), global::Cmd.PutDownCmd.Parser, new[]{ "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.PutDownResultCmd), global::Cmd.PutDownResultCmd.Parser, new[]{ "Guid", "Beguid", "Result", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ThrowCmd), global::Cmd.ThrowCmd.Parser, new[]{ "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ThrowResultCmd), global::Cmd.ThrowResultCmd.Parser, new[]{ "Guid", "Beguid", "Result", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.CatapultCmd), global::Cmd.CatapultCmd.Parser, new[]{ "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.CatapultResultCmd), global::Cmd.CatapultResultCmd.Parser, new[]{ "Guid", "Beguid", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.OnVehicleCmd), global::Cmd.OnVehicleCmd.Parser, new[]{ "Beguid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.OnVehicleResultCmd), global::Cmd.OnVehicleResultCmd.Parser, new[]{ "Guid", "Beguid", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.OffVehicleCmd), global::Cmd.OffVehicleCmd.Parser, new[]{ "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.OffVehicleResultCmd), global::Cmd.OffVehicleResultCmd.Parser, new[]{ "Guid", "Beguid", "Result", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.InteractionEventCmd), global::Cmd.InteractionEventCmd.Parser, new[]{ "Beguid", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ChatMsgClientToGateCmd), global::Cmd.ChatMsgClientToGateCmd.Parser, new[]{ "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ChatMsgGateToClientCmd), global::Cmd.ChatMsgGateToClientCmd.Parser, new[]{ "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MiniMapsInfoCmd), global::Cmd.MiniMapsInfoCmd.Parser, new[]{ "Minimapinfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.MiniMapsInfoCmd.Types.OneMiniMapInfo), global::Cmd.MiniMapsInfoCmd.Types.OneMiniMapInfo.Parser, new[]{ "Mapid", "Npcicons" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.LotteryCmd), global::Cmd.LotteryCmd.Parser, new[]{ "Type", "Times", "Batchid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SendLotteryResultCmd), global::Cmd.SendLotteryResultCmd.Parser, new[]{ "Lotteryresults" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SendLotteryResultCmd.Types.LotteryResult), global::Cmd.SendLotteryResultCmd.Types.LotteryResult.Parser, new[]{ "Itemid", "Itemcount", "Type", "Brandnew" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SendGMLotteryResultCmd), global::Cmd.SendGMLotteryResultCmd.Parser, new[]{ "Lotteryresults" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SendGMLotteryResultCmd.Types.LotteryResult), global::Cmd.SendGMLotteryResultCmd.Types.LotteryResult.Parser, new[]{ "Itemid", "Times", "Convertnum", "Type", "Brandnew" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UserSpecialActionCmd), global::Cmd.UserSpecialActionCmd.Parser, new[]{ "Beguid", "Action" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.AsideUserCmd), global::Cmd.AsideUserCmd.Parser, new[]{ "Npcid", "Textid", "Showtime", "Orientation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SendPartnerSourceCmd), global::Cmd.SendPartnerSourceCmd.Parser, new[]{ "Partnerid", "Sourcetype" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SceneRaidResultCmd), global::Cmd.SceneRaidResultCmd.Parser, new[]{ "Rank", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.C2SBuffSyncCmd), global::Cmd.C2SBuffSyncCmd.Parser, new[]{ "Charid", "Buffid", "Active", "Shielddefvalue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.AcceptRepairTask), global::Cmd.AcceptRepairTask.Parser, new[]{ "Cfgid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.AddPartnerExpFromExpPoolCmd), global::Cmd.AddPartnerExpFromExpPoolCmd.Parser, new[]{ "Fighterid", "Expvalue", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.PlayItemAnimation), global::Cmd.PlayItemAnimation.Parser, new[]{ "Itemid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.WXKJAsideUserCmd), global::Cmd.WXKJAsideUserCmd.Parser, new[]{ "Npcid", "Textid", "Showtime", "Orientation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.BlackSanCmd), global::Cmd.BlackSanCmd.Parser, new[]{ "Guid", "Start", "Hitpos", "Skillid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.GoToCommonTraceCmd), global::Cmd.GoToCommonTraceCmd.Parser, new[]{ "Id", "Clientrequest", "Serveranswer", "Pos", "Type", "Strkey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SummonEffectUserCmd), global::Cmd.SummonEffectUserCmd.Parser, new[]{ "Charid", "Skillid", "Skilllv", "Effectid", "TimeAxis", "Pos", "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ClubChallengeInfo), global::Cmd.ClubChallengeInfo.Parser, new[]{ "Level", "Npcid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.DailyActivityInfo), global::Cmd.DailyActivityInfo.Parser, new[]{ "Id", "Characterid", "Endtime", "Status", "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.LeagueActivity), global::Cmd.LeagueActivity.Parser, new[]{ "Id", "Endtime", "Status", "Refreshfield", "Level", "ClubInfo", "Uid", "Alias" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ActiveDatingInfo), global::Cmd.ActiveDatingInfo.Parser, new[]{ "Id", "Characterid", "Endtime", "Status", "Refreshfield", "Uid", "Fvalue", "Type", "Alias" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.DailyActivityCmd), global::Cmd.DailyActivityCmd.Parser, new[]{ "Dailyactivity", "Leagueactivity", "NextQuestRefreshTime", "Activedating", "Allcompletestatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.DailyActivityAwardCmd), global::Cmd.DailyActivityAwardCmd.Parser, new[]{ "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ClubChallengeCGCmd), global::Cmd.ClubChallengeCGCmd.Parser, new[]{ "Cg", "Showid1", "Showid2", "Showid3" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.DailyActivityCompleteAwardCmd), global::Cmd.DailyActivityCompleteAwardCmd.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.WeakSyncSwitchCmd), global::Cmd.WeakSyncSwitchCmd.Parser, new[]{ "WeaksyncSwitch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.RootMotionSwitchCmd), global::Cmd.RootMotionSwitchCmd.Parser, new[]{ "RootmotionSwitch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.StressTestResponseCmd), global::Cmd.StressTestResponseCmd.Parser, new[]{ "Ret", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SetRobotCmd), global::Cmd.SetRobotCmd.Parser, new[]{ "Set", "Isplayerwalk" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SyncActionListCmd), global::Cmd.SyncActionListCmd.Parser, new[]{ "Guid", "Actionlist", "Needloop" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.NpcBubblePerceptionCmd), global::Cmd.NpcBubblePerceptionCmd.Parser, new[]{ "Guid" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  属性改变方式
  /// </summary>
  public enum EAttrChangeType {
    [pbr::OriginalName("EATTRCHANGETYPE_MIN")] Min = 0,
    /// <summary>
    /// 装备穿戴
    /// </summary>
    [pbr::OriginalName("EATTRCHANGETYPE_EQUIP")] Equip = 1,
    /// <summary>
    /// 装备强化
    /// </summary>
    [pbr::OriginalName("EATTRCHANGETYPE_EQUIP_STRENGTH")] EquipStrength = 2,
    /// <summary>
    /// 装备升星
    /// </summary>
    [pbr::OriginalName("EATTRCHANGETYPE_EQUIP_UPSTAR")] EquipUpstar = 3,
    [pbr::OriginalName("EATTRCHANGETYPE_MAX")] Max = 4,
  }

  /// <summary>
  ///  原地副本类型
  /// </summary>
  public enum ELocalDungeonType {
    /// <summary>
    ///  默认类型
    /// </summary>
    [pbr::OriginalName("ELOCALDUNGEON_TYPE_NORMAL")] Normal = 0,
    /// <summary>
    ///  天团挑战类型
    /// </summary>
    [pbr::OriginalName("ELOCALDUNGEON_TYPE_CLUBCHALLENGE")] Clubchallenge = 1,
    /// <summary>
    ///  修复战类型
    /// </summary>
    [pbr::OriginalName("ELOCALDUNGEON_TYPE_REPAIR")] Repair = 2,
  }

  /// <summary>
  ///  技能阶段
  /// </summary>
  public enum ESkillPhaseType {
    [pbr::OriginalName("ESKILLPHASE_TYPE_MIN")] Min = 0,
    /// <summary>
    ///  技能吟唱
    /// </summary>
    [pbr::OriginalName("ESKILLPHASE_TYPE_CHANT")] Chant = 1,
    /// <summary>
    ///  技能运行
    /// </summary>
    [pbr::OriginalName("ESKILLPHASE_TYPE_RUN")] Run = 2,
    /// <summary>
    ///  通知蓄力结束
    /// </summary>
    [pbr::OriginalName("ESKILLPHASE_TYPE_ACCUMULATE_END")] AccumulateEnd = 3,
    /// <summary>
    ///  技能释放前位移补正
    /// </summary>
    [pbr::OriginalName("ESKILLPHASE_TYPE_CORRECT")] Correct = 4,
    /// <summary>
    ///  技能结束 一般持续引导技能,玩家或者AI可以随时控制技能引导结束的时候用到。
    /// </summary>
    [pbr::OriginalName("ESKILLPHASE_TYPE_END")] End = 5,
  }

  public enum ESkillBreakType {
    [pbr::OriginalName("ESKILLBREAK_TYPE_MIN")] Min = 0,
    /// <summary>
    ///  位移补正阶段打断
    /// </summary>
    [pbr::OriginalName("ESKILLBREAK_TYPE_CORRECT")] Correct = 1,
    /// <summary>
    ///  读条阶段打断
    /// </summary>
    [pbr::OriginalName("ESKILLBREAK_TYPE_CHANT")] Chant = 2,
    /// <summary>
    ///  运行阶段打断
    /// </summary>
    [pbr::OriginalName("ESKILLBREAK_TYPE_RUN")] Run = 3,
    /// <summary>
    ///  持续引导阶段打断
    /// </summary>
    [pbr::OriginalName("ESKILLBREAK_TYPE_LEADSKILL")] Leadskill = 4,
    [pbr::OriginalName("ESKILLBREAK_TYPE_MAX")] Max = 5,
  }

  /// <summary>
  ///  伤害类型
  /// </summary>
  public enum DamageType {
    [pbr::OriginalName("DAMAGE_TYPE_NONE")] None = 0,
    /// <summary>
    ///  普通伤害
    /// </summary>
    [pbr::OriginalName("DAMAGE_TYPE_NORMAL")] Normal = 1,
    /// <summary>
    ///  miss
    /// </summary>
    [pbr::OriginalName("DAMAGE_TYPE_MISS")] Miss = 3,
    /// <summary>
    ///  治疗
    /// </summary>
    [pbr::OriginalName("DAMAGE_TYPE_HEAL")] Heal = 4,
    /// <summary>
    ///  免疫
    /// </summary>
    [pbr::OriginalName("DAMAGE_TYPE_IMMUNE")] Immune = 5,
    /// <summary>
    ///  连击伤害
    /// </summary>
    [pbr::OriginalName("DAMAGE_TYPE_MULTIHIT")] Multihit = 6,
    /// <summary>
    ///  护盾
    /// </summary>
    [pbr::OriginalName("DAMAGE_TYPE_SHIELD")] Shield = 7,
    /// <summary>
    ///  恢复以太
    /// </summary>
    [pbr::OriginalName("DAMAGE_TYPE_HEAL_ETHER")] HealEther = 8,
    /// <summary>
    ///  以太减少
    /// </summary>
    [pbr::OriginalName("DAMAGE_TYPE_REDUCE_ETHER")] ReduceEther = 9,
    /// <summary>
    ///  反弹伤害
    /// </summary>
    [pbr::OriginalName("DAMAGE_TYPE_REBOUND")] Rebound = 10,
    /// <summary>
    ///  火元素伤害
    /// </summary>
    [pbr::OriginalName("DAMAGE_TYPE_FIRE")] Fire = 11,
    /// <summary>
    ///  冰元素伤害
    /// </summary>
    [pbr::OriginalName("DAMAGE_TYPE_ICE")] Ice = 12,
    /// <summary>
    ///  雷元素伤害
    /// </summary>
    [pbr::OriginalName("DAMAGE_TYPE_THUNDER")] Thunder = 13,
    /// <summary>
    ///  土
    /// </summary>
    [pbr::OriginalName("DAMAGE_TYPE_EARTH")] Earth = 14,
    /// <summary>
    ///  斩
    /// </summary>
    [pbr::OriginalName("DAMAGE_TYPE_CUT")] Cut = 15,
    /// <summary>
    ///  打
    /// </summary>
    [pbr::OriginalName("DAMAGE_TYPE_STRIKE")] Strike = 16,
    /// <summary>
    ///  突
    /// </summary>
    [pbr::OriginalName("DAMAGE_TYPE_SPIKE")] Spike = 17,
    /// <summary>
    ///  无敌状态下受到的伤害
    /// </summary>
    [pbr::OriginalName("DAMAGE_TYPE_INVINCIBLE")] Invincible = 18,
    [pbr::OriginalName("DAMAGE_TYPE_MAX")] Max = 19,
  }

  public enum EAnimMoveState {
    [pbr::OriginalName("EANIMMOVESTATE_MIN")] Min = 0,
    /// <summary>
    /// 位移开始
    /// </summary>
    [pbr::OriginalName("EANIMMOVESTATE_START")] Start = 1,
    /// <summary>
    /// 位移中
    /// </summary>
    [pbr::OriginalName("EANIMMOVESTATE_MOVING")] Moving = 2,
    /// <summary>
    /// 位移结束
    /// </summary>
    [pbr::OriginalName("EANIMMOVESTATE_END")] End = 3,
    [pbr::OriginalName("EANIMMOVESTATE_MAX")] Max = 4,
  }

  /// <summary>
  ///  复活类型
  /// </summary>
  public enum EReliveType {
    [pbr::OriginalName("ERELIVETYPE_MIN")] Min = 0,
    /// <summary>
    ///  返回复活点
    /// </summary>
    [pbr::OriginalName("ERELIVETYPE_RETURN")] Return = 1,
    /// <summary>
    ///  gm指令复活
    /// </summary>
    [pbr::OriginalName("ERELIVETYPE_GM")] Gm = 2,
    /// <summary>
    ///  技能复活
    /// </summary>
    [pbr::OriginalName("ERELIVETYPE_SKILL")] Skill = 4,
    /// <summary>
    ///  自动复活
    /// </summary>
    [pbr::OriginalName("ERELIVETYPE_AUTO")] Auto = 5,
    /// <summary>
    ///  任务复活
    /// </summary>
    [pbr::OriginalName("ERELIVETYPE_QUEST")] Quest = 6,
    /// <summary>
    ///  离开原地副本
    /// </summary>
    [pbr::OriginalName("ERELIVETYPE_LEAVECOPY")] Leavecopy = 7,
    /// <summary>
    ///  登出
    /// </summary>
    [pbr::OriginalName("ERELIVETYPE_LOGOUT")] Logout = 8,
    [pbr::OriginalName("ERELIVETYPE_MAX")] Max = 9,
  }

  /// <summary>
  ///  动作表情类型
  /// </summary>
  public enum EActionType {
    [pbr::OriginalName("EACTIONTYPE_MIN")] Min = 0,
    /// <summary>
    ///  普通播放
    /// </summary>
    [pbr::OriginalName("EACTIONTYPE_NORMAL")] Normal = 1,
    /// <summary>
    ///  播放保持在最后一帧
    /// </summary>
    [pbr::OriginalName("EACTIONTYPE_SUSTAIN")] Sustain = 2,
    /// <summary>
    ///  无限循环播放
    /// </summary>
    [pbr::OriginalName("EACTIONTYPE_LOOP")] Loop = 3,
    [pbr::OriginalName("EACTIONTYPE_MAX")] Max = 4,
  }

  /// <summary>
  ///  解锁类型
  /// </summary>
  public enum EMenuEvent {
    [pbr::OriginalName("EMENUEVENT_MIN")] Min = 0,
    /// <summary>
    ///  基础功能
    /// </summary>
    [pbr::OriginalName("EMENUEVENT_UNLOCKFUNCTION")] Unlockfunction = 1,
    /// <summary>
    ///  技能
    /// </summary>
    [pbr::OriginalName("EMENUEVENT_UNLOCKSKILL")] Unlockskill = 2,
    /// <summary>
    ///  地图
    /// </summary>
    [pbr::OriginalName("EMENUEVENT_UNLOCKMAP")] Unlockmap = 3,
    /// <summary>
    ///  大区
    /// </summary>
    [pbr::OriginalName("EMENUEVENT_UNLOCKAREA")] Unlockarea = 4,
    /// <summary>
    ///  npc状态
    /// </summary>
    [pbr::OriginalName("EMENUEVENT_UNLOCKNPCSTATUS")] Unlocknpcstatus = 5,
    /// <summary>
    ///  npc是否可见
    /// </summary>
    [pbr::OriginalName("EMENUEVENT_SHOWNPC")] Shownpc = 6,
    /// <summary>
    ///  是否可以在妄想空间中随机怪物随机到
    /// </summary>
    [pbr::OriginalName("EMENUEVENT_MONSTER_UNLOCK")] MonsterUnlock = 9,
    /// <summary>
    ///  妄想空间玩法解锁
    /// </summary>
    [pbr::OriginalName("EMENUEVENT_WXKJ")] Wxkj = 10,
    /// <summary>
    ///  出生点解锁
    /// </summary>
    [pbr::OriginalName("EMENUEVENT_BORNPOINT")] Bornpoint = 11,
    /// <summary>
    ///  关闭自动上阵
    /// </summary>
    [pbr::OriginalName("EMENUEVENT_UNLOCK_CLOSEAUTOUP")] UnlockCloseautoup = 12,
    /// <summary>
    ///  解锁学院赠礼
    /// </summary>
    [pbr::OriginalName("EMENUEVENT_COLLEGE_GIFT")] CollegeGift = 13,
    /// <summary>
    ///  技能等级限制
    /// </summary>
    [pbr::OriginalName("EMENUEVENT_SKILL_LEVEL_LIMIT")] SkillLevelLimit = 14,
    /// <summary>
    ///  装备等级限制
    /// </summary>
    [pbr::OriginalName("EMENUEVENT_EQUIP_LEVEL_LIMIT")] EquipLevelLimit = 15,
    /// <summary>
    ///  精英修复
    /// </summary>
    [pbr::OriginalName("EMENUEVENT_ELITE_REPAIR")] EliteRepair = 16,
    /// <summary>
    ///  日常活动
    /// </summary>
    [pbr::OriginalName("EMENUEVENT_DAILYACTIVITY")] Dailyactivity = 17,
    [pbr::OriginalName("EMENUEVENT_MAX")] Max = 9999,
  }

  /// <summary>
  ///  CG动画类型
  /// </summary>
  public enum ECgType {
    [pbr::OriginalName("ECGTYPE_MIN")] Min = 0,
    /// <summary>
    /// 普通CG
    /// </summary>
    [pbr::OriginalName("ECGTYPE_NORMAL")] Normal = 1,
    /// <summary>
    /// 修复物CG
    /// </summary>
    [pbr::OriginalName("ECGTYPE_REPAIR")] Repair = 2,
    [pbr::OriginalName("ECGTYPE_MAX")] Max = 4,
  }

  public enum ECgCameraMode {
    [pbr::OriginalName("ECGCAMERAMODE_MIN")] Min = 0,
    /// <summary>
    /// 黑屏
    /// </summary>
    [pbr::OriginalName("ECGCAMERAMODE_BLANK_SCREEN")] BlankScreen = 1,
    /// <summary>
    /// 过渡
    /// </summary>
    [pbr::OriginalName("ECGCAMERAMODE_TRANSITION")] Transition = 2,
    /// <summary>
    /// 顺切
    /// </summary>
    [pbr::OriginalName("ECGCAMERAMODE_DOWNSHEAR")] Downshear = 3,
    [pbr::OriginalName("ECGCAMERAMODE_MAX")] Max = 4,
  }

  public enum EInteractiveOperType {
    [pbr::OriginalName("EINTERACTIVEOPER_MIN")] EinteractiveoperMin = 0,
    /// <summary>
    ///  捡起
    /// </summary>
    [pbr::OriginalName("EINTERACTIVEOPER_PICK")] EinteractiveoperPick = 1,
    /// <summary>
    ///  抛出去
    /// </summary>
    [pbr::OriginalName("EINTERACTIVEOPER_THROW")] EinteractiveoperThrow = 2,
    /// <summary>
    ///  激活
    /// </summary>
    [pbr::OriginalName("EINTERACTIVEOPER_ACTIVE")] EinteractiveoperActive = 3,
    /// <summary>
    ///  生效
    /// </summary>
    [pbr::OriginalName("EINTERACTIVEOPER_VALID")] EinteractiveoperValid = 4,
    /// <summary>
    ///  tick eot
    /// </summary>
    [pbr::OriginalName("EINTERACTIVEOPER_TICK")] EinteractiveoperTick = 5,
    /// <summary>
    ///  丢弃
    /// </summary>
    [pbr::OriginalName("EINTERACTIVEOPER_GIVEUP")] EinteractiveoperGiveup = 6,
    /// <summary>
    ///  使用
    /// </summary>
    [pbr::OriginalName("EINTERACTIVEOPER_USE")] EinteractiveoperUse = 7,
    /// <summary>
    ///  取消使用
    /// </summary>
    [pbr::OriginalName("EINTERACTIVEOPER_CANCEL_USE")] EinteractiveoperCancelUse = 8,
    /// <summary>
    ///  上载具
    /// </summary>
    [pbr::OriginalName("EINTERACTIVEOPER_ON_VEHICLE")] EinteractiveoperOnVehicle = 9,
    /// <summary>
    ///  下载具
    /// </summary>
    [pbr::OriginalName("EINTERACTIVEOPER_OFF_VEHICLE")] EinteractiveoperOffVehicle = 10,
    /// <summary>
    ///  原地副本
    /// </summary>
    [pbr::OriginalName("EINTERACTIVEOPER_LOCALDUNGEON")] EinteractiveoperLocaldungeon = 11,
    /// <summary>
    ///  接收
    /// </summary>
    [pbr::OriginalName("EINTERACTIVEOPER_RECEIVE")] EinteractiveoperReceive = 12,
    /// <summary>
    ///  任务推进
    /// </summary>
    [pbr::OriginalName("EINTERACTIVEOPER_TASKTRIGGER")] EinteractiveoperTasktrigger = 13,
    /// <summary>
    ///  开
    /// </summary>
    [pbr::OriginalName("EINTERACTIVEOPER_OPEN")] EinteractiveoperOpen = 14,
    /// <summary>
    ///  关
    /// </summary>
    [pbr::OriginalName("EINTERACTIVEOPER_CLOSE")] EinteractiveoperClose = 15,
    /// <summary>
    ///  获取npc
    /// </summary>
    [pbr::OriginalName("EINTERACTIVEOPER_GETNPC")] EinteractiveoperGetnpc = 16,
    /// <summary>
    ///  修复
    /// </summary>
    [pbr::OriginalName("EINTERACTIVEOPER_REPAIR")] EinteractiveoperRepair = 17,
    /// <summary>
    ///  采集
    /// </summary>
    [pbr::OriginalName("EINTERACTIVEOPER_COLLECT")] EinteractiveoperCollect = 18,
    /// <summary>
    ///  延迟获得
    /// </summary>
    [pbr::OriginalName("EINTERACTIVEOPER_DELAYGET")] EinteractiveoperDelayget = 19,
    /// <summary>
    ///  提交材料
    /// </summary>
    [pbr::OriginalName("EINTERACTIVEOPER_SUBMIT")] EinteractiveoperSubmit = 20,
    /// <summary>
    ///  坐下吃东西
    /// </summary>
    [pbr::OriginalName("EINTERACTIVEOPER_SEAT_EAT")] EinteractiveoperSeatEat = 21,
    /// <summary>
    ///  获取信息
    /// </summary>
    [pbr::OriginalName("EINTERACTIVEOPER_INFO")] EinteractiveoperInfo = 22,
    /// <summary>
    ///  获取武器
    /// </summary>
    [pbr::OriginalName("EINTERACTIVEOPER_COLLECT_WEAPON")] EinteractiveoperCollectWeapon = 23,
    [pbr::OriginalName("EINTERACTIVEOPER_MAX")] EinteractiveoperMax = 24,
  }

  /// <summary>
  ///  交互类型枚举
  /// </summary>
  public enum EInteractionType {
    [pbr::OriginalName("EINTERACTION_TYPE_MIN")] Min = 0,
    /// <summary>
    ///  拾取
    /// </summary>
    [pbr::OriginalName("EINTERACTION_TYPE_PICKUP")] Pickup = 1,
    /// <summary>
    ///  放下
    /// </summary>
    [pbr::OriginalName("EINTERACTION_TYPE_PUTDOWN")] Putdown = 2,
    /// <summary>
    ///  扔
    /// </summary>
    [pbr::OriginalName("EINTERACTION_TYPE_THROW")] Throw = 3,
    /// <summary>
    ///  上载具
    /// </summary>
    [pbr::OriginalName("EINTERACTION_TYPE_ONVEHICLE")] Onvehicle = 4,
    /// <summary>
    ///  下载具
    /// </summary>
    [pbr::OriginalName("EINTERACTION_TYPE_OFFVEHICLE")] Offvehicle = 5,
    /// <summary>
    ///  修理
    /// </summary>
    [pbr::OriginalName("EINTERACTION_TYPE_MEND")] Mend = 6,
    /// <summary>
    ///  扫描
    /// </summary>
    [pbr::OriginalName("EINTERACTION_TYPE_SCANOBJECT")] Scanobject = 7,
    /// <summary>
    ///  追踪
    /// </summary>
    [pbr::OriginalName("EINTERACTION_TYPE_TRACE")] Trace = 8,
    /// <summary>
    ///  链接
    /// </summary>
    [pbr::OriginalName("EINTERACTION_TYPE_CONNECTION")] Connection = 9,
  }

  public enum LotteryType {
    [pbr::OriginalName("ELOTTERYTYPE_MIN")] ElotterytypeMin = 0,
    /// <summary>
    ///  伙伴抽奖
    /// </summary>
    [pbr::OriginalName("ELOTTERYTYPE_PARTNER")] ElotterytypePartner = 1,
    /// <summary>
    ///  装备抽奖
    /// </summary>
    [pbr::OriginalName("ELOTTERYTYPE_EQUIP")] ElotterytypeEquip = 2,
    /// <summary>
    ///  混合抽奖
    /// </summary>
    [pbr::OriginalName("ELOTTERYTYPE_MIX")] ElotterytypeMix = 3,
    [pbr::OriginalName("ELOTTERYTYPE_GM")] ElotterytypeGm = 90,
    /// <summary>
    /// GM伙伴抽奖
    /// </summary>
    [pbr::OriginalName("ELOTTERYTYPE_GM_PARTNER")] ElotterytypeGmPartner = 91,
    /// <summary>
    /// GM装备抽奖
    /// </summary>
    [pbr::OriginalName("ELOTTERYTYPE_GM_EQUIP")] ElotterytypeGmEquip = 92,
    [pbr::OriginalName("ELLOTERYTYPE_MAX")] ElloterytypeMax = 100,
  }

  /// <summary>
  ///  旁白位于屏幕方位
  /// </summary>
  public enum EAsideOrientation {
    [pbr::OriginalName("EASIDEORIENTATION_MIN")] Min = 0,
    [pbr::OriginalName("EASIDEORIENTATION_UP")] Up = 1,
    [pbr::OriginalName("EASIDEORIENTATION_MIDDLE")] Middle = 2,
    [pbr::OriginalName("EASIDEORIENTATION_DOWN")] Down = 3,
    [pbr::OriginalName("EASIDEORIENTATION_MAX")] Max = 4,
  }

  public enum EPartnerSourceType {
    [pbr::OriginalName("EPARTNERSOURCETYPE_MIN")] Min = 0,
    /// <summary>
    /// 抽卡获得
    /// </summary>
    [pbr::OriginalName("EPARTNERSOURCETYPE_LOTTERY")] Lottery = 1,
    /// <summary>
    /// 道具获得
    /// </summary>
    [pbr::OriginalName("EPARTNERSOURCETYPE_ITEM")] Item = 2,
    /// <summary>
    /// 默认获得
    /// </summary>
    [pbr::OriginalName("EPARTNERSOURCETYPE_NONE")] None = 3,
    /// <summary>
    /// GM获得
    /// </summary>
    [pbr::OriginalName("EPARTNERSOURCETYPE_GM")] Gm = 4,
    /// <summary>
    /// 任务获得
    /// </summary>
    [pbr::OriginalName("EPARTNERSOURCETYPE_MISSION")] Mission = 5,
    [pbr::OriginalName("EPARTNERSOURCETYPE_MAX")] Max = 99,
  }

  public enum EAddPartnerExpResult {
    [pbr::OriginalName("EADDPARTNEREXPRESULT_MIN")] Min = 0,
    /// <summary>
    /// 无效伙伴id
    /// </summary>
    [pbr::OriginalName("EADDPARTNEREXPRESULT_INVALID_FIGHTERID")] InvalidFighterid = 1,
    /// <summary>
    /// 经验达到上限等添加失败原因
    /// </summary>
    [pbr::OriginalName("EADDPARTNEREXPRESULT_ADD_FAILURE")] AddFailure = 2,
    /// <summary>
    /// 经验不足
    /// </summary>
    [pbr::OriginalName("EADDPARTNEREXPRESULT_NOT_ENOUGH")] NotEnough = 3,
    /// <summary>
    /// 不能给主角加
    /// </summary>
    [pbr::OriginalName("EADDPARTNEREXPRESULT_IS_MAIN_FIGHTER")] IsMainFighter = 4,
    /// <summary>
    /// 添加成功
    /// </summary>
    [pbr::OriginalName("EADDPARTNEREXPRESULT_SUCCESS")] Success = 5,
    [pbr::OriginalName("EADDPARTNEREXPRESULT_MAX")] Max = 6,
  }

  public enum GotoType {
    /// <summary>
    /// 真·任务（非任务类型里的"真·任务"是不是很反直觉）
    /// </summary>
    [pbr::OriginalName("GOTO_TRUEQUEST")] GotoTruequest = 0,
    /// <summary>
    /// 普通修复
    /// </summary>
    [pbr::OriginalName("GOTO_COMMONREPAIR")] GotoCommonrepair = 1,
    /// <summary>
    /// 精英修复
    /// </summary>
    [pbr::OriginalName("GOTO_ELITEREPAIR")] GotoEliterepair = 2,
    /// <summary>
    /// 日常任务
    /// </summary>
    [pbr::OriginalName("GOTO_DAILYQUEST")] GotoDailyquest = 3,
    /// <summary>
    /// 社团任务
    /// </summary>
    [pbr::OriginalName("GOTO_SOCIALQUEST")] GotoSocialquest = 4,
    /// <summary>
    /// 妄想空间任务
    /// </summary>
    [pbr::OriginalName("GOTO_WXKJQUEST")] GotoWxkjquest = 5,
    /// <summary>
    /// 获取途径
    /// </summary>
    [pbr::OriginalName("GOTO_ACCESSOBJECT")] GotoAccessobject = 6,
    /// <summary>
    /// 主动约会
    /// </summary>
    [pbr::OriginalName("GOTO_ACTIVEDATING")] GotoActivedating = 7,
    /// <summary>
    /// 天团挑战
    /// </summary>
    [pbr::OriginalName("GOTO_CLUBCHALLENGE")] GotoClubchallenge = 8,
    /// <summary>
    /// 地图传送
    /// </summary>
    [pbr::OriginalName("GOTO_MAPLIST")] GotoMaplist = 9,
    /// <summary>
    /// 约会房间
    /// </summary>
    [pbr::OriginalName("GOTO_DATINGROOM")] GotoDatingroom = 10,
    /// <summary>
    /// 约会目标点
    /// </summary>
    [pbr::OriginalName("GOTO_DATINGSCENE")] GotoDatingscene = 11,
    /// <summary>
    /// npc别名传送
    /// </summary>
    [pbr::OriginalName("GOTO_NPCALIAS")] GotoNpcalias = 12,
  }

  /// <summary>
  ///  日常活动状态(全部完成状态也使用)
  /// </summary>
  public enum DailyActivityState {
    /// <summary>
    ///  活动初始化
    /// </summary>
    [pbr::OriginalName("DAILYACTIVITY_INIT")] DailyactivityInit = 0,
    /// <summary>
    ///  活动开启
    /// </summary>
    [pbr::OriginalName("DAILYACTIVITY_OPEN")] DailyactivityOpen = 1,
    /// <summary>
    ///  活动完成(完成可以领奖)
    /// </summary>
    [pbr::OriginalName("DAILYACTIVITY_COMPLETE")] DailyactivityComplete = 2,
    /// <summary>
    ///  活动结束(完成已领奖)
    /// </summary>
    [pbr::OriginalName("DAILYACTIVITY_END")] DailyactivityEnd = 3,
  }

  public enum DailyActivityRewardType {
    /// <summary>
    ///  NONE
    /// </summary>
    [pbr::OriginalName("DAILYACTIVITY_TYPE_NONE")] DailyactivityTypeNone = 0,
    /// <summary>
    ///  属性  
    /// </summary>
    [pbr::OriginalName("DAILYACTIVITY_TYPE_PROP")] DailyactivityTypeProp = 1,
    /// <summary>
    ///  等级  (守护遗迹)
    /// </summary>
    [pbr::OriginalName("DAILYACTIVITY_TYPE_LEVEL")] DailyactivityTypeLevel = 2,
    /// <summary>
    ///  技能  (黑潮)
    /// </summary>
    [pbr::OriginalName("DAILYACTIVITY_TYPE_SKILL")] DailyactivityTypeSkill = 3,
    /// <summary>
    ///  大招
    /// </summary>
    [pbr::OriginalName("DAILYACTIVITY_TYPE_BIGSKILL")] DailyactivityTypeBigskill = 4,
    /// <summary>
    /// DAILYACTIVITY_TYPE_DIAMOND = 5;     // 钻石
    /// </summary>
    [pbr::OriginalName("DAILYACTIVITY_TYPE_ELITE")] DailyactivityTypeElite = 6,
    /// <summary>
    ///  金币
    /// </summary>
    [pbr::OriginalName("DAILYACTIVITY_TYPE_GOLD")] DailyactivityTypeGold = 7,
    /// <summary>
    ///  好感度 (约会)
    /// </summary>
    [pbr::OriginalName("DAILYACTIVITY_TYPE_DATING")] DailyactivityTypeDating = 5,
  }

  public enum DailyActivityPropRewardType {
    /// <summary>
    ///  血量
    /// </summary>
    [pbr::OriginalName("DAILYACTIVITY_PROP_MAXHP")] DailyactivityPropMaxhp = 0,
    /// <summary>
    ///  攻击力
    /// </summary>
    [pbr::OriginalName("DAILYACTIVITY_PROP_ATK")] DailyactivityPropAtk = 1,
    /// <summary>
    ///  物理防御
    /// </summary>
    [pbr::OriginalName("DAILYACTIVITY_PROP_DEF")] DailyactivityPropDef = 2,
    /// <summary>
    ///  魔法
    /// </summary>
    [pbr::OriginalName("DAILYACTIVITY_PROP_MDEF")] DailyactivityPropMdef = 3,
    /// <summary>
    ///  生命值恢复
    /// </summary>
    [pbr::OriginalName("DAILYACTIVITY_PROP_HPRECOVER")] DailyactivityPropHprecover = 4,
  }

  /// <summary>
  ///  社团类型
  /// </summary>
  public enum DailyActivityType {
    [pbr::OriginalName("DAILYACTIVITY_TYPE")] DailyactivityType = 0,
    /// <summary>
    ///  天团挑战(左)
    /// </summary>
    [pbr::OriginalName("LEAGUEACTIVITY_TYPE_CHALLENGE_LEFT")] LeagueactivityTypeChallengeLeft = 1,
    /// <summary>
    ///  天团挑战(右)
    /// </summary>
    [pbr::OriginalName("LEAGUEACTIVITY_TYPE_CHALLENGE_RIGHT")] LeagueactivityTypeChallengeRight = 2,
    /// <summary>
    ///  妄想空间
    /// </summary>
    [pbr::OriginalName("LEAGUEACTIVITY_TYPE_WXKJ")] LeagueactivityTypeWxkj = 3,
  }

  /// <summary>
  ///  日常活动错误类型
  /// </summary>
  public enum DailyActivityErrorType {
    /// <summary>
    ///  正常
    /// </summary>
    [pbr::OriginalName("DAILYACTIVITY_ERROR_NONE")] DailyactivityErrorNone = 0,
    /// <summary>
    ///  活动不存在
    /// </summary>
    [pbr::OriginalName("DAILYACTIVITY_ERROR_NOT_EXIST")] DailyactivityErrorNotExist = 1,
    /// <summary>
    ///  未开启
    /// </summary>
    [pbr::OriginalName("DAILYACTIVITY_ERROR_NOT_OPEN")] DailyactivityErrorNotOpen = 2,
    /// <summary>
    ///  未完成
    /// </summary>
    [pbr::OriginalName("DAILYACTIVITY_ERROR_NOT_COMPLETE")] DailyactivityErrorNotComplete = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  角色属性保存,S->C
  /// </summary>
  public sealed partial class UserAttrSvr : pb::IMessage<UserAttrSvr> {
    private static readonly pb::MessageParser<UserAttrSvr> _parser = new pb::MessageParser<UserAttrSvr>(() => new UserAttrSvr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserAttrSvr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAttrSvr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAttrSvr(UserAttrSvr other) : this() {
      type_ = other.type_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAttrSvr Clone() {
      return new UserAttrSvr(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///  属性类型,EAttrType枚举
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private float value_;
    /// <summary>
    ///  属性值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserAttrSvr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserAttrSvr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Value != 0F) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (Value != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserAttrSvr other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 21: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  设置用户数据,S&lt;->C
  /// </summary>
  public sealed partial class SetUserDataCmd : pb::IMessage<SetUserDataCmd> {
    private static readonly pb::MessageParser<SetUserDataCmd> _parser = new pb::MessageParser<SetUserDataCmd>(() => new SetUserDataCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetUserDataCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUserDataCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUserDataCmd(SetUserDataCmd other) : this() {
      datas_ = other.datas_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUserDataCmd Clone() {
      return new SetUserDataCmd(this);
    }

    /// <summary>Field number for the "datas" field.</summary>
    public const int DatasFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.UserData> _repeated_datas_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.UserData.Parser);
    private readonly pbc::RepeatedField<global::Cmd.UserData> datas_ = new pbc::RepeatedField<global::Cmd.UserData>();
    /// <summary>
    ///  用户数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.UserData> Datas {
      get { return datas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetUserDataCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetUserDataCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!datas_.Equals(other.datas_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= datas_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      datas_.WriteTo(output, _repeated_datas_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += datas_.CalculateSize(_repeated_datas_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetUserDataCmd other) {
      if (other == null) {
        return;
      }
      datas_.Add(other.datas_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            datas_.AddEntriesFrom(input, _repeated_datas_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  设置九屏数据,C->S
  /// </summary>
  public sealed partial class SetNineDataCmd : pb::IMessage<SetNineDataCmd> {
    private static readonly pb::MessageParser<SetNineDataCmd> _parser = new pb::MessageParser<SetNineDataCmd>(() => new SetNineDataCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetNineDataCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetNineDataCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetNineDataCmd(SetNineDataCmd other) : this() {
      entrydatas_ = other.entrydatas_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetNineDataCmd Clone() {
      return new SetNineDataCmd(this);
    }

    /// <summary>Field number for the "entrydatas" field.</summary>
    public const int EntrydatasFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cmd.EntryData> _repeated_entrydatas_codec
        = pb::FieldCodec.ForMessage(10, global::Cmd.EntryData.Parser);
    private readonly pbc::RepeatedField<global::Cmd.EntryData> entrydatas_ = new pbc::RepeatedField<global::Cmd.EntryData>();
    /// <summary>
    /// 单位的九屏枚举数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.EntryData> Entrydatas {
      get { return entrydatas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetNineDataCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetNineDataCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entrydatas_.Equals(other.entrydatas_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entrydatas_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entrydatas_.WriteTo(output, _repeated_entrydatas_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entrydatas_.CalculateSize(_repeated_entrydatas_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetNineDataCmd other) {
      if (other == null) {
        return;
      }
      entrydatas_.Add(other.entrydatas_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            entrydatas_.AddEntriesFrom(input, _repeated_entrydatas_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  GM指令,C->S
  /// </summary>
  public sealed partial class UserGMCommand : pb::IMessage<UserGMCommand> {
    private static readonly pb::MessageParser<UserGMCommand> _parser = new pb::MessageParser<UserGMCommand>(() => new UserGMCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserGMCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserGMCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserGMCommand(UserGMCommand other) : this() {
      command_ = other.command_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserGMCommand Clone() {
      return new UserGMCommand(this);
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 3;
    private string command_ = "";
    /// <summary>
    ///  指令字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Command {
      get { return command_; }
      set {
        command_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserGMCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserGMCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Command != other.Command) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Command.Length != 0) hash ^= Command.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Command.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Command);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Command.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Command);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserGMCommand other) {
      if (other == null) {
        return;
      }
      if (other.Command.Length != 0) {
        Command = other.Command;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            Command = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  升级信息,S->C
  /// </summary>
  public sealed partial class UserLevelUpSyncCmd : pb::IMessage<UserLevelUpSyncCmd> {
    private static readonly pb::MessageParser<UserLevelUpSyncCmd> _parser = new pb::MessageParser<UserLevelUpSyncCmd>(() => new UserLevelUpSyncCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserLevelUpSyncCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLevelUpSyncCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLevelUpSyncCmd(UserLevelUpSyncCmd other) : this() {
      guid_ = other.guid_;
      newlv_ = other.newlv_;
      attrs_ = other.attrs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLevelUpSyncCmd Clone() {
      return new UserLevelUpSyncCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 3;
    private ulong guid_;
    /// <summary>
    ///  唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "newlv" field.</summary>
    public const int NewlvFieldNumber = 4;
    private uint newlv_;
    /// <summary>
    ///  升级后等级,表UserLevel.xlsx列Level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Newlv {
      get { return newlv_; }
      set {
        newlv_ = value;
      }
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Cmd.UserAttr> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(42, global::Cmd.UserAttr.Parser);
    private readonly pbc::RepeatedField<global::Cmd.UserAttr> attrs_ = new pbc::RepeatedField<global::Cmd.UserAttr>();
    /// <summary>
    ///  角色属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.UserAttr> Attrs {
      get { return attrs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserLevelUpSyncCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserLevelUpSyncCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Newlv != other.Newlv) return false;
      if(!attrs_.Equals(other.attrs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Newlv != 0) hash ^= Newlv.GetHashCode();
      hash ^= attrs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Guid);
      }
      if (Newlv != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Newlv);
      }
      attrs_.WriteTo(output, _repeated_attrs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Newlv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Newlv);
      }
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserLevelUpSyncCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Newlv != 0) {
        Newlv = other.Newlv;
      }
      attrs_.Add(other.attrs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Guid = input.ReadUInt64();
            break;
          }
          case 32: {
            Newlv = input.ReadUInt32();
            break;
          }
          case 42: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  属性变化信息,S->C
  /// </summary>
  public sealed partial class AttrsChangeSyncCmd : pb::IMessage<AttrsChangeSyncCmd> {
    private static readonly pb::MessageParser<AttrsChangeSyncCmd> _parser = new pb::MessageParser<AttrsChangeSyncCmd>(() => new AttrsChangeSyncCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttrsChangeSyncCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrsChangeSyncCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrsChangeSyncCmd(AttrsChangeSyncCmd other) : this() {
      npcid_ = other.npcid_;
      source_ = other.source_;
      attrs_ = other.attrs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrsChangeSyncCmd Clone() {
      return new AttrsChangeSyncCmd(this);
    }

    /// <summary>Field number for the "npcid" field.</summary>
    public const int NpcidFieldNumber = 1;
    private uint npcid_;
    /// <summary>
    ///  唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Npcid {
      get { return npcid_; }
      set {
        npcid_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private uint source_;
    /// <summary>
    ///  来源 (先留着，目前不太好判断来源)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.UserAttr> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.UserAttr.Parser);
    private readonly pbc::RepeatedField<global::Cmd.UserAttr> attrs_ = new pbc::RepeatedField<global::Cmd.UserAttr>();
    /// <summary>
    ///  角色属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.UserAttr> Attrs {
      get { return attrs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttrsChangeSyncCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttrsChangeSyncCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Npcid != other.Npcid) return false;
      if (Source != other.Source) return false;
      if(!attrs_.Equals(other.attrs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Npcid != 0) hash ^= Npcid.GetHashCode();
      if (Source != 0) hash ^= Source.GetHashCode();
      hash ^= attrs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Npcid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Npcid);
      }
      if (Source != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Source);
      }
      attrs_.WriteTo(output, _repeated_attrs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Npcid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Npcid);
      }
      if (Source != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Source);
      }
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttrsChangeSyncCmd other) {
      if (other == null) {
        return;
      }
      if (other.Npcid != 0) {
        Npcid = other.Npcid;
      }
      if (other.Source != 0) {
        Source = other.Source;
      }
      attrs_.Add(other.attrs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Npcid = input.ReadUInt32();
            break;
          }
          case 16: {
            Source = input.ReadUInt32();
            break;
          }
          case 26: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  角色属性改变展示,S->C
  /// </summary>
  public sealed partial class UserAttrChangeShowCmd : pb::IMessage<UserAttrChangeShowCmd> {
    private static readonly pb::MessageParser<UserAttrChangeShowCmd> _parser = new pb::MessageParser<UserAttrChangeShowCmd>(() => new UserAttrChangeShowCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserAttrChangeShowCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAttrChangeShowCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAttrChangeShowCmd(UserAttrChangeShowCmd other) : this() {
      guid_ = other.guid_;
      changetype_ = other.changetype_;
      attrs_ = other.attrs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAttrChangeShowCmd Clone() {
      return new UserAttrChangeShowCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 3;
    private ulong guid_;
    /// <summary>
    ///  唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "changetype" field.</summary>
    public const int ChangetypeFieldNumber = 4;
    private global::Cmd.EAttrChangeType changetype_ = 0;
    /// <summary>
    ///  改变类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EAttrChangeType Changetype {
      get { return changetype_; }
      set {
        changetype_ = value;
      }
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Cmd.UserAttr> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(42, global::Cmd.UserAttr.Parser);
    private readonly pbc::RepeatedField<global::Cmd.UserAttr> attrs_ = new pbc::RepeatedField<global::Cmd.UserAttr>();
    /// <summary>
    ///  角色属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.UserAttr> Attrs {
      get { return attrs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserAttrChangeShowCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserAttrChangeShowCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Changetype != other.Changetype) return false;
      if(!attrs_.Equals(other.attrs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Changetype != 0) hash ^= Changetype.GetHashCode();
      hash ^= attrs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Guid);
      }
      if (Changetype != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Changetype);
      }
      attrs_.WriteTo(output, _repeated_attrs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Changetype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Changetype);
      }
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserAttrChangeShowCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Changetype != 0) {
        Changetype = other.Changetype;
      }
      attrs_.Add(other.attrs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Guid = input.ReadUInt64();
            break;
          }
          case 32: {
            changetype_ = (global::Cmd.EAttrChangeType) input.ReadEnum();
            break;
          }
          case 42: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  场景传送点,S->C
  /// </summary>
  public sealed partial class CmdExitPoint : pb::IMessage<CmdExitPoint> {
    private static readonly pb::MessageParser<CmdExitPoint> _parser = new pb::MessageParser<CmdExitPoint>(() => new CmdExitPoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CmdExitPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CmdExitPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CmdExitPoint(CmdExitPoint other) : this() {
      id_ = other.id_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      Range = other.range_ != null ? other.Range.Clone() : null;
      Rotation = other.rotation_ != null ? other.Rotation.Clone() : null;
      tomapid_ = other.tomapid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CmdExitPoint Clone() {
      return new CmdExitPoint(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///  地编中配置的传送点id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 3;
    private global::Cmd.ScenePos range_;
    /// <summary>
    ///  尺寸
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 4;
    private global::Cmd.ScenePos rotation_;
    /// <summary>
    ///  朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "tomapid" field.</summary>
    public const int TomapidFieldNumber = 5;
    private uint tomapid_;
    /// <summary>
    ///  目标地图id,表Map.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Tomapid {
      get { return tomapid_; }
      set {
        tomapid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CmdExitPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CmdExitPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Range, other.Range)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (Tomapid != other.Tomapid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (range_ != null) hash ^= Range.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (Tomapid != 0) hash ^= Tomapid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (range_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Range);
      }
      if (rotation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Rotation);
      }
      if (Tomapid != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Tomapid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (range_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Range);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (Tomapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tomapid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CmdExitPoint other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.range_ != null) {
        if (range_ == null) {
          range_ = new global::Cmd.ScenePos();
        }
        Range.MergeFrom(other.Range);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::Cmd.ScenePos();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.Tomapid != 0) {
        Tomapid = other.Tomapid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 26: {
            if (range_ == null) {
              range_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(range_);
            break;
          }
          case 34: {
            if (rotation_ == null) {
              rotation_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(rotation_);
            break;
          }
          case 40: {
            Tomapid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  小地图npc图标,S->C
  /// </summary>
  public sealed partial class NpcIcon : pb::IMessage<NpcIcon> {
    private static readonly pb::MessageParser<NpcIcon> _parser = new pb::MessageParser<NpcIcon>(() => new NpcIcon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcIcon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcIcon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcIcon(NpcIcon other) : this() {
      npcid_ = other.npcid_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      dir_ = other.dir_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcIcon Clone() {
      return new NpcIcon(this);
    }

    /// <summary>Field number for the "npcid" field.</summary>
    public const int NpcidFieldNumber = 1;
    private uint npcid_;
    /// <summary>
    ///  配置表id,表Npc.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Npcid {
      get { return npcid_; }
      set {
        npcid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 3;
    private uint dir_;
    /// <summary>
    ///  朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NpcIcon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NpcIcon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Npcid != other.Npcid) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Dir != other.Dir) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Npcid != 0) hash ^= Npcid.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Dir != 0) hash ^= Dir.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Npcid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Npcid);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (Dir != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Dir);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Npcid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Npcid);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Dir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Dir);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NpcIcon other) {
      if (other == null) {
        return;
      }
      if (other.Npcid != 0) {
        Npcid = other.Npcid;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Dir != 0) {
        Dir = other.Dir;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Npcid = input.ReadUInt32();
            break;
          }
          case 18: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 24: {
            Dir = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  切换场景,S&lt;->C
  /// </summary>
  public sealed partial class ChangeSceneUserCmd : pb::IMessage<ChangeSceneUserCmd> {
    private static readonly pb::MessageParser<ChangeSceneUserCmd> _parser = new pb::MessageParser<ChangeSceneUserCmd>(() => new ChangeSceneUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeSceneUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSceneUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSceneUserCmd(ChangeSceneUserCmd other) : this() {
      mapID_ = other.mapID_;
      mapName_ = other.mapName_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      dmapID_ = other.dmapID_;
      preview_ = other.preview_;
      resource_ = other.resource_;
      minimap_ = other.minimap_;
      eps_ = other.eps_.Clone();
      monstericons_ = other.monstericons_.Clone();
      dir_ = other.dir_;
      gomaptype_ = other.gomaptype_;
      scenetype_ = other.scenetype_;
      LocalDungeonPos = other.localDungeonPos_ != null ? other.LocalDungeonPos.Clone() : null;
      localDungeonRadius_ = other.localDungeonRadius_;
      localDungeonID_ = other.localDungeonID_;
      localDungeonName_ = other.localDungeonName_;
      localDungeonType_ = other.localDungeonType_;
      artresource_ = other.artresource_;
      logicresource_ = other.logicresource_;
      clientloaderror_ = other.clientloaderror_;
      relogin_ = other.relogin_;
      isnewmap_ = other.isnewmap_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSceneUserCmd Clone() {
      return new ChangeSceneUserCmd(this);
    }

    /// <summary>Field number for the "mapID" field.</summary>
    public const int MapIDFieldNumber = 3;
    private uint mapID_;
    /// <summary>
    ///  前往地图id,表Npc.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MapID {
      get { return mapID_; }
      set {
        mapID_ = value;
      }
    }

    /// <summary>Field number for the "mapName" field.</summary>
    public const int MapNameFieldNumber = 4;
    private string mapName_ = "";
    /// <summary>
    ///  前往地图名字,表Npc.xlsx列NameZh
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapName {
      get { return mapName_; }
      set {
        mapName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 5;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  出生坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "dmapID" field.</summary>
    public const int DmapIDFieldNumber = 6;
    private uint dmapID_;
    /// <summary>
    ///  当前地图id,表Npc.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DmapID {
      get { return dmapID_; }
      set {
        dmapID_ = value;
      }
    }

    /// <summary>Field number for the "preview" field.</summary>
    public const int PreviewFieldNumber = 7;
    private uint preview_;
    /// <summary>
    ///  unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Preview {
      get { return preview_; }
      set {
        preview_ = value;
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 10;
    private string resource_ = "";
    /// <summary>
    ///  场景资源,表Npc.xlsx列SceneResource
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resource {
      get { return resource_; }
      set {
        resource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "minimap" field.</summary>
    public const int MinimapFieldNumber = 11;
    private string minimap_ = "";
    /// <summary>
    ///  小地图,表Map.xlsx列MiniMap
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Minimap {
      get { return minimap_; }
      set {
        minimap_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "eps" field.</summary>
    public const int EpsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Cmd.CmdExitPoint> _repeated_eps_codec
        = pb::FieldCodec.ForMessage(98, global::Cmd.CmdExitPoint.Parser);
    private readonly pbc::RepeatedField<global::Cmd.CmdExitPoint> eps_ = new pbc::RepeatedField<global::Cmd.CmdExitPoint>();
    /// <summary>
    ///  地编中配置的传送点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.CmdExitPoint> Eps {
      get { return eps_; }
    }

    /// <summary>Field number for the "monstericons" field.</summary>
    public const int MonstericonsFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Cmd.NpcIcon> _repeated_monstericons_codec
        = pb::FieldCodec.ForMessage(114, global::Cmd.NpcIcon.Parser);
    private readonly pbc::RepeatedField<global::Cmd.NpcIcon> monstericons_ = new pbc::RepeatedField<global::Cmd.NpcIcon>();
    /// <summary>
    ///  unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.NpcIcon> Monstericons {
      get { return monstericons_; }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 15;
    private uint dir_;
    /// <summary>
    ///  朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "gomaptype" field.</summary>
    public const int GomaptypeFieldNumber = 16;
    private global::Cmd.GoMapType gomaptype_ = 0;
    /// <summary>
    ///  切换场景方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.GoMapType Gomaptype {
      get { return gomaptype_; }
      set {
        gomaptype_ = value;
      }
    }

    /// <summary>Field number for the "scenetype" field.</summary>
    public const int ScenetypeFieldNumber = 18;
    private uint scenetype_;
    /// <summary>
    ///  场景类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Scenetype {
      get { return scenetype_; }
      set {
        scenetype_ = value;
      }
    }

    /// <summary>Field number for the "localDungeonPos" field.</summary>
    public const int LocalDungeonPosFieldNumber = 20;
    private global::Cmd.ScenePos localDungeonPos_;
    /// <summary>
    /// 原地副本中心点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos LocalDungeonPos {
      get { return localDungeonPos_; }
      set {
        localDungeonPos_ = value;
      }
    }

    /// <summary>Field number for the "localDungeonRadius" field.</summary>
    public const int LocalDungeonRadiusFieldNumber = 21;
    private uint localDungeonRadius_;
    /// <summary>
    /// 原地副本半径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LocalDungeonRadius {
      get { return localDungeonRadius_; }
      set {
        localDungeonRadius_ = value;
      }
    }

    /// <summary>Field number for the "localDungeonID" field.</summary>
    public const int LocalDungeonIDFieldNumber = 22;
    private uint localDungeonID_;
    /// <summary>
    /// 原地副本ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LocalDungeonID {
      get { return localDungeonID_; }
      set {
        localDungeonID_ = value;
      }
    }

    /// <summary>Field number for the "localDungeonName" field.</summary>
    public const int LocalDungeonNameFieldNumber = 23;
    private string localDungeonName_ = "";
    /// <summary>
    /// 原地副本名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocalDungeonName {
      get { return localDungeonName_; }
      set {
        localDungeonName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "localDungeonType" field.</summary>
    public const int LocalDungeonTypeFieldNumber = 24;
    private uint localDungeonType_;
    /// <summary>
    /// 原地副本类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LocalDungeonType {
      get { return localDungeonType_; }
      set {
        localDungeonType_ = value;
      }
    }

    /// <summary>Field number for the "artresource" field.</summary>
    public const int ArtresourceFieldNumber = 25;
    private string artresource_ = "";
    /// <summary>
    ///  场景美术资源(sublevel使用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Artresource {
      get { return artresource_; }
      set {
        artresource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "logicresource" field.</summary>
    public const int LogicresourceFieldNumber = 26;
    private string logicresource_ = "";
    /// <summary>
    ///  场景npc资源(sublevel使用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Logicresource {
      get { return logicresource_; }
      set {
        logicresource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientloaderror" field.</summary>
    public const int ClientloaderrorFieldNumber = 27;
    private bool clientloaderror_;
    /// <summary>
    ///  前端加载结果错误 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Clientloaderror {
      get { return clientloaderror_; }
      set {
        clientloaderror_ = value;
      }
    }

    /// <summary>Field number for the "relogin" field.</summary>
    public const int ReloginFieldNumber = 28;
    private bool relogin_;
    /// <summary>
    ///  断线重连标记
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Relogin {
      get { return relogin_; }
      set {
        relogin_ = value;
      }
    }

    /// <summary>Field number for the "isnewmap" field.</summary>
    public const int IsnewmapFieldNumber = 29;
    private bool isnewmap_;
    /// <summary>
    ///  是否是第一次进入地图
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isnewmap {
      get { return isnewmap_; }
      set {
        isnewmap_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeSceneUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeSceneUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapID != other.MapID) return false;
      if (MapName != other.MapName) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (DmapID != other.DmapID) return false;
      if (Preview != other.Preview) return false;
      if (Resource != other.Resource) return false;
      if (Minimap != other.Minimap) return false;
      if(!eps_.Equals(other.eps_)) return false;
      if(!monstericons_.Equals(other.monstericons_)) return false;
      if (Dir != other.Dir) return false;
      if (Gomaptype != other.Gomaptype) return false;
      if (Scenetype != other.Scenetype) return false;
      if (!object.Equals(LocalDungeonPos, other.LocalDungeonPos)) return false;
      if (LocalDungeonRadius != other.LocalDungeonRadius) return false;
      if (LocalDungeonID != other.LocalDungeonID) return false;
      if (LocalDungeonName != other.LocalDungeonName) return false;
      if (LocalDungeonType != other.LocalDungeonType) return false;
      if (Artresource != other.Artresource) return false;
      if (Logicresource != other.Logicresource) return false;
      if (Clientloaderror != other.Clientloaderror) return false;
      if (Relogin != other.Relogin) return false;
      if (Isnewmap != other.Isnewmap) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapID != 0) hash ^= MapID.GetHashCode();
      if (MapName.Length != 0) hash ^= MapName.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (DmapID != 0) hash ^= DmapID.GetHashCode();
      if (Preview != 0) hash ^= Preview.GetHashCode();
      if (Resource.Length != 0) hash ^= Resource.GetHashCode();
      if (Minimap.Length != 0) hash ^= Minimap.GetHashCode();
      hash ^= eps_.GetHashCode();
      hash ^= monstericons_.GetHashCode();
      if (Dir != 0) hash ^= Dir.GetHashCode();
      if (Gomaptype != 0) hash ^= Gomaptype.GetHashCode();
      if (Scenetype != 0) hash ^= Scenetype.GetHashCode();
      if (localDungeonPos_ != null) hash ^= LocalDungeonPos.GetHashCode();
      if (LocalDungeonRadius != 0) hash ^= LocalDungeonRadius.GetHashCode();
      if (LocalDungeonID != 0) hash ^= LocalDungeonID.GetHashCode();
      if (LocalDungeonName.Length != 0) hash ^= LocalDungeonName.GetHashCode();
      if (LocalDungeonType != 0) hash ^= LocalDungeonType.GetHashCode();
      if (Artresource.Length != 0) hash ^= Artresource.GetHashCode();
      if (Logicresource.Length != 0) hash ^= Logicresource.GetHashCode();
      if (Clientloaderror != false) hash ^= Clientloaderror.GetHashCode();
      if (Relogin != false) hash ^= Relogin.GetHashCode();
      if (Isnewmap != false) hash ^= Isnewmap.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MapID);
      }
      if (MapName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MapName);
      }
      if (pos_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Pos);
      }
      if (DmapID != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(DmapID);
      }
      if (Preview != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Preview);
      }
      if (Resource.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Resource);
      }
      if (Minimap.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Minimap);
      }
      eps_.WriteTo(output, _repeated_eps_codec);
      monstericons_.WriteTo(output, _repeated_monstericons_codec);
      if (Dir != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(Dir);
      }
      if (Gomaptype != 0) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) Gomaptype);
      }
      if (Scenetype != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(Scenetype);
      }
      if (localDungeonPos_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(LocalDungeonPos);
      }
      if (LocalDungeonRadius != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(LocalDungeonRadius);
      }
      if (LocalDungeonID != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(LocalDungeonID);
      }
      if (LocalDungeonName.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(LocalDungeonName);
      }
      if (LocalDungeonType != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(LocalDungeonType);
      }
      if (Artresource.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Artresource);
      }
      if (Logicresource.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(Logicresource);
      }
      if (Clientloaderror != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(Clientloaderror);
      }
      if (Relogin != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(Relogin);
      }
      if (Isnewmap != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(Isnewmap);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapID);
      }
      if (MapName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapName);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (DmapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DmapID);
      }
      if (Preview != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Preview);
      }
      if (Resource.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resource);
      }
      if (Minimap.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Minimap);
      }
      size += eps_.CalculateSize(_repeated_eps_codec);
      size += monstericons_.CalculateSize(_repeated_monstericons_codec);
      if (Dir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Dir);
      }
      if (Gomaptype != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Gomaptype);
      }
      if (Scenetype != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Scenetype);
      }
      if (localDungeonPos_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalDungeonPos);
      }
      if (LocalDungeonRadius != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LocalDungeonRadius);
      }
      if (LocalDungeonID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LocalDungeonID);
      }
      if (LocalDungeonName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LocalDungeonName);
      }
      if (LocalDungeonType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LocalDungeonType);
      }
      if (Artresource.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Artresource);
      }
      if (Logicresource.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Logicresource);
      }
      if (Clientloaderror != false) {
        size += 2 + 1;
      }
      if (Relogin != false) {
        size += 2 + 1;
      }
      if (Isnewmap != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeSceneUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.MapID != 0) {
        MapID = other.MapID;
      }
      if (other.MapName.Length != 0) {
        MapName = other.MapName;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.DmapID != 0) {
        DmapID = other.DmapID;
      }
      if (other.Preview != 0) {
        Preview = other.Preview;
      }
      if (other.Resource.Length != 0) {
        Resource = other.Resource;
      }
      if (other.Minimap.Length != 0) {
        Minimap = other.Minimap;
      }
      eps_.Add(other.eps_);
      monstericons_.Add(other.monstericons_);
      if (other.Dir != 0) {
        Dir = other.Dir;
      }
      if (other.Gomaptype != 0) {
        Gomaptype = other.Gomaptype;
      }
      if (other.Scenetype != 0) {
        Scenetype = other.Scenetype;
      }
      if (other.localDungeonPos_ != null) {
        if (localDungeonPos_ == null) {
          localDungeonPos_ = new global::Cmd.ScenePos();
        }
        LocalDungeonPos.MergeFrom(other.LocalDungeonPos);
      }
      if (other.LocalDungeonRadius != 0) {
        LocalDungeonRadius = other.LocalDungeonRadius;
      }
      if (other.LocalDungeonID != 0) {
        LocalDungeonID = other.LocalDungeonID;
      }
      if (other.LocalDungeonName.Length != 0) {
        LocalDungeonName = other.LocalDungeonName;
      }
      if (other.LocalDungeonType != 0) {
        LocalDungeonType = other.LocalDungeonType;
      }
      if (other.Artresource.Length != 0) {
        Artresource = other.Artresource;
      }
      if (other.Logicresource.Length != 0) {
        Logicresource = other.Logicresource;
      }
      if (other.Clientloaderror != false) {
        Clientloaderror = other.Clientloaderror;
      }
      if (other.Relogin != false) {
        Relogin = other.Relogin;
      }
      if (other.Isnewmap != false) {
        Isnewmap = other.Isnewmap;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            MapID = input.ReadUInt32();
            break;
          }
          case 34: {
            MapName = input.ReadString();
            break;
          }
          case 42: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 48: {
            DmapID = input.ReadUInt32();
            break;
          }
          case 56: {
            Preview = input.ReadUInt32();
            break;
          }
          case 82: {
            Resource = input.ReadString();
            break;
          }
          case 90: {
            Minimap = input.ReadString();
            break;
          }
          case 98: {
            eps_.AddEntriesFrom(input, _repeated_eps_codec);
            break;
          }
          case 114: {
            monstericons_.AddEntriesFrom(input, _repeated_monstericons_codec);
            break;
          }
          case 120: {
            Dir = input.ReadUInt32();
            break;
          }
          case 128: {
            gomaptype_ = (global::Cmd.GoMapType) input.ReadEnum();
            break;
          }
          case 144: {
            Scenetype = input.ReadUInt32();
            break;
          }
          case 162: {
            if (localDungeonPos_ == null) {
              localDungeonPos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(localDungeonPos_);
            break;
          }
          case 168: {
            LocalDungeonRadius = input.ReadUInt32();
            break;
          }
          case 176: {
            LocalDungeonID = input.ReadUInt32();
            break;
          }
          case 186: {
            LocalDungeonName = input.ReadString();
            break;
          }
          case 192: {
            LocalDungeonType = input.ReadUInt32();
            break;
          }
          case 202: {
            Artresource = input.ReadString();
            break;
          }
          case 210: {
            Logicresource = input.ReadString();
            break;
          }
          case 216: {
            Clientloaderror = input.ReadBool();
            break;
          }
          case 224: {
            Relogin = input.ReadBool();
            break;
          }
          case 232: {
            Isnewmap = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RaidBackCmd : pb::IMessage<RaidBackCmd> {
    private static readonly pb::MessageParser<RaidBackCmd> _parser = new pb::MessageParser<RaidBackCmd>(() => new RaidBackCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RaidBackCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaidBackCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaidBackCmd(RaidBackCmd other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaidBackCmd Clone() {
      return new RaidBackCmd(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RaidBackCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RaidBackCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RaidBackCmd other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RaidWinCmd : pb::IMessage<RaidWinCmd> {
    private static readonly pb::MessageParser<RaidWinCmd> _parser = new pb::MessageParser<RaidWinCmd>(() => new RaidWinCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RaidWinCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaidWinCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaidWinCmd(RaidWinCmd other) : this() {
      nextraidid_ = other.nextraidid_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RaidWinCmd Clone() {
      return new RaidWinCmd(this);
    }

    /// <summary>Field number for the "nextraidid" field.</summary>
    public const int NextraididFieldNumber = 1;
    private uint nextraidid_;
    /// <summary>
    ///  下一个副本场景
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Nextraidid {
      get { return nextraidid_; }
      set {
        nextraidid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  Boss死亡坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RaidWinCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RaidWinCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nextraidid != other.Nextraidid) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nextraidid != 0) hash ^= Nextraidid.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nextraidid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Nextraidid);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nextraidid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Nextraidid);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RaidWinCmd other) {
      if (other == null) {
        return;
      }
      if (other.Nextraidid != 0) {
        Nextraidid = other.Nextraidid;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Nextraidid = input.ReadUInt32();
            break;
          }
          case 18: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  unused
  /// </summary>
  public sealed partial class ShareDamTarget : pb::IMessage<ShareDamTarget> {
    private static readonly pb::MessageParser<ShareDamTarget> _parser = new pb::MessageParser<ShareDamTarget>(() => new ShareDamTarget());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShareDamTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareDamTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareDamTarget(ShareDamTarget other) : this() {
      charid_ = other.charid_;
      damage_ = other.damage_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareDamTarget Clone() {
      return new ShareDamTarget(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 1;
    private ulong charid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 2;
    private int damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShareDamTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShareDamTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      if (Damage != other.Damage) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Charid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Charid);
      }
      if (Damage != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Damage);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShareDamTarget other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Charid = input.ReadUInt64();
            break;
          }
          case 16: {
            Damage = input.ReadInt32();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  技能阶段数据,S->C
  /// </summary>
  public sealed partial class PhaseData : pb::IMessage<PhaseData> {
    private static readonly pb::MessageParser<PhaseData> _parser = new pb::MessageParser<PhaseData>(() => new PhaseData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PhaseData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhaseData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhaseData(PhaseData other) : this() {
      number_ = other.number_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      hitedTargets_ = other.hitedTargets_.Clone();
      Movepos = other.movepos_ != null ? other.Movepos.Clone() : null;
      dir_ = other.dir_;
      skilldir_ = other.skilldir_;
      blacksanend_ = other.blacksanend_;
      pickitem_ = other.pickitem_;
      accumulateEndTime_ = other.accumulateEndTime_;
      Curpos = other.curpos_ != null ? other.Curpos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhaseData Clone() {
      return new PhaseData(this);
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 1;
    private int number_;
    /// <summary>
    ///  ESkillPhaseType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  施法目标点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "hitedTargets" field.</summary>
    public const int HitedTargetsFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_hitedTargets_codec
        = pb::FieldCodec.ForUInt64(26);
    private readonly pbc::RepeatedField<ulong> hitedTargets_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///  击中目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> HitedTargets {
      get { return hitedTargets_; }
    }

    /// <summary>Field number for the "movepos" field.</summary>
    public const int MoveposFieldNumber = 4;
    private global::Cmd.ScenePos movepos_;
    /// <summary>
    ///  释放前位移补正目标点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Movepos {
      get { return movepos_; }
      set {
        movepos_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 5;
    private int dir_;
    /// <summary>
    ///  当前朝向 技能释放期间到释放结束 朝向一直为改字段的值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "skilldir" field.</summary>
    public const int SkilldirFieldNumber = 6;
    private int skilldir_;
    /// <summary>
    ///  技能释放方向 技能里效果的方向，比如位移的方向. 该字段不改变玩家的朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skilldir {
      get { return skilldir_; }
      set {
        skilldir_ = value;
      }
    }

    /// <summary>Field number for the "blacksanend" field.</summary>
    public const int BlacksanendFieldNumber = 7;
    private bool blacksanend_;
    /// <summary>
    ///  是否黑化结束
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Blacksanend {
      get { return blacksanend_; }
      set {
        blacksanend_ = value;
      }
    }

    /// <summary>Field number for the "pickitem" field.</summary>
    public const int PickitemFieldNumber = 8;
    private ulong pickitem_;
    /// <summary>
    ///  拾取技能 道具ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Pickitem {
      get { return pickitem_; }
      set {
        pickitem_ = value;
      }
    }

    /// <summary>Field number for the "accumulate_end_time" field.</summary>
    public const int AccumulateEndTimeFieldNumber = 9;
    private uint accumulateEndTime_;
    /// <summary>
    ///  AI 设置蓄力结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccumulateEndTime {
      get { return accumulateEndTime_; }
      set {
        accumulateEndTime_ = value;
      }
    }

    /// <summary>Field number for the "curpos" field.</summary>
    public const int CurposFieldNumber = 10;
    private global::Cmd.ScenePos curpos_;
    /// <summary>
    ///  当前坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Curpos {
      get { return curpos_; }
      set {
        curpos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PhaseData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PhaseData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Number != other.Number) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if(!hitedTargets_.Equals(other.hitedTargets_)) return false;
      if (!object.Equals(Movepos, other.Movepos)) return false;
      if (Dir != other.Dir) return false;
      if (Skilldir != other.Skilldir) return false;
      if (Blacksanend != other.Blacksanend) return false;
      if (Pickitem != other.Pickitem) return false;
      if (AccumulateEndTime != other.AccumulateEndTime) return false;
      if (!object.Equals(Curpos, other.Curpos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Number != 0) hash ^= Number.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      hash ^= hitedTargets_.GetHashCode();
      if (movepos_ != null) hash ^= Movepos.GetHashCode();
      if (Dir != 0) hash ^= Dir.GetHashCode();
      if (Skilldir != 0) hash ^= Skilldir.GetHashCode();
      if (Blacksanend != false) hash ^= Blacksanend.GetHashCode();
      if (Pickitem != 0UL) hash ^= Pickitem.GetHashCode();
      if (AccumulateEndTime != 0) hash ^= AccumulateEndTime.GetHashCode();
      if (curpos_ != null) hash ^= Curpos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Number != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Number);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      hitedTargets_.WriteTo(output, _repeated_hitedTargets_codec);
      if (movepos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Movepos);
      }
      if (Dir != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Dir);
      }
      if (Skilldir != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Skilldir);
      }
      if (Blacksanend != false) {
        output.WriteRawTag(56);
        output.WriteBool(Blacksanend);
      }
      if (Pickitem != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(Pickitem);
      }
      if (AccumulateEndTime != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(AccumulateEndTime);
      }
      if (curpos_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Curpos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      size += hitedTargets_.CalculateSize(_repeated_hitedTargets_codec);
      if (movepos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Movepos);
      }
      if (Dir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dir);
      }
      if (Skilldir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skilldir);
      }
      if (Blacksanend != false) {
        size += 1 + 1;
      }
      if (Pickitem != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Pickitem);
      }
      if (AccumulateEndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccumulateEndTime);
      }
      if (curpos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Curpos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PhaseData other) {
      if (other == null) {
        return;
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      hitedTargets_.Add(other.hitedTargets_);
      if (other.movepos_ != null) {
        if (movepos_ == null) {
          movepos_ = new global::Cmd.ScenePos();
        }
        Movepos.MergeFrom(other.Movepos);
      }
      if (other.Dir != 0) {
        Dir = other.Dir;
      }
      if (other.Skilldir != 0) {
        Skilldir = other.Skilldir;
      }
      if (other.Blacksanend != false) {
        Blacksanend = other.Blacksanend;
      }
      if (other.Pickitem != 0UL) {
        Pickitem = other.Pickitem;
      }
      if (other.AccumulateEndTime != 0) {
        AccumulateEndTime = other.AccumulateEndTime;
      }
      if (other.curpos_ != null) {
        if (curpos_ == null) {
          curpos_ = new global::Cmd.ScenePos();
        }
        Curpos.MergeFrom(other.Curpos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Number = input.ReadInt32();
            break;
          }
          case 18: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 26:
          case 24: {
            hitedTargets_.AddEntriesFrom(input, _repeated_hitedTargets_codec);
            break;
          }
          case 34: {
            if (movepos_ == null) {
              movepos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(movepos_);
            break;
          }
          case 40: {
            Dir = input.ReadInt32();
            break;
          }
          case 48: {
            Skilldir = input.ReadInt32();
            break;
          }
          case 56: {
            Blacksanend = input.ReadBool();
            break;
          }
          case 64: {
            Pickitem = input.ReadUInt64();
            break;
          }
          case 72: {
            AccumulateEndTime = input.ReadUInt32();
            break;
          }
          case 82: {
            if (curpos_ == null) {
              curpos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(curpos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  技能广播,S->C
  /// </summary>
  public sealed partial class SkillBroadcastUserCmd : pb::IMessage<SkillBroadcastUserCmd> {
    private static readonly pb::MessageParser<SkillBroadcastUserCmd> _parser = new pb::MessageParser<SkillBroadcastUserCmd>(() => new SkillBroadcastUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillBroadcastUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillBroadcastUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillBroadcastUserCmd(SkillBroadcastUserCmd other) : this() {
      charid_ = other.charid_;
      skillID_ = other.skillID_;
      skilllv_ = other.skilllv_;
      reinforce_ = other.reinforce_;
      Data = other.data_ != null ? other.Data.Clone() : null;
      randseed_ = other.randseed_;
      chanttime_ = other.chanttime_;
      damagedata_ = other.damagedata_.Clone();
      movedata_ = other.movedata_.Clone();
      mainskillid_ = other.mainskillid_;
      passivetrigger_ = other.passivetrigger_;
      timestamp_ = other.timestamp_;
      uniqueid_ = other.uniqueid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillBroadcastUserCmd Clone() {
      return new SkillBroadcastUserCmd(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 3;
    private ulong charid_;
    /// <summary>
    ///  施法者唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "skillID" field.</summary>
    public const int SkillIDFieldNumber = 4;
    private uint skillID_;
    /// <summary>
    ///  技能id,表Skill.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillID {
      get { return skillID_; }
      set {
        skillID_ = value;
      }
    }

    /// <summary>Field number for the "skilllv" field.</summary>
    public const int SkilllvFieldNumber = 2;
    private uint skilllv_;
    /// <summary>
    ///  技能等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skilllv {
      get { return skilllv_; }
      set {
        skilllv_ = value;
      }
    }

    /// <summary>Field number for the "reinforce" field.</summary>
    public const int ReinforceFieldNumber = 5;
    private uint reinforce_;
    /// <summary>
    ///  强化类型 0|1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Reinforce {
      get { return reinforce_; }
      set {
        reinforce_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 6;
    private global::Cmd.PhaseData data_;
    /// <summary>
    ///  技能阶段数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.PhaseData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "randseed" field.</summary>
    public const int RandseedFieldNumber = 7;
    private ulong randseed_;
    /// <summary>
    ///  程序生成的伤害随机种子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Randseed {
      get { return randseed_; }
      set {
        randseed_ = value;
      }
    }

    /// <summary>Field number for the "chanttime" field.</summary>
    public const int ChanttimeFieldNumber = 8;
    private uint chanttime_;
    /// <summary>
    ///  吟唱时间(毫秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Chanttime {
      get { return chanttime_; }
      set {
        chanttime_ = value;
      }
    }

    /// <summary>Field number for the "damagedata" field.</summary>
    public const int DamagedataFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Cmd.DamageData> _repeated_damagedata_codec
        = pb::FieldCodec.ForMessage(74, global::Cmd.DamageData.Parser);
    private readonly pbc::RepeatedField<global::Cmd.DamageData> damagedata_ = new pbc::RepeatedField<global::Cmd.DamageData>();
    /// <summary>
    ///  伤害数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.DamageData> Damagedata {
      get { return damagedata_; }
    }

    /// <summary>Field number for the "movedata" field.</summary>
    public const int MovedataFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Cmd.MoveData> _repeated_movedata_codec
        = pb::FieldCodec.ForMessage(82, global::Cmd.MoveData.Parser);
    private readonly pbc::RepeatedField<global::Cmd.MoveData> movedata_ = new pbc::RepeatedField<global::Cmd.MoveData>();
    /// <summary>
    ///  位移数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.MoveData> Movedata {
      get { return movedata_; }
    }

    /// <summary>Field number for the "mainskillid" field.</summary>
    public const int MainskillidFieldNumber = 11;
    private uint mainskillid_;
    /// <summary>
    ///  主技能id,表Skill.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mainskillid {
      get { return mainskillid_; }
      set {
        mainskillid_ = value;
      }
    }

    /// <summary>Field number for the "passivetrigger" field.</summary>
    public const int PassivetriggerFieldNumber = 12;
    private bool passivetrigger_;
    /// <summary>
    ///  是否为被动触发
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Passivetrigger {
      get { return passivetrigger_; }
      set {
        passivetrigger_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 13;
    private ulong timestamp_;
    /// <summary>
    ///  客户端的时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "uniqueid" field.</summary>
    public const int UniqueidFieldNumber = 14;
    private ulong uniqueid_;
    /// <summary>
    ///  技能释放的唯一ID,和技能Effect协议里保持一致, 0表示不依赖技能的效果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uniqueid {
      get { return uniqueid_; }
      set {
        uniqueid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillBroadcastUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillBroadcastUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      if (SkillID != other.SkillID) return false;
      if (Skilllv != other.Skilllv) return false;
      if (Reinforce != other.Reinforce) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if (Randseed != other.Randseed) return false;
      if (Chanttime != other.Chanttime) return false;
      if(!damagedata_.Equals(other.damagedata_)) return false;
      if(!movedata_.Equals(other.movedata_)) return false;
      if (Mainskillid != other.Mainskillid) return false;
      if (Passivetrigger != other.Passivetrigger) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Uniqueid != other.Uniqueid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      if (SkillID != 0) hash ^= SkillID.GetHashCode();
      if (Skilllv != 0) hash ^= Skilllv.GetHashCode();
      if (Reinforce != 0) hash ^= Reinforce.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (Randseed != 0UL) hash ^= Randseed.GetHashCode();
      if (Chanttime != 0) hash ^= Chanttime.GetHashCode();
      hash ^= damagedata_.GetHashCode();
      hash ^= movedata_.GetHashCode();
      if (Mainskillid != 0) hash ^= Mainskillid.GetHashCode();
      if (Passivetrigger != false) hash ^= Passivetrigger.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (Uniqueid != 0UL) hash ^= Uniqueid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Skilllv != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Skilllv);
      }
      if (Charid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Charid);
      }
      if (SkillID != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SkillID);
      }
      if (Reinforce != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Reinforce);
      }
      if (data_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Data);
      }
      if (Randseed != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Randseed);
      }
      if (Chanttime != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Chanttime);
      }
      damagedata_.WriteTo(output, _repeated_damagedata_codec);
      movedata_.WriteTo(output, _repeated_movedata_codec);
      if (Mainskillid != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Mainskillid);
      }
      if (Passivetrigger != false) {
        output.WriteRawTag(96);
        output.WriteBool(Passivetrigger);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(Timestamp);
      }
      if (Uniqueid != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(Uniqueid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      if (SkillID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillID);
      }
      if (Skilllv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skilllv);
      }
      if (Reinforce != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Reinforce);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (Randseed != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Randseed);
      }
      if (Chanttime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Chanttime);
      }
      size += damagedata_.CalculateSize(_repeated_damagedata_codec);
      size += movedata_.CalculateSize(_repeated_movedata_codec);
      if (Mainskillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mainskillid);
      }
      if (Passivetrigger != false) {
        size += 1 + 1;
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (Uniqueid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uniqueid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillBroadcastUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      if (other.SkillID != 0) {
        SkillID = other.SkillID;
      }
      if (other.Skilllv != 0) {
        Skilllv = other.Skilllv;
      }
      if (other.Reinforce != 0) {
        Reinforce = other.Reinforce;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::Cmd.PhaseData();
        }
        Data.MergeFrom(other.Data);
      }
      if (other.Randseed != 0UL) {
        Randseed = other.Randseed;
      }
      if (other.Chanttime != 0) {
        Chanttime = other.Chanttime;
      }
      damagedata_.Add(other.damagedata_);
      movedata_.Add(other.movedata_);
      if (other.Mainskillid != 0) {
        Mainskillid = other.Mainskillid;
      }
      if (other.Passivetrigger != false) {
        Passivetrigger = other.Passivetrigger;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.Uniqueid != 0UL) {
        Uniqueid = other.Uniqueid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Skilllv = input.ReadUInt32();
            break;
          }
          case 24: {
            Charid = input.ReadUInt64();
            break;
          }
          case 32: {
            SkillID = input.ReadUInt32();
            break;
          }
          case 40: {
            Reinforce = input.ReadUInt32();
            break;
          }
          case 50: {
            if (data_ == null) {
              data_ = new global::Cmd.PhaseData();
            }
            input.ReadMessage(data_);
            break;
          }
          case 56: {
            Randseed = input.ReadUInt64();
            break;
          }
          case 64: {
            Chanttime = input.ReadUInt32();
            break;
          }
          case 74: {
            damagedata_.AddEntriesFrom(input, _repeated_damagedata_codec);
            break;
          }
          case 82: {
            movedata_.AddEntriesFrom(input, _repeated_movedata_codec);
            break;
          }
          case 88: {
            Mainskillid = input.ReadUInt32();
            break;
          }
          case 96: {
            Passivetrigger = input.ReadBool();
            break;
          }
          case 104: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 112: {
            Uniqueid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  技能打断, S&lt;->C
  /// </summary>
  public sealed partial class BreakSkillUserCmd : pb::IMessage<BreakSkillUserCmd> {
    private static readonly pb::MessageParser<BreakSkillUserCmd> _parser = new pb::MessageParser<BreakSkillUserCmd>(() => new BreakSkillUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BreakSkillUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreakSkillUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreakSkillUserCmd(BreakSkillUserCmd other) : this() {
      charid_ = other.charid_;
      skillid_ = other.skillid_;
      type_ = other.type_;
      damage_ = other.damage_;
      actionid_ = other.actionid_;
      timeAxis_ = other.timeAxis_;
      breakerid_ = other.breakerid_;
      breakstrength_ = other.breakstrength_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BreakSkillUserCmd Clone() {
      return new BreakSkillUserCmd(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 1;
    private ulong charid_;
    /// <summary>
    ///  施法者唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 2;
    private uint skillid_;
    /// <summary>
    ///  技能id,表Skill.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Cmd.ESkillBreakType type_ = 0;
    /// <summary>
    ///  打断类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ESkillBreakType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 4;
    private uint damage_;
    /// <summary>
    ///  被攻击打断额外伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "actionid" field.</summary>
    public const int ActionidFieldNumber = 5;
    private uint actionid_;
    /// <summary>
    ///  被攻击打断硬直动作ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Actionid {
      get { return actionid_; }
      set {
        actionid_ = value;
      }
    }

    /// <summary>Field number for the "time_axis" field.</summary>
    public const int TimeAxisFieldNumber = 6;
    private uint timeAxis_;
    /// <summary>
    ///  被打断时的时间轴时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeAxis {
      get { return timeAxis_; }
      set {
        timeAxis_ = value;
      }
    }

    /// <summary>Field number for the "breakerid" field.</summary>
    public const int BreakeridFieldNumber = 7;
    private ulong breakerid_;
    /// <summary>
    ///  打断者id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Breakerid {
      get { return breakerid_; }
      set {
        breakerid_ = value;
      }
    }

    /// <summary>Field number for the "breakstrength" field.</summary>
    public const int BreakstrengthFieldNumber = 8;
    private uint breakstrength_;
    /// <summary>
    ///  打断强度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Breakstrength {
      get { return breakstrength_; }
      set {
        breakstrength_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 9;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  打断时的坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BreakSkillUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BreakSkillUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      if (Skillid != other.Skillid) return false;
      if (Type != other.Type) return false;
      if (Damage != other.Damage) return false;
      if (Actionid != other.Actionid) return false;
      if (TimeAxis != other.TimeAxis) return false;
      if (Breakerid != other.Breakerid) return false;
      if (Breakstrength != other.Breakstrength) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (Actionid != 0) hash ^= Actionid.GetHashCode();
      if (TimeAxis != 0) hash ^= TimeAxis.GetHashCode();
      if (Breakerid != 0UL) hash ^= Breakerid.GetHashCode();
      if (Breakstrength != 0) hash ^= Breakstrength.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Charid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Charid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Skillid);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (Damage != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Damage);
      }
      if (Actionid != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Actionid);
      }
      if (TimeAxis != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TimeAxis);
      }
      if (Breakerid != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Breakerid);
      }
      if (Breakstrength != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Breakstrength);
      }
      if (pos_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Damage);
      }
      if (Actionid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Actionid);
      }
      if (TimeAxis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeAxis);
      }
      if (Breakerid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Breakerid);
      }
      if (Breakstrength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Breakstrength);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BreakSkillUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      if (other.Actionid != 0) {
        Actionid = other.Actionid;
      }
      if (other.TimeAxis != 0) {
        TimeAxis = other.TimeAxis;
      }
      if (other.Breakerid != 0UL) {
        Breakerid = other.Breakerid;
      }
      if (other.Breakstrength != 0) {
        Breakstrength = other.Breakstrength;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Charid = input.ReadUInt64();
            break;
          }
          case 16: {
            Skillid = input.ReadUInt32();
            break;
          }
          case 24: {
            type_ = (global::Cmd.ESkillBreakType) input.ReadEnum();
            break;
          }
          case 32: {
            Damage = input.ReadUInt32();
            break;
          }
          case 40: {
            Actionid = input.ReadUInt32();
            break;
          }
          case 48: {
            TimeAxis = input.ReadUInt32();
            break;
          }
          case 56: {
            Breakerid = input.ReadUInt64();
            break;
          }
          case 64: {
            Breakstrength = input.ReadUInt32();
            break;
          }
          case 74: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  位移效果,S&lt;->C
  /// </summary>
  public sealed partial class MoveEffectUserCmd : pb::IMessage<MoveEffectUserCmd> {
    private static readonly pb::MessageParser<MoveEffectUserCmd> _parser = new pb::MessageParser<MoveEffectUserCmd>(() => new MoveEffectUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveEffectUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveEffectUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveEffectUserCmd(MoveEffectUserCmd other) : this() {
      charid_ = other.charid_;
      skillid_ = other.skillid_;
      skilllv_ = other.skilllv_;
      Movedata = other.movedata_ != null ? other.Movedata.Clone() : null;
      mainskillid_ = other.mainskillid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveEffectUserCmd Clone() {
      return new MoveEffectUserCmd(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 3;
    private ulong charid_;
    /// <summary>
    ///  目标唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 4;
    private uint skillid_;
    /// <summary>
    ///  技能id,表Skill.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "skilllv" field.</summary>
    public const int SkilllvFieldNumber = 2;
    private uint skilllv_;
    /// <summary>
    ///  技能等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skilllv {
      get { return skilllv_; }
      set {
        skilllv_ = value;
      }
    }

    /// <summary>Field number for the "movedata" field.</summary>
    public const int MovedataFieldNumber = 5;
    private global::Cmd.MoveData movedata_;
    /// <summary>
    ///  位移数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.MoveData Movedata {
      get { return movedata_; }
      set {
        movedata_ = value;
      }
    }

    /// <summary>Field number for the "mainskillid" field.</summary>
    public const int MainskillidFieldNumber = 6;
    private uint mainskillid_;
    /// <summary>
    ///  主技能id,表Skill.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mainskillid {
      get { return mainskillid_; }
      set {
        mainskillid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveEffectUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveEffectUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      if (Skillid != other.Skillid) return false;
      if (Skilllv != other.Skilllv) return false;
      if (!object.Equals(Movedata, other.Movedata)) return false;
      if (Mainskillid != other.Mainskillid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (Skilllv != 0) hash ^= Skilllv.GetHashCode();
      if (movedata_ != null) hash ^= Movedata.GetHashCode();
      if (Mainskillid != 0) hash ^= Mainskillid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Skilllv != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Skilllv);
      }
      if (Charid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Charid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Skillid);
      }
      if (movedata_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Movedata);
      }
      if (Mainskillid != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Mainskillid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      if (Skilllv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skilllv);
      }
      if (movedata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Movedata);
      }
      if (Mainskillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mainskillid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveEffectUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.Skilllv != 0) {
        Skilllv = other.Skilllv;
      }
      if (other.movedata_ != null) {
        if (movedata_ == null) {
          movedata_ = new global::Cmd.MoveData();
        }
        Movedata.MergeFrom(other.Movedata);
      }
      if (other.Mainskillid != 0) {
        Mainskillid = other.Mainskillid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Skilllv = input.ReadUInt32();
            break;
          }
          case 24: {
            Charid = input.ReadUInt64();
            break;
          }
          case 32: {
            Skillid = input.ReadUInt32();
            break;
          }
          case 42: {
            if (movedata_ == null) {
              movedata_ = new global::Cmd.MoveData();
            }
            input.ReadMessage(movedata_);
            break;
          }
          case 48: {
            Mainskillid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  战斗道具数据
  /// </summary>
  public sealed partial class BattleObjectData : pb::IMessage<BattleObjectData> {
    private static readonly pb::MessageParser<BattleObjectData> _parser = new pb::MessageParser<BattleObjectData>(() => new BattleObjectData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleObjectData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleObjectData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleObjectData(BattleObjectData other) : this() {
      effectid_ = other.effectid_;
      timeAxis_ = other.timeAxis_;
      eConditionType_ = other.eConditionType_;
      eResultType_ = other.eResultType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleObjectData Clone() {
      return new BattleObjectData(this);
    }

    /// <summary>Field number for the "effectid" field.</summary>
    public const int EffectidFieldNumber = 1;
    private uint effectid_;
    /// <summary>
    ///  配置表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Effectid {
      get { return effectid_; }
      set {
        effectid_ = value;
      }
    }

    /// <summary>Field number for the "time_axis" field.</summary>
    public const int TimeAxisFieldNumber = 2;
    private uint timeAxis_;
    /// <summary>
    ///  时间轴(毫秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeAxis {
      get { return timeAxis_; }
      set {
        timeAxis_ = value;
      }
    }

    /// <summary>Field number for the "eConditionType" field.</summary>
    public const int EConditionTypeFieldNumber = 3;
    private uint eConditionType_;
    /// <summary>
    /// 触发条件枚举
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EConditionType {
      get { return eConditionType_; }
      set {
        eConditionType_ = value;
      }
    }

    /// <summary>Field number for the "eResultType" field.</summary>
    public const int EResultTypeFieldNumber = 4;
    private uint eResultType_;
    /// <summary>
    /// 触发效果枚举
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EResultType {
      get { return eResultType_; }
      set {
        eResultType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleObjectData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleObjectData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Effectid != other.Effectid) return false;
      if (TimeAxis != other.TimeAxis) return false;
      if (EConditionType != other.EConditionType) return false;
      if (EResultType != other.EResultType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Effectid != 0) hash ^= Effectid.GetHashCode();
      if (TimeAxis != 0) hash ^= TimeAxis.GetHashCode();
      if (EConditionType != 0) hash ^= EConditionType.GetHashCode();
      if (EResultType != 0) hash ^= EResultType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Effectid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Effectid);
      }
      if (TimeAxis != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TimeAxis);
      }
      if (EConditionType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(EConditionType);
      }
      if (EResultType != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(EResultType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Effectid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Effectid);
      }
      if (TimeAxis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeAxis);
      }
      if (EConditionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EConditionType);
      }
      if (EResultType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EResultType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleObjectData other) {
      if (other == null) {
        return;
      }
      if (other.Effectid != 0) {
        Effectid = other.Effectid;
      }
      if (other.TimeAxis != 0) {
        TimeAxis = other.TimeAxis;
      }
      if (other.EConditionType != 0) {
        EConditionType = other.EConditionType;
      }
      if (other.EResultType != 0) {
        EResultType = other.EResultType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Effectid = input.ReadUInt32();
            break;
          }
          case 16: {
            TimeAxis = input.ReadUInt32();
            break;
          }
          case 24: {
            EConditionType = input.ReadUInt32();
            break;
          }
          case 32: {
            EResultType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  战斗道具效果,S&lt;->C
  /// </summary>
  public sealed partial class BattleObjectEffectUserCmd : pb::IMessage<BattleObjectEffectUserCmd> {
    private static readonly pb::MessageParser<BattleObjectEffectUserCmd> _parser = new pb::MessageParser<BattleObjectEffectUserCmd>(() => new BattleObjectEffectUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleObjectEffectUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleObjectEffectUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleObjectEffectUserCmd(BattleObjectEffectUserCmd other) : this() {
      charid_ = other.charid_;
      skillid_ = other.skillid_;
      skilllv_ = other.skilllv_;
      BattleObjectdata = other.battleObjectdata_ != null ? other.BattleObjectdata.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleObjectEffectUserCmd Clone() {
      return new BattleObjectEffectUserCmd(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 3;
    private ulong charid_;
    /// <summary>
    ///  目标唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 4;
    private uint skillid_;
    /// <summary>
    ///  技能id,表Skill.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "skilllv" field.</summary>
    public const int SkilllvFieldNumber = 2;
    private uint skilllv_;
    /// <summary>
    ///  技能等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skilllv {
      get { return skilllv_; }
      set {
        skilllv_ = value;
      }
    }

    /// <summary>Field number for the "battleObjectdata" field.</summary>
    public const int BattleObjectdataFieldNumber = 5;
    private global::Cmd.BattleObjectData battleObjectdata_;
    /// <summary>
    ///  战斗道具数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.BattleObjectData BattleObjectdata {
      get { return battleObjectdata_; }
      set {
        battleObjectdata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleObjectEffectUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleObjectEffectUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      if (Skillid != other.Skillid) return false;
      if (Skilllv != other.Skilllv) return false;
      if (!object.Equals(BattleObjectdata, other.BattleObjectdata)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (Skilllv != 0) hash ^= Skilllv.GetHashCode();
      if (battleObjectdata_ != null) hash ^= BattleObjectdata.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Skilllv != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Skilllv);
      }
      if (Charid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Charid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Skillid);
      }
      if (battleObjectdata_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BattleObjectdata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      if (Skilllv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skilllv);
      }
      if (battleObjectdata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleObjectdata);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleObjectEffectUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.Skilllv != 0) {
        Skilllv = other.Skilllv;
      }
      if (other.battleObjectdata_ != null) {
        if (battleObjectdata_ == null) {
          battleObjectdata_ = new global::Cmd.BattleObjectData();
        }
        BattleObjectdata.MergeFrom(other.BattleObjectdata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Skilllv = input.ReadUInt32();
            break;
          }
          case 24: {
            Charid = input.ReadUInt64();
            break;
          }
          case 32: {
            Skillid = input.ReadUInt32();
            break;
          }
          case 42: {
            if (battleObjectdata_ == null) {
              battleObjectdata_ = new global::Cmd.BattleObjectData();
            }
            input.ReadMessage(battleObjectdata_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  技能伤害&amp;击退,S&lt;->C
  /// </summary>
  public sealed partial class DamageEffectUserCmd : pb::IMessage<DamageEffectUserCmd> {
    private static readonly pb::MessageParser<DamageEffectUserCmd> _parser = new pb::MessageParser<DamageEffectUserCmd>(() => new DamageEffectUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DamageEffectUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DamageEffectUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DamageEffectUserCmd(DamageEffectUserCmd other) : this() {
      charid_ = other.charid_;
      skillid_ = other.skillid_;
      skilllv_ = other.skilllv_;
      timestamp_ = other.timestamp_;
      Damagedata = other.damagedata_ != null ? other.Damagedata.Clone() : null;
      mainskillid_ = other.mainskillid_;
      uniqueid_ = other.uniqueid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DamageEffectUserCmd Clone() {
      return new DamageEffectUserCmd(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 3;
    private ulong charid_;
    /// <summary>
    ///  攻击者唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 4;
    private uint skillid_;
    /// <summary>
    ///  技能id,表Skill.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "skilllv" field.</summary>
    public const int SkilllvFieldNumber = 2;
    private uint skilllv_;
    /// <summary>
    ///  技能等级,表Skill.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skilllv {
      get { return skilllv_; }
      set {
        skilllv_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private ulong timestamp_;
    /// <summary>
    ///  时间戳 客户端的服务器时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "damagedata" field.</summary>
    public const int DamagedataFieldNumber = 5;
    private global::Cmd.DamageData damagedata_;
    /// <summary>
    ///  伤害数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.DamageData Damagedata {
      get { return damagedata_; }
      set {
        damagedata_ = value;
      }
    }

    /// <summary>Field number for the "mainskillid" field.</summary>
    public const int MainskillidFieldNumber = 6;
    private uint mainskillid_;
    /// <summary>
    ///  主技能id,表Skill.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mainskillid {
      get { return mainskillid_; }
      set {
        mainskillid_ = value;
      }
    }

    /// <summary>Field number for the "uniqueid" field.</summary>
    public const int UniqueidFieldNumber = 7;
    private ulong uniqueid_;
    /// <summary>
    ///  技能释放的唯一ID,和技能协议保持一致, 0表示不依赖技能的效果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uniqueid {
      get { return uniqueid_; }
      set {
        uniqueid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DamageEffectUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DamageEffectUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      if (Skillid != other.Skillid) return false;
      if (Skilllv != other.Skilllv) return false;
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(Damagedata, other.Damagedata)) return false;
      if (Mainskillid != other.Mainskillid) return false;
      if (Uniqueid != other.Uniqueid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (Skilllv != 0) hash ^= Skilllv.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (damagedata_ != null) hash ^= Damagedata.GetHashCode();
      if (Mainskillid != 0) hash ^= Mainskillid.GetHashCode();
      if (Uniqueid != 0UL) hash ^= Uniqueid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Timestamp);
      }
      if (Skilllv != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Skilllv);
      }
      if (Charid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Charid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Skillid);
      }
      if (damagedata_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Damagedata);
      }
      if (Mainskillid != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Mainskillid);
      }
      if (Uniqueid != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Uniqueid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      if (Skilllv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skilllv);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (damagedata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Damagedata);
      }
      if (Mainskillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mainskillid);
      }
      if (Uniqueid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uniqueid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DamageEffectUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.Skilllv != 0) {
        Skilllv = other.Skilllv;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.damagedata_ != null) {
        if (damagedata_ == null) {
          damagedata_ = new global::Cmd.DamageData();
        }
        Damagedata.MergeFrom(other.Damagedata);
      }
      if (other.Mainskillid != 0) {
        Mainskillid = other.Mainskillid;
      }
      if (other.Uniqueid != 0UL) {
        Uniqueid = other.Uniqueid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 16: {
            Skilllv = input.ReadUInt32();
            break;
          }
          case 24: {
            Charid = input.ReadUInt64();
            break;
          }
          case 32: {
            Skillid = input.ReadUInt32();
            break;
          }
          case 42: {
            if (damagedata_ == null) {
              damagedata_ = new global::Cmd.DamageData();
            }
            input.ReadMessage(damagedata_);
            break;
          }
          case 48: {
            Mainskillid = input.ReadUInt32();
            break;
          }
          case 56: {
            Uniqueid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  弹道目标,S->C
  /// </summary>
  public sealed partial class MissileTarget : pb::IMessage<MissileTarget> {
    private static readonly pb::MessageParser<MissileTarget> _parser = new pb::MessageParser<MissileTarget>(() => new MissileTarget());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MissileTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissileTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissileTarget(MissileTarget other) : this() {
      charid_ = other.charid_;
      Targetpos = other.targetpos_ != null ? other.Targetpos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissileTarget Clone() {
      return new MissileTarget(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 1;
    private ulong charid_;
    /// <summary>
    ///  目标唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "targetpos" field.</summary>
    public const int TargetposFieldNumber = 2;
    private global::Cmd.ScenePos targetpos_;
    /// <summary>
    ///  坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Targetpos {
      get { return targetpos_; }
      set {
        targetpos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MissileTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MissileTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      if (!object.Equals(Targetpos, other.Targetpos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      if (targetpos_ != null) hash ^= Targetpos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Charid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Charid);
      }
      if (targetpos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Targetpos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      if (targetpos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Targetpos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MissileTarget other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      if (other.targetpos_ != null) {
        if (targetpos_ == null) {
          targetpos_ = new global::Cmd.ScenePos();
        }
        Targetpos.MergeFrom(other.Targetpos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Charid = input.ReadUInt64();
            break;
          }
          case 18: {
            if (targetpos_ == null) {
              targetpos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(targetpos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  弹道数据,S->C
  /// </summary>
  public sealed partial class MissileData : pb::IMessage<MissileData> {
    private static readonly pb::MessageParser<MissileData> _parser = new pb::MessageParser<MissileData>(() => new MissileData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MissileData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissileData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissileData(MissileData other) : this() {
      effectid_ = other.effectid_;
      timeAxis_ = other.timeAxis_;
      missiletargets_ = other.missiletargets_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissileData Clone() {
      return new MissileData(this);
    }

    /// <summary>Field number for the "effectid" field.</summary>
    public const int EffectidFieldNumber = 1;
    private uint effectid_;
    /// <summary>
    ///  配置表id,表MissileEffect.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Effectid {
      get { return effectid_; }
      set {
        effectid_ = value;
      }
    }

    /// <summary>Field number for the "time_axis" field.</summary>
    public const int TimeAxisFieldNumber = 2;
    private uint timeAxis_;
    /// <summary>
    ///  时间轴(毫秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeAxis {
      get { return timeAxis_; }
      set {
        timeAxis_ = value;
      }
    }

    /// <summary>Field number for the "missiletargets" field.</summary>
    public const int MissiletargetsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.MissileTarget> _repeated_missiletargets_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.MissileTarget.Parser);
    private readonly pbc::RepeatedField<global::Cmd.MissileTarget> missiletargets_ = new pbc::RepeatedField<global::Cmd.MissileTarget>();
    /// <summary>
    ///  目标列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.MissileTarget> Missiletargets {
      get { return missiletargets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MissileData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MissileData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Effectid != other.Effectid) return false;
      if (TimeAxis != other.TimeAxis) return false;
      if(!missiletargets_.Equals(other.missiletargets_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Effectid != 0) hash ^= Effectid.GetHashCode();
      if (TimeAxis != 0) hash ^= TimeAxis.GetHashCode();
      hash ^= missiletargets_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Effectid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Effectid);
      }
      if (TimeAxis != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TimeAxis);
      }
      missiletargets_.WriteTo(output, _repeated_missiletargets_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Effectid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Effectid);
      }
      if (TimeAxis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeAxis);
      }
      size += missiletargets_.CalculateSize(_repeated_missiletargets_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MissileData other) {
      if (other == null) {
        return;
      }
      if (other.Effectid != 0) {
        Effectid = other.Effectid;
      }
      if (other.TimeAxis != 0) {
        TimeAxis = other.TimeAxis;
      }
      missiletargets_.Add(other.missiletargets_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Effectid = input.ReadUInt32();
            break;
          }
          case 16: {
            TimeAxis = input.ReadUInt32();
            break;
          }
          case 26: {
            missiletargets_.AddEntriesFrom(input, _repeated_missiletargets_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  角色弹道消息,S->C
  /// </summary>
  public sealed partial class MissileEffectUserCmd : pb::IMessage<MissileEffectUserCmd> {
    private static readonly pb::MessageParser<MissileEffectUserCmd> _parser = new pb::MessageParser<MissileEffectUserCmd>(() => new MissileEffectUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MissileEffectUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissileEffectUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissileEffectUserCmd(MissileEffectUserCmd other) : this() {
      charid_ = other.charid_;
      skillid_ = other.skillid_;
      skilllv_ = other.skilllv_;
      Missiledata = other.missiledata_ != null ? other.Missiledata.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissileEffectUserCmd Clone() {
      return new MissileEffectUserCmd(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 3;
    private ulong charid_;
    /// <summary>
    ///  施法者唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 4;
    private uint skillid_;
    /// <summary>
    ///  技能id,表Skill.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "skilllv" field.</summary>
    public const int SkilllvFieldNumber = 2;
    private uint skilllv_;
    /// <summary>
    ///  技能等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skilllv {
      get { return skilllv_; }
      set {
        skilllv_ = value;
      }
    }

    /// <summary>Field number for the "missiledata" field.</summary>
    public const int MissiledataFieldNumber = 5;
    private global::Cmd.MissileData missiledata_;
    /// <summary>
    ///  弹道数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.MissileData Missiledata {
      get { return missiledata_; }
      set {
        missiledata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MissileEffectUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MissileEffectUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      if (Skillid != other.Skillid) return false;
      if (Skilllv != other.Skilllv) return false;
      if (!object.Equals(Missiledata, other.Missiledata)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (Skilllv != 0) hash ^= Skilllv.GetHashCode();
      if (missiledata_ != null) hash ^= Missiledata.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Skilllv != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Skilllv);
      }
      if (Charid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Charid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Skillid);
      }
      if (missiledata_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Missiledata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      if (Skilllv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skilllv);
      }
      if (missiledata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Missiledata);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MissileEffectUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.Skilllv != 0) {
        Skilllv = other.Skilllv;
      }
      if (other.missiledata_ != null) {
        if (missiledata_ == null) {
          missiledata_ = new global::Cmd.MissileData();
        }
        Missiledata.MergeFrom(other.Missiledata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Skilllv = input.ReadUInt32();
            break;
          }
          case 24: {
            Charid = input.ReadUInt64();
            break;
          }
          case 32: {
            Skillid = input.ReadUInt32();
            break;
          }
          case 42: {
            if (missiledata_ == null) {
              missiledata_ = new global::Cmd.MissileData();
            }
            input.ReadMessage(missiledata_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpecialRandActorPosData : pb::IMessage<SpecialRandActorPosData> {
    private static readonly pb::MessageParser<SpecialRandActorPosData> _parser = new pb::MessageParser<SpecialRandActorPosData>(() => new SpecialRandActorPosData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpecialRandActorPosData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialRandActorPosData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialRandActorPosData(SpecialRandActorPosData other) : this() {
      targetpos_ = other.targetpos_.Clone();
      rotate_ = other.rotate_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialRandActorPosData Clone() {
      return new SpecialRandActorPosData(this);
    }

    /// <summary>Field number for the "targetpos" field.</summary>
    public const int TargetposFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cmd.ScenePos> _repeated_targetpos_codec
        = pb::FieldCodec.ForMessage(10, global::Cmd.ScenePos.Parser);
    private readonly pbc::RepeatedField<global::Cmd.ScenePos> targetpos_ = new pbc::RepeatedField<global::Cmd.ScenePos>();
    /// <summary>
    /// 随机的目标点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.ScenePos> Targetpos {
      get { return targetpos_; }
    }

    /// <summary>Field number for the "rotate" field.</summary>
    public const int RotateFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_rotate_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> rotate_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 随机的朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Rotate {
      get { return rotate_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpecialRandActorPosData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpecialRandActorPosData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!targetpos_.Equals(other.targetpos_)) return false;
      if(!rotate_.Equals(other.rotate_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= targetpos_.GetHashCode();
      hash ^= rotate_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      targetpos_.WriteTo(output, _repeated_targetpos_codec);
      rotate_.WriteTo(output, _repeated_rotate_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += targetpos_.CalculateSize(_repeated_targetpos_codec);
      size += rotate_.CalculateSize(_repeated_rotate_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpecialRandActorPosData other) {
      if (other == null) {
        return;
      }
      targetpos_.Add(other.targetpos_);
      rotate_.Add(other.rotate_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            targetpos_.AddEntriesFrom(input, _repeated_targetpos_codec);
            break;
          }
          case 18:
          case 16: {
            rotate_.AddEntriesFrom(input, _repeated_rotate_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpecialSelectByAttrData : pb::IMessage<SpecialSelectByAttrData> {
    private static readonly pb::MessageParser<SpecialSelectByAttrData> _parser = new pb::MessageParser<SpecialSelectByAttrData>(() => new SpecialSelectByAttrData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpecialSelectByAttrData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialSelectByAttrData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialSelectByAttrData(SpecialSelectByAttrData other) : this() {
      targets_ = other.targets_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialSelectByAttrData Clone() {
      return new SpecialSelectByAttrData(this);
    }

    /// <summary>Field number for the "targets" field.</summary>
    public const int TargetsFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_targets_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> targets_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// 筛选的目标id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Targets {
      get { return targets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpecialSelectByAttrData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpecialSelectByAttrData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!targets_.Equals(other.targets_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= targets_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      targets_.WriteTo(output, _repeated_targets_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += targets_.CalculateSize(_repeated_targets_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpecialSelectByAttrData other) {
      if (other == null) {
        return;
      }
      targets_.Add(other.targets_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpecialThunderData : pb::IMessage<SpecialThunderData> {
    private static readonly pb::MessageParser<SpecialThunderData> _parser = new pb::MessageParser<SpecialThunderData>(() => new SpecialThunderData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpecialThunderData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialThunderData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialThunderData(SpecialThunderData other) : this() {
      thunders_ = other.thunders_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialThunderData Clone() {
      return new SpecialThunderData(this);
    }

    /// <summary>Field number for the "thunders" field.</summary>
    public const int ThundersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cmd.SpecialThunderData.Types.ThunderTarget> _repeated_thunders_codec
        = pb::FieldCodec.ForMessage(10, global::Cmd.SpecialThunderData.Types.ThunderTarget.Parser);
    private readonly pbc::RepeatedField<global::Cmd.SpecialThunderData.Types.ThunderTarget> thunders_ = new pbc::RepeatedField<global::Cmd.SpecialThunderData.Types.ThunderTarget>();
    /// <summary>
    /// 闪电信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.SpecialThunderData.Types.ThunderTarget> Thunders {
      get { return thunders_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpecialThunderData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpecialThunderData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!thunders_.Equals(other.thunders_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= thunders_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      thunders_.WriteTo(output, _repeated_thunders_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += thunders_.CalculateSize(_repeated_thunders_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpecialThunderData other) {
      if (other == null) {
        return;
      }
      thunders_.Add(other.thunders_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            thunders_.AddEntriesFrom(input, _repeated_thunders_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SpecialThunderData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ThunderTarget : pb::IMessage<ThunderTarget> {
        private static readonly pb::MessageParser<ThunderTarget> _parser = new pb::MessageParser<ThunderTarget>(() => new ThunderTarget());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ThunderTarget> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Cmd.SpecialThunderData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ThunderTarget() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ThunderTarget(ThunderTarget other) : this() {
          thunderid_ = other.thunderid_;
          targetid_ = other.targetid_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ThunderTarget Clone() {
          return new ThunderTarget(this);
        }

        /// <summary>Field number for the "thunderid" field.</summary>
        public const int ThunderidFieldNumber = 1;
        private ulong thunderid_;
        /// <summary>
        /// 雷球ID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Thunderid {
          get { return thunderid_; }
          set {
            thunderid_ = value;
          }
        }

        /// <summary>Field number for the "targetid" field.</summary>
        public const int TargetidFieldNumber = 2;
        private ulong targetid_;
        /// <summary>
        /// 目标ID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Targetid {
          get { return targetid_; }
          set {
            targetid_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ThunderTarget);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ThunderTarget other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Thunderid != other.Thunderid) return false;
          if (Targetid != other.Targetid) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Thunderid != 0UL) hash ^= Thunderid.GetHashCode();
          if (Targetid != 0UL) hash ^= Targetid.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Thunderid != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Thunderid);
          }
          if (Targetid != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Targetid);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Thunderid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Thunderid);
          }
          if (Targetid != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Targetid);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ThunderTarget other) {
          if (other == null) {
            return;
          }
          if (other.Thunderid != 0UL) {
            Thunderid = other.Thunderid;
          }
          if (other.Targetid != 0UL) {
            Targetid = other.Targetid;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Thunderid = input.ReadUInt64();
                break;
              }
              case 16: {
                Targetid = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///  SpecialEffect数据
  /// </summary>
  public sealed partial class SpecialData : pb::IMessage<SpecialData> {
    private static readonly pb::MessageParser<SpecialData> _parser = new pb::MessageParser<SpecialData>(() => new SpecialData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpecialData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialData(SpecialData other) : this() {
      effectid_ = other.effectid_;
      timeAxis_ = other.timeAxis_;
      datas_ = other.datas_;
      Randdata = other.randdata_ != null ? other.Randdata.Clone() : null;
      Selectdata = other.selectdata_ != null ? other.Selectdata.Clone() : null;
      targetids_ = other.targetids_.Clone();
      Thunderdata = other.thunderdata_ != null ? other.Thunderdata.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialData Clone() {
      return new SpecialData(this);
    }

    /// <summary>Field number for the "effectid" field.</summary>
    public const int EffectidFieldNumber = 1;
    private uint effectid_;
    /// <summary>
    ///  配置表id,表SpecialEffect.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Effectid {
      get { return effectid_; }
      set {
        effectid_ = value;
      }
    }

    /// <summary>Field number for the "time_axis" field.</summary>
    public const int TimeAxisFieldNumber = 2;
    private uint timeAxis_;
    /// <summary>
    ///  时间轴(毫秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeAxis {
      get { return timeAxis_; }
      set {
        timeAxis_ = value;
      }
    }

    /// <summary>Field number for the "datas" field.</summary>
    public const int DatasFieldNumber = 3;
    private pb::ByteString datas_ = pb::ByteString.Empty;
    /// <summary>
    ///  对应不同类型的Special数据 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Datas {
      get { return datas_; }
      set {
        datas_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "randdata" field.</summary>
    public const int RanddataFieldNumber = 4;
    private global::Cmd.SpecialRandActorPosData randdata_;
    /// <summary>
    /// 记者黑化随机目标点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.SpecialRandActorPosData Randdata {
      get { return randdata_; }
      set {
        randdata_ = value;
      }
    }

    /// <summary>Field number for the "selectdata" field.</summary>
    public const int SelectdataFieldNumber = 5;
    private global::Cmd.SpecialSelectByAttrData selectdata_;
    /// <summary>
    /// 筛选到的目标, 选取最低属性的单位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.SpecialSelectByAttrData Selectdata {
      get { return selectdata_; }
      set {
        selectdata_ = value;
      }
    }

    /// <summary>Field number for the "targetids" field.</summary>
    public const int TargetidsFieldNumber = 6;
    private static readonly pb::FieldCodec<ulong> _repeated_targetids_codec
        = pb::FieldCodec.ForUInt64(50);
    private readonly pbc::RepeatedField<ulong> targetids_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///  目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Targetids {
      get { return targetids_; }
    }

    /// <summary>Field number for the "thunderdata" field.</summary>
    public const int ThunderdataFieldNumber = 7;
    private global::Cmd.SpecialThunderData thunderdata_;
    /// <summary>
    ///  梅尔维尔闪电数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.SpecialThunderData Thunderdata {
      get { return thunderdata_; }
      set {
        thunderdata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpecialData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpecialData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Effectid != other.Effectid) return false;
      if (TimeAxis != other.TimeAxis) return false;
      if (Datas != other.Datas) return false;
      if (!object.Equals(Randdata, other.Randdata)) return false;
      if (!object.Equals(Selectdata, other.Selectdata)) return false;
      if(!targetids_.Equals(other.targetids_)) return false;
      if (!object.Equals(Thunderdata, other.Thunderdata)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Effectid != 0) hash ^= Effectid.GetHashCode();
      if (TimeAxis != 0) hash ^= TimeAxis.GetHashCode();
      if (Datas.Length != 0) hash ^= Datas.GetHashCode();
      if (randdata_ != null) hash ^= Randdata.GetHashCode();
      if (selectdata_ != null) hash ^= Selectdata.GetHashCode();
      hash ^= targetids_.GetHashCode();
      if (thunderdata_ != null) hash ^= Thunderdata.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Effectid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Effectid);
      }
      if (TimeAxis != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TimeAxis);
      }
      if (Datas.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Datas);
      }
      if (randdata_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Randdata);
      }
      if (selectdata_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Selectdata);
      }
      targetids_.WriteTo(output, _repeated_targetids_codec);
      if (thunderdata_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Thunderdata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Effectid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Effectid);
      }
      if (TimeAxis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeAxis);
      }
      if (Datas.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Datas);
      }
      if (randdata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Randdata);
      }
      if (selectdata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selectdata);
      }
      size += targetids_.CalculateSize(_repeated_targetids_codec);
      if (thunderdata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Thunderdata);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpecialData other) {
      if (other == null) {
        return;
      }
      if (other.Effectid != 0) {
        Effectid = other.Effectid;
      }
      if (other.TimeAxis != 0) {
        TimeAxis = other.TimeAxis;
      }
      if (other.Datas.Length != 0) {
        Datas = other.Datas;
      }
      if (other.randdata_ != null) {
        if (randdata_ == null) {
          randdata_ = new global::Cmd.SpecialRandActorPosData();
        }
        Randdata.MergeFrom(other.Randdata);
      }
      if (other.selectdata_ != null) {
        if (selectdata_ == null) {
          selectdata_ = new global::Cmd.SpecialSelectByAttrData();
        }
        Selectdata.MergeFrom(other.Selectdata);
      }
      targetids_.Add(other.targetids_);
      if (other.thunderdata_ != null) {
        if (thunderdata_ == null) {
          thunderdata_ = new global::Cmd.SpecialThunderData();
        }
        Thunderdata.MergeFrom(other.Thunderdata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Effectid = input.ReadUInt32();
            break;
          }
          case 16: {
            TimeAxis = input.ReadUInt32();
            break;
          }
          case 26: {
            Datas = input.ReadBytes();
            break;
          }
          case 34: {
            if (randdata_ == null) {
              randdata_ = new global::Cmd.SpecialRandActorPosData();
            }
            input.ReadMessage(randdata_);
            break;
          }
          case 42: {
            if (selectdata_ == null) {
              selectdata_ = new global::Cmd.SpecialSelectByAttrData();
            }
            input.ReadMessage(selectdata_);
            break;
          }
          case 50:
          case 48: {
            targetids_.AddEntriesFrom(input, _repeated_targetids_codec);
            break;
          }
          case 58: {
            if (thunderdata_ == null) {
              thunderdata_ = new global::Cmd.SpecialThunderData();
            }
            input.ReadMessage(thunderdata_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  角色SpecialEffect消息,S->C
  /// </summary>
  public sealed partial class SpecialEffectUserCmd : pb::IMessage<SpecialEffectUserCmd> {
    private static readonly pb::MessageParser<SpecialEffectUserCmd> _parser = new pb::MessageParser<SpecialEffectUserCmd>(() => new SpecialEffectUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpecialEffectUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialEffectUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialEffectUserCmd(SpecialEffectUserCmd other) : this() {
      charid_ = other.charid_;
      skillid_ = other.skillid_;
      skilllv_ = other.skilllv_;
      Specialdata = other.specialdata_ != null ? other.Specialdata.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialEffectUserCmd Clone() {
      return new SpecialEffectUserCmd(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 3;
    private ulong charid_;
    /// <summary>
    ///  施法者唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 4;
    private uint skillid_;
    /// <summary>
    ///  技能id,表Skill.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "skilllv" field.</summary>
    public const int SkilllvFieldNumber = 2;
    private uint skilllv_;
    /// <summary>
    ///  技能等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skilllv {
      get { return skilllv_; }
      set {
        skilllv_ = value;
      }
    }

    /// <summary>Field number for the "specialdata" field.</summary>
    public const int SpecialdataFieldNumber = 5;
    private global::Cmd.SpecialData specialdata_;
    /// <summary>
    ///  special数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.SpecialData Specialdata {
      get { return specialdata_; }
      set {
        specialdata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpecialEffectUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpecialEffectUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      if (Skillid != other.Skillid) return false;
      if (Skilllv != other.Skilllv) return false;
      if (!object.Equals(Specialdata, other.Specialdata)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (Skilllv != 0) hash ^= Skilllv.GetHashCode();
      if (specialdata_ != null) hash ^= Specialdata.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Skilllv != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Skilllv);
      }
      if (Charid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Charid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Skillid);
      }
      if (specialdata_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Specialdata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      if (Skilllv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skilllv);
      }
      if (specialdata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Specialdata);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpecialEffectUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.Skilllv != 0) {
        Skilllv = other.Skilllv;
      }
      if (other.specialdata_ != null) {
        if (specialdata_ == null) {
          specialdata_ = new global::Cmd.SpecialData();
        }
        Specialdata.MergeFrom(other.Specialdata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Skilllv = input.ReadUInt32();
            break;
          }
          case 24: {
            Charid = input.ReadUInt64();
            break;
          }
          case 32: {
            Skillid = input.ReadUInt32();
            break;
          }
          case 42: {
            if (specialdata_ == null) {
              specialdata_ = new global::Cmd.SpecialData();
            }
            input.ReadMessage(specialdata_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  BuffEffect数据
  /// </summary>
  public sealed partial class BuffData : pb::IMessage<BuffData> {
    private static readonly pb::MessageParser<BuffData> _parser = new pb::MessageParser<BuffData>(() => new BuffData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuffData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffData(BuffData other) : this() {
      effectid_ = other.effectid_;
      timeAxis_ = other.timeAxis_;
      targets_ = other.targets_.Clone();
      targetpos_ = other.targetpos_.Clone();
      buffEffectLayers_ = other.buffEffectLayers_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffData Clone() {
      return new BuffData(this);
    }

    /// <summary>Field number for the "effectid" field.</summary>
    public const int EffectidFieldNumber = 1;
    private uint effectid_;
    /// <summary>
    ///  配置表id,表BuffEffect.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Effectid {
      get { return effectid_; }
      set {
        effectid_ = value;
      }
    }

    /// <summary>Field number for the "time_axis" field.</summary>
    public const int TimeAxisFieldNumber = 2;
    private uint timeAxis_;
    /// <summary>
    ///  时间轴(毫秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeAxis {
      get { return timeAxis_; }
      set {
        timeAxis_ = value;
      }
    }

    /// <summary>Field number for the "targets" field.</summary>
    public const int TargetsFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_targets_codec
        = pb::FieldCodec.ForUInt64(26);
    private readonly pbc::RepeatedField<ulong> targets_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// 筛选的目标id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Targets {
      get { return targets_; }
    }

    /// <summary>Field number for the "targetpos" field.</summary>
    public const int TargetposFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Cmd.ScenePos> _repeated_targetpos_codec
        = pb::FieldCodec.ForMessage(34, global::Cmd.ScenePos.Parser);
    private readonly pbc::RepeatedField<global::Cmd.ScenePos> targetpos_ = new pbc::RepeatedField<global::Cmd.ScenePos>();
    /// <summary>
    /// 目标点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.ScenePos> Targetpos {
      get { return targetpos_; }
    }

    /// <summary>Field number for the "buff_effect_layers" field.</summary>
    public const int BuffEffectLayersFieldNumber = 5;
    private uint buffEffectLayers_;
    /// <summary>
    ///  BuffEffect添加buff时要加的层数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuffEffectLayers {
      get { return buffEffectLayers_; }
      set {
        buffEffectLayers_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuffData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuffData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Effectid != other.Effectid) return false;
      if (TimeAxis != other.TimeAxis) return false;
      if(!targets_.Equals(other.targets_)) return false;
      if(!targetpos_.Equals(other.targetpos_)) return false;
      if (BuffEffectLayers != other.BuffEffectLayers) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Effectid != 0) hash ^= Effectid.GetHashCode();
      if (TimeAxis != 0) hash ^= TimeAxis.GetHashCode();
      hash ^= targets_.GetHashCode();
      hash ^= targetpos_.GetHashCode();
      if (BuffEffectLayers != 0) hash ^= BuffEffectLayers.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Effectid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Effectid);
      }
      if (TimeAxis != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TimeAxis);
      }
      targets_.WriteTo(output, _repeated_targets_codec);
      targetpos_.WriteTo(output, _repeated_targetpos_codec);
      if (BuffEffectLayers != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(BuffEffectLayers);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Effectid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Effectid);
      }
      if (TimeAxis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeAxis);
      }
      size += targets_.CalculateSize(_repeated_targets_codec);
      size += targetpos_.CalculateSize(_repeated_targetpos_codec);
      if (BuffEffectLayers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuffEffectLayers);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuffData other) {
      if (other == null) {
        return;
      }
      if (other.Effectid != 0) {
        Effectid = other.Effectid;
      }
      if (other.TimeAxis != 0) {
        TimeAxis = other.TimeAxis;
      }
      targets_.Add(other.targets_);
      targetpos_.Add(other.targetpos_);
      if (other.BuffEffectLayers != 0) {
        BuffEffectLayers = other.BuffEffectLayers;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Effectid = input.ReadUInt32();
            break;
          }
          case 16: {
            TimeAxis = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
          case 34: {
            targetpos_.AddEntriesFrom(input, _repeated_targetpos_codec);
            break;
          }
          case 40: {
            BuffEffectLayers = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  角色触发的BuffEffect消息, C->S
  /// </summary>
  public sealed partial class BuffEffectUserCmd : pb::IMessage<BuffEffectUserCmd> {
    private static readonly pb::MessageParser<BuffEffectUserCmd> _parser = new pb::MessageParser<BuffEffectUserCmd>(() => new BuffEffectUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuffEffectUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffEffectUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffEffectUserCmd(BuffEffectUserCmd other) : this() {
      charid_ = other.charid_;
      skillid_ = other.skillid_;
      skilllv_ = other.skilllv_;
      Buffdata = other.buffdata_ != null ? other.Buffdata.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffEffectUserCmd Clone() {
      return new BuffEffectUserCmd(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 1;
    private ulong charid_;
    /// <summary>
    ///  施法者唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 2;
    private uint skillid_;
    /// <summary>
    ///  技能id,表Skill.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "skilllv" field.</summary>
    public const int SkilllvFieldNumber = 3;
    private uint skilllv_;
    /// <summary>
    ///  技能等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skilllv {
      get { return skilllv_; }
      set {
        skilllv_ = value;
      }
    }

    /// <summary>Field number for the "buffdata" field.</summary>
    public const int BuffdataFieldNumber = 4;
    private global::Cmd.BuffData buffdata_;
    /// <summary>
    ///  buff数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.BuffData Buffdata {
      get { return buffdata_; }
      set {
        buffdata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuffEffectUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuffEffectUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      if (Skillid != other.Skillid) return false;
      if (Skilllv != other.Skilllv) return false;
      if (!object.Equals(Buffdata, other.Buffdata)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (Skilllv != 0) hash ^= Skilllv.GetHashCode();
      if (buffdata_ != null) hash ^= Buffdata.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Charid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Charid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Skillid);
      }
      if (Skilllv != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Skilllv);
      }
      if (buffdata_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Buffdata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      if (Skilllv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skilllv);
      }
      if (buffdata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Buffdata);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuffEffectUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.Skilllv != 0) {
        Skilllv = other.Skilllv;
      }
      if (other.buffdata_ != null) {
        if (buffdata_ == null) {
          buffdata_ = new global::Cmd.BuffData();
        }
        Buffdata.MergeFrom(other.Buffdata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Charid = input.ReadUInt64();
            break;
          }
          case 16: {
            Skillid = input.ReadUInt32();
            break;
          }
          case 24: {
            Skilllv = input.ReadUInt32();
            break;
          }
          case 34: {
            if (buffdata_ == null) {
              buffdata_ = new global::Cmd.BuffData();
            }
            input.ReadMessage(buffdata_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  同步技能伤害 随机数种子,S->C
  /// </summary>
  public sealed partial class UpdateSkillRandSeedCmd : pb::IMessage<UpdateSkillRandSeedCmd> {
    private static readonly pb::MessageParser<UpdateSkillRandSeedCmd> _parser = new pb::MessageParser<UpdateSkillRandSeedCmd>(() => new UpdateSkillRandSeedCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateSkillRandSeedCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSkillRandSeedCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSkillRandSeedCmd(UpdateSkillRandSeedCmd other) : this() {
      randseed_ = other.randseed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSkillRandSeedCmd Clone() {
      return new UpdateSkillRandSeedCmd(this);
    }

    /// <summary>Field number for the "randseed" field.</summary>
    public const int RandseedFieldNumber = 3;
    private ulong randseed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Randseed {
      get { return randseed_; }
      set {
        randseed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateSkillRandSeedCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateSkillRandSeedCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Randseed != other.Randseed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Randseed != 0UL) hash ^= Randseed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Randseed != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Randseed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Randseed != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Randseed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateSkillRandSeedCmd other) {
      if (other == null) {
        return;
      }
      if (other.Randseed != 0UL) {
        Randseed = other.Randseed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Randseed = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  客户端技能结果消息result S->C
  /// </summary>
  public sealed partial class SkillResultUserCmd : pb::IMessage<SkillResultUserCmd> {
    private static readonly pb::MessageParser<SkillResultUserCmd> _parser = new pb::MessageParser<SkillResultUserCmd>(() => new SkillResultUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillResultUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillResultUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillResultUserCmd(SkillResultUserCmd other) : this() {
      charid_ = other.charid_;
      Damagedata = other.damagedata_ != null ? other.Damagedata.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillResultUserCmd Clone() {
      return new SkillResultUserCmd(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 3;
    private ulong charid_;
    /// <summary>
    ///  唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "damagedata" field.</summary>
    public const int DamagedataFieldNumber = 4;
    private global::Cmd.DamageData damagedata_;
    /// <summary>
    ///  伤害数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.DamageData Damagedata {
      get { return damagedata_; }
      set {
        damagedata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillResultUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillResultUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      if (!object.Equals(Damagedata, other.Damagedata)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      if (damagedata_ != null) hash ^= Damagedata.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Charid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Charid);
      }
      if (damagedata_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Damagedata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      if (damagedata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Damagedata);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillResultUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      if (other.damagedata_ != null) {
        if (damagedata_ == null) {
          damagedata_ = new global::Cmd.DamageData();
        }
        Damagedata.MergeFrom(other.Damagedata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Charid = input.ReadUInt64();
            break;
          }
          case 34: {
            if (damagedata_ == null) {
              damagedata_ = new global::Cmd.DamageData();
            }
            input.ReadMessage(damagedata_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Anim位移时同步位置 C&lt;->S
  /// </summary>
  public sealed partial class AnimMoveSyncPosData : pb::IMessage<AnimMoveSyncPosData> {
    private static readonly pb::MessageParser<AnimMoveSyncPosData> _parser = new pb::MessageParser<AnimMoveSyncPosData>(() => new AnimMoveSyncPosData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimMoveSyncPosData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimMoveSyncPosData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimMoveSyncPosData(AnimMoveSyncPosData other) : this() {
      charid_ = other.charid_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      dir_ = other.dir_;
      moveid_ = other.moveid_;
      state_ = other.state_;
      actionName_ = other.actionName_;
      actionTime_ = other.actionTime_;
      motionScale_ = other.motionScale_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimMoveSyncPosData Clone() {
      return new AnimMoveSyncPosData(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 1;
    private ulong charid_;
    /// <summary>
    ///  唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 3;
    private int dir_;
    /// <summary>
    ///  朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "moveid" field.</summary>
    public const int MoveidFieldNumber = 4;
    private uint moveid_;
    /// <summary>
    ///  前端用于同步结束时位置的id标记
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Moveid {
      get { return moveid_; }
      set {
        moveid_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 5;
    private global::Cmd.EAnimMoveState state_ = 0;
    /// <summary>
    ///  位移状态 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EAnimMoveState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "action_name" field.</summary>
    public const int ActionNameFieldNumber = 6;
    private string actionName_ = "";
    /// <summary>
    ///  动画名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActionName {
      get { return actionName_; }
      set {
        actionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "action_time" field.</summary>
    public const int ActionTimeFieldNumber = 7;
    private uint actionTime_;
    /// <summary>
    ///  动画开始了多久 毫秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActionTime {
      get { return actionTime_; }
      set {
        actionTime_ = value;
      }
    }

    /// <summary>Field number for the "motion_scale" field.</summary>
    public const int MotionScaleFieldNumber = 8;
    private int motionScale_;
    /// <summary>
    ///  motion的缩放比例offset 0表示不缩放，万分比，5000表示1.5倍放大
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MotionScale {
      get { return motionScale_; }
      set {
        motionScale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimMoveSyncPosData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimMoveSyncPosData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Dir != other.Dir) return false;
      if (Moveid != other.Moveid) return false;
      if (State != other.State) return false;
      if (ActionName != other.ActionName) return false;
      if (ActionTime != other.ActionTime) return false;
      if (MotionScale != other.MotionScale) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Dir != 0) hash ^= Dir.GetHashCode();
      if (Moveid != 0) hash ^= Moveid.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (ActionName.Length != 0) hash ^= ActionName.GetHashCode();
      if (ActionTime != 0) hash ^= ActionTime.GetHashCode();
      if (MotionScale != 0) hash ^= MotionScale.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Charid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Charid);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (Dir != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Dir);
      }
      if (Moveid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Moveid);
      }
      if (State != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) State);
      }
      if (ActionName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ActionName);
      }
      if (ActionTime != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ActionTime);
      }
      if (MotionScale != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MotionScale);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Dir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dir);
      }
      if (Moveid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Moveid);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (ActionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActionName);
      }
      if (ActionTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActionTime);
      }
      if (MotionScale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MotionScale);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimMoveSyncPosData other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Dir != 0) {
        Dir = other.Dir;
      }
      if (other.Moveid != 0) {
        Moveid = other.Moveid;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.ActionName.Length != 0) {
        ActionName = other.ActionName;
      }
      if (other.ActionTime != 0) {
        ActionTime = other.ActionTime;
      }
      if (other.MotionScale != 0) {
        MotionScale = other.MotionScale;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Charid = input.ReadUInt64();
            break;
          }
          case 18: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 24: {
            Dir = input.ReadInt32();
            break;
          }
          case 32: {
            Moveid = input.ReadUInt32();
            break;
          }
          case 40: {
            state_ = (global::Cmd.EAnimMoveState) input.ReadEnum();
            break;
          }
          case 50: {
            ActionName = input.ReadString();
            break;
          }
          case 56: {
            ActionTime = input.ReadUInt32();
            break;
          }
          case 64: {
            MotionScale = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AnimMoveSyncPosCmd : pb::IMessage<AnimMoveSyncPosCmd> {
    private static readonly pb::MessageParser<AnimMoveSyncPosCmd> _parser = new pb::MessageParser<AnimMoveSyncPosCmd>(() => new AnimMoveSyncPosCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimMoveSyncPosCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimMoveSyncPosCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimMoveSyncPosCmd(AnimMoveSyncPosCmd other) : this() {
      infos_ = other.infos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimMoveSyncPosCmd Clone() {
      return new AnimMoveSyncPosCmd(this);
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cmd.AnimMoveSyncPosData> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(10, global::Cmd.AnimMoveSyncPosData.Parser);
    private readonly pbc::RepeatedField<global::Cmd.AnimMoveSyncPosData> infos_ = new pbc::RepeatedField<global::Cmd.AnimMoveSyncPosData>();
    /// <summary>
    ///  位移结束时的位置信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.AnimMoveSyncPosData> Infos {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimMoveSyncPosCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimMoveSyncPosCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!infos_.Equals(other.infos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= infos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infos_.WriteTo(output, _repeated_infos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infos_.CalculateSize(_repeated_infos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimMoveSyncPosCmd other) {
      if (other == null) {
        return;
      }
      infos_.Add(other.infos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 角色CD数据,S->C
  /// </summary>
  public sealed partial class CDTimeUserCmd : pb::IMessage<CDTimeUserCmd> {
    private static readonly pb::MessageParser<CDTimeUserCmd> _parser = new pb::MessageParser<CDTimeUserCmd>(() => new CDTimeUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CDTimeUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDTimeUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDTimeUserCmd(CDTimeUserCmd other) : this() {
      guid_ = other.guid_;
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CDTimeUserCmd Clone() {
      return new CDTimeUserCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 3;
    private ulong guid_;
    /// <summary>
    ///  角色唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Cmd.CDTimeItem> _repeated_list_codec
        = pb::FieldCodec.ForMessage(34, global::Cmd.CDTimeItem.Parser);
    private readonly pbc::RepeatedField<global::Cmd.CDTimeItem> list_ = new pbc::RepeatedField<global::Cmd.CDTimeItem>();
    /// <summary>
    ///  CD数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.CDTimeItem> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CDTimeUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CDTimeUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Guid);
      }
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CDTimeUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Guid = input.ReadUInt64();
            break;
          }
          case 34: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  角色复活,C->S
  /// </summary>
  public sealed partial class ReliveUserCmd : pb::IMessage<ReliveUserCmd> {
    private static readonly pb::MessageParser<ReliveUserCmd> _parser = new pb::MessageParser<ReliveUserCmd>(() => new ReliveUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReliveUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReliveUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReliveUserCmd(ReliveUserCmd other) : this() {
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReliveUserCmd Clone() {
      return new ReliveUserCmd(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Cmd.EReliveType type_ = 0;
    /// <summary>
    /// 复活类型,unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EReliveType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReliveUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReliveUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReliveUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            type_ = (global::Cmd.EReliveType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  角色场景内瞬移,S->C
  /// </summary>
  public sealed partial class GoToUserCmd : pb::IMessage<GoToUserCmd> {
    private static readonly pb::MessageParser<GoToUserCmd> _parser = new pb::MessageParser<GoToUserCmd>(() => new GoToUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoToUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoToUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoToUserCmd(GoToUserCmd other) : this() {
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      charid_ = other.charid_;
      isgomap_ = other.isgomap_;
      rotate_ = other.rotate_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoToUserCmd Clone() {
      return new GoToUserCmd(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  目标点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 4;
    private ulong charid_;
    /// <summary>
    ///  唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "isgomap" field.</summary>
    public const int IsgomapFieldNumber = 5;
    private bool isgomap_;
    /// <summary>
    ///  unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isgomap {
      get { return isgomap_; }
      set {
        isgomap_ = value;
      }
    }

    /// <summary>Field number for the "rotate" field.</summary>
    public const int RotateFieldNumber = 6;
    private uint rotate_;
    /// <summary>
    ///  移动后朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rotate {
      get { return rotate_; }
      set {
        rotate_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 7;
    private global::Cmd.GoMapType type_ = 0;
    /// <summary>
    ///  移动类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.GoMapType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GoToUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GoToUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Charid != other.Charid) return false;
      if (Isgomap != other.Isgomap) return false;
      if (Rotate != other.Rotate) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      if (Isgomap != false) hash ^= Isgomap.GetHashCode();
      if (Rotate != 0) hash ^= Rotate.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pos);
      }
      if (Charid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Charid);
      }
      if (Isgomap != false) {
        output.WriteRawTag(40);
        output.WriteBool(Isgomap);
      }
      if (Rotate != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Rotate);
      }
      if (Type != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      if (Isgomap != false) {
        size += 1 + 1;
      }
      if (Rotate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rotate);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GoToUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      if (other.Isgomap != false) {
        Isgomap = other.Isgomap;
      }
      if (other.Rotate != 0) {
        Rotate = other.Rotate;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 32: {
            Charid = input.ReadUInt64();
            break;
          }
          case 40: {
            Isgomap = input.ReadBool();
            break;
          }
          case 48: {
            Rotate = input.ReadUInt32();
            break;
          }
          case 56: {
            type_ = (global::Cmd.GoMapType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  unused
  /// </summary>
  public sealed partial class GoToExitPosUserCmd : pb::IMessage<GoToExitPosUserCmd> {
    private static readonly pb::MessageParser<GoToExitPosUserCmd> _parser = new pb::MessageParser<GoToExitPosUserCmd>(() => new GoToExitPosUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoToExitPosUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoToExitPosUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoToExitPosUserCmd(GoToExitPosUserCmd other) : this() {
      mapid_ = other.mapid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoToExitPosUserCmd Clone() {
      return new GoToExitPosUserCmd(this);
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 3;
    private uint mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GoToExitPosUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GoToExitPosUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mapid != other.Mapid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mapid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Mapid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mapid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GoToExitPosUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Mapid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  访问npc,C->S
  /// </summary>
  public sealed partial class CVisitNpcUserCmd : pb::IMessage<CVisitNpcUserCmd> {
    private static readonly pb::MessageParser<CVisitNpcUserCmd> _parser = new pb::MessageParser<CVisitNpcUserCmd>(() => new CVisitNpcUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CVisitNpcUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CVisitNpcUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CVisitNpcUserCmd(CVisitNpcUserCmd other) : this() {
      guid_ = other.guid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CVisitNpcUserCmd Clone() {
      return new CVisitNpcUserCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 3;
    private ulong guid_;
    /// <summary>
    ///  npc唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CVisitNpcUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CVisitNpcUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Guid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CVisitNpcUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Guid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  访问npc成功,S->C
  /// </summary>
  public sealed partial class RetVisitNpcUserCmd : pb::IMessage<RetVisitNpcUserCmd> {
    private static readonly pb::MessageParser<RetVisitNpcUserCmd> _parser = new pb::MessageParser<RetVisitNpcUserCmd>(() => new RetVisitNpcUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RetVisitNpcUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetVisitNpcUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetVisitNpcUserCmd(RetVisitNpcUserCmd other) : this() {
      guid_ = other.guid_;
      shiplocaltalk_ = other.shiplocaltalk_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetVisitNpcUserCmd Clone() {
      return new RetVisitNpcUserCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 3;
    private ulong guid_;
    /// <summary>
    ///  npc唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "shiplocaltalk" field.</summary>
    public const int ShiplocaltalkFieldNumber = 4;
    private bool shiplocaltalk_;
    /// <summary>
    ///  删除默认镜头
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Shiplocaltalk {
      get { return shiplocaltalk_; }
      set {
        shiplocaltalk_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RetVisitNpcUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RetVisitNpcUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Shiplocaltalk != other.Shiplocaltalk) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Shiplocaltalk != false) hash ^= Shiplocaltalk.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Guid);
      }
      if (Shiplocaltalk != false) {
        output.WriteRawTag(32);
        output.WriteBool(Shiplocaltalk);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Shiplocaltalk != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RetVisitNpcUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Shiplocaltalk != false) {
        Shiplocaltalk = other.Shiplocaltalk;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Guid = input.ReadUInt64();
            break;
          }
          case 32: {
            Shiplocaltalk = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  停止访问npc,C->S
  /// </summary>
  public sealed partial class CStopVisitNpcUserCmd : pb::IMessage<CStopVisitNpcUserCmd> {
    private static readonly pb::MessageParser<CStopVisitNpcUserCmd> _parser = new pb::MessageParser<CStopVisitNpcUserCmd>(() => new CStopVisitNpcUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CStopVisitNpcUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStopVisitNpcUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStopVisitNpcUserCmd(CStopVisitNpcUserCmd other) : this() {
      guid_ = other.guid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CStopVisitNpcUserCmd Clone() {
      return new CStopVisitNpcUserCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 3;
    private ulong guid_;
    /// <summary>
    ///  npc唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CStopVisitNpcUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CStopVisitNpcUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Guid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CStopVisitNpcUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Guid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  停止访问npc成功,S->C
  /// </summary>
  public sealed partial class RetStopVisitNpcUserCmd : pb::IMessage<RetStopVisitNpcUserCmd> {
    private static readonly pb::MessageParser<RetStopVisitNpcUserCmd> _parser = new pb::MessageParser<RetStopVisitNpcUserCmd>(() => new RetStopVisitNpcUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RetStopVisitNpcUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetStopVisitNpcUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetStopVisitNpcUserCmd(RetStopVisitNpcUserCmd other) : this() {
      guid_ = other.guid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetStopVisitNpcUserCmd Clone() {
      return new RetStopVisitNpcUserCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 3;
    private ulong guid_;
    /// <summary>
    ///  npc唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RetStopVisitNpcUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RetStopVisitNpcUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Guid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RetStopVisitNpcUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Guid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  unused
  /// </summary>
  public sealed partial class SShowDialogUserCmd : pb::IMessage<SShowDialogUserCmd> {
    private static readonly pb::MessageParser<SShowDialogUserCmd> _parser = new pb::MessageParser<SShowDialogUserCmd>(() => new SShowDialogUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SShowDialogUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SShowDialogUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SShowDialogUserCmd(SShowDialogUserCmd other) : this() {
      guid_ = other.guid_;
      dialogid_ = other.dialogid_;
      type_ = other.type_;
      text_ = other.text_;
      emoji_ = other.emoji_;
      action_ = other.action_;
      voice_ = other.voice_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SShowDialogUserCmd Clone() {
      return new SShowDialogUserCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 3;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "dialogid" field.</summary>
    public const int DialogidFieldNumber = 4;
    private uint dialogid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Dialogid {
      get { return dialogid_; }
      set {
        dialogid_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private uint type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 6;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "emoji" field.</summary>
    public const int EmojiFieldNumber = 7;
    private uint emoji_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Emoji {
      get { return emoji_; }
      set {
        emoji_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 8;
    private string action_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Action {
      get { return action_; }
      set {
        action_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "voice" field.</summary>
    public const int VoiceFieldNumber = 9;
    private string voice_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Voice {
      get { return voice_; }
      set {
        voice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SShowDialogUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SShowDialogUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Dialogid != other.Dialogid) return false;
      if (Type != other.Type) return false;
      if (Text != other.Text) return false;
      if (Emoji != other.Emoji) return false;
      if (Action != other.Action) return false;
      if (Voice != other.Voice) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Dialogid != 0) hash ^= Dialogid.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (Emoji != 0) hash ^= Emoji.GetHashCode();
      if (Action.Length != 0) hash ^= Action.GetHashCode();
      if (Voice.Length != 0) hash ^= Voice.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Guid);
      }
      if (Dialogid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Dialogid);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Type);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Text);
      }
      if (Emoji != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Emoji);
      }
      if (Action.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Action);
      }
      if (Voice.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Voice);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Dialogid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Dialogid);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (Emoji != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Emoji);
      }
      if (Action.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Action);
      }
      if (Voice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Voice);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SShowDialogUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Dialogid != 0) {
        Dialogid = other.Dialogid;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.Emoji != 0) {
        Emoji = other.Emoji;
      }
      if (other.Action.Length != 0) {
        Action = other.Action;
      }
      if (other.Voice.Length != 0) {
        Voice = other.Voice;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Guid = input.ReadUInt64();
            break;
          }
          case 32: {
            Dialogid = input.ReadUInt32();
            break;
          }
          case 40: {
            Type = input.ReadUInt32();
            break;
          }
          case 50: {
            Text = input.ReadString();
            break;
          }
          case 56: {
            Emoji = input.ReadUInt32();
            break;
          }
          case 66: {
            Action = input.ReadString();
            break;
          }
          case 74: {
            Voice = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  用户切换主控伙伴,C->S
  /// </summary>
  public sealed partial class ChoosePartnerUserCmd : pb::IMessage<ChoosePartnerUserCmd> {
    private static readonly pb::MessageParser<ChoosePartnerUserCmd> _parser = new pb::MessageParser<ChoosePartnerUserCmd>(() => new ChoosePartnerUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChoosePartnerUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChoosePartnerUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChoosePartnerUserCmd(ChoosePartnerUserCmd other) : this() {
      index_ = other.index_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChoosePartnerUserCmd Clone() {
      return new ChoosePartnerUserCmd(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private uint index_;
    /// <summary>
    ///  出战位置(1-4)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChoosePartnerUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChoosePartnerUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChoosePartnerUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  队伍成员信息,S->C
  /// </summary>
  public sealed partial class TeamMemberData : pb::IMessage<TeamMemberData> {
    private static readonly pb::MessageParser<TeamMemberData> _parser = new pb::MessageParser<TeamMemberData>(() => new TeamMemberData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamMemberData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMemberData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMemberData(TeamMemberData other) : this() {
      index_ = other.index_;
      cfgid_ = other.cfgid_;
      guid_ = other.guid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMemberData Clone() {
      return new TeamMemberData(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private uint index_;
    /// <summary>
    ///  出战位置(1-4)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "cfgid" field.</summary>
    public const int CfgidFieldNumber = 2;
    private uint cfgid_;
    /// <summary>
    ///  配置表id,表Partner.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cfgid {
      get { return cfgid_; }
      set {
        cfgid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 3;
    private uint guid_;
    /// <summary>
    ///  场景内生成的唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamMemberData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamMemberData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Cfgid != other.Cfgid) return false;
      if (Guid != other.Guid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Cfgid != 0) hash ^= Cfgid.GetHashCode();
      if (Guid != 0) hash ^= Guid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
      if (Cfgid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Cfgid);
      }
      if (Guid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Guid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (Cfgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cfgid);
      }
      if (Guid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Guid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamMemberData other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Cfgid != 0) {
        Cfgid = other.Cfgid;
      }
      if (other.Guid != 0) {
        Guid = other.Guid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
          case 16: {
            Cfgid = input.ReadUInt32();
            break;
          }
          case 24: {
            Guid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  队伍数据,S->C
  /// </summary>
  public sealed partial class TeamDataCmd : pb::IMessage<TeamDataCmd> {
    private static readonly pb::MessageParser<TeamDataCmd> _parser = new pb::MessageParser<TeamDataCmd>(() => new TeamDataCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamDataCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamDataCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamDataCmd(TeamDataCmd other) : this() {
      charid_ = other.charid_;
      member_ = other.member_.Clone();
      leaderindex_ = other.leaderindex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamDataCmd Clone() {
      return new TeamDataCmd(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 1;
    private ulong charid_;
    /// <summary>
    ///  角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "member" field.</summary>
    public const int MemberFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.TeamMemberData> _repeated_member_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.TeamMemberData.Parser);
    private readonly pbc::RepeatedField<global::Cmd.TeamMemberData> member_ = new pbc::RepeatedField<global::Cmd.TeamMemberData>();
    /// <summary>
    ///  队伍成员数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.TeamMemberData> Member {
      get { return member_; }
    }

    /// <summary>Field number for the "leaderindex" field.</summary>
    public const int LeaderindexFieldNumber = 4;
    private uint leaderindex_;
    /// <summary>
    ///  主控位置(1-4)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Leaderindex {
      get { return leaderindex_; }
      set {
        leaderindex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamDataCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamDataCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      if(!member_.Equals(other.member_)) return false;
      if (Leaderindex != other.Leaderindex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      hash ^= member_.GetHashCode();
      if (Leaderindex != 0) hash ^= Leaderindex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Charid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Charid);
      }
      member_.WriteTo(output, _repeated_member_codec);
      if (Leaderindex != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Leaderindex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      size += member_.CalculateSize(_repeated_member_codec);
      if (Leaderindex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Leaderindex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamDataCmd other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      member_.Add(other.member_);
      if (other.Leaderindex != 0) {
        Leaderindex = other.Leaderindex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Charid = input.ReadUInt64();
            break;
          }
          case 26: {
            member_.AddEntriesFrom(input, _repeated_member_codec);
            break;
          }
          case 32: {
            Leaderindex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  设置出战伙伴,C->S
  /// </summary>
  public sealed partial class SetTeamUserCmd : pb::IMessage<SetTeamUserCmd> {
    private static readonly pb::MessageParser<SetTeamUserCmd> _parser = new pb::MessageParser<SetTeamUserCmd>(() => new SetTeamUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetTeamUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTeamUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTeamUserCmd(SetTeamUserCmd other) : this() {
      member_ = other.member_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTeamUserCmd Clone() {
      return new SetTeamUserCmd(this);
    }

    /// <summary>Field number for the "member" field.</summary>
    public const int MemberFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.SetTeamUserCmd.Types.Member> _repeated_member_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.SetTeamUserCmd.Types.Member.Parser);
    private readonly pbc::RepeatedField<global::Cmd.SetTeamUserCmd.Types.Member> member_ = new pbc::RepeatedField<global::Cmd.SetTeamUserCmd.Types.Member>();
    /// <summary>
    ///  成员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.SetTeamUserCmd.Types.Member> Member {
      get { return member_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetTeamUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetTeamUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!member_.Equals(other.member_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= member_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      member_.WriteTo(output, _repeated_member_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += member_.CalculateSize(_repeated_member_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetTeamUserCmd other) {
      if (other == null) {
        return;
      }
      member_.Add(other.member_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            member_.AddEntriesFrom(input, _repeated_member_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SetTeamUserCmd message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Member : pb::IMessage<Member> {
        private static readonly pb::MessageParser<Member> _parser = new pb::MessageParser<Member>(() => new Member());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Member> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Cmd.SetTeamUserCmd.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Member() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Member(Member other) : this() {
          index_ = other.index_;
          fighter_ = other.fighter_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Member Clone() {
          return new Member(this);
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private uint index_;
        /// <summary>
        ///  出战位置(1-4)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "fighter" field.</summary>
        public const int FighterFieldNumber = 2;
        private uint fighter_;
        /// <summary>
        ///  配置表id,表Partner.xlsx列ID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Fighter {
          get { return fighter_; }
          set {
            fighter_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Member);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Member other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Index != other.Index) return false;
          if (Fighter != other.Fighter) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Index != 0) hash ^= Index.GetHashCode();
          if (Fighter != 0) hash ^= Fighter.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Index != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Index);
          }
          if (Fighter != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Fighter);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (Fighter != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fighter);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Member other) {
          if (other == null) {
            return;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          if (other.Fighter != 0) {
            Fighter = other.Fighter;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Index = input.ReadUInt32();
                break;
              }
              case 16: {
                Fighter = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///  buff层数据,S->C
  /// </summary>
  public sealed partial class LayerData : pb::IMessage<LayerData> {
    private static readonly pb::MessageParser<LayerData> _parser = new pb::MessageParser<LayerData>(() => new LayerData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LayerData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayerData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayerData(LayerData other) : this() {
      id_ = other.id_;
      time_ = other.time_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      targetid_ = other.targetid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayerData Clone() {
      return new LayerData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///  唯一索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private ulong time_;
    /// <summary>
    ///  毫秒时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  指定坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "targetid" field.</summary>
    public const int TargetidFieldNumber = 4;
    private ulong targetid_;
    /// <summary>
    ///  作用目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Targetid {
      get { return targetid_; }
      set {
        targetid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LayerData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LayerData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Time != other.Time) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Targetid != other.Targetid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Time != 0UL) hash ^= Time.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Targetid != 0UL) hash ^= Targetid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Time != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Time);
      }
      if (pos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pos);
      }
      if (Targetid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Targetid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Time != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Time);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Targetid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Targetid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LayerData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Time != 0UL) {
        Time = other.Time;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Targetid != 0UL) {
        Targetid = other.Targetid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Time = input.ReadUInt64();
            break;
          }
          case 26: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 32: {
            Targetid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  buff数据,S->C
  /// </summary>
  public sealed partial class BufferData : pb::IMessage<BufferData> {
    private static readonly pb::MessageParser<BufferData> _parser = new pb::MessageParser<BufferData>(() => new BufferData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BufferData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferData(BufferData other) : this() {
      id_ = other.id_;
      layer_ = other.layer_;
      time_ = other.time_;
      active_ = other.active_;
      fromname_ = other.fromname_;
      fromid_ = other.fromid_;
      level_ = other.level_;
      layerdata_ = other.layerdata_.Clone();
      fromskillid_ = other.fromskillid_;
      fromeffecttime_ = other.fromeffecttime_;
      shielddefvalue_ = other.shielddefvalue_;
      hide_ = other.hide_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferData Clone() {
      return new BufferData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///  配置表id,表Buff.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "layer" field.</summary>
    public const int LayerFieldNumber = 2;
    private uint layer_;
    /// <summary>
    ///  buff层数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Layer {
      get { return layer_; }
      set {
        layer_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private ulong time_;
    /// <summary>
    ///  结束时间(毫秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 4;
    private bool active_;
    /// <summary>
    ///  当前是否生效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    /// <summary>Field number for the "fromname" field.</summary>
    public const int FromnameFieldNumber = 5;
    private string fromname_ = "";
    /// <summary>
    ///  来源名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fromname {
      get { return fromname_; }
      set {
        fromname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fromid" field.</summary>
    public const int FromidFieldNumber = 6;
    private ulong fromid_;
    /// <summary>
    ///  来源唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Fromid {
      get { return fromid_; }
      set {
        fromid_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 7;
    private uint level_;
    /// <summary>
    ///  等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "layerdata" field.</summary>
    public const int LayerdataFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Cmd.LayerData> _repeated_layerdata_codec
        = pb::FieldCodec.ForMessage(66, global::Cmd.LayerData.Parser);
    private readonly pbc::RepeatedField<global::Cmd.LayerData> layerdata_ = new pbc::RepeatedField<global::Cmd.LayerData>();
    /// <summary>
    ///  层数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.LayerData> Layerdata {
      get { return layerdata_; }
    }

    /// <summary>Field number for the "fromskillid" field.</summary>
    public const int FromskillidFieldNumber = 9;
    private uint fromskillid_;
    /// <summary>
    ///  来源技能id 添加时有效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fromskillid {
      get { return fromskillid_; }
      set {
        fromskillid_ = value;
      }
    }

    /// <summary>Field number for the "fromeffecttime" field.</summary>
    public const int FromeffecttimeFieldNumber = 10;
    private uint fromeffecttime_;
    /// <summary>
    ///  来源技能时间轴时间 添加时有效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fromeffecttime {
      get { return fromeffecttime_; }
      set {
        fromeffecttime_ = value;
      }
    }

    /// <summary>Field number for the "shielddefvalue" field.</summary>
    public const int ShielddefvalueFieldNumber = 11;
    private uint shielddefvalue_;
    /// <summary>
    ///  该buff的护盾值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Shielddefvalue {
      get { return shielddefvalue_; }
      set {
        shielddefvalue_ = value;
      }
    }

    /// <summary>Field number for the "hide" field.</summary>
    public const int HideFieldNumber = 12;
    private bool hide_;
    /// <summary>
    ///  是否隐藏状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Hide {
      get { return hide_; }
      set {
        hide_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BufferData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BufferData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Layer != other.Layer) return false;
      if (Time != other.Time) return false;
      if (Active != other.Active) return false;
      if (Fromname != other.Fromname) return false;
      if (Fromid != other.Fromid) return false;
      if (Level != other.Level) return false;
      if(!layerdata_.Equals(other.layerdata_)) return false;
      if (Fromskillid != other.Fromskillid) return false;
      if (Fromeffecttime != other.Fromeffecttime) return false;
      if (Shielddefvalue != other.Shielddefvalue) return false;
      if (Hide != other.Hide) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Layer != 0) hash ^= Layer.GetHashCode();
      if (Time != 0UL) hash ^= Time.GetHashCode();
      if (Active != false) hash ^= Active.GetHashCode();
      if (Fromname.Length != 0) hash ^= Fromname.GetHashCode();
      if (Fromid != 0UL) hash ^= Fromid.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      hash ^= layerdata_.GetHashCode();
      if (Fromskillid != 0) hash ^= Fromskillid.GetHashCode();
      if (Fromeffecttime != 0) hash ^= Fromeffecttime.GetHashCode();
      if (Shielddefvalue != 0) hash ^= Shielddefvalue.GetHashCode();
      if (Hide != false) hash ^= Hide.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Layer != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Layer);
      }
      if (Time != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Time);
      }
      if (Active != false) {
        output.WriteRawTag(32);
        output.WriteBool(Active);
      }
      if (Fromname.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Fromname);
      }
      if (Fromid != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Fromid);
      }
      if (Level != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Level);
      }
      layerdata_.WriteTo(output, _repeated_layerdata_codec);
      if (Fromskillid != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Fromskillid);
      }
      if (Fromeffecttime != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Fromeffecttime);
      }
      if (Shielddefvalue != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Shielddefvalue);
      }
      if (Hide != false) {
        output.WriteRawTag(96);
        output.WriteBool(Hide);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Layer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Layer);
      }
      if (Time != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Time);
      }
      if (Active != false) {
        size += 1 + 1;
      }
      if (Fromname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fromname);
      }
      if (Fromid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Fromid);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      size += layerdata_.CalculateSize(_repeated_layerdata_codec);
      if (Fromskillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fromskillid);
      }
      if (Fromeffecttime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fromeffecttime);
      }
      if (Shielddefvalue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Shielddefvalue);
      }
      if (Hide != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BufferData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Layer != 0) {
        Layer = other.Layer;
      }
      if (other.Time != 0UL) {
        Time = other.Time;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
      if (other.Fromname.Length != 0) {
        Fromname = other.Fromname;
      }
      if (other.Fromid != 0UL) {
        Fromid = other.Fromid;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      layerdata_.Add(other.layerdata_);
      if (other.Fromskillid != 0) {
        Fromskillid = other.Fromskillid;
      }
      if (other.Fromeffecttime != 0) {
        Fromeffecttime = other.Fromeffecttime;
      }
      if (other.Shielddefvalue != 0) {
        Shielddefvalue = other.Shielddefvalue;
      }
      if (other.Hide != false) {
        Hide = other.Hide;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Layer = input.ReadUInt32();
            break;
          }
          case 24: {
            Time = input.ReadUInt64();
            break;
          }
          case 32: {
            Active = input.ReadBool();
            break;
          }
          case 42: {
            Fromname = input.ReadString();
            break;
          }
          case 48: {
            Fromid = input.ReadUInt64();
            break;
          }
          case 56: {
            Level = input.ReadUInt32();
            break;
          }
          case 66: {
            layerdata_.AddEntriesFrom(input, _repeated_layerdata_codec);
            break;
          }
          case 72: {
            Fromskillid = input.ReadUInt32();
            break;
          }
          case 80: {
            Fromeffecttime = input.ReadUInt32();
            break;
          }
          case 88: {
            Shielddefvalue = input.ReadUInt32();
            break;
          }
          case 96: {
            Hide = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  九屏buff数据同步,S->C
  /// </summary>
  public sealed partial class UserBuffNineSyncCmd : pb::IMessage<UserBuffNineSyncCmd> {
    private static readonly pb::MessageParser<UserBuffNineSyncCmd> _parser = new pb::MessageParser<UserBuffNineSyncCmd>(() => new UserBuffNineSyncCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserBuffNineSyncCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBuffNineSyncCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBuffNineSyncCmd(UserBuffNineSyncCmd other) : this() {
      guid_ = other.guid_;
      updates_ = other.updates_.Clone();
      dels_ = other.dels_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserBuffNineSyncCmd Clone() {
      return new UserBuffNineSyncCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 3;
    private ulong guid_;
    /// <summary>
    ///  唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "updates" field.</summary>
    public const int UpdatesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Cmd.BufferData> _repeated_updates_codec
        = pb::FieldCodec.ForMessage(34, global::Cmd.BufferData.Parser);
    private readonly pbc::RepeatedField<global::Cmd.BufferData> updates_ = new pbc::RepeatedField<global::Cmd.BufferData>();
    /// <summary>
    ///  buff数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.BufferData> Updates {
      get { return updates_; }
    }

    /// <summary>Field number for the "dels" field.</summary>
    public const int DelsFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_dels_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> dels_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  删除的buffid,表Buff.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Dels {
      get { return dels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserBuffNineSyncCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserBuffNineSyncCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if(!updates_.Equals(other.updates_)) return false;
      if(!dels_.Equals(other.dels_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      hash ^= updates_.GetHashCode();
      hash ^= dels_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Guid);
      }
      updates_.WriteTo(output, _repeated_updates_codec);
      dels_.WriteTo(output, _repeated_dels_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      size += updates_.CalculateSize(_repeated_updates_codec);
      size += dels_.CalculateSize(_repeated_dels_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserBuffNineSyncCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      updates_.Add(other.updates_);
      dels_.Add(other.dels_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Guid = input.ReadUInt64();
            break;
          }
          case 34: {
            updates_.AddEntriesFrom(input, _repeated_updates_codec);
            break;
          }
          case 42:
          case 40: {
            dels_.AddEntriesFrom(input, _repeated_dels_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  动作同步,S->C
  /// </summary>
  public sealed partial class UserActionNineSyncCmd : pb::IMessage<UserActionNineSyncCmd> {
    private static readonly pb::MessageParser<UserActionNineSyncCmd> _parser = new pb::MessageParser<UserActionNineSyncCmd>(() => new UserActionNineSyncCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserActionNineSyncCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActionNineSyncCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActionNineSyncCmd(UserActionNineSyncCmd other) : this() {
      guid_ = other.guid_;
      actionid_ = other.actionid_;
      looptime_ = other.looptime_;
      actiontype_ = other.actiontype_;
      force_ = other.force_;
      isprivate_ = other.isprivate_;
      islookat_ = other.islookat_;
      isbase_ = other.isbase_;
      isstop_ = other.isstop_;
      actionname_ = other.actionname_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserActionNineSyncCmd Clone() {
      return new UserActionNineSyncCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 3;
    private ulong guid_;
    /// <summary>
    ///  npc的唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "actionid" field.</summary>
    public const int ActionidFieldNumber = 4;
    private uint actionid_;
    /// <summary>
    ///  动作id,表ActionAnime.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Actionid {
      get { return actionid_; }
      set {
        actionid_ = value;
      }
    }

    /// <summary>Field number for the "looptime" field.</summary>
    public const int LooptimeFieldNumber = 5;
    private uint looptime_;
    /// <summary>
    ///  播放次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Looptime {
      get { return looptime_; }
      set {
        looptime_ = value;
      }
    }

    /// <summary>Field number for the "actiontype" field.</summary>
    public const int ActiontypeFieldNumber = 6;
    private global::Cmd.EActionType actiontype_ = 0;
    /// <summary>
    ///  播放类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EActionType Actiontype {
      get { return actiontype_; }
      set {
        actiontype_ = value;
      }
    }

    /// <summary>Field number for the "force" field.</summary>
    public const int ForceFieldNumber = 7;
    private bool force_;
    /// <summary>
    ///  是否强制播放
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Force {
      get { return force_; }
      set {
        force_ = value;
      }
    }

    /// <summary>Field number for the "isprivate" field.</summary>
    public const int IsprivateFieldNumber = 8;
    private bool isprivate_;
    /// <summary>
    ///  是否为私人动作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isprivate {
      get { return isprivate_; }
      set {
        isprivate_ = value;
      }
    }

    /// <summary>Field number for the "islookat" field.</summary>
    public const int IslookatFieldNumber = 9;
    private bool islookat_;
    /// <summary>
    ///  是否要盯着目标看
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Islookat {
      get { return islookat_; }
      set {
        islookat_ = value;
      }
    }

    /// <summary>Field number for the "isbase" field.</summary>
    public const int IsbaseFieldNumber = 10;
    private bool isbase_;
    /// <summary>
    ///  是否基础动作(客户端二级基础动作)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isbase {
      get { return isbase_; }
      set {
        isbase_ = value;
      }
    }

    /// <summary>Field number for the "isstop" field.</summary>
    public const int IsstopFieldNumber = 11;
    private bool isstop_;
    /// <summary>
    /// 用于任务节点回退
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isstop {
      get { return isstop_; }
      set {
        isstop_ = value;
      }
    }

    /// <summary>Field number for the "actionname" field.</summary>
    public const int ActionnameFieldNumber = 12;
    private string actionname_ = "";
    /// <summary>
    ///  动作name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Actionname {
      get { return actionname_; }
      set {
        actionname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserActionNineSyncCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserActionNineSyncCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Actionid != other.Actionid) return false;
      if (Looptime != other.Looptime) return false;
      if (Actiontype != other.Actiontype) return false;
      if (Force != other.Force) return false;
      if (Isprivate != other.Isprivate) return false;
      if (Islookat != other.Islookat) return false;
      if (Isbase != other.Isbase) return false;
      if (Isstop != other.Isstop) return false;
      if (Actionname != other.Actionname) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Actionid != 0) hash ^= Actionid.GetHashCode();
      if (Looptime != 0) hash ^= Looptime.GetHashCode();
      if (Actiontype != 0) hash ^= Actiontype.GetHashCode();
      if (Force != false) hash ^= Force.GetHashCode();
      if (Isprivate != false) hash ^= Isprivate.GetHashCode();
      if (Islookat != false) hash ^= Islookat.GetHashCode();
      if (Isbase != false) hash ^= Isbase.GetHashCode();
      if (Isstop != false) hash ^= Isstop.GetHashCode();
      if (Actionname.Length != 0) hash ^= Actionname.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Guid);
      }
      if (Actionid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Actionid);
      }
      if (Looptime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Looptime);
      }
      if (Actiontype != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Actiontype);
      }
      if (Force != false) {
        output.WriteRawTag(56);
        output.WriteBool(Force);
      }
      if (Isprivate != false) {
        output.WriteRawTag(64);
        output.WriteBool(Isprivate);
      }
      if (Islookat != false) {
        output.WriteRawTag(72);
        output.WriteBool(Islookat);
      }
      if (Isbase != false) {
        output.WriteRawTag(80);
        output.WriteBool(Isbase);
      }
      if (Isstop != false) {
        output.WriteRawTag(88);
        output.WriteBool(Isstop);
      }
      if (Actionname.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Actionname);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Actionid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Actionid);
      }
      if (Looptime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Looptime);
      }
      if (Actiontype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Actiontype);
      }
      if (Force != false) {
        size += 1 + 1;
      }
      if (Isprivate != false) {
        size += 1 + 1;
      }
      if (Islookat != false) {
        size += 1 + 1;
      }
      if (Isbase != false) {
        size += 1 + 1;
      }
      if (Isstop != false) {
        size += 1 + 1;
      }
      if (Actionname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Actionname);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserActionNineSyncCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Actionid != 0) {
        Actionid = other.Actionid;
      }
      if (other.Looptime != 0) {
        Looptime = other.Looptime;
      }
      if (other.Actiontype != 0) {
        Actiontype = other.Actiontype;
      }
      if (other.Force != false) {
        Force = other.Force;
      }
      if (other.Isprivate != false) {
        Isprivate = other.Isprivate;
      }
      if (other.Islookat != false) {
        Islookat = other.Islookat;
      }
      if (other.Isbase != false) {
        Isbase = other.Isbase;
      }
      if (other.Isstop != false) {
        Isstop = other.Isstop;
      }
      if (other.Actionname.Length != 0) {
        Actionname = other.Actionname;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Guid = input.ReadUInt64();
            break;
          }
          case 32: {
            Actionid = input.ReadUInt32();
            break;
          }
          case 40: {
            Looptime = input.ReadUInt32();
            break;
          }
          case 48: {
            actiontype_ = (global::Cmd.EActionType) input.ReadEnum();
            break;
          }
          case 56: {
            Force = input.ReadBool();
            break;
          }
          case 64: {
            Isprivate = input.ReadBool();
            break;
          }
          case 72: {
            Islookat = input.ReadBool();
            break;
          }
          case 80: {
            Isbase = input.ReadBool();
            break;
          }
          case 88: {
            Isstop = input.ReadBool();
            break;
          }
          case 98: {
            Actionname = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  表情同步,S->C
  /// </summary>
  public sealed partial class UserExpressionNineSyncCmd : pb::IMessage<UserExpressionNineSyncCmd> {
    private static readonly pb::MessageParser<UserExpressionNineSyncCmd> _parser = new pb::MessageParser<UserExpressionNineSyncCmd>(() => new UserExpressionNineSyncCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserExpressionNineSyncCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserExpressionNineSyncCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserExpressionNineSyncCmd(UserExpressionNineSyncCmd other) : this() {
      guid_ = other.guid_;
      expressionname_ = other.expressionname_;
      looptime_ = other.looptime_;
      type_ = other.type_;
      force_ = other.force_;
      isprivate_ = other.isprivate_;
      isstop_ = other.isstop_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserExpressionNineSyncCmd Clone() {
      return new UserExpressionNineSyncCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 3;
    private ulong guid_;
    /// <summary>
    ///  npc的唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "expressionname" field.</summary>
    public const int ExpressionnameFieldNumber = 4;
    private string expressionname_ = "";
    /// <summary>
    ///  表情名字,为前端资源名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Expressionname {
      get { return expressionname_; }
      set {
        expressionname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "looptime" field.</summary>
    public const int LooptimeFieldNumber = 5;
    private uint looptime_;
    /// <summary>
    ///  循环次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Looptime {
      get { return looptime_; }
      set {
        looptime_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 8;
    private global::Cmd.EActionType type_ = 0;
    /// <summary>
    ///  播放类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EActionType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "force" field.</summary>
    public const int ForceFieldNumber = 6;
    private bool force_;
    /// <summary>
    ///  是否强制播放
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Force {
      get { return force_; }
      set {
        force_ = value;
      }
    }

    /// <summary>Field number for the "isprivate" field.</summary>
    public const int IsprivateFieldNumber = 7;
    private bool isprivate_;
    /// <summary>
    ///  是否私人表情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isprivate {
      get { return isprivate_; }
      set {
        isprivate_ = value;
      }
    }

    /// <summary>Field number for the "isstop" field.</summary>
    public const int IsstopFieldNumber = 9;
    private bool isstop_;
    /// <summary>
    /// 用于任务节点回退
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isstop {
      get { return isstop_; }
      set {
        isstop_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserExpressionNineSyncCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserExpressionNineSyncCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Expressionname != other.Expressionname) return false;
      if (Looptime != other.Looptime) return false;
      if (Type != other.Type) return false;
      if (Force != other.Force) return false;
      if (Isprivate != other.Isprivate) return false;
      if (Isstop != other.Isstop) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Expressionname.Length != 0) hash ^= Expressionname.GetHashCode();
      if (Looptime != 0) hash ^= Looptime.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Force != false) hash ^= Force.GetHashCode();
      if (Isprivate != false) hash ^= Isprivate.GetHashCode();
      if (Isstop != false) hash ^= Isstop.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Guid);
      }
      if (Expressionname.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Expressionname);
      }
      if (Looptime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Looptime);
      }
      if (Force != false) {
        output.WriteRawTag(48);
        output.WriteBool(Force);
      }
      if (Isprivate != false) {
        output.WriteRawTag(56);
        output.WriteBool(Isprivate);
      }
      if (Type != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Type);
      }
      if (Isstop != false) {
        output.WriteRawTag(72);
        output.WriteBool(Isstop);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Expressionname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Expressionname);
      }
      if (Looptime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Looptime);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Force != false) {
        size += 1 + 1;
      }
      if (Isprivate != false) {
        size += 1 + 1;
      }
      if (Isstop != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserExpressionNineSyncCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Expressionname.Length != 0) {
        Expressionname = other.Expressionname;
      }
      if (other.Looptime != 0) {
        Looptime = other.Looptime;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Force != false) {
        Force = other.Force;
      }
      if (other.Isprivate != false) {
        Isprivate = other.Isprivate;
      }
      if (other.Isstop != false) {
        Isstop = other.Isstop;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Guid = input.ReadUInt64();
            break;
          }
          case 34: {
            Expressionname = input.ReadString();
            break;
          }
          case 40: {
            Looptime = input.ReadUInt32();
            break;
          }
          case 48: {
            Force = input.ReadBool();
            break;
          }
          case 56: {
            Isprivate = input.ReadBool();
            break;
          }
          case 64: {
            type_ = (global::Cmd.EActionType) input.ReadEnum();
            break;
          }
          case 72: {
            Isstop = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserMouthNineSyncCmd : pb::IMessage<UserMouthNineSyncCmd> {
    private static readonly pb::MessageParser<UserMouthNineSyncCmd> _parser = new pb::MessageParser<UserMouthNineSyncCmd>(() => new UserMouthNineSyncCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserMouthNineSyncCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserMouthNineSyncCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserMouthNineSyncCmd(UserMouthNineSyncCmd other) : this() {
      guid_ = other.guid_;
      idleid_ = other.idleid_;
      mouthaction_ = other.mouthaction_;
      mouthactionend_ = other.mouthactionend_;
      looptime_ = other.looptime_;
      type_ = other.type_;
      force_ = other.force_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserMouthNineSyncCmd Clone() {
      return new UserMouthNineSyncCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    /// <summary>
    ///  npc的唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "idleid" field.</summary>
    public const int IdleidFieldNumber = 2;
    private uint idleid_;
    /// <summary>
    ///  待机动画
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Idleid {
      get { return idleid_; }
      set {
        idleid_ = value;
      }
    }

    /// <summary>Field number for the "mouthaction" field.</summary>
    public const int MouthactionFieldNumber = 3;
    private string mouthaction_ = "";
    /// <summary>
    ///  表情名字,为前端资源名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mouthaction {
      get { return mouthaction_; }
      set {
        mouthaction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mouthactionend" field.</summary>
    public const int MouthactionendFieldNumber = 4;
    private bool mouthactionend_;
    /// <summary>
    /// 用于任务节点回退
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mouthactionend {
      get { return mouthactionend_; }
      set {
        mouthactionend_ = value;
      }
    }

    /// <summary>Field number for the "looptime" field.</summary>
    public const int LooptimeFieldNumber = 5;
    private uint looptime_;
    /// <summary>
    ///  循环次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Looptime {
      get { return looptime_; }
      set {
        looptime_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private global::Cmd.EActionType type_ = 0;
    /// <summary>
    ///  播放类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EActionType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "force" field.</summary>
    public const int ForceFieldNumber = 7;
    private bool force_;
    /// <summary>
    ///  是否强制播放
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Force {
      get { return force_; }
      set {
        force_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserMouthNineSyncCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserMouthNineSyncCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Idleid != other.Idleid) return false;
      if (Mouthaction != other.Mouthaction) return false;
      if (Mouthactionend != other.Mouthactionend) return false;
      if (Looptime != other.Looptime) return false;
      if (Type != other.Type) return false;
      if (Force != other.Force) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Idleid != 0) hash ^= Idleid.GetHashCode();
      if (Mouthaction.Length != 0) hash ^= Mouthaction.GetHashCode();
      if (Mouthactionend != false) hash ^= Mouthactionend.GetHashCode();
      if (Looptime != 0) hash ^= Looptime.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Force != false) hash ^= Force.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (Idleid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Idleid);
      }
      if (Mouthaction.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Mouthaction);
      }
      if (Mouthactionend != false) {
        output.WriteRawTag(32);
        output.WriteBool(Mouthactionend);
      }
      if (Looptime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Looptime);
      }
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Type);
      }
      if (Force != false) {
        output.WriteRawTag(56);
        output.WriteBool(Force);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Idleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Idleid);
      }
      if (Mouthaction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mouthaction);
      }
      if (Mouthactionend != false) {
        size += 1 + 1;
      }
      if (Looptime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Looptime);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Force != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserMouthNineSyncCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Idleid != 0) {
        Idleid = other.Idleid;
      }
      if (other.Mouthaction.Length != 0) {
        Mouthaction = other.Mouthaction;
      }
      if (other.Mouthactionend != false) {
        Mouthactionend = other.Mouthactionend;
      }
      if (other.Looptime != 0) {
        Looptime = other.Looptime;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Force != false) {
        Force = other.Force;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 16: {
            Idleid = input.ReadUInt32();
            break;
          }
          case 26: {
            Mouthaction = input.ReadString();
            break;
          }
          case 32: {
            Mouthactionend = input.ReadBool();
            break;
          }
          case 40: {
            Looptime = input.ReadUInt32();
            break;
          }
          case 48: {
            type_ = (global::Cmd.EActionType) input.ReadEnum();
            break;
          }
          case 56: {
            Force = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  显示表情气泡,S->C
  /// </summary>
  public sealed partial class UserShowBubbleCmd : pb::IMessage<UserShowBubbleCmd> {
    private static readonly pb::MessageParser<UserShowBubbleCmd> _parser = new pb::MessageParser<UserShowBubbleCmd>(() => new UserShowBubbleCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserShowBubbleCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserShowBubbleCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserShowBubbleCmd(UserShowBubbleCmd other) : this() {
      guid_ = other.guid_;
      name_ = other.name_;
      lasttime_ = other.lasttime_;
      force_ = other.force_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserShowBubbleCmd Clone() {
      return new UserShowBubbleCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    /// <summary>
    ///  npc的唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///  气泡资源名,为前端资源名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lasttime" field.</summary>
    public const int LasttimeFieldNumber = 3;
    private uint lasttime_;
    /// <summary>
    ///  持续时间(毫秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lasttime {
      get { return lasttime_; }
      set {
        lasttime_ = value;
      }
    }

    /// <summary>Field number for the "force" field.</summary>
    public const int ForceFieldNumber = 4;
    private bool force_;
    /// <summary>
    ///  是否强制播放
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Force {
      get { return force_; }
      set {
        force_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserShowBubbleCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserShowBubbleCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Name != other.Name) return false;
      if (Lasttime != other.Lasttime) return false;
      if (Force != other.Force) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Lasttime != 0) hash ^= Lasttime.GetHashCode();
      if (Force != false) hash ^= Force.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Lasttime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Lasttime);
      }
      if (Force != false) {
        output.WriteRawTag(32);
        output.WriteBool(Force);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Lasttime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lasttime);
      }
      if (Force != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserShowBubbleCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Lasttime != 0) {
        Lasttime = other.Lasttime;
      }
      if (other.Force != false) {
        Force = other.Force;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Lasttime = input.ReadUInt32();
            break;
          }
          case 32: {
            Force = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  特效同步,S->C
  /// </summary>
  public sealed partial class UserEffectNineSyncCmd : pb::IMessage<UserEffectNineSyncCmd> {
    private static readonly pb::MessageParser<UserEffectNineSyncCmd> _parser = new pb::MessageParser<UserEffectNineSyncCmd>(() => new UserEffectNineSyncCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserEffectNineSyncCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserEffectNineSyncCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserEffectNineSyncCmd(UserEffectNineSyncCmd other) : this() {
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      guid_ = other.guid_;
      name_ = other.name_;
      attachname_ = other.attachname_;
      looptime_ = other.looptime_;
      isstop_ = other.isstop_;
      dir_ = other.dir_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserEffectNineSyncCmd Clone() {
      return new UserEffectNineSyncCmd(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 4;
    private ulong guid_;
    /// <summary>
    ///  npc的唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    /// <summary>
    ///  特效名,为前端资源名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attachname" field.</summary>
    public const int AttachnameFieldNumber = 8;
    private string attachname_ = "";
    /// <summary>
    ///  特效绑定挂点名，为前端挂点名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Attachname {
      get { return attachname_; }
      set {
        attachname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "looptime" field.</summary>
    public const int LooptimeFieldNumber = 6;
    private uint looptime_;
    /// <summary>
    ///  循环次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Looptime {
      get { return looptime_; }
      set {
        looptime_ = value;
      }
    }

    /// <summary>Field number for the "isstop" field.</summary>
    public const int IsstopFieldNumber = 7;
    private bool isstop_;
    /// <summary>
    ///  是否为停止播放
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isstop {
      get { return isstop_; }
      set {
        isstop_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 9;
    private int dir_;
    /// <summary>
    ///  特效方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserEffectNineSyncCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserEffectNineSyncCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Guid != other.Guid) return false;
      if (Name != other.Name) return false;
      if (Attachname != other.Attachname) return false;
      if (Looptime != other.Looptime) return false;
      if (Isstop != other.Isstop) return false;
      if (Dir != other.Dir) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Attachname.Length != 0) hash ^= Attachname.GetHashCode();
      if (Looptime != 0) hash ^= Looptime.GetHashCode();
      if (Isstop != false) hash ^= Isstop.GetHashCode();
      if (Dir != 0) hash ^= Dir.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pos);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Guid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (Looptime != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Looptime);
      }
      if (Isstop != false) {
        output.WriteRawTag(56);
        output.WriteBool(Isstop);
      }
      if (Attachname.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Attachname);
      }
      if (Dir != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Dir);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Attachname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Attachname);
      }
      if (Looptime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Looptime);
      }
      if (Isstop != false) {
        size += 1 + 1;
      }
      if (Dir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dir);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserEffectNineSyncCmd other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Attachname.Length != 0) {
        Attachname = other.Attachname;
      }
      if (other.Looptime != 0) {
        Looptime = other.Looptime;
      }
      if (other.Isstop != false) {
        Isstop = other.Isstop;
      }
      if (other.Dir != 0) {
        Dir = other.Dir;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 32: {
            Guid = input.ReadUInt64();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 48: {
            Looptime = input.ReadUInt32();
            break;
          }
          case 56: {
            Isstop = input.ReadBool();
            break;
          }
          case 66: {
            Attachname = input.ReadString();
            break;
          }
          case 72: {
            Dir = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  声音同步,S->C
  /// </summary>
  public sealed partial class UserSoundNineSyncCmd : pb::IMessage<UserSoundNineSyncCmd> {
    private static readonly pb::MessageParser<UserSoundNineSyncCmd> _parser = new pb::MessageParser<UserSoundNineSyncCmd>(() => new UserSoundNineSyncCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserSoundNineSyncCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSoundNineSyncCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSoundNineSyncCmd(UserSoundNineSyncCmd other) : this() {
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      guid_ = other.guid_;
      name_ = other.name_;
      looptime_ = other.looptime_;
      isstop_ = other.isstop_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSoundNineSyncCmd Clone() {
      return new UserSoundNineSyncCmd(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 4;
    private ulong guid_;
    /// <summary>
    ///  npc的唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    /// <summary>
    ///  资源名,为前端资源名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "looptime" field.</summary>
    public const int LooptimeFieldNumber = 6;
    private uint looptime_;
    /// <summary>
    ///  循环次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Looptime {
      get { return looptime_; }
      set {
        looptime_ = value;
      }
    }

    /// <summary>Field number for the "isstop" field.</summary>
    public const int IsstopFieldNumber = 7;
    private bool isstop_;
    /// <summary>
    ///  是否为停止播放
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isstop {
      get { return isstop_; }
      set {
        isstop_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserSoundNineSyncCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserSoundNineSyncCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Guid != other.Guid) return false;
      if (Name != other.Name) return false;
      if (Looptime != other.Looptime) return false;
      if (Isstop != other.Isstop) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Looptime != 0) hash ^= Looptime.GetHashCode();
      if (Isstop != false) hash ^= Isstop.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pos);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Guid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (Looptime != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Looptime);
      }
      if (Isstop != false) {
        output.WriteRawTag(56);
        output.WriteBool(Isstop);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Looptime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Looptime);
      }
      if (Isstop != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserSoundNineSyncCmd other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Looptime != 0) {
        Looptime = other.Looptime;
      }
      if (other.Isstop != false) {
        Isstop = other.Isstop;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 32: {
            Guid = input.ReadUInt64();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 48: {
            Looptime = input.ReadUInt32();
            break;
          }
          case 56: {
            Isstop = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  通知隐身单位靠近警示,S->C
  /// </summary>
  public sealed partial class NotifyHideCloseUserCmd : pb::IMessage<NotifyHideCloseUserCmd> {
    private static readonly pb::MessageParser<NotifyHideCloseUserCmd> _parser = new pb::MessageParser<NotifyHideCloseUserCmd>(() => new NotifyHideCloseUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyHideCloseUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyHideCloseUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyHideCloseUserCmd(NotifyHideCloseUserCmd other) : this() {
      guid_ = other.guid_;
      closeguids_ = other.closeguids_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyHideCloseUserCmd Clone() {
      return new NotifyHideCloseUserCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 3;
    private ulong guid_;
    /// <summary>
    ///  隐身者唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "closeguids" field.</summary>
    public const int CloseguidsFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_closeguids_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> closeguids_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///  靠近者唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Closeguids {
      get { return closeguids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyHideCloseUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyHideCloseUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if(!closeguids_.Equals(other.closeguids_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      hash ^= closeguids_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Guid);
      }
      closeguids_.WriteTo(output, _repeated_closeguids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      size += closeguids_.CalculateSize(_repeated_closeguids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyHideCloseUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      closeguids_.Add(other.closeguids_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Guid = input.ReadUInt64();
            break;
          }
          case 34:
          case 32: {
            closeguids_.AddEntriesFrom(input, _repeated_closeguids_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  解锁弹窗,S->C
  /// </summary>
  public sealed partial class UnlockingMenuCmd : pb::IMessage<UnlockingMenuCmd> {
    private static readonly pb::MessageParser<UnlockingMenuCmd> _parser = new pb::MessageParser<UnlockingMenuCmd>(() => new UnlockingMenuCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnlockingMenuCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockingMenuCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockingMenuCmd(UnlockingMenuCmd other) : this() {
      menuID_ = other.menuID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockingMenuCmd Clone() {
      return new UnlockingMenuCmd(this);
    }

    /// <summary>Field number for the "menuID" field.</summary>
    public const int MenuIDFieldNumber = 3;
    private uint menuID_;
    /// <summary>
    ///  配置表id,表Menu.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MenuID {
      get { return menuID_; }
      set {
        menuID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnlockingMenuCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnlockingMenuCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MenuID != other.MenuID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MenuID != 0) hash ^= MenuID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MenuID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MenuID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MenuID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MenuID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnlockingMenuCmd other) {
      if (other == null) {
        return;
      }
      if (other.MenuID != 0) {
        MenuID = other.MenuID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            MenuID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  已解锁数据,S->C
  /// </summary>
  public sealed partial class UnlockedMenuDataCmd : pb::IMessage<UnlockedMenuDataCmd> {
    private static readonly pb::MessageParser<UnlockedMenuDataCmd> _parser = new pb::MessageParser<UnlockedMenuDataCmd>(() => new UnlockedMenuDataCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnlockedMenuDataCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockedMenuDataCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockedMenuDataCmd(UnlockedMenuDataCmd other) : this() {
      type_ = other.type_;
      unlockedIDs_ = other.unlockedIDs_.Clone();
      unlockedstrs_ = other.unlockedstrs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockedMenuDataCmd Clone() {
      return new UnlockedMenuDataCmd(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Cmd.EMenuEvent type_ = 0;
    /// <summary>
    ///  解锁类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EMenuEvent Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "unlockedIDs" field.</summary>
    public const int UnlockedIDsFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_unlockedIDs_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> unlockedIDs_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///  解锁的具体id（比如地图id，技能id）,对应不同的表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> UnlockedIDs {
      get { return unlockedIDs_; }
    }

    /// <summary>Field number for the "unlockedstrs" field.</summary>
    public const int UnlockedstrsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_unlockedstrs_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> unlockedstrs_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  解锁的具体string（比如地图重生点）,地编文件中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Unlockedstrs {
      get { return unlockedstrs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnlockedMenuDataCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnlockedMenuDataCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!unlockedIDs_.Equals(other.unlockedIDs_)) return false;
      if(!unlockedstrs_.Equals(other.unlockedstrs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= unlockedIDs_.GetHashCode();
      hash ^= unlockedstrs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      unlockedIDs_.WriteTo(output, _repeated_unlockedIDs_codec);
      unlockedstrs_.WriteTo(output, _repeated_unlockedstrs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += unlockedIDs_.CalculateSize(_repeated_unlockedIDs_codec);
      size += unlockedstrs_.CalculateSize(_repeated_unlockedstrs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnlockedMenuDataCmd other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      unlockedIDs_.Add(other.unlockedIDs_);
      unlockedstrs_.Add(other.unlockedstrs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            type_ = (global::Cmd.EMenuEvent) input.ReadEnum();
            break;
          }
          case 34:
          case 32: {
            unlockedIDs_.AddEntriesFrom(input, _repeated_unlockedIDs_codec);
            break;
          }
          case 42: {
            unlockedstrs_.AddEntriesFrom(input, _repeated_unlockedstrs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  点和点的互动,C->S
  /// </summary>
  public sealed partial class ReqMapLinkUserCmd : pb::IMessage<ReqMapLinkUserCmd> {
    private static readonly pb::MessageParser<ReqMapLinkUserCmd> _parser = new pb::MessageParser<ReqMapLinkUserCmd>(() => new ReqMapLinkUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqMapLinkUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapLinkUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapLinkUserCmd(ReqMapLinkUserCmd other) : this() {
      maplinkid_ = other.maplinkid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapLinkUserCmd Clone() {
      return new ReqMapLinkUserCmd(this);
    }

    /// <summary>Field number for the "maplinkid" field.</summary>
    public const int MaplinkidFieldNumber = 3;
    private uint maplinkid_;
    /// <summary>
    ///  索引id,对应MapData文件夹里面的obj文件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Maplinkid {
      get { return maplinkid_; }
      set {
        maplinkid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqMapLinkUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqMapLinkUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Maplinkid != other.Maplinkid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Maplinkid != 0) hash ^= Maplinkid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Maplinkid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Maplinkid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Maplinkid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Maplinkid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqMapLinkUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Maplinkid != 0) {
        Maplinkid = other.Maplinkid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Maplinkid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  点和点的互动,S->C
  /// </summary>
  public sealed partial class BroadCastMapLinkUserCmd : pb::IMessage<BroadCastMapLinkUserCmd> {
    private static readonly pb::MessageParser<BroadCastMapLinkUserCmd> _parser = new pb::MessageParser<BroadCastMapLinkUserCmd>(() => new BroadCastMapLinkUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BroadCastMapLinkUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadCastMapLinkUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadCastMapLinkUserCmd(BroadCastMapLinkUserCmd other) : this() {
      maplinkid_ = other.maplinkid_;
      guid_ = other.guid_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadCastMapLinkUserCmd Clone() {
      return new BroadCastMapLinkUserCmd(this);
    }

    /// <summary>Field number for the "maplinkid" field.</summary>
    public const int MaplinkidFieldNumber = 3;
    private uint maplinkid_;
    /// <summary>
    ///  索引id,对应MapData文件夹里面的obj文件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Maplinkid {
      get { return maplinkid_; }
      set {
        maplinkid_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 4;
    private ulong guid_;
    /// <summary>
    ///  角色唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 5;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  互动后坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BroadCastMapLinkUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BroadCastMapLinkUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Maplinkid != other.Maplinkid) return false;
      if (Guid != other.Guid) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Maplinkid != 0) hash ^= Maplinkid.GetHashCode();
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Maplinkid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Maplinkid);
      }
      if (Guid != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Guid);
      }
      if (pos_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Maplinkid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Maplinkid);
      }
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BroadCastMapLinkUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Maplinkid != 0) {
        Maplinkid = other.Maplinkid;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Maplinkid = input.ReadUInt32();
            break;
          }
          case 32: {
            Guid = input.ReadUInt64();
            break;
          }
          case 42: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  任务地图跳转,C->S
  /// </summary>
  public sealed partial class GoMapUserCmd : pb::IMessage<GoMapUserCmd> {
    private static readonly pb::MessageParser<GoMapUserCmd> _parser = new pb::MessageParser<GoMapUserCmd>(() => new GoMapUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoMapUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoMapUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoMapUserCmd(GoMapUserCmd other) : this() {
      mapid_ = other.mapid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoMapUserCmd Clone() {
      return new GoMapUserCmd(this);
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 3;
    private uint mapid_;
    /// <summary>
    ///  地图id,表Map.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GoMapUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GoMapUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mapid != other.Mapid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mapid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Mapid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mapid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GoMapUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Mapid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  播放CG, S->C
  /// </summary>
  public sealed partial class PlayCGCmd : pb::IMessage<PlayCGCmd> {
    private static readonly pb::MessageParser<PlayCGCmd> _parser = new pb::MessageParser<PlayCGCmd>(() => new PlayCGCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayCGCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCGCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCGCmd(PlayCGCmd other) : this() {
      cgname_ = other.cgname_;
      cgtype_ = other.cgtype_;
      params_ = other.params_;
      cameramode_ = other.cameramode_;
      fashionnpclist_ = other.fashionnpclist_;
      adaptiveguid_ = other.adaptiveguid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCGCmd Clone() {
      return new PlayCGCmd(this);
    }

    /// <summary>Field number for the "cgname" field.</summary>
    public const int CgnameFieldNumber = 1;
    private string cgname_ = "";
    /// <summary>
    ///  cg名,为前端资源名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cgname {
      get { return cgname_; }
      set {
        cgname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cgtype" field.</summary>
    public const int CgtypeFieldNumber = 2;
    private global::Cmd.ECgType cgtype_ = 0;
    /// <summary>
    ///  cg动画类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ECgType Cgtype {
      get { return cgtype_; }
      set {
        cgtype_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 3;
    private string params_ = "";
    /// <summary>
    /// CG偏移信息，3选1 
    /// location，地点偏移
    /// rotation, 旋转 {x, y, z}
    /// guid，根据guid偏移
    /// npcid，根据npcid偏移（不推荐）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Params {
      get { return params_; }
      set {
        params_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cameramode" field.</summary>
    public const int CameramodeFieldNumber = 4;
    private global::Cmd.ECgCameraMode cameramode_ = 0;
    /// <summary>
    /// 相机过渡模式,目前有黑屏，过渡2种
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ECgCameraMode Cameramode {
      get { return cameramode_; }
      set {
        cameramode_ = value;
      }
    }

    /// <summary>Field number for the "fashionnpclist" field.</summary>
    public const int FashionnpclistFieldNumber = 5;
    private string fashionnpclist_ = "";
    /// <summary>
    /// 装扮npc列表 {[1]=10001,[2]=10002}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fashionnpclist {
      get { return fashionnpclist_; }
      set {
        fashionnpclist_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "adaptiveguid" field.</summary>
    public const int AdaptiveguidFieldNumber = 6;
    private ulong adaptiveguid_;
    /// <summary>
    /// 自适应聚焦角色高度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Adaptiveguid {
      get { return adaptiveguid_; }
      set {
        adaptiveguid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayCGCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayCGCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cgname != other.Cgname) return false;
      if (Cgtype != other.Cgtype) return false;
      if (Params != other.Params) return false;
      if (Cameramode != other.Cameramode) return false;
      if (Fashionnpclist != other.Fashionnpclist) return false;
      if (Adaptiveguid != other.Adaptiveguid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cgname.Length != 0) hash ^= Cgname.GetHashCode();
      if (Cgtype != 0) hash ^= Cgtype.GetHashCode();
      if (Params.Length != 0) hash ^= Params.GetHashCode();
      if (Cameramode != 0) hash ^= Cameramode.GetHashCode();
      if (Fashionnpclist.Length != 0) hash ^= Fashionnpclist.GetHashCode();
      if (Adaptiveguid != 0UL) hash ^= Adaptiveguid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cgname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Cgname);
      }
      if (Cgtype != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Cgtype);
      }
      if (Params.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Params);
      }
      if (Cameramode != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Cameramode);
      }
      if (Fashionnpclist.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Fashionnpclist);
      }
      if (Adaptiveguid != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Adaptiveguid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cgname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cgname);
      }
      if (Cgtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Cgtype);
      }
      if (Params.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Params);
      }
      if (Cameramode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Cameramode);
      }
      if (Fashionnpclist.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fashionnpclist);
      }
      if (Adaptiveguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Adaptiveguid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayCGCmd other) {
      if (other == null) {
        return;
      }
      if (other.Cgname.Length != 0) {
        Cgname = other.Cgname;
      }
      if (other.Cgtype != 0) {
        Cgtype = other.Cgtype;
      }
      if (other.Params.Length != 0) {
        Params = other.Params;
      }
      if (other.Cameramode != 0) {
        Cameramode = other.Cameramode;
      }
      if (other.Fashionnpclist.Length != 0) {
        Fashionnpclist = other.Fashionnpclist;
      }
      if (other.Adaptiveguid != 0UL) {
        Adaptiveguid = other.Adaptiveguid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Cgname = input.ReadString();
            break;
          }
          case 16: {
            cgtype_ = (global::Cmd.ECgType) input.ReadEnum();
            break;
          }
          case 26: {
            Params = input.ReadString();
            break;
          }
          case 32: {
            cameramode_ = (global::Cmd.ECgCameraMode) input.ReadEnum();
            break;
          }
          case 42: {
            Fashionnpclist = input.ReadString();
            break;
          }
          case 48: {
            Adaptiveguid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  S->C 下发学院赠礼数据 
  /// </summary>
  public sealed partial class UserCollegeGiftInfoCmd : pb::IMessage<UserCollegeGiftInfoCmd> {
    private static readonly pb::MessageParser<UserCollegeGiftInfoCmd> _parser = new pb::MessageParser<UserCollegeGiftInfoCmd>(() => new UserCollegeGiftInfoCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserCollegeGiftInfoCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCollegeGiftInfoCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCollegeGiftInfoCmd(UserCollegeGiftInfoCmd other) : this() {
      gifts_ = other.gifts_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCollegeGiftInfoCmd Clone() {
      return new UserCollegeGiftInfoCmd(this);
    }

    /// <summary>Field number for the "gifts" field.</summary>
    public const int GiftsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cmd.CollegeGiftData> _repeated_gifts_codec
        = pb::FieldCodec.ForMessage(10, global::Cmd.CollegeGiftData.Parser);
    private readonly pbc::RepeatedField<global::Cmd.CollegeGiftData> gifts_ = new pbc::RepeatedField<global::Cmd.CollegeGiftData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.CollegeGiftData> Gifts {
      get { return gifts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserCollegeGiftInfoCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserCollegeGiftInfoCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gifts_.Equals(other.gifts_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gifts_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      gifts_.WriteTo(output, _repeated_gifts_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gifts_.CalculateSize(_repeated_gifts_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserCollegeGiftInfoCmd other) {
      if (other == null) {
        return;
      }
      gifts_.Add(other.gifts_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            gifts_.AddEntriesFrom(input, _repeated_gifts_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  C->S 请求领取学院赠礼收益
  /// </summary>
  public sealed partial class UserCollegeGiftReceiveCmd : pb::IMessage<UserCollegeGiftReceiveCmd> {
    private static readonly pb::MessageParser<UserCollegeGiftReceiveCmd> _parser = new pb::MessageParser<UserCollegeGiftReceiveCmd>(() => new UserCollegeGiftReceiveCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserCollegeGiftReceiveCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCollegeGiftReceiveCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCollegeGiftReceiveCmd(UserCollegeGiftReceiveCmd other) : this() {
      giftids_ = other.giftids_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserCollegeGiftReceiveCmd Clone() {
      return new UserCollegeGiftReceiveCmd(this);
    }

    /// <summary>Field number for the "giftids" field.</summary>
    public const int GiftidsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_giftids_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> giftids_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  礼物id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Giftids {
      get { return giftids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserCollegeGiftReceiveCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserCollegeGiftReceiveCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!giftids_.Equals(other.giftids_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= giftids_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      giftids_.WriteTo(output, _repeated_giftids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += giftids_.CalculateSize(_repeated_giftids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserCollegeGiftReceiveCmd other) {
      if (other == null) {
        return;
      }
      giftids_.Add(other.giftids_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            giftids_.AddEntriesFrom(input, _repeated_giftids_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  释放非自己操控伙伴的大招
  /// </summary>
  public sealed partial class UserUseUniqueSkillCmd : pb::IMessage<UserUseUniqueSkillCmd> {
    private static readonly pb::MessageParser<UserUseUniqueSkillCmd> _parser = new pb::MessageParser<UserUseUniqueSkillCmd>(() => new UserUseUniqueSkillCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserUseUniqueSkillCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserUseUniqueSkillCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserUseUniqueSkillCmd(UserUseUniqueSkillCmd other) : this() {
      index_ = other.index_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserUseUniqueSkillCmd Clone() {
      return new UserUseUniqueSkillCmd(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private uint index_;
    /// <summary>
    ///  出战位置(1-4)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserUseUniqueSkillCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserUseUniqueSkillCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserUseUniqueSkillCmd other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  天气变化,S->C
  /// </summary>
  public sealed partial class WeatherChange : pb::IMessage<WeatherChange> {
    private static readonly pb::MessageParser<WeatherChange> _parser = new pb::MessageParser<WeatherChange>(() => new WeatherChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeatherChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherChange(WeatherChange other) : this() {
      id_ = other.id_;
      direction_ = other.direction_;
      strengthcurveid_ = other.strengthcurveid_;
      inquest_ = other.inquest_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeatherChange Clone() {
      return new WeatherChange(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///  天气表id,表Weather.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 2;
    private uint direction_;
    /// <summary>
    ///  天气方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "strengthcurveid" field.</summary>
    public const int StrengthcurveidFieldNumber = 3;
    private uint strengthcurveid_;
    /// <summary>
    ///  天气强度曲线id,前端文件名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Strengthcurveid {
      get { return strengthcurveid_; }
      set {
        strengthcurveid_ = value;
      }
    }

    /// <summary>Field number for the "inquest" field.</summary>
    public const int InquestFieldNumber = 4;
    private bool inquest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Inquest {
      get { return inquest_; }
      set {
        inquest_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeatherChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeatherChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Direction != other.Direction) return false;
      if (Strengthcurveid != other.Strengthcurveid) return false;
      if (Inquest != other.Inquest) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Direction != 0) hash ^= Direction.GetHashCode();
      if (Strengthcurveid != 0) hash ^= Strengthcurveid.GetHashCode();
      if (Inquest != false) hash ^= Inquest.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Direction != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Direction);
      }
      if (Strengthcurveid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Strengthcurveid);
      }
      if (Inquest != false) {
        output.WriteRawTag(32);
        output.WriteBool(Inquest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Direction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Direction);
      }
      if (Strengthcurveid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Strengthcurveid);
      }
      if (Inquest != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeatherChange other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Direction != 0) {
        Direction = other.Direction;
      }
      if (other.Strengthcurveid != 0) {
        Strengthcurveid = other.Strengthcurveid;
      }
      if (other.Inquest != false) {
        Inquest = other.Inquest;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Direction = input.ReadUInt32();
            break;
          }
          case 24: {
            Strengthcurveid = input.ReadUInt32();
            break;
          }
          case 32: {
            Inquest = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  boss登场表演完毕,C->S
  /// </summary>
  public sealed partial class CBossShowUpFinishCmd : pb::IMessage<CBossShowUpFinishCmd> {
    private static readonly pb::MessageParser<CBossShowUpFinishCmd> _parser = new pb::MessageParser<CBossShowUpFinishCmd>(() => new CBossShowUpFinishCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CBossShowUpFinishCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBossShowUpFinishCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBossShowUpFinishCmd(CBossShowUpFinishCmd other) : this() {
      guid_ = other.guid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CBossShowUpFinishCmd Clone() {
      return new CBossShowUpFinishCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    /// <summary>
    ///  npc唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CBossShowUpFinishCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CBossShowUpFinishCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CBossShowUpFinishCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  播放震屏,S->C
  /// </summary>
  public sealed partial class ShakeScreenCmd : pb::IMessage<ShakeScreenCmd> {
    private static readonly pb::MessageParser<ShakeScreenCmd> _parser = new pb::MessageParser<ShakeScreenCmd>(() => new ShakeScreenCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShakeScreenCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShakeScreenCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShakeScreenCmd(ShakeScreenCmd other) : this() {
      curvename_ = other.curvename_;
      scale_ = other.scale_;
      lasttime_ = other.lasttime_;
      isstop_ = other.isstop_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShakeScreenCmd Clone() {
      return new ShakeScreenCmd(this);
    }

    /// <summary>Field number for the "curvename" field.</summary>
    public const int CurvenameFieldNumber = 1;
    private string curvename_ = "";
    /// <summary>
    ///  强度曲线名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Curvename {
      get { return curvename_; }
      set {
        curvename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private float scale_;
    /// <summary>
    ///  震动倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "lasttime" field.</summary>
    public const int LasttimeFieldNumber = 3;
    private uint lasttime_;
    /// <summary>
    ///  持续时间（毫秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lasttime {
      get { return lasttime_; }
      set {
        lasttime_ = value;
      }
    }

    /// <summary>Field number for the "isstop" field.</summary>
    public const int IsstopFieldNumber = 4;
    private bool isstop_;
    /// <summary>
    /// 停止播放震屏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isstop {
      get { return isstop_; }
      set {
        isstop_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShakeScreenCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShakeScreenCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Curvename != other.Curvename) return false;
      if (Scale != other.Scale) return false;
      if (Lasttime != other.Lasttime) return false;
      if (Isstop != other.Isstop) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Curvename.Length != 0) hash ^= Curvename.GetHashCode();
      if (Scale != 0F) hash ^= Scale.GetHashCode();
      if (Lasttime != 0) hash ^= Lasttime.GetHashCode();
      if (Isstop != false) hash ^= Isstop.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Curvename.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Curvename);
      }
      if (Scale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Scale);
      }
      if (Lasttime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Lasttime);
      }
      if (Isstop != false) {
        output.WriteRawTag(32);
        output.WriteBool(Isstop);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Curvename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Curvename);
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (Lasttime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lasttime);
      }
      if (Isstop != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShakeScreenCmd other) {
      if (other == null) {
        return;
      }
      if (other.Curvename.Length != 0) {
        Curvename = other.Curvename;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.Lasttime != 0) {
        Lasttime = other.Lasttime;
      }
      if (other.Isstop != false) {
        Isstop = other.Isstop;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Curvename = input.ReadString();
            break;
          }
          case 21: {
            Scale = input.ReadFloat();
            break;
          }
          case 24: {
            Lasttime = input.ReadUInt32();
            break;
          }
          case 32: {
            Isstop = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  NPC显示头顶文字气泡,S->C
  /// </summary>
  public sealed partial class NpcPlayDialog : pb::IMessage<NpcPlayDialog> {
    private static readonly pb::MessageParser<NpcPlayDialog> _parser = new pb::MessageParser<NpcPlayDialog>(() => new NpcPlayDialog());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcPlayDialog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcPlayDialog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcPlayDialog(NpcPlayDialog other) : this() {
      guid_ = other.guid_;
      id_ = other.id_.Clone();
      lasttime_ = other.lasttime_;
      openrandom_ = other.openrandom_;
      intervaltime_ = other.intervaltime_;
      talkContent_ = other.talkContent_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcPlayDialog Clone() {
      return new NpcPlayDialog(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    /// <summary>
    ///  npc唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_id_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> id_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  文字id,表NpcTalk.xlsx中列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Id {
      get { return id_; }
    }

    /// <summary>Field number for the "lasttime" field.</summary>
    public const int LasttimeFieldNumber = 3;
    private uint lasttime_;
    /// <summary>
    ///  持续时间（毫秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lasttime {
      get { return lasttime_; }
      set {
        lasttime_ = value;
      }
    }

    /// <summary>Field number for the "openrandom" field.</summary>
    public const int OpenrandomFieldNumber = 4;
    private bool openrandom_;
    /// <summary>
    ///  开启随机气泡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Openrandom {
      get { return openrandom_; }
      set {
        openrandom_ = value;
      }
    }

    /// <summary>Field number for the "intervaltime" field.</summary>
    public const int IntervaltimeFieldNumber = 5;
    private uint intervaltime_;
    /// <summary>
    ///  间隔时间（毫秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Intervaltime {
      get { return intervaltime_; }
      set {
        intervaltime_ = value;
      }
    }

    /// <summary>Field number for the "talkContent" field.</summary>
    public const int TalkContentFieldNumber = 6;
    private string talkContent_ = "";
    /// <summary>
    ///  对话文本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TalkContent {
      get { return talkContent_; }
      set {
        talkContent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NpcPlayDialog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NpcPlayDialog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if(!id_.Equals(other.id_)) return false;
      if (Lasttime != other.Lasttime) return false;
      if (Openrandom != other.Openrandom) return false;
      if (Intervaltime != other.Intervaltime) return false;
      if (TalkContent != other.TalkContent) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      hash ^= id_.GetHashCode();
      if (Lasttime != 0) hash ^= Lasttime.GetHashCode();
      if (Openrandom != false) hash ^= Openrandom.GetHashCode();
      if (Intervaltime != 0) hash ^= Intervaltime.GetHashCode();
      if (TalkContent.Length != 0) hash ^= TalkContent.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      id_.WriteTo(output, _repeated_id_codec);
      if (Lasttime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Lasttime);
      }
      if (Openrandom != false) {
        output.WriteRawTag(32);
        output.WriteBool(Openrandom);
      }
      if (Intervaltime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Intervaltime);
      }
      if (TalkContent.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TalkContent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      size += id_.CalculateSize(_repeated_id_codec);
      if (Lasttime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lasttime);
      }
      if (Openrandom != false) {
        size += 1 + 1;
      }
      if (Intervaltime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Intervaltime);
      }
      if (TalkContent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TalkContent);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NpcPlayDialog other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      id_.Add(other.id_);
      if (other.Lasttime != 0) {
        Lasttime = other.Lasttime;
      }
      if (other.Openrandom != false) {
        Openrandom = other.Openrandom;
      }
      if (other.Intervaltime != 0) {
        Intervaltime = other.Intervaltime;
      }
      if (other.TalkContent.Length != 0) {
        TalkContent = other.TalkContent;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 18:
          case 16: {
            id_.AddEntriesFrom(input, _repeated_id_codec);
            break;
          }
          case 24: {
            Lasttime = input.ReadUInt32();
            break;
          }
          case 32: {
            Openrandom = input.ReadBool();
            break;
          }
          case 40: {
            Intervaltime = input.ReadUInt32();
            break;
          }
          case 50: {
            TalkContent = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 与场景单位的交互操作类型
  /// </summary>
  public sealed partial class InteractionWithEntryCmd : pb::IMessage<InteractionWithEntryCmd> {
    private static readonly pb::MessageParser<InteractionWithEntryCmd> _parser = new pb::MessageParser<InteractionWithEntryCmd>(() => new InteractionWithEntryCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionWithEntryCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionWithEntryCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionWithEntryCmd(InteractionWithEntryCmd other) : this() {
      guid_ = other.guid_;
      beguid_ = other.beguid_;
      entrytype_ = other.entrytype_;
      opertype_ = other.opertype_;
      tgtid_ = other.tgtid_;
      Tgtpos = other.tgtpos_ != null ? other.Tgtpos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionWithEntryCmd Clone() {
      return new InteractionWithEntryCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    /// <summary>
    /// 交互者id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "beguid" field.</summary>
    public const int BeguidFieldNumber = 2;
    private ulong beguid_;
    /// <summary>
    /// 被交互者id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Beguid {
      get { return beguid_; }
      set {
        beguid_ = value;
      }
    }

    /// <summary>Field number for the "entrytype" field.</summary>
    public const int EntrytypeFieldNumber = 3;
    private uint entrytype_;
    /// <summary>
    /// 被交互者类型 1-npc 2-interactive entry
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Entrytype {
      get { return entrytype_; }
      set {
        entrytype_ = value;
      }
    }

    /// <summary>Field number for the "opertype" field.</summary>
    public const int OpertypeFieldNumber = 4;
    private global::Cmd.EInteractiveOperType opertype_ = 0;
    /// <summary>
    /// 交互类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EInteractiveOperType Opertype {
      get { return opertype_; }
      set {
        opertype_ = value;
      }
    }

    /// <summary>Field number for the "tgtid" field.</summary>
    public const int TgtidFieldNumber = 5;
    private ulong tgtid_;
    /// <summary>
    /// 需要施法的目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Tgtid {
      get { return tgtid_; }
      set {
        tgtid_ = value;
      }
    }

    /// <summary>Field number for the "tgtpos" field.</summary>
    public const int TgtposFieldNumber = 6;
    private global::Cmd.ScenePos tgtpos_;
    /// <summary>
    /// 需要施法的目标点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Tgtpos {
      get { return tgtpos_; }
      set {
        tgtpos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionWithEntryCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionWithEntryCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Beguid != other.Beguid) return false;
      if (Entrytype != other.Entrytype) return false;
      if (Opertype != other.Opertype) return false;
      if (Tgtid != other.Tgtid) return false;
      if (!object.Equals(Tgtpos, other.Tgtpos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Beguid != 0UL) hash ^= Beguid.GetHashCode();
      if (Entrytype != 0) hash ^= Entrytype.GetHashCode();
      if (Opertype != 0) hash ^= Opertype.GetHashCode();
      if (Tgtid != 0UL) hash ^= Tgtid.GetHashCode();
      if (tgtpos_ != null) hash ^= Tgtpos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (Beguid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Beguid);
      }
      if (Entrytype != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Entrytype);
      }
      if (Opertype != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Opertype);
      }
      if (Tgtid != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Tgtid);
      }
      if (tgtpos_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Tgtpos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Beguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Beguid);
      }
      if (Entrytype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Entrytype);
      }
      if (Opertype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Opertype);
      }
      if (Tgtid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Tgtid);
      }
      if (tgtpos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tgtpos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionWithEntryCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Beguid != 0UL) {
        Beguid = other.Beguid;
      }
      if (other.Entrytype != 0) {
        Entrytype = other.Entrytype;
      }
      if (other.Opertype != 0) {
        Opertype = other.Opertype;
      }
      if (other.Tgtid != 0UL) {
        Tgtid = other.Tgtid;
      }
      if (other.tgtpos_ != null) {
        if (tgtpos_ == null) {
          tgtpos_ = new global::Cmd.ScenePos();
        }
        Tgtpos.MergeFrom(other.Tgtpos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 16: {
            Beguid = input.ReadUInt64();
            break;
          }
          case 24: {
            Entrytype = input.ReadUInt32();
            break;
          }
          case 32: {
            opertype_ = (global::Cmd.EInteractiveOperType) input.ReadEnum();
            break;
          }
          case 40: {
            Tgtid = input.ReadUInt64();
            break;
          }
          case 50: {
            if (tgtpos_ == null) {
              tgtpos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(tgtpos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// new 与场景单位的交互操作类型
  /// </summary>
  public sealed partial class InteractionCmd : pb::IMessage<InteractionCmd> {
    private static readonly pb::MessageParser<InteractionCmd> _parser = new pb::MessageParser<InteractionCmd>(() => new InteractionCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionCmd(InteractionCmd other) : this() {
      guid_ = other.guid_;
      beguid_ = other.beguid_;
      socketid_ = other.socketid_;
      opertype_ = other.opertype_;
      tgtid_ = other.tgtid_;
      Tgtpos = other.tgtpos_ != null ? other.Tgtpos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionCmd Clone() {
      return new InteractionCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    /// <summary>
    /// 交互者id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "beguid" field.</summary>
    public const int BeguidFieldNumber = 2;
    private ulong beguid_;
    /// <summary>
    /// 被交互者id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Beguid {
      get { return beguid_; }
      set {
        beguid_ = value;
      }
    }

    /// <summary>Field number for the "socketid" field.</summary>
    public const int SocketidFieldNumber = 3;
    private uint socketid_;
    /// <summary>
    /// 被交互者位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Socketid {
      get { return socketid_; }
      set {
        socketid_ = value;
      }
    }

    /// <summary>Field number for the "opertype" field.</summary>
    public const int OpertypeFieldNumber = 4;
    private string opertype_ = "";
    /// <summary>
    /// 交互类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Opertype {
      get { return opertype_; }
      set {
        opertype_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tgtid" field.</summary>
    public const int TgtidFieldNumber = 5;
    private ulong tgtid_;
    /// <summary>
    /// 需要施法的目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Tgtid {
      get { return tgtid_; }
      set {
        tgtid_ = value;
      }
    }

    /// <summary>Field number for the "tgtpos" field.</summary>
    public const int TgtposFieldNumber = 6;
    private global::Cmd.ScenePos tgtpos_;
    /// <summary>
    /// 需要施法的目标点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Tgtpos {
      get { return tgtpos_; }
      set {
        tgtpos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Beguid != other.Beguid) return false;
      if (Socketid != other.Socketid) return false;
      if (Opertype != other.Opertype) return false;
      if (Tgtid != other.Tgtid) return false;
      if (!object.Equals(Tgtpos, other.Tgtpos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Beguid != 0UL) hash ^= Beguid.GetHashCode();
      if (Socketid != 0) hash ^= Socketid.GetHashCode();
      if (Opertype.Length != 0) hash ^= Opertype.GetHashCode();
      if (Tgtid != 0UL) hash ^= Tgtid.GetHashCode();
      if (tgtpos_ != null) hash ^= Tgtpos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (Beguid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Beguid);
      }
      if (Socketid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Socketid);
      }
      if (Opertype.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Opertype);
      }
      if (Tgtid != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Tgtid);
      }
      if (tgtpos_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Tgtpos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Beguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Beguid);
      }
      if (Socketid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Socketid);
      }
      if (Opertype.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Opertype);
      }
      if (Tgtid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Tgtid);
      }
      if (tgtpos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tgtpos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Beguid != 0UL) {
        Beguid = other.Beguid;
      }
      if (other.Socketid != 0) {
        Socketid = other.Socketid;
      }
      if (other.Opertype.Length != 0) {
        Opertype = other.Opertype;
      }
      if (other.Tgtid != 0UL) {
        Tgtid = other.Tgtid;
      }
      if (other.tgtpos_ != null) {
        if (tgtpos_ == null) {
          tgtpos_ = new global::Cmd.ScenePos();
        }
        Tgtpos.MergeFrom(other.Tgtpos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 16: {
            Beguid = input.ReadUInt64();
            break;
          }
          case 24: {
            Socketid = input.ReadUInt32();
            break;
          }
          case 34: {
            Opertype = input.ReadString();
            break;
          }
          case 40: {
            Tgtid = input.ReadUInt64();
            break;
          }
          case 50: {
            if (tgtpos_ == null) {
              tgtpos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(tgtpos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  交互S->C
  /// </summary>
  public sealed partial class InteractionResultCmd : pb::IMessage<InteractionResultCmd> {
    private static readonly pb::MessageParser<InteractionResultCmd> _parser = new pb::MessageParser<InteractionResultCmd>(() => new InteractionResultCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionResultCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionResultCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionResultCmd(InteractionResultCmd other) : this() {
      guid_ = other.guid_;
      beguid_ = other.beguid_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionResultCmd Clone() {
      return new InteractionResultCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "beguid" field.</summary>
    public const int BeguidFieldNumber = 2;
    private ulong beguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Beguid {
      get { return beguid_; }
      set {
        beguid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionResultCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionResultCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Beguid != other.Beguid) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Beguid != 0UL) hash ^= Beguid.GetHashCode();
      if (Result != false) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (Beguid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Beguid);
      }
      if (Result != false) {
        output.WriteRawTag(24);
        output.WriteBool(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Beguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Beguid);
      }
      if (Result != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionResultCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Beguid != 0UL) {
        Beguid = other.Beguid;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 16: {
            Beguid = input.ReadUInt64();
            break;
          }
          case 24: {
            Result = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  拾取C->S
  /// </summary>
  public sealed partial class PickUpCmd : pb::IMessage<PickUpCmd> {
    private static readonly pb::MessageParser<PickUpCmd> _parser = new pb::MessageParser<PickUpCmd>(() => new PickUpCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PickUpCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickUpCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickUpCmd(PickUpCmd other) : this() {
      guid_ = other.guid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickUpCmd Clone() {
      return new PickUpCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    /// <summary>
    ///  操作对象
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PickUpCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PickUpCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PickUpCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  拾取S->C
  /// </summary>
  public sealed partial class PickUpResultCmd : pb::IMessage<PickUpResultCmd> {
    private static readonly pb::MessageParser<PickUpResultCmd> _parser = new pb::MessageParser<PickUpResultCmd>(() => new PickUpResultCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PickUpResultCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickUpResultCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickUpResultCmd(PickUpResultCmd other) : this() {
      guid_ = other.guid_;
      beguid_ = other.beguid_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickUpResultCmd Clone() {
      return new PickUpResultCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "beguid" field.</summary>
    public const int BeguidFieldNumber = 2;
    private ulong beguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Beguid {
      get { return beguid_; }
      set {
        beguid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PickUpResultCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PickUpResultCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Beguid != other.Beguid) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Beguid != 0UL) hash ^= Beguid.GetHashCode();
      if (Result != false) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (Beguid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Beguid);
      }
      if (Result != false) {
        output.WriteRawTag(24);
        output.WriteBool(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Beguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Beguid);
      }
      if (Result != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PickUpResultCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Beguid != 0UL) {
        Beguid = other.Beguid;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 16: {
            Beguid = input.ReadUInt64();
            break;
          }
          case 24: {
            Result = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  放下C->S
  /// </summary>
  public sealed partial class PutDownCmd : pb::IMessage<PutDownCmd> {
    private static readonly pb::MessageParser<PutDownCmd> _parser = new pb::MessageParser<PutDownCmd>(() => new PutDownCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PutDownCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutDownCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutDownCmd(PutDownCmd other) : this() {
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutDownCmd Clone() {
      return new PutDownCmd(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::Cmd.ScenePos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PutDownCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PutDownCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PutDownCmd other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  放下S->C
  /// </summary>
  public sealed partial class PutDownResultCmd : pb::IMessage<PutDownResultCmd> {
    private static readonly pb::MessageParser<PutDownResultCmd> _parser = new pb::MessageParser<PutDownResultCmd>(() => new PutDownResultCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PutDownResultCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutDownResultCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutDownResultCmd(PutDownResultCmd other) : this() {
      guid_ = other.guid_;
      beguid_ = other.beguid_;
      result_ = other.result_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutDownResultCmd Clone() {
      return new PutDownResultCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "beguid" field.</summary>
    public const int BeguidFieldNumber = 2;
    private ulong beguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Beguid {
      get { return beguid_; }
      set {
        beguid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 4;
    private global::Cmd.ScenePos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PutDownResultCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PutDownResultCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Beguid != other.Beguid) return false;
      if (Result != other.Result) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Beguid != 0UL) hash ^= Beguid.GetHashCode();
      if (Result != false) hash ^= Result.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (Beguid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Beguid);
      }
      if (Result != false) {
        output.WriteRawTag(24);
        output.WriteBool(Result);
      }
      if (pos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Beguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Beguid);
      }
      if (Result != false) {
        size += 1 + 1;
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PutDownResultCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Beguid != 0UL) {
        Beguid = other.Beguid;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 16: {
            Beguid = input.ReadUInt64();
            break;
          }
          case 24: {
            Result = input.ReadBool();
            break;
          }
          case 34: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  扔C->S
  ///  Client Send a calculated ScenePos to Server, 
  ///  so, Server only need to verify the ScenePos
  /// </summary>
  public sealed partial class ThrowCmd : pb::IMessage<ThrowCmd> {
    private static readonly pb::MessageParser<ThrowCmd> _parser = new pb::MessageParser<ThrowCmd>(() => new ThrowCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ThrowCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrowCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrowCmd(ThrowCmd other) : this() {
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrowCmd Clone() {
      return new ThrowCmd(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::Cmd.ScenePos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ThrowCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ThrowCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ThrowCmd other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  扔S->C
  /// </summary>
  public sealed partial class ThrowResultCmd : pb::IMessage<ThrowResultCmd> {
    private static readonly pb::MessageParser<ThrowResultCmd> _parser = new pb::MessageParser<ThrowResultCmd>(() => new ThrowResultCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ThrowResultCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrowResultCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrowResultCmd(ThrowResultCmd other) : this() {
      guid_ = other.guid_;
      beguid_ = other.beguid_;
      result_ = other.result_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrowResultCmd Clone() {
      return new ThrowResultCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "beguid" field.</summary>
    public const int BeguidFieldNumber = 2;
    private ulong beguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Beguid {
      get { return beguid_; }
      set {
        beguid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 4;
    private global::Cmd.ScenePos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ThrowResultCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ThrowResultCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Beguid != other.Beguid) return false;
      if (Result != other.Result) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Beguid != 0UL) hash ^= Beguid.GetHashCode();
      if (Result != false) hash ^= Result.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (Beguid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Beguid);
      }
      if (Result != false) {
        output.WriteRawTag(24);
        output.WriteBool(Result);
      }
      if (pos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Beguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Beguid);
      }
      if (Result != false) {
        size += 1 + 1;
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ThrowResultCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Beguid != 0UL) {
        Beguid = other.Beguid;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 16: {
            Beguid = input.ReadUInt64();
            break;
          }
          case 24: {
            Result = input.ReadBool();
            break;
          }
          case 34: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  弹射C->S
  /// </summary>
  public sealed partial class CatapultCmd : pb::IMessage<CatapultCmd> {
    private static readonly pb::MessageParser<CatapultCmd> _parser = new pb::MessageParser<CatapultCmd>(() => new CatapultCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CatapultCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatapultCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatapultCmd(CatapultCmd other) : this() {
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatapultCmd Clone() {
      return new CatapultCmd(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::Cmd.ScenePos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CatapultCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CatapultCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CatapultCmd other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  弹射S->C
  /// </summary>
  public sealed partial class CatapultResultCmd : pb::IMessage<CatapultResultCmd> {
    private static readonly pb::MessageParser<CatapultResultCmd> _parser = new pb::MessageParser<CatapultResultCmd>(() => new CatapultResultCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CatapultResultCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatapultResultCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatapultResultCmd(CatapultResultCmd other) : this() {
      guid_ = other.guid_;
      beguid_ = other.beguid_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CatapultResultCmd Clone() {
      return new CatapultResultCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "beguid" field.</summary>
    public const int BeguidFieldNumber = 2;
    private ulong beguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Beguid {
      get { return beguid_; }
      set {
        beguid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CatapultResultCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CatapultResultCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Beguid != other.Beguid) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Beguid != 0UL) hash ^= Beguid.GetHashCode();
      if (Result != false) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (Beguid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Beguid);
      }
      if (Result != false) {
        output.WriteRawTag(24);
        output.WriteBool(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Beguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Beguid);
      }
      if (Result != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CatapultResultCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Beguid != 0UL) {
        Beguid = other.Beguid;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 16: {
            Beguid = input.ReadUInt64();
            break;
          }
          case 24: {
            Result = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  上载具C->S
  /// </summary>
  public sealed partial class OnVehicleCmd : pb::IMessage<OnVehicleCmd> {
    private static readonly pb::MessageParser<OnVehicleCmd> _parser = new pb::MessageParser<OnVehicleCmd>(() => new OnVehicleCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OnVehicleCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnVehicleCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnVehicleCmd(OnVehicleCmd other) : this() {
      beguid_ = other.beguid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnVehicleCmd Clone() {
      return new OnVehicleCmd(this);
    }

    /// <summary>Field number for the "beguid" field.</summary>
    public const int BeguidFieldNumber = 1;
    private ulong beguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Beguid {
      get { return beguid_; }
      set {
        beguid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OnVehicleCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OnVehicleCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Beguid != other.Beguid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Beguid != 0UL) hash ^= Beguid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Beguid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Beguid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Beguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Beguid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OnVehicleCmd other) {
      if (other == null) {
        return;
      }
      if (other.Beguid != 0UL) {
        Beguid = other.Beguid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Beguid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  上载具S->C
  /// </summary>
  public sealed partial class OnVehicleResultCmd : pb::IMessage<OnVehicleResultCmd> {
    private static readonly pb::MessageParser<OnVehicleResultCmd> _parser = new pb::MessageParser<OnVehicleResultCmd>(() => new OnVehicleResultCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OnVehicleResultCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnVehicleResultCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnVehicleResultCmd(OnVehicleResultCmd other) : this() {
      guid_ = other.guid_;
      beguid_ = other.beguid_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnVehicleResultCmd Clone() {
      return new OnVehicleResultCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "beguid" field.</summary>
    public const int BeguidFieldNumber = 2;
    private ulong beguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Beguid {
      get { return beguid_; }
      set {
        beguid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OnVehicleResultCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OnVehicleResultCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Beguid != other.Beguid) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Beguid != 0UL) hash ^= Beguid.GetHashCode();
      if (Result != false) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (Beguid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Beguid);
      }
      if (Result != false) {
        output.WriteRawTag(24);
        output.WriteBool(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Beguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Beguid);
      }
      if (Result != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OnVehicleResultCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Beguid != 0UL) {
        Beguid = other.Beguid;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 16: {
            Beguid = input.ReadUInt64();
            break;
          }
          case 24: {
            Result = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  下载具C->S
  /// </summary>
  public sealed partial class OffVehicleCmd : pb::IMessage<OffVehicleCmd> {
    private static readonly pb::MessageParser<OffVehicleCmd> _parser = new pb::MessageParser<OffVehicleCmd>(() => new OffVehicleCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OffVehicleCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OffVehicleCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OffVehicleCmd(OffVehicleCmd other) : this() {
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OffVehicleCmd Clone() {
      return new OffVehicleCmd(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::Cmd.ScenePos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OffVehicleCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OffVehicleCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OffVehicleCmd other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  下载具S->C
  /// </summary>
  public sealed partial class OffVehicleResultCmd : pb::IMessage<OffVehicleResultCmd> {
    private static readonly pb::MessageParser<OffVehicleResultCmd> _parser = new pb::MessageParser<OffVehicleResultCmd>(() => new OffVehicleResultCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OffVehicleResultCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OffVehicleResultCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OffVehicleResultCmd(OffVehicleResultCmd other) : this() {
      guid_ = other.guid_;
      beguid_ = other.beguid_;
      result_ = other.result_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OffVehicleResultCmd Clone() {
      return new OffVehicleResultCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "beguid" field.</summary>
    public const int BeguidFieldNumber = 2;
    private ulong beguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Beguid {
      get { return beguid_; }
      set {
        beguid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 4;
    private global::Cmd.ScenePos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OffVehicleResultCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OffVehicleResultCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Beguid != other.Beguid) return false;
      if (Result != other.Result) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Beguid != 0UL) hash ^= Beguid.GetHashCode();
      if (Result != false) hash ^= Result.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (Beguid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Beguid);
      }
      if (Result != false) {
        output.WriteRawTag(24);
        output.WriteBool(Result);
      }
      if (pos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Beguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Beguid);
      }
      if (Result != false) {
        size += 1 + 1;
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OffVehicleResultCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Beguid != 0UL) {
        Beguid = other.Beguid;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 16: {
            Beguid = input.ReadUInt64();
            break;
          }
          case 24: {
            Result = input.ReadBool();
            break;
          }
          case 34: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  交互主动触发任务事件
  /// </summary>
  public sealed partial class InteractionEventCmd : pb::IMessage<InteractionEventCmd> {
    private static readonly pb::MessageParser<InteractionEventCmd> _parser = new pb::MessageParser<InteractionEventCmd>(() => new InteractionEventCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionEventCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionEventCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionEventCmd(InteractionEventCmd other) : this() {
      beguid_ = other.beguid_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionEventCmd Clone() {
      return new InteractionEventCmd(this);
    }

    /// <summary>Field number for the "beguid" field.</summary>
    public const int BeguidFieldNumber = 1;
    private ulong beguid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Beguid {
      get { return beguid_; }
      set {
        beguid_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Cmd.EInteractionType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EInteractionType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionEventCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionEventCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Beguid != other.Beguid) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Beguid != 0UL) hash ^= Beguid.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Beguid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Beguid);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Beguid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Beguid);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionEventCmd other) {
      if (other == null) {
        return;
      }
      if (other.Beguid != 0UL) {
        Beguid = other.Beguid;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Beguid = input.ReadUInt64();
            break;
          }
          case 16: {
            type_ = (global::Cmd.EInteractionType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Client -> Gateway
  /// </summary>
  public sealed partial class ChatMsgClientToGateCmd : pb::IMessage<ChatMsgClientToGateCmd> {
    private static readonly pb::MessageParser<ChatMsgClientToGateCmd> _parser = new pb::MessageParser<ChatMsgClientToGateCmd>(() => new ChatMsgClientToGateCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatMsgClientToGateCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMsgClientToGateCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMsgClientToGateCmd(ChatMsgClientToGateCmd other) : this() {
      content_ = other.content_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMsgClientToGateCmd Clone() {
      return new ChatMsgClientToGateCmd(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private pb::ByteString content_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatMsgClientToGateCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatMsgClientToGateCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatMsgClientToGateCmd other) {
      if (other == null) {
        return;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Content = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Gateway -> Client
  /// </summary>
  public sealed partial class ChatMsgGateToClientCmd : pb::IMessage<ChatMsgGateToClientCmd> {
    private static readonly pb::MessageParser<ChatMsgGateToClientCmd> _parser = new pb::MessageParser<ChatMsgGateToClientCmd>(() => new ChatMsgGateToClientCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatMsgGateToClientCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMsgGateToClientCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMsgGateToClientCmd(ChatMsgGateToClientCmd other) : this() {
      content_ = other.content_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMsgGateToClientCmd Clone() {
      return new ChatMsgGateToClientCmd(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private pb::ByteString content_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatMsgGateToClientCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatMsgGateToClientCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatMsgGateToClientCmd other) {
      if (other == null) {
        return;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Content = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  小地图信息,S->C
  /// </summary>
  public sealed partial class MiniMapsInfoCmd : pb::IMessage<MiniMapsInfoCmd> {
    private static readonly pb::MessageParser<MiniMapsInfoCmd> _parser = new pb::MessageParser<MiniMapsInfoCmd>(() => new MiniMapsInfoCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MiniMapsInfoCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniMapsInfoCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniMapsInfoCmd(MiniMapsInfoCmd other) : this() {
      minimapinfo_ = other.minimapinfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MiniMapsInfoCmd Clone() {
      return new MiniMapsInfoCmd(this);
    }

    /// <summary>Field number for the "minimapinfo" field.</summary>
    public const int MinimapinfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cmd.MiniMapsInfoCmd.Types.OneMiniMapInfo> _repeated_minimapinfo_codec
        = pb::FieldCodec.ForMessage(10, global::Cmd.MiniMapsInfoCmd.Types.OneMiniMapInfo.Parser);
    private readonly pbc::RepeatedField<global::Cmd.MiniMapsInfoCmd.Types.OneMiniMapInfo> minimapinfo_ = new pbc::RepeatedField<global::Cmd.MiniMapsInfoCmd.Types.OneMiniMapInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.MiniMapsInfoCmd.Types.OneMiniMapInfo> Minimapinfo {
      get { return minimapinfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MiniMapsInfoCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MiniMapsInfoCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!minimapinfo_.Equals(other.minimapinfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= minimapinfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      minimapinfo_.WriteTo(output, _repeated_minimapinfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += minimapinfo_.CalculateSize(_repeated_minimapinfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MiniMapsInfoCmd other) {
      if (other == null) {
        return;
      }
      minimapinfo_.Add(other.minimapinfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            minimapinfo_.AddEntriesFrom(input, _repeated_minimapinfo_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MiniMapsInfoCmd message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class OneMiniMapInfo : pb::IMessage<OneMiniMapInfo> {
        private static readonly pb::MessageParser<OneMiniMapInfo> _parser = new pb::MessageParser<OneMiniMapInfo>(() => new OneMiniMapInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OneMiniMapInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Cmd.MiniMapsInfoCmd.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OneMiniMapInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OneMiniMapInfo(OneMiniMapInfo other) : this() {
          mapid_ = other.mapid_;
          npcicons_ = other.npcicons_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OneMiniMapInfo Clone() {
          return new OneMiniMapInfo(this);
        }

        /// <summary>Field number for the "mapid" field.</summary>
        public const int MapidFieldNumber = 1;
        private uint mapid_;
        /// <summary>
        ///  地图id,表Npc.xlsx列ID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Mapid {
          get { return mapid_; }
          set {
            mapid_ = value;
          }
        }

        /// <summary>Field number for the "npcicons" field.</summary>
        public const int NpciconsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Cmd.NpcIcon> _repeated_npcicons_codec
            = pb::FieldCodec.ForMessage(18, global::Cmd.NpcIcon.Parser);
        private readonly pbc::RepeatedField<global::Cmd.NpcIcon> npcicons_ = new pbc::RepeatedField<global::Cmd.NpcIcon>();
        /// <summary>
        ///  地编中配置的小地图图标
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Cmd.NpcIcon> Npcicons {
          get { return npcicons_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as OneMiniMapInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OneMiniMapInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Mapid != other.Mapid) return false;
          if(!npcicons_.Equals(other.npcicons_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Mapid != 0) hash ^= Mapid.GetHashCode();
          hash ^= npcicons_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Mapid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Mapid);
          }
          npcicons_.WriteTo(output, _repeated_npcicons_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Mapid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mapid);
          }
          size += npcicons_.CalculateSize(_repeated_npcicons_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OneMiniMapInfo other) {
          if (other == null) {
            return;
          }
          if (other.Mapid != 0) {
            Mapid = other.Mapid;
          }
          npcicons_.Add(other.npcicons_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Mapid = input.ReadUInt32();
                break;
              }
              case 18: {
                npcicons_.AddEntriesFrom(input, _repeated_npcicons_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 抽卡,C->S
  /// </summary>
  public sealed partial class LotteryCmd : pb::IMessage<LotteryCmd> {
    private static readonly pb::MessageParser<LotteryCmd> _parser = new pb::MessageParser<LotteryCmd>(() => new LotteryCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LotteryCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LotteryCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LotteryCmd(LotteryCmd other) : this() {
      type_ = other.type_;
      times_ = other.times_;
      batchid_ = other.batchid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LotteryCmd Clone() {
      return new LotteryCmd(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///  抽卡类型  LotteryType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 2;
    private uint times_;
    /// <summary>
    ///  抽卡次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    /// <summary>Field number for the "batchid" field.</summary>
    public const int BatchidFieldNumber = 3;
    private uint batchid_;
    /// <summary>
    ///  批次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Batchid {
      get { return batchid_; }
      set {
        batchid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LotteryCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LotteryCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Times != other.Times) return false;
      if (Batchid != other.Batchid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Times != 0) hash ^= Times.GetHashCode();
      if (Batchid != 0) hash ^= Batchid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (Times != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Times);
      }
      if (Batchid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Batchid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Times);
      }
      if (Batchid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Batchid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LotteryCmd other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Times != 0) {
        Times = other.Times;
      }
      if (other.Batchid != 0) {
        Batchid = other.Batchid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            Times = input.ReadUInt32();
            break;
          }
          case 24: {
            Batchid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 发送抽卡结果, S->C
  /// </summary>
  public sealed partial class SendLotteryResultCmd : pb::IMessage<SendLotteryResultCmd> {
    private static readonly pb::MessageParser<SendLotteryResultCmd> _parser = new pb::MessageParser<SendLotteryResultCmd>(() => new SendLotteryResultCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendLotteryResultCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendLotteryResultCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendLotteryResultCmd(SendLotteryResultCmd other) : this() {
      lotteryresults_ = other.lotteryresults_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendLotteryResultCmd Clone() {
      return new SendLotteryResultCmd(this);
    }

    /// <summary>Field number for the "lotteryresults" field.</summary>
    public const int LotteryresultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cmd.SendLotteryResultCmd.Types.LotteryResult> _repeated_lotteryresults_codec
        = pb::FieldCodec.ForMessage(10, global::Cmd.SendLotteryResultCmd.Types.LotteryResult.Parser);
    private readonly pbc::RepeatedField<global::Cmd.SendLotteryResultCmd.Types.LotteryResult> lotteryresults_ = new pbc::RepeatedField<global::Cmd.SendLotteryResultCmd.Types.LotteryResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.SendLotteryResultCmd.Types.LotteryResult> Lotteryresults {
      get { return lotteryresults_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendLotteryResultCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendLotteryResultCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lotteryresults_.Equals(other.lotteryresults_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= lotteryresults_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      lotteryresults_.WriteTo(output, _repeated_lotteryresults_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += lotteryresults_.CalculateSize(_repeated_lotteryresults_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendLotteryResultCmd other) {
      if (other == null) {
        return;
      }
      lotteryresults_.Add(other.lotteryresults_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            lotteryresults_.AddEntriesFrom(input, _repeated_lotteryresults_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SendLotteryResultCmd message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class LotteryResult : pb::IMessage<LotteryResult> {
        private static readonly pb::MessageParser<LotteryResult> _parser = new pb::MessageParser<LotteryResult>(() => new LotteryResult());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LotteryResult> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Cmd.SendLotteryResultCmd.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LotteryResult() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LotteryResult(LotteryResult other) : this() {
          itemid_ = other.itemid_;
          itemcount_ = other.itemcount_;
          type_ = other.type_;
          brandnew_ = other.brandnew_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LotteryResult Clone() {
          return new LotteryResult(this);
        }

        /// <summary>Field number for the "itemid" field.</summary>
        public const int ItemidFieldNumber = 1;
        private uint itemid_;
        /// <summary>
        ///  道具ID或者角色ID   Lottery表
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Itemid {
          get { return itemid_; }
          set {
            itemid_ = value;
          }
        }

        /// <summary>Field number for the "itemcount" field.</summary>
        public const int ItemcountFieldNumber = 2;
        private uint itemcount_;
        /// <summary>
        ///  道具数量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Itemcount {
          get { return itemcount_; }
          set {
            itemcount_ = value;
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 3;
        private uint type_;
        /// <summary>
        ///  道具类型	   1:道具  2:伙伴
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "brandnew" field.</summary>
        public const int BrandnewFieldNumber = 4;
        private uint brandnew_;
        /// <summary>
        ///  新卡展示    0:新卡  非0:碎片
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Brandnew {
          get { return brandnew_; }
          set {
            brandnew_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LotteryResult);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LotteryResult other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Itemid != other.Itemid) return false;
          if (Itemcount != other.Itemcount) return false;
          if (Type != other.Type) return false;
          if (Brandnew != other.Brandnew) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Itemid != 0) hash ^= Itemid.GetHashCode();
          if (Itemcount != 0) hash ^= Itemcount.GetHashCode();
          if (Type != 0) hash ^= Type.GetHashCode();
          if (Brandnew != 0) hash ^= Brandnew.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Itemid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Itemid);
          }
          if (Itemcount != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Itemcount);
          }
          if (Type != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Type);
          }
          if (Brandnew != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Brandnew);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Itemid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Itemid);
          }
          if (Itemcount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Itemcount);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
          }
          if (Brandnew != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Brandnew);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LotteryResult other) {
          if (other == null) {
            return;
          }
          if (other.Itemid != 0) {
            Itemid = other.Itemid;
          }
          if (other.Itemcount != 0) {
            Itemcount = other.Itemcount;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.Brandnew != 0) {
            Brandnew = other.Brandnew;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Itemid = input.ReadUInt32();
                break;
              }
              case 16: {
                Itemcount = input.ReadUInt32();
                break;
              }
              case 24: {
                Type = input.ReadUInt32();
                break;
              }
              case 32: {
                Brandnew = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 发送GM抽卡结果, S->C
  /// </summary>
  public sealed partial class SendGMLotteryResultCmd : pb::IMessage<SendGMLotteryResultCmd> {
    private static readonly pb::MessageParser<SendGMLotteryResultCmd> _parser = new pb::MessageParser<SendGMLotteryResultCmd>(() => new SendGMLotteryResultCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendGMLotteryResultCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendGMLotteryResultCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendGMLotteryResultCmd(SendGMLotteryResultCmd other) : this() {
      lotteryresults_ = other.lotteryresults_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendGMLotteryResultCmd Clone() {
      return new SendGMLotteryResultCmd(this);
    }

    /// <summary>Field number for the "lotteryresults" field.</summary>
    public const int LotteryresultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cmd.SendGMLotteryResultCmd.Types.LotteryResult> _repeated_lotteryresults_codec
        = pb::FieldCodec.ForMessage(10, global::Cmd.SendGMLotteryResultCmd.Types.LotteryResult.Parser);
    private readonly pbc::RepeatedField<global::Cmd.SendGMLotteryResultCmd.Types.LotteryResult> lotteryresults_ = new pbc::RepeatedField<global::Cmd.SendGMLotteryResultCmd.Types.LotteryResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.SendGMLotteryResultCmd.Types.LotteryResult> Lotteryresults {
      get { return lotteryresults_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendGMLotteryResultCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendGMLotteryResultCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lotteryresults_.Equals(other.lotteryresults_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= lotteryresults_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      lotteryresults_.WriteTo(output, _repeated_lotteryresults_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += lotteryresults_.CalculateSize(_repeated_lotteryresults_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendGMLotteryResultCmd other) {
      if (other == null) {
        return;
      }
      lotteryresults_.Add(other.lotteryresults_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            lotteryresults_.AddEntriesFrom(input, _repeated_lotteryresults_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SendGMLotteryResultCmd message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class LotteryResult : pb::IMessage<LotteryResult> {
        private static readonly pb::MessageParser<LotteryResult> _parser = new pb::MessageParser<LotteryResult>(() => new LotteryResult());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LotteryResult> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Cmd.SendGMLotteryResultCmd.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LotteryResult() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LotteryResult(LotteryResult other) : this() {
          itemid_ = other.itemid_;
          times_ = other.times_;
          convertnum_ = other.convertnum_;
          type_ = other.type_;
          brandnew_ = other.brandnew_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LotteryResult Clone() {
          return new LotteryResult(this);
        }

        /// <summary>Field number for the "itemid" field.</summary>
        public const int ItemidFieldNumber = 1;
        private uint itemid_;
        /// <summary>
        ///  道具ID或者角色ID   Lottery表
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Itemid {
          get { return itemid_; }
          set {
            itemid_ = value;
          }
        }

        /// <summary>Field number for the "times" field.</summary>
        public const int TimesFieldNumber = 2;
        private uint times_;
        /// <summary>
        ///  转换次数
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Times {
          get { return times_; }
          set {
            times_ = value;
          }
        }

        /// <summary>Field number for the "convertnum" field.</summary>
        public const int ConvertnumFieldNumber = 3;
        private uint convertnum_;
        /// <summary>
        ///  单次转换的碎片数量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Convertnum {
          get { return convertnum_; }
          set {
            convertnum_ = value;
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 4;
        private uint type_;
        /// <summary>
        ///  道具类型	   1:道具  2:伙伴
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "brandnew" field.</summary>
        public const int BrandnewFieldNumber = 5;
        private uint brandnew_;
        /// <summary>
        ///  新卡展示    0:新卡  非0:碎片
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Brandnew {
          get { return brandnew_; }
          set {
            brandnew_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LotteryResult);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LotteryResult other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Itemid != other.Itemid) return false;
          if (Times != other.Times) return false;
          if (Convertnum != other.Convertnum) return false;
          if (Type != other.Type) return false;
          if (Brandnew != other.Brandnew) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Itemid != 0) hash ^= Itemid.GetHashCode();
          if (Times != 0) hash ^= Times.GetHashCode();
          if (Convertnum != 0) hash ^= Convertnum.GetHashCode();
          if (Type != 0) hash ^= Type.GetHashCode();
          if (Brandnew != 0) hash ^= Brandnew.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Itemid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Itemid);
          }
          if (Times != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Times);
          }
          if (Convertnum != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Convertnum);
          }
          if (Type != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Type);
          }
          if (Brandnew != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(Brandnew);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Itemid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Itemid);
          }
          if (Times != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Times);
          }
          if (Convertnum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Convertnum);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
          }
          if (Brandnew != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Brandnew);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LotteryResult other) {
          if (other == null) {
            return;
          }
          if (other.Itemid != 0) {
            Itemid = other.Itemid;
          }
          if (other.Times != 0) {
            Times = other.Times;
          }
          if (other.Convertnum != 0) {
            Convertnum = other.Convertnum;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.Brandnew != 0) {
            Brandnew = other.Brandnew;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Itemid = input.ReadUInt32();
                break;
              }
              case 16: {
                Times = input.ReadUInt32();
                break;
              }
              case 24: {
                Convertnum = input.ReadUInt32();
                break;
              }
              case 32: {
                Type = input.ReadUInt32();
                break;
              }
              case 40: {
                Brandnew = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 玩家对Npc的特殊行为, C->S
  /// </summary>
  public sealed partial class UserSpecialActionCmd : pb::IMessage<UserSpecialActionCmd> {
    private static readonly pb::MessageParser<UserSpecialActionCmd> _parser = new pb::MessageParser<UserSpecialActionCmd>(() => new UserSpecialActionCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserSpecialActionCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSpecialActionCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSpecialActionCmd(UserSpecialActionCmd other) : this() {
      beguid_ = other.beguid_;
      action_ = other.action_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSpecialActionCmd Clone() {
      return new UserSpecialActionCmd(this);
    }

    /// <summary>Field number for the "beguid" field.</summary>
    public const int BeguidFieldNumber = 1;
    private uint beguid_;
    /// <summary>
    /// npc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Beguid {
      get { return beguid_; }
      set {
        beguid_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 2;
    private uint action_;
    /// <summary>
    /// 行为
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserSpecialActionCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserSpecialActionCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Beguid != other.Beguid) return false;
      if (Action != other.Action) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Beguid != 0) hash ^= Beguid.GetHashCode();
      if (Action != 0) hash ^= Action.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Beguid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Beguid);
      }
      if (Action != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Action);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Beguid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Beguid);
      }
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Action);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserSpecialActionCmd other) {
      if (other == null) {
        return;
      }
      if (other.Beguid != 0) {
        Beguid = other.Beguid;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Beguid = input.ReadUInt32();
            break;
          }
          case 16: {
            Action = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AsideUserCmd : pb::IMessage<AsideUserCmd> {
    private static readonly pb::MessageParser<AsideUserCmd> _parser = new pb::MessageParser<AsideUserCmd>(() => new AsideUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AsideUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AsideUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AsideUserCmd(AsideUserCmd other) : this() {
      npcid_ = other.npcid_;
      textid_ = other.textid_;
      showtime_ = other.showtime_;
      orientation_ = other.orientation_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AsideUserCmd Clone() {
      return new AsideUserCmd(this);
    }

    /// <summary>Field number for the "npcid" field.</summary>
    public const int NpcidFieldNumber = 1;
    private uint npcid_;
    /// <summary>
    ///  旁白头像npcid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Npcid {
      get { return npcid_; }
      set {
        npcid_ = value;
      }
    }

    /// <summary>Field number for the "textid" field.</summary>
    public const int TextidFieldNumber = 2;
    private uint textid_;
    /// <summary>
    ///  旁白文本id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Textid {
      get { return textid_; }
      set {
        textid_ = value;
      }
    }

    /// <summary>Field number for the "showtime" field.</summary>
    public const int ShowtimeFieldNumber = 3;
    private uint showtime_;
    /// <summary>
    ///  显示时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Showtime {
      get { return showtime_; }
      set {
        showtime_ = value;
      }
    }

    /// <summary>Field number for the "orientation" field.</summary>
    public const int OrientationFieldNumber = 4;
    private global::Cmd.EAsideOrientation orientation_ = 0;
    /// <summary>
    /// string uniqueid = 5;       // uniqueid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EAsideOrientation Orientation {
      get { return orientation_; }
      set {
        orientation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AsideUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AsideUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Npcid != other.Npcid) return false;
      if (Textid != other.Textid) return false;
      if (Showtime != other.Showtime) return false;
      if (Orientation != other.Orientation) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Npcid != 0) hash ^= Npcid.GetHashCode();
      if (Textid != 0) hash ^= Textid.GetHashCode();
      if (Showtime != 0) hash ^= Showtime.GetHashCode();
      if (Orientation != 0) hash ^= Orientation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Npcid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Npcid);
      }
      if (Textid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Textid);
      }
      if (Showtime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Showtime);
      }
      if (Orientation != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Orientation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Npcid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Npcid);
      }
      if (Textid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Textid);
      }
      if (Showtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Showtime);
      }
      if (Orientation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Orientation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AsideUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Npcid != 0) {
        Npcid = other.Npcid;
      }
      if (other.Textid != 0) {
        Textid = other.Textid;
      }
      if (other.Showtime != 0) {
        Showtime = other.Showtime;
      }
      if (other.Orientation != 0) {
        Orientation = other.Orientation;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Npcid = input.ReadUInt32();
            break;
          }
          case 16: {
            Textid = input.ReadUInt32();
            break;
          }
          case 24: {
            Showtime = input.ReadUInt32();
            break;
          }
          case 32: {
            orientation_ = (global::Cmd.EAsideOrientation) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  S->C
  /// </summary>
  public sealed partial class SendPartnerSourceCmd : pb::IMessage<SendPartnerSourceCmd> {
    private static readonly pb::MessageParser<SendPartnerSourceCmd> _parser = new pb::MessageParser<SendPartnerSourceCmd>(() => new SendPartnerSourceCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendPartnerSourceCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendPartnerSourceCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendPartnerSourceCmd(SendPartnerSourceCmd other) : this() {
      partnerid_ = other.partnerid_;
      sourcetype_ = other.sourcetype_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendPartnerSourceCmd Clone() {
      return new SendPartnerSourceCmd(this);
    }

    /// <summary>Field number for the "partnerid" field.</summary>
    public const int PartneridFieldNumber = 1;
    private uint partnerid_;
    /// <summary>
    /// 伙伴id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Partnerid {
      get { return partnerid_; }
      set {
        partnerid_ = value;
      }
    }

    /// <summary>Field number for the "sourcetype" field.</summary>
    public const int SourcetypeFieldNumber = 2;
    private global::Cmd.EPartnerSourceType sourcetype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EPartnerSourceType Sourcetype {
      get { return sourcetype_; }
      set {
        sourcetype_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendPartnerSourceCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendPartnerSourceCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Partnerid != other.Partnerid) return false;
      if (Sourcetype != other.Sourcetype) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Partnerid != 0) hash ^= Partnerid.GetHashCode();
      if (Sourcetype != 0) hash ^= Sourcetype.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Partnerid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Partnerid);
      }
      if (Sourcetype != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Sourcetype);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Partnerid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Partnerid);
      }
      if (Sourcetype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Sourcetype);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendPartnerSourceCmd other) {
      if (other == null) {
        return;
      }
      if (other.Partnerid != 0) {
        Partnerid = other.Partnerid;
      }
      if (other.Sourcetype != 0) {
        Sourcetype = other.Sourcetype;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Partnerid = input.ReadUInt32();
            break;
          }
          case 16: {
            sourcetype_ = (global::Cmd.EPartnerSourceType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// S->C
  /// </summary>
  public sealed partial class SceneRaidResultCmd : pb::IMessage<SceneRaidResultCmd> {
    private static readonly pb::MessageParser<SceneRaidResultCmd> _parser = new pb::MessageParser<SceneRaidResultCmd>(() => new SceneRaidResultCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneRaidResultCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneRaidResultCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneRaidResultCmd(SceneRaidResultCmd other) : this() {
      rank_ = other.rank_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneRaidResultCmd Clone() {
      return new SceneRaidResultCmd(this);
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private uint rank_;
    /// <summary>
    /// 结算界面分数评级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private bool result_;
    /// <summary>
    /// 副本挑战结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneRaidResultCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneRaidResultCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rank != other.Rank) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (Result != false) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Rank);
      }
      if (Result != false) {
        output.WriteRawTag(16);
        output.WriteBool(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (Result != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneRaidResultCmd other) {
      if (other == null) {
        return;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Rank = input.ReadUInt32();
            break;
          }
          case 16: {
            Result = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  C->S, 前端同步给后端 buff信息修改
  /// </summary>
  public sealed partial class C2SBuffSyncCmd : pb::IMessage<C2SBuffSyncCmd> {
    private static readonly pb::MessageParser<C2SBuffSyncCmd> _parser = new pb::MessageParser<C2SBuffSyncCmd>(() => new C2SBuffSyncCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2SBuffSyncCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SBuffSyncCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SBuffSyncCmd(C2SBuffSyncCmd other) : this() {
      charid_ = other.charid_;
      buffid_ = other.buffid_;
      active_ = other.active_;
      shielddefvalue_ = other.shielddefvalue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2SBuffSyncCmd Clone() {
      return new C2SBuffSyncCmd(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 1;
    private ulong charid_;
    /// <summary>
    ///  角色guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "buffid" field.</summary>
    public const int BuffidFieldNumber = 2;
    private uint buffid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Buffid {
      get { return buffid_; }
      set {
        buffid_ = value;
      }
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 3;
    private bool active_;
    /// <summary>
    ///  当前是否生效，设为false后端将把该buff失效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    /// <summary>Field number for the "shielddefvalue" field.</summary>
    public const int ShielddefvalueFieldNumber = 4;
    private uint shielddefvalue_;
    /// <summary>
    ///  同步该buff的剩余护盾值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Shielddefvalue {
      get { return shielddefvalue_; }
      set {
        shielddefvalue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2SBuffSyncCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2SBuffSyncCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      if (Buffid != other.Buffid) return false;
      if (Active != other.Active) return false;
      if (Shielddefvalue != other.Shielddefvalue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      if (Buffid != 0) hash ^= Buffid.GetHashCode();
      if (Active != false) hash ^= Active.GetHashCode();
      if (Shielddefvalue != 0) hash ^= Shielddefvalue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Charid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Charid);
      }
      if (Buffid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Buffid);
      }
      if (Active != false) {
        output.WriteRawTag(24);
        output.WriteBool(Active);
      }
      if (Shielddefvalue != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Shielddefvalue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      if (Buffid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Buffid);
      }
      if (Active != false) {
        size += 1 + 1;
      }
      if (Shielddefvalue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Shielddefvalue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2SBuffSyncCmd other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      if (other.Buffid != 0) {
        Buffid = other.Buffid;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
      if (other.Shielddefvalue != 0) {
        Shielddefvalue = other.Shielddefvalue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Charid = input.ReadUInt64();
            break;
          }
          case 16: {
            Buffid = input.ReadUInt32();
            break;
          }
          case 24: {
            Active = input.ReadBool();
            break;
          }
          case 32: {
            Shielddefvalue = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AcceptRepairTask : pb::IMessage<AcceptRepairTask> {
    private static readonly pb::MessageParser<AcceptRepairTask> _parser = new pb::MessageParser<AcceptRepairTask>(() => new AcceptRepairTask());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AcceptRepairTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptRepairTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptRepairTask(AcceptRepairTask other) : this() {
      cfgid_ = other.cfgid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptRepairTask Clone() {
      return new AcceptRepairTask(this);
    }

    /// <summary>Field number for the "cfgid" field.</summary>
    public const int CfgidFieldNumber = 1;
    private uint cfgid_;
    /// <summary>
    ///  修复物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cfgid {
      get { return cfgid_; }
      set {
        cfgid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AcceptRepairTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AcceptRepairTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cfgid != other.Cfgid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cfgid != 0) hash ^= Cfgid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cfgid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Cfgid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cfgid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cfgid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AcceptRepairTask other) {
      if (other == null) {
        return;
      }
      if (other.Cfgid != 0) {
        Cfgid = other.Cfgid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Cfgid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddPartnerExpFromExpPoolCmd : pb::IMessage<AddPartnerExpFromExpPoolCmd> {
    private static readonly pb::MessageParser<AddPartnerExpFromExpPoolCmd> _parser = new pb::MessageParser<AddPartnerExpFromExpPoolCmd>(() => new AddPartnerExpFromExpPoolCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddPartnerExpFromExpPoolCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPartnerExpFromExpPoolCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPartnerExpFromExpPoolCmd(AddPartnerExpFromExpPoolCmd other) : this() {
      fighterid_ = other.fighterid_;
      expvalue_ = other.expvalue_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPartnerExpFromExpPoolCmd Clone() {
      return new AddPartnerExpFromExpPoolCmd(this);
    }

    /// <summary>Field number for the "fighterid" field.</summary>
    public const int FighteridFieldNumber = 1;
    private uint fighterid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fighterid {
      get { return fighterid_; }
      set {
        fighterid_ = value;
      }
    }

    /// <summary>Field number for the "expvalue" field.</summary>
    public const int ExpvalueFieldNumber = 2;
    private ulong expvalue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Expvalue {
      get { return expvalue_; }
      set {
        expvalue_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private global::Cmd.EAddPartnerExpResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EAddPartnerExpResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddPartnerExpFromExpPoolCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddPartnerExpFromExpPoolCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fighterid != other.Fighterid) return false;
      if (Expvalue != other.Expvalue) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fighterid != 0) hash ^= Fighterid.GetHashCode();
      if (Expvalue != 0UL) hash ^= Expvalue.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fighterid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Fighterid);
      }
      if (Expvalue != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Expvalue);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fighterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fighterid);
      }
      if (Expvalue != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Expvalue);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddPartnerExpFromExpPoolCmd other) {
      if (other == null) {
        return;
      }
      if (other.Fighterid != 0) {
        Fighterid = other.Fighterid;
      }
      if (other.Expvalue != 0UL) {
        Expvalue = other.Expvalue;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Fighterid = input.ReadUInt32();
            break;
          }
          case 16: {
            Expvalue = input.ReadUInt64();
            break;
          }
          case 24: {
            result_ = (global::Cmd.EAddPartnerExpResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayItemAnimation : pb::IMessage<PlayItemAnimation> {
    private static readonly pb::MessageParser<PlayItemAnimation> _parser = new pb::MessageParser<PlayItemAnimation>(() => new PlayItemAnimation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayItemAnimation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayItemAnimation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayItemAnimation(PlayItemAnimation other) : this() {
      itemid_ = other.itemid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayItemAnimation Clone() {
      return new PlayItemAnimation(this);
    }

    /// <summary>Field number for the "itemid" field.</summary>
    public const int ItemidFieldNumber = 1;
    private uint itemid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Itemid {
      get { return itemid_; }
      set {
        itemid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayItemAnimation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayItemAnimation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Itemid != other.Itemid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Itemid != 0) hash ^= Itemid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Itemid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Itemid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Itemid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Itemid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayItemAnimation other) {
      if (other == null) {
        return;
      }
      if (other.Itemid != 0) {
        Itemid = other.Itemid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Itemid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WXKJAsideUserCmd : pb::IMessage<WXKJAsideUserCmd> {
    private static readonly pb::MessageParser<WXKJAsideUserCmd> _parser = new pb::MessageParser<WXKJAsideUserCmd>(() => new WXKJAsideUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WXKJAsideUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WXKJAsideUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WXKJAsideUserCmd(WXKJAsideUserCmd other) : this() {
      npcid_ = other.npcid_;
      textid_ = other.textid_.Clone();
      showtime_ = other.showtime_;
      orientation_ = other.orientation_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WXKJAsideUserCmd Clone() {
      return new WXKJAsideUserCmd(this);
    }

    /// <summary>Field number for the "npcid" field.</summary>
    public const int NpcidFieldNumber = 1;
    private uint npcid_;
    /// <summary>
    ///  旁白头像npcid abandoned
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Npcid {
      get { return npcid_; }
      set {
        npcid_ = value;
      }
    }

    /// <summary>Field number for the "textid" field.</summary>
    public const int TextidFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_textid_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> textid_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  旁白文本id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Textid {
      get { return textid_; }
    }

    /// <summary>Field number for the "showtime" field.</summary>
    public const int ShowtimeFieldNumber = 3;
    private uint showtime_;
    /// <summary>
    ///  显示时间 abandoned
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Showtime {
      get { return showtime_; }
      set {
        showtime_ = value;
      }
    }

    /// <summary>Field number for the "orientation" field.</summary>
    public const int OrientationFieldNumber = 4;
    private global::Cmd.EAsideOrientation orientation_ = 0;
    /// <summary>
    ///  abandoned
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EAsideOrientation Orientation {
      get { return orientation_; }
      set {
        orientation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WXKJAsideUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WXKJAsideUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Npcid != other.Npcid) return false;
      if(!textid_.Equals(other.textid_)) return false;
      if (Showtime != other.Showtime) return false;
      if (Orientation != other.Orientation) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Npcid != 0) hash ^= Npcid.GetHashCode();
      hash ^= textid_.GetHashCode();
      if (Showtime != 0) hash ^= Showtime.GetHashCode();
      if (Orientation != 0) hash ^= Orientation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Npcid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Npcid);
      }
      textid_.WriteTo(output, _repeated_textid_codec);
      if (Showtime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Showtime);
      }
      if (Orientation != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Orientation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Npcid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Npcid);
      }
      size += textid_.CalculateSize(_repeated_textid_codec);
      if (Showtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Showtime);
      }
      if (Orientation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Orientation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WXKJAsideUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Npcid != 0) {
        Npcid = other.Npcid;
      }
      textid_.Add(other.textid_);
      if (other.Showtime != 0) {
        Showtime = other.Showtime;
      }
      if (other.Orientation != 0) {
        Orientation = other.Orientation;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Npcid = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            textid_.AddEntriesFrom(input, _repeated_textid_codec);
            break;
          }
          case 24: {
            Showtime = input.ReadUInt32();
            break;
          }
          case 32: {
            orientation_ = (global::Cmd.EAsideOrientation) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 黑化协议 S->C
  /// </summary>
  public sealed partial class BlackSanCmd : pb::IMessage<BlackSanCmd> {
    private static readonly pb::MessageParser<BlackSanCmd> _parser = new pb::MessageParser<BlackSanCmd>(() => new BlackSanCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlackSanCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlackSanCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlackSanCmd(BlackSanCmd other) : this() {
      guid_ = other.guid_;
      start_ = other.start_;
      Hitpos = other.hitpos_ != null ? other.Hitpos.Clone() : null;
      skillid_ = other.skillid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlackSanCmd Clone() {
      return new BlackSanCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private ulong guid_;
    /// <summary>
    /// 黑化的单位id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 2;
    private bool start_;
    /// <summary>
    /// 是否开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "hitpos" field.</summary>
    public const int HitposFieldNumber = 3;
    private global::Cmd.ScenePos hitpos_;
    /// <summary>
    /// 击退位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Hitpos {
      get { return hitpos_; }
      set {
        hitpos_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 4;
    private uint skillid_;
    /// <summary>
    /// 黑化技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlackSanCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlackSanCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Start != other.Start) return false;
      if (!object.Equals(Hitpos, other.Hitpos)) return false;
      if (Skillid != other.Skillid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0UL) hash ^= Guid.GetHashCode();
      if (Start != false) hash ^= Start.GetHashCode();
      if (hitpos_ != null) hash ^= Hitpos.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Guid);
      }
      if (Start != false) {
        output.WriteRawTag(16);
        output.WriteBool(Start);
      }
      if (hitpos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Hitpos);
      }
      if (Skillid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Skillid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Guid);
      }
      if (Start != false) {
        size += 1 + 1;
      }
      if (hitpos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hitpos);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlackSanCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0UL) {
        Guid = other.Guid;
      }
      if (other.Start != false) {
        Start = other.Start;
      }
      if (other.hitpos_ != null) {
        if (hitpos_ == null) {
          hitpos_ = new global::Cmd.ScenePos();
        }
        Hitpos.MergeFrom(other.Hitpos);
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt64();
            break;
          }
          case 16: {
            Start = input.ReadBool();
            break;
          }
          case 26: {
            if (hitpos_ == null) {
              hitpos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(hitpos_);
            break;
          }
          case 32: {
            Skillid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 追踪传送协议(包含修复物) S->C &amp;&amp; C->S
  /// </summary>
  public sealed partial class GoToCommonTraceCmd : pb::IMessage<GoToCommonTraceCmd> {
    private static readonly pb::MessageParser<GoToCommonTraceCmd> _parser = new pb::MessageParser<GoToCommonTraceCmd>(() => new GoToCommonTraceCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoToCommonTraceCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoToCommonTraceCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoToCommonTraceCmd(GoToCommonTraceCmd other) : this() {
      id_ = other.id_;
      clientrequest_ = other.clientrequest_;
      serveranswer_ = other.serveranswer_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      type_ = other.type_;
      strkey_ = other.strkey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoToCommonTraceCmd Clone() {
      return new GoToCommonTraceCmd(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///  标识id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "clientrequest" field.</summary>
    public const int ClientrequestFieldNumber = 2;
    private bool clientrequest_;
    /// <summary>
    ///  客户端请求确认
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Clientrequest {
      get { return clientrequest_; }
      set {
        clientrequest_ = value;
      }
    }

    /// <summary>Field number for the "serveranswer" field.</summary>
    public const int ServeranswerFieldNumber = 3;
    private uint serveranswer_;
    /// <summary>
    ///  服务器返回确认(mapid或0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Serveranswer {
      get { return serveranswer_; }
      set {
        serveranswer_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 4;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  相机朝向的位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private uint type_;
    /// <summary>
    ///  传送类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "strkey" field.</summary>
    public const int StrkeyFieldNumber = 6;
    private string strkey_ = "";
    /// <summary>
    ///  标识字符串(GOTO_NPCALIAS 使用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Strkey {
      get { return strkey_; }
      set {
        strkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GoToCommonTraceCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GoToCommonTraceCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Clientrequest != other.Clientrequest) return false;
      if (Serveranswer != other.Serveranswer) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Type != other.Type) return false;
      if (Strkey != other.Strkey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Clientrequest != false) hash ^= Clientrequest.GetHashCode();
      if (Serveranswer != 0) hash ^= Serveranswer.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Strkey.Length != 0) hash ^= Strkey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Clientrequest != false) {
        output.WriteRawTag(16);
        output.WriteBool(Clientrequest);
      }
      if (Serveranswer != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Serveranswer);
      }
      if (pos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pos);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Type);
      }
      if (Strkey.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Strkey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Clientrequest != false) {
        size += 1 + 1;
      }
      if (Serveranswer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Serveranswer);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Strkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Strkey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GoToCommonTraceCmd other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Clientrequest != false) {
        Clientrequest = other.Clientrequest;
      }
      if (other.Serveranswer != 0) {
        Serveranswer = other.Serveranswer;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Strkey.Length != 0) {
        Strkey = other.Strkey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Clientrequest = input.ReadBool();
            break;
          }
          case 24: {
            Serveranswer = input.ReadUInt32();
            break;
          }
          case 34: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 40: {
            Type = input.ReadUInt32();
            break;
          }
          case 50: {
            Strkey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// /召唤协议 S->C
  /// </summary>
  public sealed partial class SummonEffectUserCmd : pb::IMessage<SummonEffectUserCmd> {
    private static readonly pb::MessageParser<SummonEffectUserCmd> _parser = new pb::MessageParser<SummonEffectUserCmd>(() => new SummonEffectUserCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SummonEffectUserCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SummonEffectUserCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SummonEffectUserCmd(SummonEffectUserCmd other) : this() {
      charid_ = other.charid_;
      skillid_ = other.skillid_;
      skilllv_ = other.skilllv_;
      effectid_ = other.effectid_;
      timeAxis_ = other.timeAxis_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      index_ = other.index_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SummonEffectUserCmd Clone() {
      return new SummonEffectUserCmd(this);
    }

    /// <summary>Field number for the "charid" field.</summary>
    public const int CharidFieldNumber = 1;
    private ulong charid_;
    /// <summary>
    ///  施法者唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Charid {
      get { return charid_; }
      set {
        charid_ = value;
      }
    }

    /// <summary>Field number for the "skillid" field.</summary>
    public const int SkillidFieldNumber = 2;
    private uint skillid_;
    /// <summary>
    ///  技能id,表Skill.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skillid {
      get { return skillid_; }
      set {
        skillid_ = value;
      }
    }

    /// <summary>Field number for the "skilllv" field.</summary>
    public const int SkilllvFieldNumber = 3;
    private uint skilllv_;
    /// <summary>
    ///  技能等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Skilllv {
      get { return skilllv_; }
      set {
        skilllv_ = value;
      }
    }

    /// <summary>Field number for the "effectid" field.</summary>
    public const int EffectidFieldNumber = 4;
    private uint effectid_;
    /// <summary>
    ///  配置表id,表SpecialEffect.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Effectid {
      get { return effectid_; }
      set {
        effectid_ = value;
      }
    }

    /// <summary>Field number for the "time_axis" field.</summary>
    public const int TimeAxisFieldNumber = 5;
    private uint timeAxis_;
    /// <summary>
    ///  时间轴(毫秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeAxis {
      get { return timeAxis_; }
      set {
        timeAxis_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 6;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 7;
    private static readonly pb::FieldCodec<ulong> _repeated_index_codec
        = pb::FieldCodec.ForUInt64(58);
    private readonly pbc::RepeatedField<ulong> index_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///  召唤物guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Index {
      get { return index_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SummonEffectUserCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SummonEffectUserCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Charid != other.Charid) return false;
      if (Skillid != other.Skillid) return false;
      if (Skilllv != other.Skilllv) return false;
      if (Effectid != other.Effectid) return false;
      if (TimeAxis != other.TimeAxis) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if(!index_.Equals(other.index_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Charid != 0UL) hash ^= Charid.GetHashCode();
      if (Skillid != 0) hash ^= Skillid.GetHashCode();
      if (Skilllv != 0) hash ^= Skilllv.GetHashCode();
      if (Effectid != 0) hash ^= Effectid.GetHashCode();
      if (TimeAxis != 0) hash ^= TimeAxis.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      hash ^= index_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Charid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Charid);
      }
      if (Skillid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Skillid);
      }
      if (Skilllv != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Skilllv);
      }
      if (Effectid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Effectid);
      }
      if (TimeAxis != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TimeAxis);
      }
      if (pos_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Pos);
      }
      index_.WriteTo(output, _repeated_index_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Charid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Charid);
      }
      if (Skillid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skillid);
      }
      if (Skilllv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Skilllv);
      }
      if (Effectid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Effectid);
      }
      if (TimeAxis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeAxis);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      size += index_.CalculateSize(_repeated_index_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SummonEffectUserCmd other) {
      if (other == null) {
        return;
      }
      if (other.Charid != 0UL) {
        Charid = other.Charid;
      }
      if (other.Skillid != 0) {
        Skillid = other.Skillid;
      }
      if (other.Skilllv != 0) {
        Skilllv = other.Skilllv;
      }
      if (other.Effectid != 0) {
        Effectid = other.Effectid;
      }
      if (other.TimeAxis != 0) {
        TimeAxis = other.TimeAxis;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      index_.Add(other.index_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Charid = input.ReadUInt64();
            break;
          }
          case 16: {
            Skillid = input.ReadUInt32();
            break;
          }
          case 24: {
            Skilllv = input.ReadUInt32();
            break;
          }
          case 32: {
            Effectid = input.ReadUInt32();
            break;
          }
          case 40: {
            TimeAxis = input.ReadUInt32();
            break;
          }
          case 50: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 58:
          case 56: {
            index_.AddEntriesFrom(input, _repeated_index_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClubChallengeInfo : pb::IMessage<ClubChallengeInfo> {
    private static readonly pb::MessageParser<ClubChallengeInfo> _parser = new pb::MessageParser<ClubChallengeInfo>(() => new ClubChallengeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubChallengeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[104]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubChallengeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubChallengeInfo(ClubChallengeInfo other) : this() {
      level_ = other.level_;
      npcid_ = other.npcid_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubChallengeInfo Clone() {
      return new ClubChallengeInfo(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    /// <summary>
    ///  活动等级(开启层级)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "npcid" field.</summary>
    public const int NpcidFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_npcid_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> npcid_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  挑战的npcid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Npcid {
      get { return npcid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubChallengeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubChallengeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if(!npcid_.Equals(other.npcid_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      hash ^= npcid_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      npcid_.WriteTo(output, _repeated_npcid_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      size += npcid_.CalculateSize(_repeated_npcid_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubChallengeInfo other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      npcid_.Add(other.npcid_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            npcid_.AddEntriesFrom(input, _repeated_npcid_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  日常活动
  /// </summary>
  public sealed partial class DailyActivityInfo : pb::IMessage<DailyActivityInfo> {
    private static readonly pb::MessageParser<DailyActivityInfo> _parser = new pb::MessageParser<DailyActivityInfo>(() => new DailyActivityInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyActivityInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[105]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyActivityInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyActivityInfo(DailyActivityInfo other) : this() {
      id_ = other.id_;
      characterid_ = other.characterid_;
      endtime_ = other.endtime_;
      status_ = other.status_;
      uid_ = other.uid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyActivityInfo Clone() {
      return new DailyActivityInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///  日常活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "characterid" field.</summary>
    public const int CharacteridFieldNumber = 2;
    private uint characterid_;
    /// <summary>
    ///  同伴id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Characterid {
      get { return characterid_; }
      set {
        characterid_ = value;
      }
    }

    /// <summary>Field number for the "endtime" field.</summary>
    public const int EndtimeFieldNumber = 3;
    private ulong endtime_;
    /// <summary>
    ///  结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Endtime {
      get { return endtime_; }
      set {
        endtime_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private uint status_;
    /// <summary>
    ///  活动状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 8;
    private ulong uid_;
    /// <summary>
    ///  唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DailyActivityInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DailyActivityInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Characterid != other.Characterid) return false;
      if (Endtime != other.Endtime) return false;
      if (Status != other.Status) return false;
      if (Uid != other.Uid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Characterid != 0) hash ^= Characterid.GetHashCode();
      if (Endtime != 0UL) hash ^= Endtime.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Characterid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Characterid);
      }
      if (Endtime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Endtime);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Status);
      }
      if (Uid != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Characterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Characterid);
      }
      if (Endtime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Endtime);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DailyActivityInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Characterid != 0) {
        Characterid = other.Characterid;
      }
      if (other.Endtime != 0UL) {
        Endtime = other.Endtime;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Characterid = input.ReadUInt32();
            break;
          }
          case 24: {
            Endtime = input.ReadUInt64();
            break;
          }
          case 32: {
            Status = input.ReadUInt32();
            break;
          }
          case 64: {
            Uid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  社团活动
  /// </summary>
  public sealed partial class LeagueActivity : pb::IMessage<LeagueActivity> {
    private static readonly pb::MessageParser<LeagueActivity> _parser = new pb::MessageParser<LeagueActivity>(() => new LeagueActivity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeagueActivity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[106]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeagueActivity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeagueActivity(LeagueActivity other) : this() {
      id_ = other.id_;
      endtime_ = other.endtime_;
      status_ = other.status_;
      refreshfield_ = other.refreshfield_;
      level_ = other.level_;
      ClubInfo = other.clubInfo_ != null ? other.ClubInfo.Clone() : null;
      uid_ = other.uid_;
      alias_ = other.alias_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeagueActivity Clone() {
      return new LeagueActivity(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///  社团活动id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "endtime" field.</summary>
    public const int EndtimeFieldNumber = 2;
    private ulong endtime_;
    /// <summary>
    ///  结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Endtime {
      get { return endtime_; }
      set {
        endtime_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private uint status_;
    /// <summary>
    ///  活动状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "refreshfield" field.</summary>
    public const int RefreshfieldFieldNumber = 4;
    private ulong refreshfield_;
    /// <summary>
    ///  野外刷新点   repairid &lt;&lt; 3 + index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Refreshfield {
      get { return refreshfield_; }
      set {
        refreshfield_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private uint level_;
    /// <summary>
    ///  活动等级(开启层级)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "clubInfo" field.</summary>
    public const int ClubInfoFieldNumber = 6;
    private global::Cmd.ClubChallengeInfo clubInfo_;
    /// <summary>
    ///  天团挑战信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ClubChallengeInfo ClubInfo {
      get { return clubInfo_; }
      set {
        clubInfo_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 7;
    private ulong uid_;
    /// <summary>
    ///  唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 8;
    private string alias_ = "";
    /// <summary>
    ///  访问npc别名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeagueActivity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeagueActivity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Endtime != other.Endtime) return false;
      if (Status != other.Status) return false;
      if (Refreshfield != other.Refreshfield) return false;
      if (Level != other.Level) return false;
      if (!object.Equals(ClubInfo, other.ClubInfo)) return false;
      if (Uid != other.Uid) return false;
      if (Alias != other.Alias) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Endtime != 0UL) hash ^= Endtime.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Refreshfield != 0UL) hash ^= Refreshfield.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (clubInfo_ != null) hash ^= ClubInfo.GetHashCode();
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      if (Alias.Length != 0) hash ^= Alias.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Endtime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Endtime);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Status);
      }
      if (Refreshfield != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Refreshfield);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Level);
      }
      if (clubInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ClubInfo);
      }
      if (Uid != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Uid);
      }
      if (Alias.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Alias);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Endtime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Endtime);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (Refreshfield != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Refreshfield);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (clubInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClubInfo);
      }
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      if (Alias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeagueActivity other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Endtime != 0UL) {
        Endtime = other.Endtime;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Refreshfield != 0UL) {
        Refreshfield = other.Refreshfield;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.clubInfo_ != null) {
        if (clubInfo_ == null) {
          clubInfo_ = new global::Cmd.ClubChallengeInfo();
        }
        ClubInfo.MergeFrom(other.ClubInfo);
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
      if (other.Alias.Length != 0) {
        Alias = other.Alias;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Endtime = input.ReadUInt64();
            break;
          }
          case 24: {
            Status = input.ReadUInt32();
            break;
          }
          case 32: {
            Refreshfield = input.ReadUInt64();
            break;
          }
          case 40: {
            Level = input.ReadUInt32();
            break;
          }
          case 50: {
            if (clubInfo_ == null) {
              clubInfo_ = new global::Cmd.ClubChallengeInfo();
            }
            input.ReadMessage(clubInfo_);
            break;
          }
          case 56: {
            Uid = input.ReadUInt64();
            break;
          }
          case 66: {
            Alias = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  主动约会信息
  /// </summary>
  public sealed partial class ActiveDatingInfo : pb::IMessage<ActiveDatingInfo> {
    private static readonly pb::MessageParser<ActiveDatingInfo> _parser = new pb::MessageParser<ActiveDatingInfo>(() => new ActiveDatingInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActiveDatingInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[107]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveDatingInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveDatingInfo(ActiveDatingInfo other) : this() {
      id_ = other.id_;
      characterid_ = other.characterid_;
      endtime_ = other.endtime_;
      status_ = other.status_;
      refreshfield_ = other.refreshfield_;
      uid_ = other.uid_;
      fvalue_ = other.fvalue_;
      type_ = other.type_;
      alias_ = other.alias_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActiveDatingInfo Clone() {
      return new ActiveDatingInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///  约会类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "characterid" field.</summary>
    public const int CharacteridFieldNumber = 2;
    private uint characterid_;
    /// <summary>
    ///  同伴id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Characterid {
      get { return characterid_; }
      set {
        characterid_ = value;
      }
    }

    /// <summary>Field number for the "endtime" field.</summary>
    public const int EndtimeFieldNumber = 3;
    private ulong endtime_;
    /// <summary>
    ///  结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Endtime {
      get { return endtime_; }
      set {
        endtime_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private uint status_;
    /// <summary>
    ///  活动状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "refreshfield" field.</summary>
    public const int RefreshfieldFieldNumber = 5;
    private ulong refreshfield_;
    /// <summary>
    ///  野外刷新点   repairid &lt;&lt; 4 + index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Refreshfield {
      get { return refreshfield_; }
      set {
        refreshfield_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 6;
    private ulong uid_;
    /// <summary>
    ///  唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "fvalue" field.</summary>
    public const int FvalueFieldNumber = 7;
    private uint fvalue_;
    /// <summary>
    ///  增加好感度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fvalue {
      get { return fvalue_; }
      set {
        fvalue_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 8;
    private uint type_;
    /// <summary>
    ///  约会类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 9;
    private string alias_ = "";
    /// <summary>
    ///  访问npc别名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActiveDatingInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActiveDatingInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Characterid != other.Characterid) return false;
      if (Endtime != other.Endtime) return false;
      if (Status != other.Status) return false;
      if (Refreshfield != other.Refreshfield) return false;
      if (Uid != other.Uid) return false;
      if (Fvalue != other.Fvalue) return false;
      if (Type != other.Type) return false;
      if (Alias != other.Alias) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Characterid != 0) hash ^= Characterid.GetHashCode();
      if (Endtime != 0UL) hash ^= Endtime.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Refreshfield != 0UL) hash ^= Refreshfield.GetHashCode();
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      if (Fvalue != 0) hash ^= Fvalue.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Alias.Length != 0) hash ^= Alias.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Characterid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Characterid);
      }
      if (Endtime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Endtime);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Status);
      }
      if (Refreshfield != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Refreshfield);
      }
      if (Uid != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Uid);
      }
      if (Fvalue != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Fvalue);
      }
      if (Type != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Type);
      }
      if (Alias.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Alias);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Characterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Characterid);
      }
      if (Endtime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Endtime);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (Refreshfield != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Refreshfield);
      }
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      if (Fvalue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fvalue);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Alias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActiveDatingInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Characterid != 0) {
        Characterid = other.Characterid;
      }
      if (other.Endtime != 0UL) {
        Endtime = other.Endtime;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Refreshfield != 0UL) {
        Refreshfield = other.Refreshfield;
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
      if (other.Fvalue != 0) {
        Fvalue = other.Fvalue;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Alias.Length != 0) {
        Alias = other.Alias;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Characterid = input.ReadUInt32();
            break;
          }
          case 24: {
            Endtime = input.ReadUInt64();
            break;
          }
          case 32: {
            Status = input.ReadUInt32();
            break;
          }
          case 40: {
            Refreshfield = input.ReadUInt64();
            break;
          }
          case 48: {
            Uid = input.ReadUInt64();
            break;
          }
          case 56: {
            Fvalue = input.ReadUInt32();
            break;
          }
          case 64: {
            Type = input.ReadUInt32();
            break;
          }
          case 74: {
            Alias = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  日常任务协议 S->C
  /// </summary>
  public sealed partial class DailyActivityCmd : pb::IMessage<DailyActivityCmd> {
    private static readonly pb::MessageParser<DailyActivityCmd> _parser = new pb::MessageParser<DailyActivityCmd>(() => new DailyActivityCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyActivityCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[108]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyActivityCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyActivityCmd(DailyActivityCmd other) : this() {
      dailyactivity_ = other.dailyactivity_.Clone();
      leagueactivity_ = other.leagueactivity_.Clone();
      nextQuestRefreshTime_ = other.nextQuestRefreshTime_;
      activedating_ = other.activedating_.Clone();
      allcompletestatus_ = other.allcompletestatus_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyActivityCmd Clone() {
      return new DailyActivityCmd(this);
    }

    /// <summary>Field number for the "dailyactivity" field.</summary>
    public const int DailyactivityFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cmd.DailyActivityInfo> _repeated_dailyactivity_codec
        = pb::FieldCodec.ForMessage(10, global::Cmd.DailyActivityInfo.Parser);
    private readonly pbc::RepeatedField<global::Cmd.DailyActivityInfo> dailyactivity_ = new pbc::RepeatedField<global::Cmd.DailyActivityInfo>();
    /// <summary>
    ///  活动信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.DailyActivityInfo> Dailyactivity {
      get { return dailyactivity_; }
    }

    /// <summary>Field number for the "leagueactivity" field.</summary>
    public const int LeagueactivityFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cmd.LeagueActivity> _repeated_leagueactivity_codec
        = pb::FieldCodec.ForMessage(18, global::Cmd.LeagueActivity.Parser);
    private readonly pbc::RepeatedField<global::Cmd.LeagueActivity> leagueactivity_ = new pbc::RepeatedField<global::Cmd.LeagueActivity>();
    /// <summary>
    ///  社团信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.LeagueActivity> Leagueactivity {
      get { return leagueactivity_; }
    }

    /// <summary>Field number for the "nextQuestRefreshTime" field.</summary>
    public const int NextQuestRefreshTimeFieldNumber = 3;
    private ulong nextQuestRefreshTime_;
    /// <summary>
    ///  下次任务刷新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NextQuestRefreshTime {
      get { return nextQuestRefreshTime_; }
      set {
        nextQuestRefreshTime_ = value;
      }
    }

    /// <summary>Field number for the "activedating" field.</summary>
    public const int ActivedatingFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Cmd.ActiveDatingInfo> _repeated_activedating_codec
        = pb::FieldCodec.ForMessage(34, global::Cmd.ActiveDatingInfo.Parser);
    private readonly pbc::RepeatedField<global::Cmd.ActiveDatingInfo> activedating_ = new pbc::RepeatedField<global::Cmd.ActiveDatingInfo>();
    /// <summary>
    ///  主动约会
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.ActiveDatingInfo> Activedating {
      get { return activedating_; }
    }

    /// <summary>Field number for the "allcompletestatus" field.</summary>
    public const int AllcompletestatusFieldNumber = 5;
    private uint allcompletestatus_;
    /// <summary>
    ///  全部完成状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Allcompletestatus {
      get { return allcompletestatus_; }
      set {
        allcompletestatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DailyActivityCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DailyActivityCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dailyactivity_.Equals(other.dailyactivity_)) return false;
      if(!leagueactivity_.Equals(other.leagueactivity_)) return false;
      if (NextQuestRefreshTime != other.NextQuestRefreshTime) return false;
      if(!activedating_.Equals(other.activedating_)) return false;
      if (Allcompletestatus != other.Allcompletestatus) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dailyactivity_.GetHashCode();
      hash ^= leagueactivity_.GetHashCode();
      if (NextQuestRefreshTime != 0UL) hash ^= NextQuestRefreshTime.GetHashCode();
      hash ^= activedating_.GetHashCode();
      if (Allcompletestatus != 0) hash ^= Allcompletestatus.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dailyactivity_.WriteTo(output, _repeated_dailyactivity_codec);
      leagueactivity_.WriteTo(output, _repeated_leagueactivity_codec);
      if (NextQuestRefreshTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(NextQuestRefreshTime);
      }
      activedating_.WriteTo(output, _repeated_activedating_codec);
      if (Allcompletestatus != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Allcompletestatus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dailyactivity_.CalculateSize(_repeated_dailyactivity_codec);
      size += leagueactivity_.CalculateSize(_repeated_leagueactivity_codec);
      if (NextQuestRefreshTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NextQuestRefreshTime);
      }
      size += activedating_.CalculateSize(_repeated_activedating_codec);
      if (Allcompletestatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Allcompletestatus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DailyActivityCmd other) {
      if (other == null) {
        return;
      }
      dailyactivity_.Add(other.dailyactivity_);
      leagueactivity_.Add(other.leagueactivity_);
      if (other.NextQuestRefreshTime != 0UL) {
        NextQuestRefreshTime = other.NextQuestRefreshTime;
      }
      activedating_.Add(other.activedating_);
      if (other.Allcompletestatus != 0) {
        Allcompletestatus = other.Allcompletestatus;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            dailyactivity_.AddEntriesFrom(input, _repeated_dailyactivity_codec);
            break;
          }
          case 18: {
            leagueactivity_.AddEntriesFrom(input, _repeated_leagueactivity_codec);
            break;
          }
          case 24: {
            NextQuestRefreshTime = input.ReadUInt64();
            break;
          }
          case 34: {
            activedating_.AddEntriesFrom(input, _repeated_activedating_codec);
            break;
          }
          case 40: {
            Allcompletestatus = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  日常任务领取奖励协议 S->C
  /// </summary>
  public sealed partial class DailyActivityAwardCmd : pb::IMessage<DailyActivityAwardCmd> {
    private static readonly pb::MessageParser<DailyActivityAwardCmd> _parser = new pb::MessageParser<DailyActivityAwardCmd>(() => new DailyActivityAwardCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyActivityAwardCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[109]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyActivityAwardCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyActivityAwardCmd(DailyActivityAwardCmd other) : this() {
      uid_ = other.uid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyActivityAwardCmd Clone() {
      return new DailyActivityAwardCmd(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private uint uid_;
    /// <summary>
    ///  id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DailyActivityAwardCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DailyActivityAwardCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DailyActivityAwardCmd other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  天团挑战CG播放
  /// </summary>
  public sealed partial class ClubChallengeCGCmd : pb::IMessage<ClubChallengeCGCmd> {
    private static readonly pb::MessageParser<ClubChallengeCGCmd> _parser = new pb::MessageParser<ClubChallengeCGCmd>(() => new ClubChallengeCGCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClubChallengeCGCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[110]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubChallengeCGCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubChallengeCGCmd(ClubChallengeCGCmd other) : this() {
      cg_ = other.cg_;
      showid1_ = other.showid1_;
      showid2_ = other.showid2_;
      showid3_ = other.showid3_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClubChallengeCGCmd Clone() {
      return new ClubChallengeCGCmd(this);
    }

    /// <summary>Field number for the "cg" field.</summary>
    public const int CgFieldNumber = 1;
    private string cg_ = "";
    /// <summary>
    ///  cg
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cg {
      get { return cg_; }
      set {
        cg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "showid1" field.</summary>
    public const int Showid1FieldNumber = 2;
    private uint showid1_;
    /// <summary>
    ///  表演位1(avatarID)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Showid1 {
      get { return showid1_; }
      set {
        showid1_ = value;
      }
    }

    /// <summary>Field number for the "showid2" field.</summary>
    public const int Showid2FieldNumber = 3;
    private uint showid2_;
    /// <summary>
    ///  表演位2(avatarID)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Showid2 {
      get { return showid2_; }
      set {
        showid2_ = value;
      }
    }

    /// <summary>Field number for the "showid3" field.</summary>
    public const int Showid3FieldNumber = 4;
    private uint showid3_;
    /// <summary>
    ///  表演位3(avatarID)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Showid3 {
      get { return showid3_; }
      set {
        showid3_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClubChallengeCGCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClubChallengeCGCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cg != other.Cg) return false;
      if (Showid1 != other.Showid1) return false;
      if (Showid2 != other.Showid2) return false;
      if (Showid3 != other.Showid3) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cg.Length != 0) hash ^= Cg.GetHashCode();
      if (Showid1 != 0) hash ^= Showid1.GetHashCode();
      if (Showid2 != 0) hash ^= Showid2.GetHashCode();
      if (Showid3 != 0) hash ^= Showid3.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Cg);
      }
      if (Showid1 != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Showid1);
      }
      if (Showid2 != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Showid2);
      }
      if (Showid3 != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Showid3);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cg);
      }
      if (Showid1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Showid1);
      }
      if (Showid2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Showid2);
      }
      if (Showid3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Showid3);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClubChallengeCGCmd other) {
      if (other == null) {
        return;
      }
      if (other.Cg.Length != 0) {
        Cg = other.Cg;
      }
      if (other.Showid1 != 0) {
        Showid1 = other.Showid1;
      }
      if (other.Showid2 != 0) {
        Showid2 = other.Showid2;
      }
      if (other.Showid3 != 0) {
        Showid3 = other.Showid3;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Cg = input.ReadString();
            break;
          }
          case 16: {
            Showid1 = input.ReadUInt32();
            break;
          }
          case 24: {
            Showid2 = input.ReadUInt32();
            break;
          }
          case 32: {
            Showid3 = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  日常任务全完成领取奖励协议 C->S
  /// </summary>
  public sealed partial class DailyActivityCompleteAwardCmd : pb::IMessage<DailyActivityCompleteAwardCmd> {
    private static readonly pb::MessageParser<DailyActivityCompleteAwardCmd> _parser = new pb::MessageParser<DailyActivityCompleteAwardCmd>(() => new DailyActivityCompleteAwardCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DailyActivityCompleteAwardCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[111]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyActivityCompleteAwardCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyActivityCompleteAwardCmd(DailyActivityCompleteAwardCmd other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DailyActivityCompleteAwardCmd Clone() {
      return new DailyActivityCompleteAwardCmd(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DailyActivityCompleteAwardCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DailyActivityCompleteAwardCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DailyActivityCompleteAwardCmd other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  增加弱同步开关同步
  /// </summary>
  public sealed partial class WeakSyncSwitchCmd : pb::IMessage<WeakSyncSwitchCmd> {
    private static readonly pb::MessageParser<WeakSyncSwitchCmd> _parser = new pb::MessageParser<WeakSyncSwitchCmd>(() => new WeakSyncSwitchCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeakSyncSwitchCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[112]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeakSyncSwitchCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeakSyncSwitchCmd(WeakSyncSwitchCmd other) : this() {
      weaksyncSwitch_ = other.weaksyncSwitch_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeakSyncSwitchCmd Clone() {
      return new WeakSyncSwitchCmd(this);
    }

    /// <summary>Field number for the "weaksync_switch" field.</summary>
    public const int WeaksyncSwitchFieldNumber = 1;
    private bool weaksyncSwitch_;
    /// <summary>
    /// 开关 true-开  false-关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WeaksyncSwitch {
      get { return weaksyncSwitch_; }
      set {
        weaksyncSwitch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeakSyncSwitchCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeakSyncSwitchCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WeaksyncSwitch != other.WeaksyncSwitch) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WeaksyncSwitch != false) hash ^= WeaksyncSwitch.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WeaksyncSwitch != false) {
        output.WriteRawTag(8);
        output.WriteBool(WeaksyncSwitch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WeaksyncSwitch != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeakSyncSwitchCmd other) {
      if (other == null) {
        return;
      }
      if (other.WeaksyncSwitch != false) {
        WeaksyncSwitch = other.WeaksyncSwitch;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WeaksyncSwitch = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  root motion使用开关同步
  /// </summary>
  public sealed partial class RootMotionSwitchCmd : pb::IMessage<RootMotionSwitchCmd> {
    private static readonly pb::MessageParser<RootMotionSwitchCmd> _parser = new pb::MessageParser<RootMotionSwitchCmd>(() => new RootMotionSwitchCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RootMotionSwitchCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[113]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RootMotionSwitchCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RootMotionSwitchCmd(RootMotionSwitchCmd other) : this() {
      rootmotionSwitch_ = other.rootmotionSwitch_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RootMotionSwitchCmd Clone() {
      return new RootMotionSwitchCmd(this);
    }

    /// <summary>Field number for the "rootmotion_switch" field.</summary>
    public const int RootmotionSwitchFieldNumber = 1;
    private bool rootmotionSwitch_;
    /// <summary>
    /// 开关 true-开  false-关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RootmotionSwitch {
      get { return rootmotionSwitch_; }
      set {
        rootmotionSwitch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RootMotionSwitchCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RootMotionSwitchCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RootmotionSwitch != other.RootmotionSwitch) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RootmotionSwitch != false) hash ^= RootmotionSwitch.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RootmotionSwitch != false) {
        output.WriteRawTag(8);
        output.WriteBool(RootmotionSwitch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RootmotionSwitch != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RootMotionSwitchCmd other) {
      if (other == null) {
        return;
      }
      if (other.RootmotionSwitch != false) {
        RootmotionSwitch = other.RootmotionSwitch;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RootmotionSwitch = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  增加压测接口返回协议
  /// </summary>
  public sealed partial class StressTestResponseCmd : pb::IMessage<StressTestResponseCmd> {
    private static readonly pb::MessageParser<StressTestResponseCmd> _parser = new pb::MessageParser<StressTestResponseCmd>(() => new StressTestResponseCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StressTestResponseCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[114]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StressTestResponseCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StressTestResponseCmd(StressTestResponseCmd other) : this() {
      ret_ = other.ret_;
      timestamp_ = other.timestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StressTestResponseCmd Clone() {
      return new StressTestResponseCmd(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private uint ret_;
    /// <summary>
    /// 返回标记
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private ulong timestamp_;
    /// <summary>
    /// 返回客户端的时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StressTestResponseCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StressTestResponseCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ret);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ret);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StressTestResponseCmd other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Ret = input.ReadUInt32();
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  设置是否测试robot
  /// </summary>
  public sealed partial class SetRobotCmd : pb::IMessage<SetRobotCmd> {
    private static readonly pb::MessageParser<SetRobotCmd> _parser = new pb::MessageParser<SetRobotCmd>(() => new SetRobotCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetRobotCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[115]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRobotCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRobotCmd(SetRobotCmd other) : this() {
      set_ = other.set_;
      isplayerwalk_ = other.isplayerwalk_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRobotCmd Clone() {
      return new SetRobotCmd(this);
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 1;
    private bool set_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Set {
      get { return set_; }
      set {
        set_ = value;
      }
    }

    /// <summary>Field number for the "isplayerwalk" field.</summary>
    public const int IsplayerwalkFieldNumber = 2;
    private bool isplayerwalk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isplayerwalk {
      get { return isplayerwalk_; }
      set {
        isplayerwalk_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetRobotCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetRobotCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Set != other.Set) return false;
      if (Isplayerwalk != other.Isplayerwalk) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Set != false) hash ^= Set.GetHashCode();
      if (Isplayerwalk != false) hash ^= Isplayerwalk.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Set != false) {
        output.WriteRawTag(8);
        output.WriteBool(Set);
      }
      if (Isplayerwalk != false) {
        output.WriteRawTag(16);
        output.WriteBool(Isplayerwalk);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Set != false) {
        size += 1 + 1;
      }
      if (Isplayerwalk != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetRobotCmd other) {
      if (other == null) {
        return;
      }
      if (other.Set != false) {
        Set = other.Set;
      }
      if (other.Isplayerwalk != false) {
        Isplayerwalk = other.Isplayerwalk;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Set = input.ReadBool();
            break;
          }
          case 16: {
            Isplayerwalk = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  循环动作列表同步, S->C
  /// </summary>
  public sealed partial class SyncActionListCmd : pb::IMessage<SyncActionListCmd> {
    private static readonly pb::MessageParser<SyncActionListCmd> _parser = new pb::MessageParser<SyncActionListCmd>(() => new SyncActionListCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncActionListCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[116]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncActionListCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncActionListCmd(SyncActionListCmd other) : this() {
      guid_ = other.guid_;
      actionlist_ = other.actionlist_.Clone();
      needloop_ = other.needloop_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncActionListCmd Clone() {
      return new SyncActionListCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private uint guid_;
    /// <summary>
    ///  npc guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "actionlist" field.</summary>
    public const int ActionlistFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_actionlist_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> actionlist_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  actionlist
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Actionlist {
      get { return actionlist_; }
    }

    /// <summary>Field number for the "needloop" field.</summary>
    public const int NeedloopFieldNumber = 3;
    private bool needloop_;
    /// <summary>
    ///  动作列表是否需要循环
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Needloop {
      get { return needloop_; }
      set {
        needloop_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncActionListCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncActionListCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if(!actionlist_.Equals(other.actionlist_)) return false;
      if (Needloop != other.Needloop) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0) hash ^= Guid.GetHashCode();
      hash ^= actionlist_.GetHashCode();
      if (Needloop != false) hash ^= Needloop.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Guid);
      }
      actionlist_.WriteTo(output, _repeated_actionlist_codec);
      if (Needloop != false) {
        output.WriteRawTag(24);
        output.WriteBool(Needloop);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Guid);
      }
      size += actionlist_.CalculateSize(_repeated_actionlist_codec);
      if (Needloop != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncActionListCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0) {
        Guid = other.Guid;
      }
      actionlist_.Add(other.actionlist_);
      if (other.Needloop != false) {
        Needloop = other.Needloop;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            actionlist_.AddEntriesFrom(input, _repeated_actionlist_codec);
            break;
          }
          case 24: {
            Needloop = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  前端感知到玩家进入Npc气泡感知范围, C->S
  /// </summary>
  public sealed partial class NpcBubblePerceptionCmd : pb::IMessage<NpcBubblePerceptionCmd> {
    private static readonly pb::MessageParser<NpcBubblePerceptionCmd> _parser = new pb::MessageParser<NpcBubblePerceptionCmd>(() => new NpcBubblePerceptionCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcBubblePerceptionCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneUserReflection.Descriptor.MessageTypes[117]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcBubblePerceptionCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcBubblePerceptionCmd(NpcBubblePerceptionCmd other) : this() {
      guid_ = other.guid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcBubblePerceptionCmd Clone() {
      return new NpcBubblePerceptionCmd(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private uint guid_;
    /// <summary>
    ///  npc guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NpcBubblePerceptionCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NpcBubblePerceptionCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid != 0) hash ^= Guid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Guid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Guid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NpcBubblePerceptionCmd other) {
      if (other == null) {
        return;
      }
      if (other.Guid != 0) {
        Guid = other.Guid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Guid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
