// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneQuest.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Cmd {

  /// <summary>Holder for reflection information generated from SceneQuest.proto</summary>
  public static partial class SceneQuestReflection {

    #region Descriptor
    /// <summary>File descriptor for SceneQuest.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SceneQuestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBTY2VuZVF1ZXN0LnByb3RvEgNDbWQaEVByb3RvQ29tbW9uLnByb3RvGhVQ",
            "cm90b0l0ZW1Db21tb24ucHJvdG8iQAoOQ2xpZW50RXZlbnRDbWQSDAoEZnVu",
            "YxgDIAEoCRIgCgRhcmdzGAQgAygLMhIuQ21kLlRlbXBsYXRlVmFsdWUiSAoW",
            "Q2xpZW50RXZlbnRDYWxsYmFja0NtZBIMCgRmdW5jGAMgASgJEiAKBGFyZ3MY",
            "BCADKAsyEi5DbWQuVGVtcGxhdGVWYWx1ZSI/CghRdWVzdFZhchIMCgRuYW1l",
            "GAEgASgJEhAKCHZhbHVlaW50GAIgASgFEhMKC3ZhbHVlc3RyaW5nGAMgASgJ",
            "IuEBCg5RdWVzdFRyYWNlSW5mbxINCgV0cmFjZRgBIAEoCRINCgVtYXBpZBgC",
            "IAEoDRIaCgNwb3MYAyABKAsyDS5DbWQuU2NlbmVQb3MSDQoFbnBjaWQYBCAB",
            "KA0SEQoJdHJhY2VuYW1lGAUgASgJEhIKCm5wY2dyb3VwaWQYBiABKA0SDQoF",
            "YWxpYXMYByABKAkSFQoNc2hvd3F1ZXN0bWVudRgIIAEoCBISCgpzaG93aGVh",
            "ZHVpGAkgASgIEhIKCnNob3duYXZiYXIYCiABKAgSEQoJc3Bhd25lcmlkGAsg",
            "ASgJImAKEEFiYW5kb25fU2lnbkRhdGESDQoFbnBjaWQYASABKA0SEgoKbnBj",
            "Z3JvdXBpZBgCIAEoDRIaCgNwb3MYAyABKAsyDS5DbWQuU2NlbmVQb3MSDQoF",
            "bWFwaWQYBCABKA0i8AEKCVF1ZXN0SW5mbxIKCgJpZBgBIAEoDRIaCgN2YXIY",
            "AiADKAsyDS5DbWQuUXVlc3RWYXISIgoFdHJhY2UYAyADKAsyEy5DbWQuUXVl",
            "c3RUcmFjZUluZm8SEgoKY3JlYXRldGltZRgEIAEoDRIrCg5ncm91cHF1ZXN0",
            "aW5mbxgHIAEoCzITLkNtZC5Hcm91cFF1ZXN0SW5mbxIvChBBYmFuZG9uX3Np",
            "Z25kYXRhGAkgAygLMhUuQ21kLkFiYW5kb25fU2lnbkRhdGESEgoKdHJhY2Vj",
            "b3VudBgKIAEoDRIRCglwcmVsb2FkY2cYCyADKAkiMQoMUXVlc3RMaXN0Q21k",
            "EiEKCXF1ZXN0aW5mbxgDIAMoCzIOLkNtZC5RdWVzdEluZm8iOQoLQWRkUXVl",
            "c3RDbWQSDAoEc2hvdxgBIAEoCBIcCgRpbmZvGAIgASgLMg4uQ21kLlF1ZXN0",
            "SW5mbyIeCgtEZWxRdWVzdENtZBIPCgdxdWVzdGlkGAMgASgNIi4KDlVwZGF0",
            "ZVF1ZXN0Q21kEhwKBGluZm8YAyABKAsyDi5DbWQuUXVlc3RJbmZvIkYKDVF1",
            "ZXN0Tm9kZUluZm8SDgoGbm9kZWlkGAEgASgJEiUKCWNoaWxkbm9kZRgCIAMo",
            "CzISLkNtZC5RdWVzdE5vZGVJbmZvIkMKDVF1ZXN0UHJvZ3Jlc3MSDwoHcXVl",
            "c3RpZBgBIAEoDRIhCgVub2RlcxgCIAMoCzISLkNtZC5RdWVzdE5vZGVJbmZv",
            "Il8KFFN5bmNRdWVzdFByb2dyZXNzQ21kEiMKCHN5bmN0eXBlGAEgASgOMhEu",
            "Q21kLlN5bmNEYXRhVHlwZRIiCgZxdWVzdHMYAiADKAsyEi5DbWQuUXVlc3RQ",
            "cm9ncmVzcyJAChFVcGRhdGVWYXJRdWVzdENtZBIPCgdxdWVzdGlkGAMgASgN",
            "EhoKA3ZhchgEIAMoCzINLkNtZC5RdWVzdFZhciJVChJTaG93UmV3YXJkT25E",
            "aWFsb2cSHAoFaXRlbXMYAyADKAsyDS5DbWQuSXRlbUluZm8SDQoFd29yZHMY",
            "BCADKAkSEgoKc2hvd2F0b25jZRgFIAEoCCJVCg5Hcm91cFF1ZXN0SW5mbxIV",
            "Cg1maW5pc2hlZGNvdW50GAMgASgNEhAKCGFsbGNvdW50GAQgASgNEgwKBG5h",
            "bWUYBSABKAkSDAoEaWNvbhgGIAEoCSJZCgxTaG93UXVlc3RDbWQSKwoOZ3Jv",
            "dXBxdWVzdGluZm8YASABKAsyEy5DbWQuR3JvdXBRdWVzdEluZm8SDwoHcXVl",
            "c3RpZBgCIAEoDRILCgNhZGQYAyABKAgiJAoRR2V0UmV3YXJkUXVlc3RDbWQS",
            "DwoHcXVlc3RpZBgDIAEoDSKMAgoSUXVlc3RMaXN0RGlhbG9nQ21kEi0KBnF1",
            "ZXN0cxgBIAMoCzIdLkNtZC5RdWVzdExpc3REaWFsb2dDbWQuUXVlc3QSDwoH",
            "bnBjbmFtZRgCIAEoCRIMCgR0ZXh0GAMgASgJEi0KBmV2ZW50cxgEIAMoCzId",
            "LkNtZC5RdWVzdExpc3REaWFsb2dDbWQuRXZlbnQaQgoFUXVlc3QSCgoCaWQY",
            "ASABKA0SDAoEbmFtZRgCIAEoCRIMCgRmbGFnGAMgASgNEhEKCWdyb3VwbmFt",
            "ZRgEIAEoCRo1CgVFdmVudBIKCgJpZBgBIAEoDRIMCgRuYW1lGAIgASgJEhIK",
            "CmRsZ3RleHRrZXkYAyABKAQiOQoVUmV0UXVlc3RMaXN0RGlhbG9nQ21kEg8K",
            "B3F1ZXN0aWQYASABKA0SDwoHZXZlbnRpZBgCIAEoDSKXAQoSUXVlc3RQb3Np",
            "dGlvblRyYWNlEg8KB3F1ZXN0aWQYASABKA0SDQoFbnBjaWQYAiABKA0SEgoK",
            "bnBjZ3JvdXBpZBgDIAEoDRIfCghsb2NhdGlvbhgEIAEoCzINLkNtZC5TY2Vu",
            "ZVBvcxINCgVtYXBpZBgFIAEoDRIdCgRmbGFnGAYgASgOMg8uQ21kLkVRdWVz",
            "dEZsYWciTAoZUXVlc3RQb3NpdGlvblRyYWNlTGlzdENtZBIvCg5xdWVzdHRy",
            "YWNlaW5mbxgBIAMoCzIXLkNtZC5RdWVzdFBvc2l0aW9uVHJhY2UiOwoRU2V0",
            "UXVlc3RGaWx0ZXJDbWQSEgoKb3BlbmZpbHRlchgBIAEoCBISCgpmaWx0ZXJu",
            "YW1lGAIgASgJIisKC0FkZFN0YWdlQ21kEhwKBGluZm8YASABKAsyDi5DbWQu",
            "UXVlc3RJbmZvIh4KC0RlbFN0YWdlQ21kEg8KB3F1ZXN0aWQYASABKA0iLgoO",
            "VXBkYXRlU3RhZ2VDbWQSHAoEaW5mbxgBIAEoCzIOLkNtZC5RdWVzdEluZm8i",
            "QAoRVXBkYXRlVmFyU3RhZ2VDbWQSDwoHcXVlc3RpZBgBIAEoDRIaCgN2YXIY",
            "AiADKAsyDS5DbWQuUXVlc3RWYXIiQQoRU3RhZ2VDb3VudERvd25DbWQSCgoC",
            "aWQYASABKAkSEAoIbGVmdHRpbWUYAiABKAUSDgoGc3RhdHVzGAMgASgNIiUK",
            "EUNsb3NlU3Rhckd1aWRlQ21kEhAKCHF1ZXN0aWRzGAEgAygNIlEKElNlbmRR",
            "dWVzdE5vZGVzRGF0YRITCgtzdHJfcXVlc3RpZBgBIAEoCRITCgtpbnRfcXVl",
            "c3RpZBgCIAEoDRIRCglub2RlZGF0YXMYAyADKAkiYQoVQ2xpZW50Tm9kZUNh",
            "bGxiYWNrQ21kEhMKC3N0cl9xdWVzdGlkGAEgASgJEhMKC2ludF9xdWVzdGlk",
            "GAIgASgNEg4KBm5vZGVpZBgDIAEoCRIOCgZyZXN1bHQYBCABKA0iTwoUQ2xp",
            "ZW50U3RvcnlDaG9vc2VDbWQSDwoHcXVlc3RpZBgBIAEoDRIOCgZub2RlaWQY",
            "AiABKAkSFgoOc2VsZWN0ZWRub2RlaWQYAyABKAkiggEKD1F1ZXN0RmluaXNo",
            "RGF0YRI5Cg1xdWVzdGZpbmlzaGVkGAEgAygLMiIuQ21kLlF1ZXN0RmluaXNo",
            "RGF0YS5RdWVzdEZpbmlzaGVkGjQKDVF1ZXN0RmluaXNoZWQSDwoHcXVlc3Rp",
            "ZBgBIAEoDRISCgpmaW5pc2h0aW1lGAIgASgNIjYKEVNldFVzZXJDYW5Nb3Zl",
            "Q21kEhAKCGxhc3R0aW1lGAEgASgNEg8KB2Nhbm1vdmUYAiABKAgiEwoRQ2hh",
            "bmdlV1hLSkF1cmFDbWQiPwoRVXBkYXRlUXVlc3RWYXJDbWQSDgoGbm9kZWlk",
            "GAEgASgJEhoKA3ZhchgCIAMoCzINLkNtZC5RdWVzdFZhcipZCgxTeW5jRGF0",
            "YVR5cGUSFgoSU1lOQ19EQVRBX1RZUEVfQUxMEAASFgoSU1lOQ19EQVRBX1RZ",
            "UEVfQUREEAESGQoVU1lOQ19EQVRBX1RZUEVfUkVNT1ZFEAIqiAEKDlF1ZXN0",
            "VGl0bGVGbGFnEhsKF1FVRVNUX1RJVExFX0ZMQUdfTk9STUFMEAASHwobUVVF",
            "U1RfVElUTEVfRkxBR19BQ0NFUFRBQkxFEAESGwoXUVVFU1RfVElUTEVfRkxB",
            "R19TVUJNSVQQAhIbChdRVUVTVF9USVRMRV9GTEFHX1JFUEFJUhADKpsBChNU",
            "aW1lRXZlbnRTdGF0dXNUeXBlEhgKFFRJTUVFVkVOVF9TVEFUVVNfTUlOEAAS",
            "GgoWVElNRUVWRU5UX1NUQVRVU19TVEFSVBABEhoKFlRJTUVFVkVOVF9TVEFU",
            "VVNfUEFVU0UQAhIYChRUSU1FRVZFTlRfU1RBVFVTX0VORBADEhgKFFRJTUVF",
            "VkVOVF9TVEFUVVNfTUFYEAQqgwIKElF1ZXN0TnBjU3JvdWNlVHlwZRIVChFR",
            "VUVTVF9TUk9VQ0VfVFlQRRAAEh0KGURBSUxZQUNUSVZJVFlfU1JPVUNFX1RZ",
            "UEUQARIdChlDTFVCQ0hBTExFTkdFX1NST1VDRV9UWVBFEAISHQoZRFlOQ0lN",
            "QUNTVEFHRV9TUk9VQ0VfVFlQRRADEiEKHUFDVElWRURBVElOR1RSQU5TX1NS",
            "T1VDRV9UWVBFEAQSHAoYQUNUSVZFREFUSU5HX1NST1VDRV9UWVBFEAUSFAoQ",
            "V1hLSl9TUk9VQ0VfVFlQRRAGEiIKHkNMVUJDSEFMTEVOR0VfQ09QWV9TUk9V",
            "Q0VfVFlQRRAHQgdaBS47Q21kYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Cmd.ProtoCommonReflection.Descriptor, global::Cmd.ProtoItemCommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Cmd.SyncDataType), typeof(global::Cmd.QuestTitleFlag), typeof(global::Cmd.TimeEventStatusType), typeof(global::Cmd.QuestNpcSrouceType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ClientEventCmd), global::Cmd.ClientEventCmd.Parser, new[]{ "Func", "Args" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ClientEventCallbackCmd), global::Cmd.ClientEventCallbackCmd.Parser, new[]{ "Func", "Args" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.QuestVar), global::Cmd.QuestVar.Parser, new[]{ "Name", "Valueint", "Valuestring" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.QuestTraceInfo), global::Cmd.QuestTraceInfo.Parser, new[]{ "Trace", "Mapid", "Pos", "Npcid", "Tracename", "Npcgroupid", "Alias", "Showquestmenu", "Showheadui", "Shownavbar", "Spawnerid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.Abandon_SignData), global::Cmd.Abandon_SignData.Parser, new[]{ "Npcid", "Npcgroupid", "Pos", "Mapid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.QuestInfo), global::Cmd.QuestInfo.Parser, new[]{ "Id", "Var", "Trace", "Createtime", "Groupquestinfo", "AbandonSigndata", "Tracecount", "Preloadcg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.QuestListCmd), global::Cmd.QuestListCmd.Parser, new[]{ "Questinfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.AddQuestCmd), global::Cmd.AddQuestCmd.Parser, new[]{ "Show", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.DelQuestCmd), global::Cmd.DelQuestCmd.Parser, new[]{ "Questid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UpdateQuestCmd), global::Cmd.UpdateQuestCmd.Parser, new[]{ "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.QuestNodeInfo), global::Cmd.QuestNodeInfo.Parser, new[]{ "Nodeid", "Childnode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.QuestProgress), global::Cmd.QuestProgress.Parser, new[]{ "Questid", "Nodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SyncQuestProgressCmd), global::Cmd.SyncQuestProgressCmd.Parser, new[]{ "Synctype", "Quests" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UpdateVarQuestCmd), global::Cmd.UpdateVarQuestCmd.Parser, new[]{ "Questid", "Var" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ShowRewardOnDialog), global::Cmd.ShowRewardOnDialog.Parser, new[]{ "Items", "Words", "Showatonce" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.GroupQuestInfo), global::Cmd.GroupQuestInfo.Parser, new[]{ "Finishedcount", "Allcount", "Name", "Icon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ShowQuestCmd), global::Cmd.ShowQuestCmd.Parser, new[]{ "Groupquestinfo", "Questid", "Add" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.GetRewardQuestCmd), global::Cmd.GetRewardQuestCmd.Parser, new[]{ "Questid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.QuestListDialogCmd), global::Cmd.QuestListDialogCmd.Parser, new[]{ "Quests", "Npcname", "Text", "Events" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.QuestListDialogCmd.Types.Quest), global::Cmd.QuestListDialogCmd.Types.Quest.Parser, new[]{ "Id", "Name", "Flag", "Groupname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.QuestListDialogCmd.Types.Event), global::Cmd.QuestListDialogCmd.Types.Event.Parser, new[]{ "Id", "Name", "Dlgtextkey" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.RetQuestListDialogCmd), global::Cmd.RetQuestListDialogCmd.Parser, new[]{ "Questid", "Eventid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.QuestPositionTrace), global::Cmd.QuestPositionTrace.Parser, new[]{ "Questid", "Npcid", "Npcgroupid", "Location", "Mapid", "Flag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.QuestPositionTraceListCmd), global::Cmd.QuestPositionTraceListCmd.Parser, new[]{ "Questtraceinfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SetQuestFilterCmd), global::Cmd.SetQuestFilterCmd.Parser, new[]{ "Openfilter", "Filtername" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.AddStageCmd), global::Cmd.AddStageCmd.Parser, new[]{ "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.DelStageCmd), global::Cmd.DelStageCmd.Parser, new[]{ "Questid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UpdateStageCmd), global::Cmd.UpdateStageCmd.Parser, new[]{ "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UpdateVarStageCmd), global::Cmd.UpdateVarStageCmd.Parser, new[]{ "Questid", "Var" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.StageCountDownCmd), global::Cmd.StageCountDownCmd.Parser, new[]{ "Id", "Lefttime", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.CloseStarGuideCmd), global::Cmd.CloseStarGuideCmd.Parser, new[]{ "Questids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SendQuestNodesData), global::Cmd.SendQuestNodesData.Parser, new[]{ "StrQuestid", "IntQuestid", "Nodedatas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ClientNodeCallbackCmd), global::Cmd.ClientNodeCallbackCmd.Parser, new[]{ "StrQuestid", "IntQuestid", "Nodeid", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ClientStoryChooseCmd), global::Cmd.ClientStoryChooseCmd.Parser, new[]{ "Questid", "Nodeid", "Selectednodeid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.QuestFinishData), global::Cmd.QuestFinishData.Parser, new[]{ "Questfinished" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.QuestFinishData.Types.QuestFinished), global::Cmd.QuestFinishData.Types.QuestFinished.Parser, new[]{ "Questid", "Finishtime" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.SetUserCanMoveCmd), global::Cmd.SetUserCanMoveCmd.Parser, new[]{ "Lasttime", "Canmove" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.ChangeWXKJAuraCmd), global::Cmd.ChangeWXKJAuraCmd.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cmd.UpdateQuestVarCmd), global::Cmd.UpdateQuestVarCmd.Parser, new[]{ "Nodeid", "Var" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  npc个人数据同步方式
  /// </summary>
  public enum SyncDataType {
    /// <summary>
    ///  全量更新
    /// </summary>
    [pbr::OriginalName("SYNC_DATA_TYPE_ALL")] All = 0,
    /// <summary>
    ///  增量更新
    /// </summary>
    [pbr::OriginalName("SYNC_DATA_TYPE_ADD")] Add = 1,
    /// <summary>
    ///  删除单条
    /// </summary>
    [pbr::OriginalName("SYNC_DATA_TYPE_REMOVE")] Remove = 2,
  }

  public enum QuestTitleFlag {
    /// <summary>
    ///  普通任务
    /// </summary>
    [pbr::OriginalName("QUEST_TITLE_FLAG_NORMAL")] Normal = 0,
    /// <summary>
    ///  可接取任务
    /// </summary>
    [pbr::OriginalName("QUEST_TITLE_FLAG_ACCEPTABLE")] Acceptable = 1,
    /// <summary>
    ///  可交付任务
    /// </summary>
    [pbr::OriginalName("QUEST_TITLE_FLAG_SUBMIT")] Submit = 2,
    /// <summary>
    ///  修复任务
    /// </summary>
    [pbr::OriginalName("QUEST_TITLE_FLAG_REPAIR")] Repair = 3,
  }

  /// <summary>
  /// 定时器状态类型
  /// </summary>
  public enum TimeEventStatusType {
    [pbr::OriginalName("TIMEEVENT_STATUS_MIN")] TimeeventStatusMin = 0,
    [pbr::OriginalName("TIMEEVENT_STATUS_START")] TimeeventStatusStart = 1,
    [pbr::OriginalName("TIMEEVENT_STATUS_PAUSE")] TimeeventStatusPause = 2,
    [pbr::OriginalName("TIMEEVENT_STATUS_END")] TimeeventStatusEnd = 3,
    [pbr::OriginalName("TIMEEVENT_STATUS_MAX")] TimeeventStatusMax = 4,
  }

  public enum QuestNpcSrouceType {
    /// <summary>
    ///  默认任务
    /// </summary>
    [pbr::OriginalName("QUEST_SROUCE_TYPE")] QuestSrouceType = 0,
    /// <summary>
    ///  日常活动
    /// </summary>
    [pbr::OriginalName("DAILYACTIVITY_SROUCE_TYPE")] DailyactivitySrouceType = 1,
    /// <summary>
    ///  天团挑战
    /// </summary>
    [pbr::OriginalName("CLUBCHALLENGE_SROUCE_TYPE")] ClubchallengeSrouceType = 2,
    /// <summary>
    ///  动态关卡
    /// </summary>
    [pbr::OriginalName("DYNCIMACSTAGE_SROUCE_TYPE")] DyncimacstageSrouceType = 3,
    /// <summary>
    ///  主动约会传送
    /// </summary>
    [pbr::OriginalName("ACTIVEDATINGTRANS_SROUCE_TYPE")] ActivedatingtransSrouceType = 4,
    /// <summary>
    ///  主动约会
    /// </summary>
    [pbr::OriginalName("ACTIVEDATING_SROUCE_TYPE")] ActivedatingSrouceType = 5,
    /// <summary>
    ///  妄想空间
    /// </summary>
    [pbr::OriginalName("WXKJ_SROUCE_TYPE")] WxkjSrouceType = 6,
    /// <summary>
    ///  天团挑战原地副本
    /// </summary>
    [pbr::OriginalName("CLUBCHALLENGE_COPY_SROUCE_TYPE")] ClubchallengeCopySrouceType = 7,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  任务rpc调用,S->C
  /// </summary>
  public sealed partial class ClientEventCmd : pb::IMessage<ClientEventCmd> {
    private static readonly pb::MessageParser<ClientEventCmd> _parser = new pb::MessageParser<ClientEventCmd>(() => new ClientEventCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientEventCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientEventCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientEventCmd(ClientEventCmd other) : this() {
      func_ = other.func_;
      args_ = other.args_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientEventCmd Clone() {
      return new ClientEventCmd(this);
    }

    /// <summary>Field number for the "func" field.</summary>
    public const int FuncFieldNumber = 3;
    private string func_ = "";
    /// <summary>
    ///  调用函数名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Func {
      get { return func_; }
      set {
        func_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Cmd.TemplateValue> _repeated_args_codec
        = pb::FieldCodec.ForMessage(34, global::Cmd.TemplateValue.Parser);
    private readonly pbc::RepeatedField<global::Cmd.TemplateValue> args_ = new pbc::RepeatedField<global::Cmd.TemplateValue>();
    /// <summary>
    ///  函数参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.TemplateValue> Args {
      get { return args_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientEventCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientEventCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Func != other.Func) return false;
      if(!args_.Equals(other.args_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Func.Length != 0) hash ^= Func.GetHashCode();
      hash ^= args_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Func.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Func);
      }
      args_.WriteTo(output, _repeated_args_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Func.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Func);
      }
      size += args_.CalculateSize(_repeated_args_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientEventCmd other) {
      if (other == null) {
        return;
      }
      if (other.Func.Length != 0) {
        Func = other.Func;
      }
      args_.Add(other.args_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            Func = input.ReadString();
            break;
          }
          case 34: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  任务rpc回调,C->S
  /// </summary>
  public sealed partial class ClientEventCallbackCmd : pb::IMessage<ClientEventCallbackCmd> {
    private static readonly pb::MessageParser<ClientEventCallbackCmd> _parser = new pb::MessageParser<ClientEventCallbackCmd>(() => new ClientEventCallbackCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientEventCallbackCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientEventCallbackCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientEventCallbackCmd(ClientEventCallbackCmd other) : this() {
      func_ = other.func_;
      args_ = other.args_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientEventCallbackCmd Clone() {
      return new ClientEventCallbackCmd(this);
    }

    /// <summary>Field number for the "func" field.</summary>
    public const int FuncFieldNumber = 3;
    private string func_ = "";
    /// <summary>
    ///  回调函数名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Func {
      get { return func_; }
      set {
        func_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Cmd.TemplateValue> _repeated_args_codec
        = pb::FieldCodec.ForMessage(34, global::Cmd.TemplateValue.Parser);
    private readonly pbc::RepeatedField<global::Cmd.TemplateValue> args_ = new pbc::RepeatedField<global::Cmd.TemplateValue>();
    /// <summary>
    ///  函数参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.TemplateValue> Args {
      get { return args_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientEventCallbackCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientEventCallbackCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Func != other.Func) return false;
      if(!args_.Equals(other.args_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Func.Length != 0) hash ^= Func.GetHashCode();
      hash ^= args_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Func.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Func);
      }
      args_.WriteTo(output, _repeated_args_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Func.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Func);
      }
      size += args_.CalculateSize(_repeated_args_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientEventCallbackCmd other) {
      if (other == null) {
        return;
      }
      if (other.Func.Length != 0) {
        Func = other.Func;
      }
      args_.Add(other.args_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            Func = input.ReadString();
            break;
          }
          case 34: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  任务变量
  /// </summary>
  public sealed partial class QuestVar : pb::IMessage<QuestVar> {
    private static readonly pb::MessageParser<QuestVar> _parser = new pb::MessageParser<QuestVar>(() => new QuestVar());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuestVar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestVar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestVar(QuestVar other) : this() {
      name_ = other.name_;
      valueint_ = other.valueint_;
      valuestring_ = other.valuestring_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestVar Clone() {
      return new QuestVar(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///  变量名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "valueint" field.</summary>
    public const int ValueintFieldNumber = 2;
    private int valueint_;
    /// <summary>
    ///  变量值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Valueint {
      get { return valueint_; }
      set {
        valueint_ = value;
      }
    }

    /// <summary>Field number for the "valuestring" field.</summary>
    public const int ValuestringFieldNumber = 3;
    private string valuestring_ = "";
    /// <summary>
    ///  变量值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Valuestring {
      get { return valuestring_; }
      set {
        valuestring_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuestVar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuestVar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Valueint != other.Valueint) return false;
      if (Valuestring != other.Valuestring) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Valueint != 0) hash ^= Valueint.GetHashCode();
      if (Valuestring.Length != 0) hash ^= Valuestring.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Valueint != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Valueint);
      }
      if (Valuestring.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Valuestring);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Valueint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Valueint);
      }
      if (Valuestring.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Valuestring);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuestVar other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Valueint != 0) {
        Valueint = other.Valueint;
      }
      if (other.Valuestring.Length != 0) {
        Valuestring = other.Valuestring;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Valueint = input.ReadInt32();
            break;
          }
          case 26: {
            Valuestring = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  任务跟踪信息,S->C
  /// </summary>
  public sealed partial class QuestTraceInfo : pb::IMessage<QuestTraceInfo> {
    private static readonly pb::MessageParser<QuestTraceInfo> _parser = new pb::MessageParser<QuestTraceInfo>(() => new QuestTraceInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuestTraceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestTraceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestTraceInfo(QuestTraceInfo other) : this() {
      trace_ = other.trace_;
      mapid_ = other.mapid_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      npcid_ = other.npcid_;
      tracename_ = other.tracename_;
      npcgroupid_ = other.npcgroupid_;
      alias_ = other.alias_;
      showquestmenu_ = other.showquestmenu_;
      showheadui_ = other.showheadui_;
      shownavbar_ = other.shownavbar_;
      spawnerid_ = other.spawnerid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestTraceInfo Clone() {
      return new QuestTraceInfo(this);
    }

    /// <summary>Field number for the "trace" field.</summary>
    public const int TraceFieldNumber = 1;
    private string trace_ = "";
    /// <summary>
    ///  显示文本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Trace {
      get { return trace_; }
      set {
        trace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 2;
    private uint mapid_;
    /// <summary>
    ///  地图id,表Map.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private global::Cmd.ScenePos pos_;
    /// <summary>
    ///  任务目的地坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "npcid" field.</summary>
    public const int NpcidFieldNumber = 4;
    private uint npcid_;
    /// <summary>
    ///  任务推进npc,表Npc.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Npcid {
      get { return npcid_; }
      set {
        npcid_ = value;
      }
    }

    /// <summary>Field number for the "tracename" field.</summary>
    public const int TracenameFieldNumber = 5;
    private string tracename_ = "";
    /// <summary>
    ///  多条跟踪对应的变量名（表示该条追踪是否完成）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tracename {
      get { return tracename_; }
      set {
        tracename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "npcgroupid" field.</summary>
    public const int NpcgroupidFieldNumber = 6;
    private uint npcgroupid_;
    /// <summary>
    ///  任务推进npc组id,表MonsterGroup.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Npcgroupid {
      get { return npcgroupid_; }
      set {
        npcgroupid_ = value;
      }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 7;
    private string alias_ = "";
    /// <summary>
    ///  别名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "showquestmenu" field.</summary>
    public const int ShowquestmenuFieldNumber = 8;
    private bool showquestmenu_;
    /// <summary>
    ///  显示任务栏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Showquestmenu {
      get { return showquestmenu_; }
      set {
        showquestmenu_ = value;
      }
    }

    /// <summary>Field number for the "showheadui" field.</summary>
    public const int ShowheaduiFieldNumber = 9;
    private bool showheadui_;
    /// <summary>
    ///  显示头顶图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Showheadui {
      get { return showheadui_; }
      set {
        showheadui_ = value;
      }
    }

    /// <summary>Field number for the "shownavbar" field.</summary>
    public const int ShownavbarFieldNumber = 10;
    private bool shownavbar_;
    /// <summary>
    ///  显示导航条
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Shownavbar {
      get { return shownavbar_; }
      set {
        shownavbar_ = value;
      }
    }

    /// <summary>Field number for the "spawnerid" field.</summary>
    public const int SpawneridFieldNumber = 11;
    private string spawnerid_ = "";
    /// <summary>
    ///  Spawner唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Spawnerid {
      get { return spawnerid_; }
      set {
        spawnerid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuestTraceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuestTraceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Trace != other.Trace) return false;
      if (Mapid != other.Mapid) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Npcid != other.Npcid) return false;
      if (Tracename != other.Tracename) return false;
      if (Npcgroupid != other.Npcgroupid) return false;
      if (Alias != other.Alias) return false;
      if (Showquestmenu != other.Showquestmenu) return false;
      if (Showheadui != other.Showheadui) return false;
      if (Shownavbar != other.Shownavbar) return false;
      if (Spawnerid != other.Spawnerid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Trace.Length != 0) hash ^= Trace.GetHashCode();
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Npcid != 0) hash ^= Npcid.GetHashCode();
      if (Tracename.Length != 0) hash ^= Tracename.GetHashCode();
      if (Npcgroupid != 0) hash ^= Npcgroupid.GetHashCode();
      if (Alias.Length != 0) hash ^= Alias.GetHashCode();
      if (Showquestmenu != false) hash ^= Showquestmenu.GetHashCode();
      if (Showheadui != false) hash ^= Showheadui.GetHashCode();
      if (Shownavbar != false) hash ^= Shownavbar.GetHashCode();
      if (Spawnerid.Length != 0) hash ^= Spawnerid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Trace.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Trace);
      }
      if (Mapid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Mapid);
      }
      if (pos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pos);
      }
      if (Npcid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Npcid);
      }
      if (Tracename.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Tracename);
      }
      if (Npcgroupid != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Npcgroupid);
      }
      if (Alias.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Alias);
      }
      if (Showquestmenu != false) {
        output.WriteRawTag(64);
        output.WriteBool(Showquestmenu);
      }
      if (Showheadui != false) {
        output.WriteRawTag(72);
        output.WriteBool(Showheadui);
      }
      if (Shownavbar != false) {
        output.WriteRawTag(80);
        output.WriteBool(Shownavbar);
      }
      if (Spawnerid.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Spawnerid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Trace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Trace);
      }
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mapid);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Npcid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Npcid);
      }
      if (Tracename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tracename);
      }
      if (Npcgroupid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Npcgroupid);
      }
      if (Alias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      if (Showquestmenu != false) {
        size += 1 + 1;
      }
      if (Showheadui != false) {
        size += 1 + 1;
      }
      if (Shownavbar != false) {
        size += 1 + 1;
      }
      if (Spawnerid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Spawnerid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuestTraceInfo other) {
      if (other == null) {
        return;
      }
      if (other.Trace.Length != 0) {
        Trace = other.Trace;
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Npcid != 0) {
        Npcid = other.Npcid;
      }
      if (other.Tracename.Length != 0) {
        Tracename = other.Tracename;
      }
      if (other.Npcgroupid != 0) {
        Npcgroupid = other.Npcgroupid;
      }
      if (other.Alias.Length != 0) {
        Alias = other.Alias;
      }
      if (other.Showquestmenu != false) {
        Showquestmenu = other.Showquestmenu;
      }
      if (other.Showheadui != false) {
        Showheadui = other.Showheadui;
      }
      if (other.Shownavbar != false) {
        Shownavbar = other.Shownavbar;
      }
      if (other.Spawnerid.Length != 0) {
        Spawnerid = other.Spawnerid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Trace = input.ReadString();
            break;
          }
          case 16: {
            Mapid = input.ReadUInt32();
            break;
          }
          case 26: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 32: {
            Npcid = input.ReadUInt32();
            break;
          }
          case 42: {
            Tracename = input.ReadString();
            break;
          }
          case 48: {
            Npcgroupid = input.ReadUInt32();
            break;
          }
          case 58: {
            Alias = input.ReadString();
            break;
          }
          case 64: {
            Showquestmenu = input.ReadBool();
            break;
          }
          case 72: {
            Showheadui = input.ReadBool();
            break;
          }
          case 80: {
            Shownavbar = input.ReadBool();
            break;
          }
          case 90: {
            Spawnerid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 标记信息
  /// </summary>
  public sealed partial class Abandon_SignData : pb::IMessage<Abandon_SignData> {
    private static readonly pb::MessageParser<Abandon_SignData> _parser = new pb::MessageParser<Abandon_SignData>(() => new Abandon_SignData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Abandon_SignData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Abandon_SignData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Abandon_SignData(Abandon_SignData other) : this() {
      npcid_ = other.npcid_;
      npcgroupid_ = other.npcgroupid_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      mapid_ = other.mapid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Abandon_SignData Clone() {
      return new Abandon_SignData(this);
    }

    /// <summary>Field number for the "npcid" field.</summary>
    public const int NpcidFieldNumber = 1;
    private uint npcid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Npcid {
      get { return npcid_; }
      set {
        npcid_ = value;
      }
    }

    /// <summary>Field number for the "npcgroupid" field.</summary>
    public const int NpcgroupidFieldNumber = 2;
    private uint npcgroupid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Npcgroupid {
      get { return npcgroupid_; }
      set {
        npcgroupid_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private global::Cmd.ScenePos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 4;
    private uint mapid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Abandon_SignData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Abandon_SignData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Npcid != other.Npcid) return false;
      if (Npcgroupid != other.Npcgroupid) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Mapid != other.Mapid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Npcid != 0) hash ^= Npcid.GetHashCode();
      if (Npcgroupid != 0) hash ^= Npcgroupid.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Npcid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Npcid);
      }
      if (Npcgroupid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Npcgroupid);
      }
      if (pos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pos);
      }
      if (Mapid != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Mapid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Npcid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Npcid);
      }
      if (Npcgroupid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Npcgroupid);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mapid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Abandon_SignData other) {
      if (other == null) {
        return;
      }
      if (other.Npcid != 0) {
        Npcid = other.Npcid;
      }
      if (other.Npcgroupid != 0) {
        Npcgroupid = other.Npcgroupid;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Cmd.ScenePos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Npcid = input.ReadUInt32();
            break;
          }
          case 16: {
            Npcgroupid = input.ReadUInt32();
            break;
          }
          case 26: {
            if (pos_ == null) {
              pos_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 32: {
            Mapid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  任务信息,S->C
  /// </summary>
  public sealed partial class QuestInfo : pb::IMessage<QuestInfo> {
    private static readonly pb::MessageParser<QuestInfo> _parser = new pb::MessageParser<QuestInfo>(() => new QuestInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuestInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestInfo(QuestInfo other) : this() {
      id_ = other.id_;
      var_ = other.var_.Clone();
      trace_ = other.trace_.Clone();
      createtime_ = other.createtime_;
      Groupquestinfo = other.groupquestinfo_ != null ? other.Groupquestinfo.Clone() : null;
      abandonSigndata_ = other.abandonSigndata_.Clone();
      tracecount_ = other.tracecount_;
      preloadcg_ = other.preloadcg_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestInfo Clone() {
      return new QuestInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///  任务id,表Quest.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "var" field.</summary>
    public const int VarFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cmd.QuestVar> _repeated_var_codec
        = pb::FieldCodec.ForMessage(18, global::Cmd.QuestVar.Parser);
    private readonly pbc::RepeatedField<global::Cmd.QuestVar> var_ = new pbc::RepeatedField<global::Cmd.QuestVar>();
    /// <summary>
    ///  任务变量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.QuestVar> Var {
      get { return var_; }
    }

    /// <summary>Field number for the "trace" field.</summary>
    public const int TraceFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.QuestTraceInfo> _repeated_trace_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.QuestTraceInfo.Parser);
    private readonly pbc::RepeatedField<global::Cmd.QuestTraceInfo> trace_ = new pbc::RepeatedField<global::Cmd.QuestTraceInfo>();
    /// <summary>
    ///  跟踪信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.QuestTraceInfo> Trace {
      get { return trace_; }
    }

    /// <summary>Field number for the "createtime" field.</summary>
    public const int CreatetimeFieldNumber = 4;
    private uint createtime_;
    /// <summary>
    ///  创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Createtime {
      get { return createtime_; }
      set {
        createtime_ = value;
      }
    }

    /// <summary>Field number for the "groupquestinfo" field.</summary>
    public const int GroupquestinfoFieldNumber = 7;
    private global::Cmd.GroupQuestInfo groupquestinfo_;
    /// <summary>
    ///  任务组信息(v1.4废弃不用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.GroupQuestInfo Groupquestinfo {
      get { return groupquestinfo_; }
      set {
        groupquestinfo_ = value;
      }
    }

    /// <summary>Field number for the "Abandon_signdata" field.</summary>
    public const int AbandonSigndataFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Cmd.Abandon_SignData> _repeated_abandonSigndata_codec
        = pb::FieldCodec.ForMessage(74, global::Cmd.Abandon_SignData.Parser);
    private readonly pbc::RepeatedField<global::Cmd.Abandon_SignData> abandonSigndata_ = new pbc::RepeatedField<global::Cmd.Abandon_SignData>();
    /// <summary>
    /// 标记信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.Abandon_SignData> AbandonSigndata {
      get { return abandonSigndata_; }
    }

    /// <summary>Field number for the "tracecount" field.</summary>
    public const int TracecountFieldNumber = 10;
    private uint tracecount_;
    /// <summary>
    ///  追踪计数,显示优化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Tracecount {
      get { return tracecount_; }
      set {
        tracecount_ = value;
      }
    }

    /// <summary>Field number for the "preloadcg" field.</summary>
    public const int PreloadcgFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_preloadcg_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> preloadcg_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  预先加载cg
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Preloadcg {
      get { return preloadcg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuestInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuestInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!var_.Equals(other.var_)) return false;
      if(!trace_.Equals(other.trace_)) return false;
      if (Createtime != other.Createtime) return false;
      if (!object.Equals(Groupquestinfo, other.Groupquestinfo)) return false;
      if(!abandonSigndata_.Equals(other.abandonSigndata_)) return false;
      if (Tracecount != other.Tracecount) return false;
      if(!preloadcg_.Equals(other.preloadcg_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= var_.GetHashCode();
      hash ^= trace_.GetHashCode();
      if (Createtime != 0) hash ^= Createtime.GetHashCode();
      if (groupquestinfo_ != null) hash ^= Groupquestinfo.GetHashCode();
      hash ^= abandonSigndata_.GetHashCode();
      if (Tracecount != 0) hash ^= Tracecount.GetHashCode();
      hash ^= preloadcg_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      var_.WriteTo(output, _repeated_var_codec);
      trace_.WriteTo(output, _repeated_trace_codec);
      if (Createtime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Createtime);
      }
      if (groupquestinfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Groupquestinfo);
      }
      abandonSigndata_.WriteTo(output, _repeated_abandonSigndata_codec);
      if (Tracecount != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Tracecount);
      }
      preloadcg_.WriteTo(output, _repeated_preloadcg_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      size += var_.CalculateSize(_repeated_var_codec);
      size += trace_.CalculateSize(_repeated_trace_codec);
      if (Createtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Createtime);
      }
      if (groupquestinfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Groupquestinfo);
      }
      size += abandonSigndata_.CalculateSize(_repeated_abandonSigndata_codec);
      if (Tracecount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tracecount);
      }
      size += preloadcg_.CalculateSize(_repeated_preloadcg_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuestInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      var_.Add(other.var_);
      trace_.Add(other.trace_);
      if (other.Createtime != 0) {
        Createtime = other.Createtime;
      }
      if (other.groupquestinfo_ != null) {
        if (groupquestinfo_ == null) {
          groupquestinfo_ = new global::Cmd.GroupQuestInfo();
        }
        Groupquestinfo.MergeFrom(other.Groupquestinfo);
      }
      abandonSigndata_.Add(other.abandonSigndata_);
      if (other.Tracecount != 0) {
        Tracecount = other.Tracecount;
      }
      preloadcg_.Add(other.preloadcg_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            var_.AddEntriesFrom(input, _repeated_var_codec);
            break;
          }
          case 26: {
            trace_.AddEntriesFrom(input, _repeated_trace_codec);
            break;
          }
          case 32: {
            Createtime = input.ReadUInt32();
            break;
          }
          case 58: {
            if (groupquestinfo_ == null) {
              groupquestinfo_ = new global::Cmd.GroupQuestInfo();
            }
            input.ReadMessage(groupquestinfo_);
            break;
          }
          case 74: {
            abandonSigndata_.AddEntriesFrom(input, _repeated_abandonSigndata_codec);
            break;
          }
          case 80: {
            Tracecount = input.ReadUInt32();
            break;
          }
          case 90: {
            preloadcg_.AddEntriesFrom(input, _repeated_preloadcg_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  任务列表,S->C
  /// </summary>
  public sealed partial class QuestListCmd : pb::IMessage<QuestListCmd> {
    private static readonly pb::MessageParser<QuestListCmd> _parser = new pb::MessageParser<QuestListCmd>(() => new QuestListCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuestListCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestListCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestListCmd(QuestListCmd other) : this() {
      questinfo_ = other.questinfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestListCmd Clone() {
      return new QuestListCmd(this);
    }

    /// <summary>Field number for the "questinfo" field.</summary>
    public const int QuestinfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.QuestInfo> _repeated_questinfo_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.QuestInfo.Parser);
    private readonly pbc::RepeatedField<global::Cmd.QuestInfo> questinfo_ = new pbc::RepeatedField<global::Cmd.QuestInfo>();
    /// <summary>
    ///  任务信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.QuestInfo> Questinfo {
      get { return questinfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuestListCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuestListCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!questinfo_.Equals(other.questinfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= questinfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      questinfo_.WriteTo(output, _repeated_questinfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += questinfo_.CalculateSize(_repeated_questinfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuestListCmd other) {
      if (other == null) {
        return;
      }
      questinfo_.Add(other.questinfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            questinfo_.AddEntriesFrom(input, _repeated_questinfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  添加任务,S->C
  /// </summary>
  public sealed partial class AddQuestCmd : pb::IMessage<AddQuestCmd> {
    private static readonly pb::MessageParser<AddQuestCmd> _parser = new pb::MessageParser<AddQuestCmd>(() => new AddQuestCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddQuestCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddQuestCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddQuestCmd(AddQuestCmd other) : this() {
      show_ = other.show_;
      Info = other.info_ != null ? other.Info.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddQuestCmd Clone() {
      return new AddQuestCmd(this);
    }

    /// <summary>Field number for the "show" field.</summary>
    public const int ShowFieldNumber = 1;
    private bool show_;
    /// <summary>
    ///  是否显示新增任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Show {
      get { return show_; }
      set {
        show_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private global::Cmd.QuestInfo info_;
    /// <summary>
    ///  任务信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.QuestInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddQuestCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddQuestCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Show != other.Show) return false;
      if (!object.Equals(Info, other.Info)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Show != false) hash ^= Show.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Show != false) {
        output.WriteRawTag(8);
        output.WriteBool(Show);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Show != false) {
        size += 1 + 1;
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddQuestCmd other) {
      if (other == null) {
        return;
      }
      if (other.Show != false) {
        Show = other.Show;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          info_ = new global::Cmd.QuestInfo();
        }
        Info.MergeFrom(other.Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Show = input.ReadBool();
            break;
          }
          case 18: {
            if (info_ == null) {
              info_ = new global::Cmd.QuestInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  删除任务,S->C
  /// </summary>
  public sealed partial class DelQuestCmd : pb::IMessage<DelQuestCmd> {
    private static readonly pb::MessageParser<DelQuestCmd> _parser = new pb::MessageParser<DelQuestCmd>(() => new DelQuestCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DelQuestCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelQuestCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelQuestCmd(DelQuestCmd other) : this() {
      questid_ = other.questid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelQuestCmd Clone() {
      return new DelQuestCmd(this);
    }

    /// <summary>Field number for the "questid" field.</summary>
    public const int QuestidFieldNumber = 3;
    private uint questid_;
    /// <summary>
    ///  任务id,表Quest.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Questid {
      get { return questid_; }
      set {
        questid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DelQuestCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DelQuestCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Questid != other.Questid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Questid != 0) hash ^= Questid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Questid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Questid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Questid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Questid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DelQuestCmd other) {
      if (other == null) {
        return;
      }
      if (other.Questid != 0) {
        Questid = other.Questid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Questid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  更新任务信息,S->C
  /// </summary>
  public sealed partial class UpdateQuestCmd : pb::IMessage<UpdateQuestCmd> {
    private static readonly pb::MessageParser<UpdateQuestCmd> _parser = new pb::MessageParser<UpdateQuestCmd>(() => new UpdateQuestCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateQuestCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateQuestCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateQuestCmd(UpdateQuestCmd other) : this() {
      Info = other.info_ != null ? other.Info.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateQuestCmd Clone() {
      return new UpdateQuestCmd(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 3;
    private global::Cmd.QuestInfo info_;
    /// <summary>
    ///  任务信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.QuestInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateQuestCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateQuestCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateQuestCmd other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          info_ = new global::Cmd.QuestInfo();
        }
        Info.MergeFrom(other.Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            if (info_ == null) {
              info_ = new global::Cmd.QuestInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class QuestNodeInfo : pb::IMessage<QuestNodeInfo> {
    private static readonly pb::MessageParser<QuestNodeInfo> _parser = new pb::MessageParser<QuestNodeInfo>(() => new QuestNodeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuestNodeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestNodeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestNodeInfo(QuestNodeInfo other) : this() {
      nodeid_ = other.nodeid_;
      childnode_ = other.childnode_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestNodeInfo Clone() {
      return new QuestNodeInfo(this);
    }

    /// <summary>Field number for the "nodeid" field.</summary>
    public const int NodeidFieldNumber = 1;
    private string nodeid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nodeid {
      get { return nodeid_; }
      set {
        nodeid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "childnode" field.</summary>
    public const int ChildnodeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cmd.QuestNodeInfo> _repeated_childnode_codec
        = pb::FieldCodec.ForMessage(18, global::Cmd.QuestNodeInfo.Parser);
    private readonly pbc::RepeatedField<global::Cmd.QuestNodeInfo> childnode_ = new pbc::RepeatedField<global::Cmd.QuestNodeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.QuestNodeInfo> Childnode {
      get { return childnode_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuestNodeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuestNodeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nodeid != other.Nodeid) return false;
      if(!childnode_.Equals(other.childnode_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nodeid.Length != 0) hash ^= Nodeid.GetHashCode();
      hash ^= childnode_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nodeid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Nodeid);
      }
      childnode_.WriteTo(output, _repeated_childnode_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nodeid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nodeid);
      }
      size += childnode_.CalculateSize(_repeated_childnode_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuestNodeInfo other) {
      if (other == null) {
        return;
      }
      if (other.Nodeid.Length != 0) {
        Nodeid = other.Nodeid;
      }
      childnode_.Add(other.childnode_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Nodeid = input.ReadString();
            break;
          }
          case 18: {
            childnode_.AddEntriesFrom(input, _repeated_childnode_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class QuestProgress : pb::IMessage<QuestProgress> {
    private static readonly pb::MessageParser<QuestProgress> _parser = new pb::MessageParser<QuestProgress>(() => new QuestProgress());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuestProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestProgress(QuestProgress other) : this() {
      questid_ = other.questid_;
      nodes_ = other.nodes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestProgress Clone() {
      return new QuestProgress(this);
    }

    /// <summary>Field number for the "questid" field.</summary>
    public const int QuestidFieldNumber = 1;
    private uint questid_;
    /// <summary>
    ///  任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Questid {
      get { return questid_; }
      set {
        questid_ = value;
      }
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cmd.QuestNodeInfo> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(18, global::Cmd.QuestNodeInfo.Parser);
    private readonly pbc::RepeatedField<global::Cmd.QuestNodeInfo> nodes_ = new pbc::RepeatedField<global::Cmd.QuestNodeInfo>();
    /// <summary>
    ///  当前正在执行的节点id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.QuestNodeInfo> Nodes {
      get { return nodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuestProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuestProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Questid != other.Questid) return false;
      if(!nodes_.Equals(other.nodes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Questid != 0) hash ^= Questid.GetHashCode();
      hash ^= nodes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Questid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Questid);
      }
      nodes_.WriteTo(output, _repeated_nodes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Questid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Questid);
      }
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuestProgress other) {
      if (other == null) {
        return;
      }
      if (other.Questid != 0) {
        Questid = other.Questid;
      }
      nodes_.Add(other.nodes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Questid = input.ReadUInt32();
            break;
          }
          case 18: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  同步任务进度,S->C
  /// </summary>
  public sealed partial class SyncQuestProgressCmd : pb::IMessage<SyncQuestProgressCmd> {
    private static readonly pb::MessageParser<SyncQuestProgressCmd> _parser = new pb::MessageParser<SyncQuestProgressCmd>(() => new SyncQuestProgressCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncQuestProgressCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncQuestProgressCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncQuestProgressCmd(SyncQuestProgressCmd other) : this() {
      synctype_ = other.synctype_;
      quests_ = other.quests_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncQuestProgressCmd Clone() {
      return new SyncQuestProgressCmd(this);
    }

    /// <summary>Field number for the "synctype" field.</summary>
    public const int SynctypeFieldNumber = 1;
    private global::Cmd.SyncDataType synctype_ = 0;
    /// <summary>
    ///  同步类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.SyncDataType Synctype {
      get { return synctype_; }
      set {
        synctype_ = value;
      }
    }

    /// <summary>Field number for the "quests" field.</summary>
    public const int QuestsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cmd.QuestProgress> _repeated_quests_codec
        = pb::FieldCodec.ForMessage(18, global::Cmd.QuestProgress.Parser);
    private readonly pbc::RepeatedField<global::Cmd.QuestProgress> quests_ = new pbc::RepeatedField<global::Cmd.QuestProgress>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.QuestProgress> Quests {
      get { return quests_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncQuestProgressCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncQuestProgressCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Synctype != other.Synctype) return false;
      if(!quests_.Equals(other.quests_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Synctype != 0) hash ^= Synctype.GetHashCode();
      hash ^= quests_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Synctype != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Synctype);
      }
      quests_.WriteTo(output, _repeated_quests_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Synctype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Synctype);
      }
      size += quests_.CalculateSize(_repeated_quests_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncQuestProgressCmd other) {
      if (other == null) {
        return;
      }
      if (other.Synctype != 0) {
        Synctype = other.Synctype;
      }
      quests_.Add(other.quests_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            synctype_ = (global::Cmd.SyncDataType) input.ReadEnum();
            break;
          }
          case 18: {
            quests_.AddEntriesFrom(input, _repeated_quests_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  更新任务数据S->C
  /// </summary>
  public sealed partial class UpdateVarQuestCmd : pb::IMessage<UpdateVarQuestCmd> {
    private static readonly pb::MessageParser<UpdateVarQuestCmd> _parser = new pb::MessageParser<UpdateVarQuestCmd>(() => new UpdateVarQuestCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateVarQuestCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateVarQuestCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateVarQuestCmd(UpdateVarQuestCmd other) : this() {
      questid_ = other.questid_;
      var_ = other.var_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateVarQuestCmd Clone() {
      return new UpdateVarQuestCmd(this);
    }

    /// <summary>Field number for the "questid" field.</summary>
    public const int QuestidFieldNumber = 3;
    private uint questid_;
    /// <summary>
    ///  任务id,表Quest.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Questid {
      get { return questid_; }
      set {
        questid_ = value;
      }
    }

    /// <summary>Field number for the "var" field.</summary>
    public const int VarFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Cmd.QuestVar> _repeated_var_codec
        = pb::FieldCodec.ForMessage(34, global::Cmd.QuestVar.Parser);
    private readonly pbc::RepeatedField<global::Cmd.QuestVar> var_ = new pbc::RepeatedField<global::Cmd.QuestVar>();
    /// <summary>
    ///  任务变量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.QuestVar> Var {
      get { return var_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateVarQuestCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateVarQuestCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Questid != other.Questid) return false;
      if(!var_.Equals(other.var_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Questid != 0) hash ^= Questid.GetHashCode();
      hash ^= var_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Questid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Questid);
      }
      var_.WriteTo(output, _repeated_var_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Questid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Questid);
      }
      size += var_.CalculateSize(_repeated_var_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateVarQuestCmd other) {
      if (other == null) {
        return;
      }
      if (other.Questid != 0) {
        Questid = other.Questid;
      }
      var_.Add(other.var_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Questid = input.ReadUInt32();
            break;
          }
          case 34: {
            var_.AddEntriesFrom(input, _repeated_var_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  任务奖励预览,S->C
  /// </summary>
  public sealed partial class ShowRewardOnDialog : pb::IMessage<ShowRewardOnDialog> {
    private static readonly pb::MessageParser<ShowRewardOnDialog> _parser = new pb::MessageParser<ShowRewardOnDialog>(() => new ShowRewardOnDialog());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShowRewardOnDialog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowRewardOnDialog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowRewardOnDialog(ShowRewardOnDialog other) : this() {
      items_ = other.items_.Clone();
      words_ = other.words_.Clone();
      showatonce_ = other.showatonce_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowRewardOnDialog Clone() {
      return new ShowRewardOnDialog(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cmd.ItemInfo> _repeated_items_codec
        = pb::FieldCodec.ForMessage(26, global::Cmd.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Cmd.ItemInfo> items_ = new pbc::RepeatedField<global::Cmd.ItemInfo>();
    /// <summary>
    ///  奖励物品信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.ItemInfo> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "words" field.</summary>
    public const int WordsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_words_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> words_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///  奖励文本信息（解锁等）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Words {
      get { return words_; }
    }

    /// <summary>Field number for the "showatonce" field.</summary>
    public const int ShowatonceFieldNumber = 5;
    private bool showatonce_;
    /// <summary>
    ///  是否立即弹窗,unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Showatonce {
      get { return showatonce_; }
      set {
        showatonce_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShowRewardOnDialog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShowRewardOnDialog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      if(!words_.Equals(other.words_)) return false;
      if (Showatonce != other.Showatonce) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      hash ^= words_.GetHashCode();
      if (Showatonce != false) hash ^= Showatonce.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      words_.WriteTo(output, _repeated_words_codec);
      if (Showatonce != false) {
        output.WriteRawTag(40);
        output.WriteBool(Showatonce);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      size += words_.CalculateSize(_repeated_words_codec);
      if (Showatonce != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShowRewardOnDialog other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      words_.Add(other.words_);
      if (other.Showatonce != false) {
        Showatonce = other.Showatonce;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 34: {
            words_.AddEntriesFrom(input, _repeated_words_codec);
            break;
          }
          case 40: {
            Showatonce = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  任务组信息,S->C
  /// </summary>
  public sealed partial class GroupQuestInfo : pb::IMessage<GroupQuestInfo> {
    private static readonly pb::MessageParser<GroupQuestInfo> _parser = new pb::MessageParser<GroupQuestInfo>(() => new GroupQuestInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupQuestInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupQuestInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupQuestInfo(GroupQuestInfo other) : this() {
      finishedcount_ = other.finishedcount_;
      allcount_ = other.allcount_;
      name_ = other.name_;
      icon_ = other.icon_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupQuestInfo Clone() {
      return new GroupQuestInfo(this);
    }

    /// <summary>Field number for the "finishedcount" field.</summary>
    public const int FinishedcountFieldNumber = 3;
    private uint finishedcount_;
    /// <summary>
    ///  已完成数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Finishedcount {
      get { return finishedcount_; }
      set {
        finishedcount_ = value;
      }
    }

    /// <summary>Field number for the "allcount" field.</summary>
    public const int AllcountFieldNumber = 4;
    private uint allcount_;
    /// <summary>
    ///  任务组总数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Allcount {
      get { return allcount_; }
      set {
        allcount_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    /// <summary>
    ///  任务组名字,表QuestGroup.xlsx列GroupName
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 6;
    private string icon_ = "";
    /// <summary>
    ///  任务组图标,表QuestGroup.xlsx列QuestGroupICON
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupQuestInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupQuestInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Finishedcount != other.Finishedcount) return false;
      if (Allcount != other.Allcount) return false;
      if (Name != other.Name) return false;
      if (Icon != other.Icon) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Finishedcount != 0) hash ^= Finishedcount.GetHashCode();
      if (Allcount != 0) hash ^= Allcount.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Finishedcount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Finishedcount);
      }
      if (Allcount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Allcount);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Icon);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Finishedcount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Finishedcount);
      }
      if (Allcount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Allcount);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupQuestInfo other) {
      if (other == null) {
        return;
      }
      if (other.Finishedcount != 0) {
        Finishedcount = other.Finishedcount;
      }
      if (other.Allcount != 0) {
        Allcount = other.Allcount;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Finishedcount = input.ReadUInt32();
            break;
          }
          case 32: {
            Allcount = input.ReadUInt32();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 50: {
            Icon = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  接取与完成任务显示,S->C
  /// </summary>
  public sealed partial class ShowQuestCmd : pb::IMessage<ShowQuestCmd> {
    private static readonly pb::MessageParser<ShowQuestCmd> _parser = new pb::MessageParser<ShowQuestCmd>(() => new ShowQuestCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShowQuestCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowQuestCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowQuestCmd(ShowQuestCmd other) : this() {
      Groupquestinfo = other.groupquestinfo_ != null ? other.Groupquestinfo.Clone() : null;
      questid_ = other.questid_;
      add_ = other.add_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShowQuestCmd Clone() {
      return new ShowQuestCmd(this);
    }

    /// <summary>Field number for the "groupquestinfo" field.</summary>
    public const int GroupquestinfoFieldNumber = 1;
    private global::Cmd.GroupQuestInfo groupquestinfo_;
    /// <summary>
    ///  任务组信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.GroupQuestInfo Groupquestinfo {
      get { return groupquestinfo_; }
      set {
        groupquestinfo_ = value;
      }
    }

    /// <summary>Field number for the "questid" field.</summary>
    public const int QuestidFieldNumber = 2;
    private uint questid_;
    /// <summary>
    ///  任务id,表Quest.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Questid {
      get { return questid_; }
      set {
        questid_ = value;
      }
    }

    /// <summary>Field number for the "add" field.</summary>
    public const int AddFieldNumber = 3;
    private bool add_;
    /// <summary>
    ///  新增标志，falsle为完成任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Add {
      get { return add_; }
      set {
        add_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShowQuestCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShowQuestCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Groupquestinfo, other.Groupquestinfo)) return false;
      if (Questid != other.Questid) return false;
      if (Add != other.Add) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (groupquestinfo_ != null) hash ^= Groupquestinfo.GetHashCode();
      if (Questid != 0) hash ^= Questid.GetHashCode();
      if (Add != false) hash ^= Add.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (groupquestinfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Groupquestinfo);
      }
      if (Questid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Questid);
      }
      if (Add != false) {
        output.WriteRawTag(24);
        output.WriteBool(Add);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (groupquestinfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Groupquestinfo);
      }
      if (Questid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Questid);
      }
      if (Add != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShowQuestCmd other) {
      if (other == null) {
        return;
      }
      if (other.groupquestinfo_ != null) {
        if (groupquestinfo_ == null) {
          groupquestinfo_ = new global::Cmd.GroupQuestInfo();
        }
        Groupquestinfo.MergeFrom(other.Groupquestinfo);
      }
      if (other.Questid != 0) {
        Questid = other.Questid;
      }
      if (other.Add != false) {
        Add = other.Add;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (groupquestinfo_ == null) {
              groupquestinfo_ = new global::Cmd.GroupQuestInfo();
            }
            input.ReadMessage(groupquestinfo_);
            break;
          }
          case 16: {
            Questid = input.ReadUInt32();
            break;
          }
          case 24: {
            Add = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  获得任务奖励,C->S
  /// </summary>
  public sealed partial class GetRewardQuestCmd : pb::IMessage<GetRewardQuestCmd> {
    private static readonly pb::MessageParser<GetRewardQuestCmd> _parser = new pb::MessageParser<GetRewardQuestCmd>(() => new GetRewardQuestCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRewardQuestCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRewardQuestCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRewardQuestCmd(GetRewardQuestCmd other) : this() {
      questid_ = other.questid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRewardQuestCmd Clone() {
      return new GetRewardQuestCmd(this);
    }

    /// <summary>Field number for the "questid" field.</summary>
    public const int QuestidFieldNumber = 3;
    private uint questid_;
    /// <summary>
    ///  任务id,表Quest.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Questid {
      get { return questid_; }
      set {
        questid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRewardQuestCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRewardQuestCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Questid != other.Questid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Questid != 0) hash ^= Questid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Questid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Questid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Questid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Questid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRewardQuestCmd other) {
      if (other == null) {
        return;
      }
      if (other.Questid != 0) {
        Questid = other.Questid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            Questid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  任务显示列表,S->C
  /// </summary>
  public sealed partial class QuestListDialogCmd : pb::IMessage<QuestListDialogCmd> {
    private static readonly pb::MessageParser<QuestListDialogCmd> _parser = new pb::MessageParser<QuestListDialogCmd>(() => new QuestListDialogCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuestListDialogCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestListDialogCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestListDialogCmd(QuestListDialogCmd other) : this() {
      quests_ = other.quests_.Clone();
      npcname_ = other.npcname_;
      text_ = other.text_;
      events_ = other.events_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestListDialogCmd Clone() {
      return new QuestListDialogCmd(this);
    }

    /// <summary>Field number for the "quests" field.</summary>
    public const int QuestsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cmd.QuestListDialogCmd.Types.Quest> _repeated_quests_codec
        = pb::FieldCodec.ForMessage(10, global::Cmd.QuestListDialogCmd.Types.Quest.Parser);
    private readonly pbc::RepeatedField<global::Cmd.QuestListDialogCmd.Types.Quest> quests_ = new pbc::RepeatedField<global::Cmd.QuestListDialogCmd.Types.Quest>();
    /// <summary>
    ///  任务信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.QuestListDialogCmd.Types.Quest> Quests {
      get { return quests_; }
    }

    /// <summary>Field number for the "npcname" field.</summary>
    public const int NpcnameFieldNumber = 2;
    private string npcname_ = "";
    /// <summary>
    ///  npc名字,表Npc.xlsx列NameZh
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Npcname {
      get { return npcname_; }
      set {
        npcname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 3;
    private string text_ = "";
    /// <summary>
    ///  替换默认对话
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Cmd.QuestListDialogCmd.Types.Event> _repeated_events_codec
        = pb::FieldCodec.ForMessage(34, global::Cmd.QuestListDialogCmd.Types.Event.Parser);
    private readonly pbc::RepeatedField<global::Cmd.QuestListDialogCmd.Types.Event> events_ = new pbc::RepeatedField<global::Cmd.QuestListDialogCmd.Types.Event>();
    /// <summary>
    ///  npc对话选项
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.QuestListDialogCmd.Types.Event> Events {
      get { return events_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuestListDialogCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuestListDialogCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!quests_.Equals(other.quests_)) return false;
      if (Npcname != other.Npcname) return false;
      if (Text != other.Text) return false;
      if(!events_.Equals(other.events_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= quests_.GetHashCode();
      if (Npcname.Length != 0) hash ^= Npcname.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      hash ^= events_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      quests_.WriteTo(output, _repeated_quests_codec);
      if (Npcname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Npcname);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
      events_.WriteTo(output, _repeated_events_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += quests_.CalculateSize(_repeated_quests_codec);
      if (Npcname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Npcname);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      size += events_.CalculateSize(_repeated_events_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuestListDialogCmd other) {
      if (other == null) {
        return;
      }
      quests_.Add(other.quests_);
      if (other.Npcname.Length != 0) {
        Npcname = other.Npcname;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      events_.Add(other.events_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            quests_.AddEntriesFrom(input, _repeated_quests_codec);
            break;
          }
          case 18: {
            Npcname = input.ReadString();
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
          case 34: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the QuestListDialogCmd message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Quest : pb::IMessage<Quest> {
        private static readonly pb::MessageParser<Quest> _parser = new pb::MessageParser<Quest>(() => new Quest());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Quest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Cmd.QuestListDialogCmd.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Quest() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Quest(Quest other) : this() {
          id_ = other.id_;
          name_ = other.name_;
          flag_ = other.flag_;
          groupname_ = other.groupname_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Quest Clone() {
          return new Quest(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private uint id_;
        /// <summary>
        ///  任务id,表Quest.xlsx列ID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        /// <summary>
        ///  任务名字,表Quest.xlsx列QuestName
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "flag" field.</summary>
        public const int FlagFieldNumber = 3;
        private uint flag_;
        /// <summary>
        ///  QuestTitleFlag
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Flag {
          get { return flag_; }
          set {
            flag_ = value;
          }
        }

        /// <summary>Field number for the "groupname" field.</summary>
        public const int GroupnameFieldNumber = 4;
        private string groupname_ = "";
        /// <summary>
        ///  任务组名字,表QuestGroup.xlsx列GroupName
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Groupname {
          get { return groupname_; }
          set {
            groupname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Quest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Quest other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Name != other.Name) return false;
          if (Flag != other.Flag) return false;
          if (Groupname != other.Groupname) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Flag != 0) hash ^= Flag.GetHashCode();
          if (Groupname.Length != 0) hash ^= Groupname.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (Flag != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Flag);
          }
          if (Groupname.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Groupname);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Flag != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flag);
          }
          if (Groupname.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Groupname);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Quest other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Flag != 0) {
            Flag = other.Flag;
          }
          if (other.Groupname.Length != 0) {
            Groupname = other.Groupname;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 24: {
                Flag = input.ReadUInt32();
                break;
              }
              case 34: {
                Groupname = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Event : pb::IMessage<Event> {
        private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Event> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Cmd.QuestListDialogCmd.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Event() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Event(Event other) : this() {
          id_ = other.id_;
          name_ = other.name_;
          dlgtextkey_ = other.dlgtextkey_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Event Clone() {
          return new Event(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private uint id_;
        /// <summary>
        ///  npc交互选项ID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        /// <summary>
        ///  npc交互选项名称
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "dlgtextkey" field.</summary>
        public const int DlgtextkeyFieldNumber = 3;
        private ulong dlgtextkey_;
        /// <summary>
        ///  npc交互选项名称id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Dlgtextkey {
          get { return dlgtextkey_; }
          set {
            dlgtextkey_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Event);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Event other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Name != other.Name) return false;
          if (Dlgtextkey != other.Dlgtextkey) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Dlgtextkey != 0UL) hash ^= Dlgtextkey.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (Dlgtextkey != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Dlgtextkey);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Dlgtextkey != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Dlgtextkey);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Event other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Dlgtextkey != 0UL) {
            Dlgtextkey = other.Dlgtextkey;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 24: {
                Dlgtextkey = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///  选择任务,C->S
  /// </summary>
  public sealed partial class RetQuestListDialogCmd : pb::IMessage<RetQuestListDialogCmd> {
    private static readonly pb::MessageParser<RetQuestListDialogCmd> _parser = new pb::MessageParser<RetQuestListDialogCmd>(() => new RetQuestListDialogCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RetQuestListDialogCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetQuestListDialogCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetQuestListDialogCmd(RetQuestListDialogCmd other) : this() {
      questid_ = other.questid_;
      eventid_ = other.eventid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetQuestListDialogCmd Clone() {
      return new RetQuestListDialogCmd(this);
    }

    /// <summary>Field number for the "questid" field.</summary>
    public const int QuestidFieldNumber = 1;
    private uint questid_;
    /// <summary>
    ///  任务id,表Quest.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Questid {
      get { return questid_; }
      set {
        questid_ = value;
      }
    }

    /// <summary>Field number for the "eventid" field.</summary>
    public const int EventidFieldNumber = 2;
    private uint eventid_;
    /// <summary>
    ///  npc对话选项ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Eventid {
      get { return eventid_; }
      set {
        eventid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RetQuestListDialogCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RetQuestListDialogCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Questid != other.Questid) return false;
      if (Eventid != other.Eventid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Questid != 0) hash ^= Questid.GetHashCode();
      if (Eventid != 0) hash ^= Eventid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Questid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Questid);
      }
      if (Eventid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Eventid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Questid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Questid);
      }
      if (Eventid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Eventid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RetQuestListDialogCmd other) {
      if (other == null) {
        return;
      }
      if (other.Questid != 0) {
        Questid = other.Questid;
      }
      if (other.Eventid != 0) {
        Eventid = other.Eventid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Questid = input.ReadUInt32();
            break;
          }
          case 16: {
            Eventid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QuestPositionTrace : pb::IMessage<QuestPositionTrace> {
    private static readonly pb::MessageParser<QuestPositionTrace> _parser = new pb::MessageParser<QuestPositionTrace>(() => new QuestPositionTrace());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuestPositionTrace> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestPositionTrace() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestPositionTrace(QuestPositionTrace other) : this() {
      questid_ = other.questid_;
      npcid_ = other.npcid_;
      npcgroupid_ = other.npcgroupid_;
      Location = other.location_ != null ? other.Location.Clone() : null;
      mapid_ = other.mapid_;
      flag_ = other.flag_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestPositionTrace Clone() {
      return new QuestPositionTrace(this);
    }

    /// <summary>Field number for the "questid" field.</summary>
    public const int QuestidFieldNumber = 1;
    private uint questid_;
    /// <summary>
    /// 任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Questid {
      get { return questid_; }
      set {
        questid_ = value;
      }
    }

    /// <summary>Field number for the "npcid" field.</summary>
    public const int NpcidFieldNumber = 2;
    private uint npcid_;
    /// <summary>
    /// 跟npc相关的任务
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Npcid {
      get { return npcid_; }
      set {
        npcid_ = value;
      }
    }

    /// <summary>Field number for the "npcgroupid" field.</summary>
    public const int NpcgroupidFieldNumber = 3;
    private uint npcgroupid_;
    /// <summary>
    /// npc组id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Npcgroupid {
      get { return npcgroupid_; }
      set {
        npcgroupid_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 4;
    private global::Cmd.ScenePos location_;
    /// <summary>
    /// 任务目标点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.ScenePos Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "mapid" field.</summary>
    public const int MapidFieldNumber = 5;
    private uint mapid_;
    /// <summary>
    /// 任务所在地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mapid {
      get { return mapid_; }
      set {
        mapid_ = value;
      }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 6;
    private global::Cmd.EQuestFlag flag_ = 0;
    /// <summary>
    /// 任务图标类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.EQuestFlag Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuestPositionTrace);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuestPositionTrace other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Questid != other.Questid) return false;
      if (Npcid != other.Npcid) return false;
      if (Npcgroupid != other.Npcgroupid) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if (Mapid != other.Mapid) return false;
      if (Flag != other.Flag) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Questid != 0) hash ^= Questid.GetHashCode();
      if (Npcid != 0) hash ^= Npcid.GetHashCode();
      if (Npcgroupid != 0) hash ^= Npcgroupid.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      if (Mapid != 0) hash ^= Mapid.GetHashCode();
      if (Flag != 0) hash ^= Flag.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Questid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Questid);
      }
      if (Npcid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Npcid);
      }
      if (Npcgroupid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Npcgroupid);
      }
      if (location_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Location);
      }
      if (Mapid != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Mapid);
      }
      if (Flag != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Flag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Questid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Questid);
      }
      if (Npcid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Npcid);
      }
      if (Npcgroupid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Npcgroupid);
      }
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (Mapid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mapid);
      }
      if (Flag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Flag);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuestPositionTrace other) {
      if (other == null) {
        return;
      }
      if (other.Questid != 0) {
        Questid = other.Questid;
      }
      if (other.Npcid != 0) {
        Npcid = other.Npcid;
      }
      if (other.Npcgroupid != 0) {
        Npcgroupid = other.Npcgroupid;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          location_ = new global::Cmd.ScenePos();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.Mapid != 0) {
        Mapid = other.Mapid;
      }
      if (other.Flag != 0) {
        Flag = other.Flag;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Questid = input.ReadUInt32();
            break;
          }
          case 16: {
            Npcid = input.ReadUInt32();
            break;
          }
          case 24: {
            Npcgroupid = input.ReadUInt32();
            break;
          }
          case 34: {
            if (location_ == null) {
              location_ = new global::Cmd.ScenePos();
            }
            input.ReadMessage(location_);
            break;
          }
          case 40: {
            Mapid = input.ReadUInt32();
            break;
          }
          case 48: {
            flag_ = (global::Cmd.EQuestFlag) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QuestPositionTraceListCmd : pb::IMessage<QuestPositionTraceListCmd> {
    private static readonly pb::MessageParser<QuestPositionTraceListCmd> _parser = new pb::MessageParser<QuestPositionTraceListCmd>(() => new QuestPositionTraceListCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuestPositionTraceListCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestPositionTraceListCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestPositionTraceListCmd(QuestPositionTraceListCmd other) : this() {
      questtraceinfo_ = other.questtraceinfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestPositionTraceListCmd Clone() {
      return new QuestPositionTraceListCmd(this);
    }

    /// <summary>Field number for the "questtraceinfo" field.</summary>
    public const int QuesttraceinfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cmd.QuestPositionTrace> _repeated_questtraceinfo_codec
        = pb::FieldCodec.ForMessage(10, global::Cmd.QuestPositionTrace.Parser);
    private readonly pbc::RepeatedField<global::Cmd.QuestPositionTrace> questtraceinfo_ = new pbc::RepeatedField<global::Cmd.QuestPositionTrace>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.QuestPositionTrace> Questtraceinfo {
      get { return questtraceinfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuestPositionTraceListCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuestPositionTraceListCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!questtraceinfo_.Equals(other.questtraceinfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= questtraceinfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      questtraceinfo_.WriteTo(output, _repeated_questtraceinfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += questtraceinfo_.CalculateSize(_repeated_questtraceinfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuestPositionTraceListCmd other) {
      if (other == null) {
        return;
      }
      questtraceinfo_.Add(other.questtraceinfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            questtraceinfo_.AddEntriesFrom(input, _repeated_questtraceinfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 设置任务滤镜状态 S->C
  /// </summary>
  public sealed partial class SetQuestFilterCmd : pb::IMessage<SetQuestFilterCmd> {
    private static readonly pb::MessageParser<SetQuestFilterCmd> _parser = new pb::MessageParser<SetQuestFilterCmd>(() => new SetQuestFilterCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetQuestFilterCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetQuestFilterCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetQuestFilterCmd(SetQuestFilterCmd other) : this() {
      openfilter_ = other.openfilter_;
      filtername_ = other.filtername_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetQuestFilterCmd Clone() {
      return new SetQuestFilterCmd(this);
    }

    /// <summary>Field number for the "openfilter" field.</summary>
    public const int OpenfilterFieldNumber = 1;
    private bool openfilter_;
    /// <summary>
    ///  是否开启滤镜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Openfilter {
      get { return openfilter_; }
      set {
        openfilter_ = value;
      }
    }

    /// <summary>Field number for the "filtername" field.</summary>
    public const int FilternameFieldNumber = 2;
    private string filtername_ = "";
    /// <summary>
    ///  滤镜名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filtername {
      get { return filtername_; }
      set {
        filtername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetQuestFilterCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetQuestFilterCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Openfilter != other.Openfilter) return false;
      if (Filtername != other.Filtername) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Openfilter != false) hash ^= Openfilter.GetHashCode();
      if (Filtername.Length != 0) hash ^= Filtername.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Openfilter != false) {
        output.WriteRawTag(8);
        output.WriteBool(Openfilter);
      }
      if (Filtername.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Filtername);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Openfilter != false) {
        size += 1 + 1;
      }
      if (Filtername.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filtername);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetQuestFilterCmd other) {
      if (other == null) {
        return;
      }
      if (other.Openfilter != false) {
        Openfilter = other.Openfilter;
      }
      if (other.Filtername.Length != 0) {
        Filtername = other.Filtername;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Openfilter = input.ReadBool();
            break;
          }
          case 18: {
            Filtername = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  添加关卡,S->C
  /// </summary>
  public sealed partial class AddStageCmd : pb::IMessage<AddStageCmd> {
    private static readonly pb::MessageParser<AddStageCmd> _parser = new pb::MessageParser<AddStageCmd>(() => new AddStageCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddStageCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddStageCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddStageCmd(AddStageCmd other) : this() {
      Info = other.info_ != null ? other.Info.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddStageCmd Clone() {
      return new AddStageCmd(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Cmd.QuestInfo info_;
    /// <summary>
    ///  关卡信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.QuestInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddStageCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddStageCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddStageCmd other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          info_ = new global::Cmd.QuestInfo();
        }
        Info.MergeFrom(other.Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Cmd.QuestInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  删除关卡,S->C
  /// </summary>
  public sealed partial class DelStageCmd : pb::IMessage<DelStageCmd> {
    private static readonly pb::MessageParser<DelStageCmd> _parser = new pb::MessageParser<DelStageCmd>(() => new DelStageCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DelStageCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelStageCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelStageCmd(DelStageCmd other) : this() {
      questid_ = other.questid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelStageCmd Clone() {
      return new DelStageCmd(this);
    }

    /// <summary>Field number for the "questid" field.</summary>
    public const int QuestidFieldNumber = 1;
    private uint questid_;
    /// <summary>
    ///  关卡id,表Quest.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Questid {
      get { return questid_; }
      set {
        questid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DelStageCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DelStageCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Questid != other.Questid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Questid != 0) hash ^= Questid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Questid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Questid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Questid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Questid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DelStageCmd other) {
      if (other == null) {
        return;
      }
      if (other.Questid != 0) {
        Questid = other.Questid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Questid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  更新关卡信息,S->C
  /// </summary>
  public sealed partial class UpdateStageCmd : pb::IMessage<UpdateStageCmd> {
    private static readonly pb::MessageParser<UpdateStageCmd> _parser = new pb::MessageParser<UpdateStageCmd>(() => new UpdateStageCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateStageCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateStageCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateStageCmd(UpdateStageCmd other) : this() {
      Info = other.info_ != null ? other.Info.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateStageCmd Clone() {
      return new UpdateStageCmd(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Cmd.QuestInfo info_;
    /// <summary>
    ///  关卡信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cmd.QuestInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateStageCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateStageCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateStageCmd other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          info_ = new global::Cmd.QuestInfo();
        }
        Info.MergeFrom(other.Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::Cmd.QuestInfo();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  更新关卡数据S->C
  /// </summary>
  public sealed partial class UpdateVarStageCmd : pb::IMessage<UpdateVarStageCmd> {
    private static readonly pb::MessageParser<UpdateVarStageCmd> _parser = new pb::MessageParser<UpdateVarStageCmd>(() => new UpdateVarStageCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateVarStageCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateVarStageCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateVarStageCmd(UpdateVarStageCmd other) : this() {
      questid_ = other.questid_;
      var_ = other.var_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateVarStageCmd Clone() {
      return new UpdateVarStageCmd(this);
    }

    /// <summary>Field number for the "questid" field.</summary>
    public const int QuestidFieldNumber = 1;
    private uint questid_;
    /// <summary>
    ///  关卡id,表Quest.xlsx列ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Questid {
      get { return questid_; }
      set {
        questid_ = value;
      }
    }

    /// <summary>Field number for the "var" field.</summary>
    public const int VarFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cmd.QuestVar> _repeated_var_codec
        = pb::FieldCodec.ForMessage(18, global::Cmd.QuestVar.Parser);
    private readonly pbc::RepeatedField<global::Cmd.QuestVar> var_ = new pbc::RepeatedField<global::Cmd.QuestVar>();
    /// <summary>
    ///  关卡变量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.QuestVar> Var {
      get { return var_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateVarStageCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateVarStageCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Questid != other.Questid) return false;
      if(!var_.Equals(other.var_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Questid != 0) hash ^= Questid.GetHashCode();
      hash ^= var_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Questid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Questid);
      }
      var_.WriteTo(output, _repeated_var_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Questid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Questid);
      }
      size += var_.CalculateSize(_repeated_var_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateVarStageCmd other) {
      if (other == null) {
        return;
      }
      if (other.Questid != 0) {
        Questid = other.Questid;
      }
      var_.Add(other.var_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Questid = input.ReadUInt32();
            break;
          }
          case 18: {
            var_.AddEntriesFrom(input, _repeated_var_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  关卡倒计时消息
  /// </summary>
  public sealed partial class StageCountDownCmd : pb::IMessage<StageCountDownCmd> {
    private static readonly pb::MessageParser<StageCountDownCmd> _parser = new pb::MessageParser<StageCountDownCmd>(() => new StageCountDownCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StageCountDownCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageCountDownCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageCountDownCmd(StageCountDownCmd other) : this() {
      id_ = other.id_;
      lefttime_ = other.lefttime_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StageCountDownCmd Clone() {
      return new StageCountDownCmd(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///  倒计时编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lefttime" field.</summary>
    public const int LefttimeFieldNumber = 2;
    private int lefttime_;
    /// <summary>
    ///  倒计时剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lefttime {
      get { return lefttime_; }
      set {
        lefttime_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private uint status_;
    /// <summary>
    ///  类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StageCountDownCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StageCountDownCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Lefttime != other.Lefttime) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Lefttime != 0) hash ^= Lefttime.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Lefttime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Lefttime);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Lefttime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lefttime);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StageCountDownCmd other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Lefttime != 0) {
        Lefttime = other.Lefttime;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Lefttime = input.ReadInt32();
            break;
          }
          case 24: {
            Status = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  关闭星星引导,S->C
  /// </summary>
  public sealed partial class CloseStarGuideCmd : pb::IMessage<CloseStarGuideCmd> {
    private static readonly pb::MessageParser<CloseStarGuideCmd> _parser = new pb::MessageParser<CloseStarGuideCmd>(() => new CloseStarGuideCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseStarGuideCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseStarGuideCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseStarGuideCmd(CloseStarGuideCmd other) : this() {
      questids_ = other.questids_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseStarGuideCmd Clone() {
      return new CloseStarGuideCmd(this);
    }

    /// <summary>Field number for the "questids" field.</summary>
    public const int QuestidsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_questids_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> questids_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  任务ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Questids {
      get { return questids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseStarGuideCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseStarGuideCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!questids_.Equals(other.questids_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= questids_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      questids_.WriteTo(output, _repeated_questids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += questids_.CalculateSize(_repeated_questids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseStarGuideCmd other) {
      if (other == null) {
        return;
      }
      questids_.Add(other.questids_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            questids_.AddEntriesFrom(input, _repeated_questids_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 发送节点数据,S->C
  /// </summary>
  public sealed partial class SendQuestNodesData : pb::IMessage<SendQuestNodesData> {
    private static readonly pb::MessageParser<SendQuestNodesData> _parser = new pb::MessageParser<SendQuestNodesData>(() => new SendQuestNodesData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendQuestNodesData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendQuestNodesData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendQuestNodesData(SendQuestNodesData other) : this() {
      strQuestid_ = other.strQuestid_;
      intQuestid_ = other.intQuestid_;
      nodedatas_ = other.nodedatas_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendQuestNodesData Clone() {
      return new SendQuestNodesData(this);
    }

    /// <summary>Field number for the "str_questid" field.</summary>
    public const int StrQuestidFieldNumber = 1;
    private string strQuestid_ = "";
    /// <summary>
    /// npc交互当前执行任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrQuestid {
      get { return strQuestid_; }
      set {
        strQuestid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "int_questid" field.</summary>
    public const int IntQuestidFieldNumber = 2;
    private uint intQuestid_;
    /// <summary>
    /// 当前执行任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IntQuestid {
      get { return intQuestid_; }
      set {
        intQuestid_ = value;
      }
    }

    /// <summary>Field number for the "nodedatas" field.</summary>
    public const int NodedatasFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_nodedatas_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> nodedatas_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 下发前端所有节点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Nodedatas {
      get { return nodedatas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendQuestNodesData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendQuestNodesData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StrQuestid != other.StrQuestid) return false;
      if (IntQuestid != other.IntQuestid) return false;
      if(!nodedatas_.Equals(other.nodedatas_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StrQuestid.Length != 0) hash ^= StrQuestid.GetHashCode();
      if (IntQuestid != 0) hash ^= IntQuestid.GetHashCode();
      hash ^= nodedatas_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StrQuestid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StrQuestid);
      }
      if (IntQuestid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(IntQuestid);
      }
      nodedatas_.WriteTo(output, _repeated_nodedatas_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StrQuestid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StrQuestid);
      }
      if (IntQuestid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IntQuestid);
      }
      size += nodedatas_.CalculateSize(_repeated_nodedatas_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendQuestNodesData other) {
      if (other == null) {
        return;
      }
      if (other.StrQuestid.Length != 0) {
        StrQuestid = other.StrQuestid;
      }
      if (other.IntQuestid != 0) {
        IntQuestid = other.IntQuestid;
      }
      nodedatas_.Add(other.nodedatas_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StrQuestid = input.ReadString();
            break;
          }
          case 16: {
            IntQuestid = input.ReadUInt32();
            break;
          }
          case 26: {
            nodedatas_.AddEntriesFrom(input, _repeated_nodedatas_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端返回节点执行结果,C->S
  /// </summary>
  public sealed partial class ClientNodeCallbackCmd : pb::IMessage<ClientNodeCallbackCmd> {
    private static readonly pb::MessageParser<ClientNodeCallbackCmd> _parser = new pb::MessageParser<ClientNodeCallbackCmd>(() => new ClientNodeCallbackCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientNodeCallbackCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientNodeCallbackCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientNodeCallbackCmd(ClientNodeCallbackCmd other) : this() {
      strQuestid_ = other.strQuestid_;
      intQuestid_ = other.intQuestid_;
      nodeid_ = other.nodeid_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientNodeCallbackCmd Clone() {
      return new ClientNodeCallbackCmd(this);
    }

    /// <summary>Field number for the "str_questid" field.</summary>
    public const int StrQuestidFieldNumber = 1;
    private string strQuestid_ = "";
    /// <summary>
    /// npc交互执行的任务的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrQuestid {
      get { return strQuestid_; }
      set {
        strQuestid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "int_questid" field.</summary>
    public const int IntQuestidFieldNumber = 2;
    private uint intQuestid_;
    /// <summary>
    ///  当前执行任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IntQuestid {
      get { return intQuestid_; }
      set {
        intQuestid_ = value;
      }
    }

    /// <summary>Field number for the "nodeid" field.</summary>
    public const int NodeidFieldNumber = 3;
    private string nodeid_ = "";
    /// <summary>
    /// 任务流执行到的节点id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nodeid {
      get { return nodeid_; }
      set {
        nodeid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 4;
    private uint result_;
    /// <summary>
    /// 执行的结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientNodeCallbackCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientNodeCallbackCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StrQuestid != other.StrQuestid) return false;
      if (IntQuestid != other.IntQuestid) return false;
      if (Nodeid != other.Nodeid) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StrQuestid.Length != 0) hash ^= StrQuestid.GetHashCode();
      if (IntQuestid != 0) hash ^= IntQuestid.GetHashCode();
      if (Nodeid.Length != 0) hash ^= Nodeid.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StrQuestid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StrQuestid);
      }
      if (IntQuestid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(IntQuestid);
      }
      if (Nodeid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Nodeid);
      }
      if (Result != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StrQuestid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StrQuestid);
      }
      if (IntQuestid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IntQuestid);
      }
      if (Nodeid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nodeid);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientNodeCallbackCmd other) {
      if (other == null) {
        return;
      }
      if (other.StrQuestid.Length != 0) {
        StrQuestid = other.StrQuestid;
      }
      if (other.IntQuestid != 0) {
        IntQuestid = other.IntQuestid;
      }
      if (other.Nodeid.Length != 0) {
        Nodeid = other.Nodeid;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StrQuestid = input.ReadString();
            break;
          }
          case 16: {
            IntQuestid = input.ReadUInt32();
            break;
          }
          case 26: {
            Nodeid = input.ReadString();
            break;
          }
          case 32: {
            Result = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端返回剧情节点选择结果,C->S
  /// </summary>
  public sealed partial class ClientStoryChooseCmd : pb::IMessage<ClientStoryChooseCmd> {
    private static readonly pb::MessageParser<ClientStoryChooseCmd> _parser = new pb::MessageParser<ClientStoryChooseCmd>(() => new ClientStoryChooseCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientStoryChooseCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientStoryChooseCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientStoryChooseCmd(ClientStoryChooseCmd other) : this() {
      questid_ = other.questid_;
      nodeid_ = other.nodeid_;
      selectednodeid_ = other.selectednodeid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientStoryChooseCmd Clone() {
      return new ClientStoryChooseCmd(this);
    }

    /// <summary>Field number for the "questid" field.</summary>
    public const int QuestidFieldNumber = 1;
    private uint questid_;
    /// <summary>
    /// 执行的任务的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Questid {
      get { return questid_; }
      set {
        questid_ = value;
      }
    }

    /// <summary>Field number for the "nodeid" field.</summary>
    public const int NodeidFieldNumber = 2;
    private string nodeid_ = "";
    /// <summary>
    /// 任务流执行到的节点id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nodeid {
      get { return nodeid_; }
      set {
        nodeid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "selectednodeid" field.</summary>
    public const int SelectednodeidFieldNumber = 3;
    private string selectednodeid_ = "";
    /// <summary>
    ///  选中的nodeid (如选中的好感度节点)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Selectednodeid {
      get { return selectednodeid_; }
      set {
        selectednodeid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientStoryChooseCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientStoryChooseCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Questid != other.Questid) return false;
      if (Nodeid != other.Nodeid) return false;
      if (Selectednodeid != other.Selectednodeid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Questid != 0) hash ^= Questid.GetHashCode();
      if (Nodeid.Length != 0) hash ^= Nodeid.GetHashCode();
      if (Selectednodeid.Length != 0) hash ^= Selectednodeid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Questid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Questid);
      }
      if (Nodeid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Nodeid);
      }
      if (Selectednodeid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Selectednodeid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Questid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Questid);
      }
      if (Nodeid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nodeid);
      }
      if (Selectednodeid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Selectednodeid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientStoryChooseCmd other) {
      if (other == null) {
        return;
      }
      if (other.Questid != 0) {
        Questid = other.Questid;
      }
      if (other.Nodeid.Length != 0) {
        Nodeid = other.Nodeid;
      }
      if (other.Selectednodeid.Length != 0) {
        Selectednodeid = other.Selectednodeid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Questid = input.ReadUInt32();
            break;
          }
          case 18: {
            Nodeid = input.ReadString();
            break;
          }
          case 26: {
            Selectednodeid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QuestFinishData : pb::IMessage<QuestFinishData> {
    private static readonly pb::MessageParser<QuestFinishData> _parser = new pb::MessageParser<QuestFinishData>(() => new QuestFinishData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuestFinishData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestFinishData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestFinishData(QuestFinishData other) : this() {
      questfinished_ = other.questfinished_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestFinishData Clone() {
      return new QuestFinishData(this);
    }

    /// <summary>Field number for the "questfinished" field.</summary>
    public const int QuestfinishedFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cmd.QuestFinishData.Types.QuestFinished> _repeated_questfinished_codec
        = pb::FieldCodec.ForMessage(10, global::Cmd.QuestFinishData.Types.QuestFinished.Parser);
    private readonly pbc::RepeatedField<global::Cmd.QuestFinishData.Types.QuestFinished> questfinished_ = new pbc::RepeatedField<global::Cmd.QuestFinishData.Types.QuestFinished>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.QuestFinishData.Types.QuestFinished> Questfinished {
      get { return questfinished_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuestFinishData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuestFinishData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!questfinished_.Equals(other.questfinished_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= questfinished_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      questfinished_.WriteTo(output, _repeated_questfinished_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += questfinished_.CalculateSize(_repeated_questfinished_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuestFinishData other) {
      if (other == null) {
        return;
      }
      questfinished_.Add(other.questfinished_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            questfinished_.AddEntriesFrom(input, _repeated_questfinished_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the QuestFinishData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class QuestFinished : pb::IMessage<QuestFinished> {
        private static readonly pb::MessageParser<QuestFinished> _parser = new pb::MessageParser<QuestFinished>(() => new QuestFinished());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<QuestFinished> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Cmd.QuestFinishData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public QuestFinished() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public QuestFinished(QuestFinished other) : this() {
          questid_ = other.questid_;
          finishtime_ = other.finishtime_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public QuestFinished Clone() {
          return new QuestFinished(this);
        }

        /// <summary>Field number for the "questid" field.</summary>
        public const int QuestidFieldNumber = 1;
        private uint questid_;
        /// <summary>
        /// 完成的任务的id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Questid {
          get { return questid_; }
          set {
            questid_ = value;
          }
        }

        /// <summary>Field number for the "finishtime" field.</summary>
        public const int FinishtimeFieldNumber = 2;
        private uint finishtime_;
        /// <summary>
        /// 任务完成的时间
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Finishtime {
          get { return finishtime_; }
          set {
            finishtime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as QuestFinished);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(QuestFinished other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Questid != other.Questid) return false;
          if (Finishtime != other.Finishtime) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Questid != 0) hash ^= Questid.GetHashCode();
          if (Finishtime != 0) hash ^= Finishtime.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Questid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Questid);
          }
          if (Finishtime != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Finishtime);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Questid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Questid);
          }
          if (Finishtime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Finishtime);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(QuestFinished other) {
          if (other == null) {
            return;
          }
          if (other.Questid != 0) {
            Questid = other.Questid;
          }
          if (other.Finishtime != 0) {
            Finishtime = other.Finishtime;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Questid = input.ReadUInt32();
                break;
              }
              case 16: {
                Finishtime = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class SetUserCanMoveCmd : pb::IMessage<SetUserCanMoveCmd> {
    private static readonly pb::MessageParser<SetUserCanMoveCmd> _parser = new pb::MessageParser<SetUserCanMoveCmd>(() => new SetUserCanMoveCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetUserCanMoveCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUserCanMoveCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUserCanMoveCmd(SetUserCanMoveCmd other) : this() {
      lasttime_ = other.lasttime_;
      canmove_ = other.canmove_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUserCanMoveCmd Clone() {
      return new SetUserCanMoveCmd(this);
    }

    /// <summary>Field number for the "lasttime" field.</summary>
    public const int LasttimeFieldNumber = 1;
    private uint lasttime_;
    /// <summary>
    /// 持续事件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Lasttime {
      get { return lasttime_; }
      set {
        lasttime_ = value;
      }
    }

    /// <summary>Field number for the "canmove" field.</summary>
    public const int CanmoveFieldNumber = 2;
    private bool canmove_;
    /// <summary>
    /// 设置是否可以移动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Canmove {
      get { return canmove_; }
      set {
        canmove_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetUserCanMoveCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetUserCanMoveCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Lasttime != other.Lasttime) return false;
      if (Canmove != other.Canmove) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Lasttime != 0) hash ^= Lasttime.GetHashCode();
      if (Canmove != false) hash ^= Canmove.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Lasttime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Lasttime);
      }
      if (Canmove != false) {
        output.WriteRawTag(16);
        output.WriteBool(Canmove);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Lasttime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Lasttime);
      }
      if (Canmove != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetUserCanMoveCmd other) {
      if (other == null) {
        return;
      }
      if (other.Lasttime != 0) {
        Lasttime = other.Lasttime;
      }
      if (other.Canmove != false) {
        Canmove = other.Canmove;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Lasttime = input.ReadUInt32();
            break;
          }
          case 16: {
            Canmove = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeWXKJAuraCmd : pb::IMessage<ChangeWXKJAuraCmd> {
    private static readonly pb::MessageParser<ChangeWXKJAuraCmd> _parser = new pb::MessageParser<ChangeWXKJAuraCmd>(() => new ChangeWXKJAuraCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeWXKJAuraCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeWXKJAuraCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeWXKJAuraCmd(ChangeWXKJAuraCmd other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeWXKJAuraCmd Clone() {
      return new ChangeWXKJAuraCmd(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeWXKJAuraCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeWXKJAuraCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeWXKJAuraCmd other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  更新任务数据 C->S
  /// </summary>
  public sealed partial class UpdateQuestVarCmd : pb::IMessage<UpdateQuestVarCmd> {
    private static readonly pb::MessageParser<UpdateQuestVarCmd> _parser = new pb::MessageParser<UpdateQuestVarCmd>(() => new UpdateQuestVarCmd());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateQuestVarCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cmd.SceneQuestReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateQuestVarCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateQuestVarCmd(UpdateQuestVarCmd other) : this() {
      nodeid_ = other.nodeid_;
      var_ = other.var_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateQuestVarCmd Clone() {
      return new UpdateQuestVarCmd(this);
    }

    /// <summary>Field number for the "nodeid" field.</summary>
    public const int NodeidFieldNumber = 1;
    private string nodeid_ = "";
    /// <summary>
    ///  .DT文件的节点唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nodeid {
      get { return nodeid_; }
      set {
        nodeid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "var" field.</summary>
    public const int VarFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cmd.QuestVar> _repeated_var_codec
        = pb::FieldCodec.ForMessage(18, global::Cmd.QuestVar.Parser);
    private readonly pbc::RepeatedField<global::Cmd.QuestVar> var_ = new pbc::RepeatedField<global::Cmd.QuestVar>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cmd.QuestVar> Var {
      get { return var_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateQuestVarCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateQuestVarCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nodeid != other.Nodeid) return false;
      if(!var_.Equals(other.var_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nodeid.Length != 0) hash ^= Nodeid.GetHashCode();
      hash ^= var_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nodeid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Nodeid);
      }
      var_.WriteTo(output, _repeated_var_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nodeid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nodeid);
      }
      size += var_.CalculateSize(_repeated_var_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateQuestVarCmd other) {
      if (other == null) {
        return;
      }
      if (other.Nodeid.Length != 0) {
        Nodeid = other.Nodeid;
      }
      var_.Add(other.var_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Nodeid = input.ReadString();
            break;
          }
          case 18: {
            var_.AddEntriesFrom(input, _repeated_var_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
